{
   ACT_MELEE_VM_RELOAD             	= 836 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON	= 1 (number)
   ACT_RUN_SCARED                  	= 112 (number)
   ACT_MP_PRIMARY_GRENADE1_IDLE    	= 696 (number)
   rawget                          	= function: builtin#12 (function)
   MODIFIER_EVENT_ON_ATTACK_FAIL   	= 177 (number)
   ACT_MP_RELOAD_SWIM              	= 542 (number)
   ACT_TURN_RIGHT                  	= 43 (number)
   ACT_SLAM_DETONATOR_STICKWALL_DRAW	= 260 (number)
   DOTA_HEROPICK_STATE_CM_SELECT8  	= 28 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARY    	= 570 (number)
   ACT_STARTDYING                  	= 429 (number)
   AE_IK_SET_CHAIN_BLEND_AMOUNT    	= 41 (number)
   ACT_DOTA_MK_TREE_SOAR           	= 1720 (number)
   MODIFIER_PROPERTY_TURN_RATE_OVERRIDE	= 157 (number)
   SendToConsole                   	= function: 0x0113cd00 (function)
   ACT_CSGO_FIRE_SECONDARY_OPT_1   	= 1000 (number)
   CDOTA_Unit_CustomGameAnnouncerAghanim	= table: 0x011bf440 (table)
   {
      metatable = table: 0x01188418
      {
         ForceKill                       	= function: 0x01193688 (function)
         InterruptMotionControllers      	= function: 0x0118e7b0 (function)
         GetBaseDayTimeVisionRange       	= function: 0x0118d228 (function)
         PassivesDisabled                	= function: 0x011926f0 (function)
         IsNull                          	= function: 0x01188440 (function)
         PlayVCD                         	= function: 0x0118c798 (function)
         ShouldIdleAcquire               	= function: 0x0118eba0 (function)
         GetCastRangeBonus               	= function: 0x0118c048 (function)
         RemoveModifierByName            	= function: 0x0118ee38 (function)
         DropItemAtPositionImmediate     	= function: 0x0118f398 (function)
         IsClone                         	= function: 0x01189950 (function)
         GetPaddedCollisionRadius        	= function: 0x01189058 (function)
         SetAbilityByIndex               	= function: 0x01191118 (function)
         GetManaRegen                    	= function: 0x0118b818 (function)
         MoveToTargetToAttack            	= function: 0x01189490 (function)
         GetCurrentVisionRange           	= function: 0x0118d4e0 (function)
         SetMana                         	= function: 0x01189cb8 (function)
         IsBossCreature                  	= function: 0x01189770 (function)
         IsCommandRestricted             	= function: 0x011923d8 (function)
         GetRangeToUnit                  	= function: 0x0118ea98 (function)
         GetDisplayAttackSpeed           	= function: 0x0118bf38 (function)
         SetNightTimeVisionRange         	= function: 0x0118d458 (function)
         IsAncient                       	= function: 0x011896f0 (function)
         SetStolenScepter                	= function: 0x01192d90 (function)
         IsPhantom                       	= function: 0x0118cf38 (function)
         GetAttackDamage                 	= function: 0x0118a3e8 (function)
         GetLastAttackTime               	= function: 0x0118def0 (function)
         Stop                            	= function: 0x01191630 (function)
         GetAbilityByIndex               	= function: 0x01191010 (function)
         SetOriginalModel                	= function: 0x0118f8f0 (function)
         RemoveItem                      	= function: 0x0118aa30 (function)
         GetNightTimeVisionRange         	= function: 0x0118d340 (function)
         InterruptChannel                	= function: 0x0118e728 (function)
         StopFacing                      	= function: 0x011886e8 (function)
         IsHexed                         	= function: 0x01191d50 (function)
         IsInvulnerable                  	= function: 0x01191e48 (function)
         GetAttackRangeBuffer            	= function: 0x0118a2d8 (function)
         IsMovementImpaired              	= function: 0x01192b78 (function)
         RemoveAbilityByHandle           	= function: 0x0118af08 (function)
         IsOther                         	= function: 0x0118ca60 (function)
         RemoveNoDraw                    	= function: 0x0118ff00 (function)
         GetManaPercent                  	= function: 0x01189e68 (function)
         GetDayTimeVisionRange           	= function: 0x0118d1a0 (function)
         MoveToNPC                       	= function: 0x01189410 (function)
         TakeItem                        	= function: 0x0118aab0 (function)
         RemoveModifierByNameAndCaster   	= function: 0x0118ef50 (function)
         GetProjectileSpeed              	= function: 0x01193370 (function)
         AddSpeechBubble                 	= function: 0x0118f978 (function)
         IsOpposingTeam                  	= function: 0x0118f428 (function)
         IsUntargetable                  	= function: 0x011928f0 (function)
         FindAllModifiersByName          	= function: 0x0118f180 (function)
         NoHealthBar                     	= function: 0x011925f0 (function)
         SetBaseMagicalResistanceValue   	= function: 0x0118b5e8 (function)
         HasScepter                      	= function: 0x01192d10 (function)
         HasItemInInventory              	= function: 0x01192c00 (function)
         SetHasInventory                 	= function: 0x01191978 (function)
         GetBaseHealthRegen              	= function: 0x0118b920 (function)
         Script_GetAttackRange           	= function: 0x0118a250 (function)
         GetPhysicalArmorValue           	= function: 0x0118b3b8 (function)
         IsHardDisarmed                  	= function: 0x011f85e0 (function)
         GetMana                         	= function: 0x01189d90 (function)
         SetInitialGoalPosition          	= function: 0x01188a70 (function)
         SpendMana                       	= function: 0x01189fe8 (function)
         IsChanneling                    	= function: 0x0118e650 (function)
         HasGroundMovementCapability     	= function: 0x01192fb0 (function)
         GetMagicalArmorValue            	= function: 0x0118b440 (function)
         SetUnitName                     	= function: 0x01193508 (function)
         IsAttackImmune                  	= function: 0x01191b78 (function)
         SetBaseHealthRegen              	= function: 0x0118b898 (function)
         MakeVisibleDueToAttack          	= function: 0x0118f648 (function)
         SetMaximumGoldBounty            	= function: 0x0118d778 (function)
         GetBaseDamageMax                	= function: 0x0118b120 (function)
         GetTotalPurchasedUpgradeGoldCost	= function: 0x0118d908 (function)
         RemoveAllModifiersOfName        	= function: 0x0118eec0 (function)
         GetMustReachEachGoalEntity      	= function: 0x011889e0 (function)
         GetMaximumGoldBounty            	= function: 0x0118d800 (function)
         IsStunned                       	= function: 0x01191cd0 (function)
         FindModifierByName              	= function: 0x0118efe0 (function)
         AddActivityModifier             	= function: 0x0118c3e0 (function)
         Script_IsDeniable               	= function: 0x01192af0 (function)
         IsInvisible                     	= function: 0x01191dc8 (function)
         IsBlind                         	= function: 0x011927f8 (function)
         IsDominated                     	= function: 0x01192778 (function)
         AddItem                         	= function: 0x0118acb0 (function)
         GetEvasion                      	= function: 0x0118b018 (function)
         StartGesture                    	= function: 0x0118c468 (function)
         GetHasteFactor                  	= function: 0x0118bde0 (function)
         GetCastPoint                    	= function: 0x0118be60 (function)
         SetCursorTargetingNothing       	= function: 0x01191730 (function)
         TimeUntilNextAttack             	= function: 0x0118de68 (function)
         IsLowAttackPriority             	= function: 0x01192568 (function)
         IsRooted                        	= function: 0x01191a78 (function)
         IsZombie                        	= function: 0x0118cfb8 (function)
         GetSecondsPerAttack             	= function: 0x0118bd58 (function)
         ClearActivityModifiers          	= function: 0x0118c358 (function)
         GetBaseHealthBarOffset          	= function: 0x011885d0 (function)
         IsUnselectable                  	= function: 0x011921c8 (function)
         WasKilledPassively              	= function: 0x0118fb00 (function)
         GetIncreasedAttackSpeed         	= function: 0x0118bc48 (function)
         RemoveHorizontalMotionController	= function: 0x0118e840 (function)
         IsNeutralUnitType               	= function: 0x011897f0 (function)
         GetBaseMagicalResistanceValue   	= function: 0x0118b678 (function)
         GetInitialGoalPosition          	= function: 0x01188af8 (function)
         GetBaseMoveSpeed                	= function: 0x0118bab0 (function)
         NoTeamSelect                    	= function: 0x01192670 (function)
         NoTeamMoveTo                    	= function: 0x011929f0 (function)
         SetAdditionalBattleMusicWeight  	= function: 0x0118e420 (function)
         FindItemInInventory             	= function: 0x01192c88 (function)
         SetMoveCapability               	= function: 0x01192f28 (function)
         IsBlockDisabled                 	= function: 0x011920c8 (function)
         StartGestureWithFade            	= function: 0x0118c4e8 (function)
         GetModifierStackCount           	= function: 0x0118f288 (function)
         IsTempestDouble                 	= function: 0x0118c258 (function)
         CanEntityBeSeenByMyTeam         	= function: 0x0118d118 (function)
         GetAbilityCount                 	= function: 0x01191098 (function)
         IsIllusion                      	= function: 0x0118c158 (function)
         GetPlayerOwnerID                	= function: 0x0118dbd0 (function)
         EjectItemFromStash              	= function: 0x0118a9a8 (function)
         SetRangedProjectileName         	= function: 0x011933f8 (function)
         RemoveAbilityFromIndexByName    	= function: 0x011911a0 (function)
         FDesc                           	= table: 0x011884a0 (table)
         {
            ForceKill                       	= void ForceKill(bool bReincarnate)
Kill this unit immediately. (userdata)
            InterruptMotionControllers      	= void InterruptMotionControllers(bool bFindClearSpace)
 (userdata)
            GetBaseDayTimeVisionRange       	= int GetBaseDayTimeVisionRange()
Returns the vision range before modifiers. (userdata)
            PassivesDisabled                	= bool PassivesDisabled()
 (userdata)
            PlayVCD                         	= void PlayVCD(string pVCD)
Play a VCD on the NPC. (userdata)
            ShouldIdleAcquire               	= bool ShouldIdleAcquire()
 (userdata)
            GetCastRangeBonus               	= float GetCastRangeBonus()
 (userdata)
            RemoveModifierByName            	= void RemoveModifierByName(string pszScriptName)
Removes a modifier. (userdata)
            DropItemAtPositionImmediate     	= void DropItemAtPositionImmediate(handle hItem, Vector vPosition)
Immediately drop a carried item at a given position. (userdata)
            IsClone                         	= bool IsClone()
Is this unit a clone? (Meepo) (userdata)
            GetPaddedCollisionRadius        	= float GetPaddedCollisionRadius()
Get the collision hull radius (including padding) of this NPC. (userdata)
            SetAbilityByIndex               	= void SetAbilityByIndex(handle hAbility, int iIndex)
Set the ability by index. (userdata)
            GetManaRegen                    	= float GetManaRegen()
 (userdata)
            MoveToTargetToAttack            	= void MoveToTargetToAttack(handle hTarget)
Move to a target to attack. (userdata)
            GetCurrentVisionRange           	= int GetCurrentVisionRange()
Gets the current vision range. (userdata)
            SetMana                         	= void SetMana(float flMana)
Set the mana on this unit. (userdata)
            IsBossCreature                  	= bool IsBossCreature()
Is this unit a Boss Creature? (used by custom games) (userdata)
            IsCommandRestricted             	= bool IsCommandRestricted()
 (userdata)
            GetRangeToUnit                  	= float GetRangeToUnit(handle hNPC)
 (userdata)
            GetDisplayAttackSpeed           	= float GetDisplayAttackSpeed()
Attack speed expressed as constant value (userdata)
            SetNightTimeVisionRange         	= void SetNightTimeVisionRange(int iRange)
Returns the vision range after modifiers. (userdata)
            IsAncient                       	= bool IsAncient()
Is this unit an Ancient? (userdata)
            SetStolenScepter                	= void SetStolenScepter(bool bStolenScepter)
 (userdata)
            IsPhantom                       	= bool IsPhantom()
Is this a phantom unit? (userdata)
            GetAttackDamage                 	= int GetAttackDamage()
Returns a random integer between the minimum and maximum base damage of the unit. (userdata)
            GetLastAttackTime               	= float GetLastAttackTime()
 (userdata)
            Stop                            	= void Stop()
Stop the current order. (userdata)
            GetAbilityByIndex               	= handle GetAbilityByIndex(int iIndex)
Retrieve an ability by index from the unit. (userdata)
            SetOriginalModel                	= void SetOriginalModel(string pszModelName)
Sets the original model of this entity, which it will tend to fall back to anytime its state changes. (userdata)
            RemoveItem                      	= void RemoveItem(handle hItem)
Removes the passed item from this unit's inventory and deletes it. (userdata)
            GetNightTimeVisionRange         	= int GetNightTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            InterruptChannel                	= void InterruptChannel()
 (userdata)
            StopFacing                      	= void StopFacing()
 (userdata)
            IsHexed                         	= bool IsHexed()
 (userdata)
            IsInvulnerable                  	= bool IsInvulnerable()
 (userdata)
            GetAttackRangeBuffer            	= float GetAttackRangeBuffer()
Gets the attack range buffer. (userdata)
            IsMovementImpaired              	= bool IsMovementImpaired()
 (userdata)
            RemoveAbilityByHandle           	= void RemoveAbilityByHandle(handle hAbility)
Remove the passed ability from this unit. (userdata)
            IsOther                         	= bool IsOther()
Is this unit a ward-type unit? (userdata)
            RemoveNoDraw                    	= void RemoveNoDraw()
Remove the no draw flag. (userdata)
            ReduceMana                      	= void ReduceMana(float flAmount)
Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent. (userdata)
            GetDayTimeVisionRange           	= int GetDayTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            MoveToNPC                       	= void MoveToNPC(handle hNPC)
Move to follow a unit. (userdata)
            TakeItem                        	= handle TakeItem(handle hItem)
Removed the passed item from this unit's inventory. (userdata)
            RemoveModifierByNameAndCaster   	= void RemoveModifierByNameAndCaster(string pszScriptName, handle hCaster)
Removes a modifier that was cast by the given caster. (userdata)
            GetProjectileSpeed              	= int GetProjectileSpeed()
 (userdata)
            AddSpeechBubble                 	= void AddSpeechBubble(int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY)
Add a speech bubble(1-4 live at a time) to this NPC. (userdata)
            IsOpposingTeam                  	= bool IsOpposingTeam(int nTeam)
 (userdata)
            IsUntargetable                  	= bool IsUntargetable()
 (userdata)
            FindAllModifiersByName          	= table FindAllModifiersByName(string pszScriptName)
Returns a table of all of the modifiers on the NPC with the passed name (modifierName) (userdata)
            NoHealthBar                     	= bool NoHealthBar()
 (userdata)
            SetBaseMagicalResistanceValue   	= void SetBaseMagicalResistanceValue(float flMagicalResistanceValue)
Sets base magical armor value. (userdata)
            HasScepter                      	= bool HasScepter()
 (userdata)
            HasItemInInventory              	= bool HasItemInInventory(string pItemName)
See whether this unit has an item by name. (userdata)
            SetHasInventory                 	= void SetHasInventory(bool bHasInventory)
Set if this unit has an inventory. (userdata)
            GetBaseHealthRegen              	= float GetBaseHealthRegen()
 (userdata)
            Script_GetAttackRange           	= float Script_GetAttackRange()
Gets this unit's attack range after all modifiers. (userdata)
            GetPhysicalArmorValue           	= float GetPhysicalArmorValue(bool bIgnoreBase)
Returns current physical armor value. (userdata)
            GetMana                         	= float GetMana()
Get the mana on this unit. (userdata)
            SetInitialGoalPosition          	= void SetInitialGoalPosition(Vector vPosition)
Set waypoint position for this NPC. (userdata)
            SpendMana                       	= void SpendMana(float flManaSpent, handle hAbility)
Spend mana from this unit, this can be used for spending mana from abilities or item usage. (userdata)
            IsChanneling                    	= bool IsChanneling()
Is this unit currently channeling a spell? (userdata)
            HasGroundMovementCapability     	= bool HasGroundMovementCapability()
 (userdata)
            GetMagicalArmorValue            	= float GetMagicalArmorValue()
Returns current magical armor value. (userdata)
            SetUnitName                     	= void SetUnitName(string pName)
 (userdata)
            IsAttackImmune                  	= bool IsAttackImmune()
 (userdata)
            SetBaseHealthRegen              	= void SetBaseHealthRegen(float flHealthRegen)
 (userdata)
            MakeVisibleDueToAttack          	= void MakeVisibleDueToAttack(int iTeam, float flRadius)
 (userdata)
            SetMaximumGoldBounty            	= void SetMaximumGoldBounty(int iGoldBountyMax)
Set the maximum gold bounty for this unit. (userdata)
            GetBaseDamageMax                	= int GetBaseDamageMax()
Get the maximum attack damage of this unit. (userdata)
            GetTotalPurchasedUpgradeGoldCost	= int GetTotalPurchasedUpgradeGoldCost()
Get how much gold has been spent on ability upgrades. (userdata)
            RemoveAllModifiersOfName        	= void RemoveAllModifiersOfName(string pszScriptName)
Removes all copies of a modifier. (userdata)
            GetMustReachEachGoalEntity      	= bool GetMustReachEachGoalEntity()
Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
            GetMaximumGoldBounty            	= int GetMaximumGoldBounty()
Get the maximum gold bounty for this unit. (userdata)
            IsStunned                       	= bool IsStunned()
 (userdata)
            FindModifierByName              	= handle FindModifierByName(string pszScriptName)
Return a handle to the modifier of the given name if found, else nil (string Name ) (userdata)
            AddActivityModifier             	= void AddActivityModifier(string szName)
Add an activity modifier that affects future StartGesture calls (userdata)
            Script_IsDeniable               	= bool Script_IsDeniable()
 (userdata)
            IsInvisible                     	= bool IsInvisible()
 (userdata)
            IsBlind                         	= bool IsBlind()
 (userdata)
            IsDominated                     	= bool IsDominated()
 (userdata)
            AddItem                         	= handle AddItem(handle hItem)
Add an item to this unit's inventory. (userdata)
            GetEvasion                      	= float GetEvasion()
 (userdata)
            StartGesture                    	= void StartGesture(int nActivity)
Add the given gesture activity. (userdata)
            GetHasteFactor                  	= float GetHasteFactor()
 (userdata)
            GetCastPoint                    	= float GetCastPoint(bool bAttack)
 (userdata)
            SetCursorTargetingNothing       	= void SetCursorTargetingNothing(bool bTargetingNothing)
 (userdata)
            TimeUntilNextAttack             	= float TimeUntilNextAttack()
 (userdata)
            IsLowAttackPriority             	= bool IsLowAttackPriority()
 (userdata)
            IsRooted                        	= bool IsRooted()
 (userdata)
            IsZombie                        	= bool IsZombie()
Is this entity an Undying Zombie? (userdata)
            GetSecondsPerAttack             	= float GetSecondsPerAttack()
 (userdata)
            ClearActivityModifiers          	= void ClearActivityModifiers()
Clear Activity modifiers (userdata)
            GetBaseHealthBarOffset          	= int GetBaseHealthBarOffset()
 (userdata)
            IsUnselectable                  	= bool IsUnselectable()
 (userdata)
            WasKilledPassively              	= bool WasKilledPassively()
 (userdata)
            GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed()
 (userdata)
            RemoveHorizontalMotionController	= void RemoveHorizontalMotionController(handle hBuff)
 (userdata)
            IsNeutralUnitType               	= bool IsNeutralUnitType()
Is this a neutral? (userdata)
            GetBaseMagicalResistanceValue   	= float GetBaseMagicalResistanceValue()
Returns base magical armor value. (userdata)
            GetInitialGoalPosition          	= Vector GetInitialGoalPosition()
Get waypoint position for this NPC. (userdata)
            IsSummoned                      	= bool IsSummoned()
Is this unit summoned? (userdata)
            NoTeamSelect                    	= bool NoTeamSelect()
 (userdata)
            NoTeamMoveTo                    	= bool NoTeamMoveTo()
 (userdata)
            SetAdditionalBattleMusicWeight  	= void SetAdditionalBattleMusicWeight(float flWeight)
Combat involving this creature will have this weight added to the music calcuations. (userdata)
            FindItemInInventory             	= handle FindItemInInventory(string pszItemName)
Get handle to first item in inventory, else nil. (userdata)
            GetBonusManaRegen               	= float GetBonusManaRegen()
This Mana regen is derived from constant bonuses like Basilius. (userdata)
            IsBlockDisabled                 	= bool IsBlockDisabled()
 (userdata)
            StartGestureWithFade            	= void StartGestureWithFade(int nActivity, float fFadeIn, float fFadeOut)
Add the given gesture activity faded according to to the parameters. (userdata)
            GetModifierStackCount           	= int GetModifierStackCount(string pszScriptName, handle hCaster)
Gets the stack count of a given modifier. (userdata)
            IsTempestDouble                 	= bool IsTempestDouble()
 (userdata)
            CanEntityBeSeenByMyTeam         	= bool CanEntityBeSeenByMyTeam(handle hEntity)
Check FoW to see if an entity is visible. (userdata)
            GetAbilityCount                 	= int GetAbilityCount()
 (userdata)
            IsIllusion                      	= bool IsIllusion()
 (userdata)
            GetPlayerOwnerID                	= int GetPlayerOwnerID()
Get the owner player ID for this unit. (userdata)
            EjectItemFromStash              	= void EjectItemFromStash(handle hItem)
Drops the selected item out of this unit's stash. (userdata)
            SetRangedProjectileName         	= void SetRangedProjectileName(string pProjectileName)
 (userdata)
            RemoveAbilityFromIndexByName    	= void RemoveAbilityFromIndexByName(string pszAbilityName)
 (userdata)
            IsMuted                         	= bool IsMuted()
 (userdata)
            IsAttackingEntity               	= bool IsAttackingEntity(handle hEntity)
 (userdata)
            SetHealthBarOffsetOverride      	= void SetHealthBarOffsetOverride(int nOffset)
 (userdata)
            FaceTowards                     	= void FaceTowards(Vector vTarget)
This unit will be set to face the target point. (userdata)
            SetDayTimeVisionRange           	= void SetDayTimeVisionRange(int iRange)
Set the base vision range. (userdata)
            RemoveGesture                   	= void RemoveGesture(int nActivity)
Remove the given gesture activity. (userdata)
            GetAverageTrueAttackDamage      	= int GetAverageTrueAttackDamage(handle hTarget)
Returns the average value of the minimum and maximum damage values. (userdata)
            DestroyAllSpeechBubbles         	= void DestroyAllSpeechBubbles()
 (userdata)
            FindAllModifiers                	= table FindAllModifiers()
Returns a table of all of the modifiers on the NPC. (userdata)
            SpeakConcept                    	= void SpeakConcept(handle hCriteriaTable)
Speak a response system concept with the TLK_DOTA_CUSTOM concept. (userdata)
            GetRangedProjectileName         	= string GetRangedProjectileName()
 (userdata)
            NotOnMinimap                    	= bool NotOnMinimap()
 (userdata)
            SetHullRadius                   	= void SetHullRadius(float flHullRadius)
Set the collision hull radius of this NPC. (userdata)
            GetInitialGoalEntity            	= handle GetInitialGoalEntity()
Returns the initial waypoint goal for this NPC. (userdata)
            GetUnitName                     	= string GetUnitName()
Get the name of this unit. (userdata)
            QueueTeamConcept                	= void QueueTeamConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. (userdata)
            IsConsideredHero                	= bool IsConsideredHero()
Is this unit a considered a hero for targeting purposes? (userdata)
            CanSellItems                    	= bool CanSellItems()
Query if this unit can sell items. (userdata)
            HasMovementCapability           	= bool HasMovementCapability()
 (userdata)
            GetLastDamageTime               	= float GetLastDamageTime()
Get the last time this NPC took damage (userdata)
            RemoveAbility                   	= void RemoveAbility(string pszAbilityName)
Remove an ability from this unit by name. (userdata)
            HealWithParams                  	= void HealWithParams(float flAmount, handle hInflictor, bool bLifesteal, bool bAmplify, handle hSource, bool bSpellLifesteal)
Heal this unit (with more parameters) (userdata)
            SetForceAttackTargetAlly        	= void SetForceAttackTargetAlly(handle hNPC)
 (userdata)
            SetModifierStackCount           	= void SetModifierStackCount(string pszScriptName, handle hCaster, int nStackCount)
Sets the stack count of a given modifier. (userdata)
            SetInitialGoalEntity            	= void SetInitialGoalEntity(handle hGoal)
Sets the initial waypoint goal for this NPC. (userdata)
            IsOutOfGame                     	= bool IsOutOfGame()
 (userdata)
            NotOnMinimapForEnemies          	= bool NotOnMinimapForEnemies()
 (userdata)
            DisassembleItem                 	= void DisassembleItem(handle hItem)
Disassemble the passed item in this unit's inventory. (userdata)
            GetSpellAmplification           	= float GetSpellAmplification(bool bBaseOnly)
 (userdata)
            AttackReady                     	= bool AttackReady()
 (userdata)
            SetCustomHealthLabel            	= void SetCustomHealthLabel(string pLabel, int r, int g, int b)
 (userdata)
            SetShouldDoFlyHeightVisual      	= void SetShouldDoFlyHeightVisual(bool bShouldVisuallyFly)
 (userdata)
            SetCursorCastTarget             	= void SetCursorCastTarget(handle hEntity)
 (userdata)
            GetCloneSource                  	= handle GetCloneSource()
Get clone source (Meepo Prime, if this is a Meepo) (userdata)
            IsFrozen                        	= bool IsFrozen()
 (userdata)
            IsFort                          	= bool IsFort()
Is this unit an Ancient? (userdata)
            DropItemAtPosition              	= void DropItemAtPosition(Vector vDest, handle hItem)
Drop an item at a given point. (userdata)
            SetBaseDamageMin                	= void SetBaseDamageMin(int nMin)
Sets the minimum base damage. (userdata)
            RemoveAllModifiers              	= void RemoveAllModifiers(int targets, bool bNow, bool bPermanent, bool bDeath)
(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath) (userdata)
            GetModifierCount                	= int GetModifierCount()
How many modifiers does this unit have? (userdata)
            SetCursorPosition               	= void SetCursorPosition(Vector vLocation)
 (userdata)
            GetHullRadius                   	= float GetHullRadius()
Get the collision hull radius of this NPC. (userdata)
            MakePhantomBlocker              	= void MakePhantomBlocker()
 (userdata)
            AddNoDraw                       	= void AddNoDraw()
Adds the no draw flag. (userdata)
            CalculateGenericBonuses         	= void CalculateGenericBonuses()
 (userdata)
            GetCreationTime                 	= float GetCreationTime()
 (userdata)
            AngerNearbyUnits                	= void AngerNearbyUnits()
 (userdata)
            SetControllableByPlayer         	= void SetControllableByPlayer(int nPlayerID, bool bSkipAdjustingPosition)
Set this unit controllable by the player with the passed ID. (userdata)
            RespawnUnit                     	= void RespawnUnit()
Respawns the target unit if it can be respawned. (userdata)
            FindModifierByNameAndCaster     	= handle FindModifierByNameAndCaster(string pszScriptName, handle hCaster)
Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster ) (userdata)
            SetBaseManaRegen                	= void SetBaseManaRegen(float flManaRegen)
 (userdata)
            UnitCanRespawn                  	= bool UnitCanRespawn()
 (userdata)
            GetCursorPosition               	= Vector GetCursorPosition()
 (userdata)
            GetBaseAttackTime               	= float GetBaseAttackTime()
 (userdata)
            NotifyWearablesOfModelChange    	= void NotifyWearablesOfModelChange(bool bOriginalModel)
 (userdata)
            GetModelRadius                  	= float GetModelRadius()
 (userdata)
            IsUnableToMiss                  	= bool IsUnableToMiss()
 (userdata)
            ManageModelChanges              	= void ManageModelChanges()
 (userdata)
            IsPhantomBlocker                	= bool IsPhantomBlocker()
 (userdata)
            HasAttackCapability             	= bool HasAttackCapability()
 (userdata)
            GetAttacksPerSecond             	= float GetAttacksPerSecond()
 (userdata)
            GetBaseDamageMin                	= int GetBaseDamageMin()
Get the minimum attack damage of this unit. (userdata)
            Purge                           	= void Purge(bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions)
(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions) (userdata)
            BoundingRadius2D                	= float BoundingRadius2D()
 (userdata)
            IsCreature                      	= bool IsCreature()
Is this a Creature type NPC? (userdata)
            IsCourier                       	= bool IsCourier()
Is this unit a courier? (userdata)
            PerformAttack                   	= void PerformAttack(handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss)
Performs an attack on a target. (userdata)
            GetDeathXP                      	= int GetDeathXP()
Get the XP bounty on this unit. (userdata)
            MakeVisibleToTeam               	= void MakeVisibleToTeam(int iTeam, float flDuration)
 (userdata)
            SetOrigin                       	= void SetOrigin(Vector vLocation)
Set the unit's origin. (userdata)
            GetOpposingTeamNumber           	= int GetOpposingTeamNumber()
 (userdata)
            NoUnitCollision                 	= bool NoUnitCollision()
 (userdata)
            CanBeSeenByAnyOpposingTeam      	= bool CanBeSeenByAnyOpposingTeam()
 (userdata)
            SetCanSellItems                 	= void SetCanSellItems(bool bCanSell)
Set whether or not this unit is allowed to sell items (bCanSellItems) (userdata)
            ForcePlayActivityOnce           	= void ForcePlayActivityOnce(int nActivity)
Play an activity once, and then go back to idle. (userdata)
            SetIdleAcquire                  	= void SetIdleAcquire(bool bIdleAcquire)
 (userdata)
            Heal                            	= void Heal(float flAmount, handle hInflictor)
Heal this unit. (userdata)
            HasModifier                     	= bool HasModifier(string pszScriptName)
Sees if this unit has a given modifier. (userdata)
            SetUnitCanRespawn               	= void SetUnitCanRespawn(bool bCanRespawn)
 (userdata)
            SetDeathXP                      	= void SetDeathXP(int iXPBounty)
Set the XP bounty on this unit. (userdata)
            GetMaxMana                      	= float GetMaxMana()
Get the maximum mana of this unit. (userdata)
            GetCollisionPadding             	= float GetCollisionPadding()
Returns the size of the collision padding around the hull. (userdata)
            IsBarracks                      	= bool IsBarracks()
Is this unit a Barracks? (userdata)
            SetForceAttackTarget            	= void SetForceAttackTarget(handle hNPC)
 (userdata)
            IsPositionInRange               	= bool IsPositionInRange(Vector vPosition, float flRange)
 (userdata)
            GetMoveSpeedModifier            	= float GetMoveSpeedModifier(float flBaseSpeed, bool bReturnUnslowed)
 (userdata)
            IsCurrentlyHorizontalMotionControlled	= bool IsCurrentlyHorizontalMotionControlled()
 (userdata)
            AddNewModifier                  	= handle AddNewModifier(handle hCaster, handle hAbility, string pszScriptName, handle hModifierTable)
Add a modifier to this unit. (userdata)
            SwapAbilities                   	= void SwapAbilities(string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2)
Swaps the slots of the two passed abilities and sets them enabled/disabled. (userdata)
            RemoveVerticalMotionController  	= void RemoveVerticalMotionController(handle hBuff)
 (userdata)
            IsPhased                        	= bool IsPhased()
 (userdata)
            Interrupt                       	= void Interrupt()
 (userdata)
            IsCurrentlyVerticalMotionControlled	= bool IsCurrentlyVerticalMotionControlled()
 (userdata)
            GetForceAttackTarget            	= handle GetForceAttackTarget()
 (userdata)
            IsShrine                        	= bool IsShrine()
Is this a shrine? (userdata)
            GetAdditionalBattleMusicWeight  	= float GetAdditionalBattleMusicWeight()
Combat involving this creature will have this weight added to the music calcuations. (userdata)
            AlertNearbyUnits                	= void AlertNearbyUnits(handle hAttacker, handle hAbility)
 (userdata)
            SetAggroTarget                  	= void SetAggroTarget(handle hAggroTarget)
Set this unit's aggro target to a specified unit. (userdata)
            UnHideAbilityToSlot             	= void UnHideAbilityToSlot(string pszAbilityName, string pszReplacedAbilityName)
Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot. (userdata)
            SellItem                        	= void SellItem(handle hItem)
Sells the passed item in this unit's inventory. (userdata)
            SetMinimumGoldBounty            	= void SetMinimumGoldBounty(int iGoldBountyMin)
Set the minimum gold bounty for this unit. (userdata)
            GetMainControllingPlayer        	= int GetMainControllingPlayer()
Returns the player ID of the controlling player. (userdata)
            SetAttacking                    	= void SetAttacking(handle hAttackTarget)
 (userdata)
            GetCooldownReduction            	= float GetCooldownReduction()
 (userdata)
            GetAttackAnimationPoint         	= float GetAttackAnimationPoint()
 (userdata)
            GetDamageMax                    	= int GetDamageMax()
Get the maximum attack damage of this unit. (userdata)
            AttackNoEarlierThan             	= void AttackNoEarlierThan(float flTime, float flTimeDisparityTolerance)
 (userdata)
            IsRangedAttacker                	= bool IsRangedAttacker()
Is this unit a ranged attacker? (userdata)
            GetUnitLabel                    	= string GetUnitLabel()
 (userdata)
            SetBaseMoveSpeed                	= void SetBaseMoveSpeed(int iMoveSpeed)
 (userdata)
            SetAcquisitionRange             	= void SetAcquisitionRange(int nRange)
 (userdata)
            FindAbilityByName               	= handle FindAbilityByName(string pAbilityName)
Retrieve an ability by name from the unit. (userdata)
            GetItemInSlot                   	= handle GetItemInSlot(int i)
Returns nth item in inventory slot (index is zero based). (userdata)
            IsControllableByAnyPlayer       	= bool IsControllableByAnyPlayer()
Is this unit controlled by any non-bot player? (userdata)
            PickupDroppedItem               	= void PickupDroppedItem(handle hItem)
Pick up a dropped item. (userdata)
            GetCurrentActiveAbility         	= handle GetCurrentActiveAbility()
Get the ability this unit is currently casting. (userdata)
            GetBaseNightTimeVisionRange     	= int GetBaseNightTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            GiveMana                        	= void GiveMana(float flMana)
Give mana to this unit, this can be used for mana gained by abilities or item usage. (userdata)
            IsSpeciallyDeniable             	= bool IsSpeciallyDeniable()
 (userdata)
            GetAttackCapability             	= int GetAttackCapability()
 (userdata)
            GetHealthPercent                	= int GetHealthPercent()
Get the current health percent of the unit. (userdata)
            PickupRune                      	= void PickupRune(handle hItem)
Pick up a rune. (userdata)
            GetManaPercent                  	= int GetManaPercent()
Get the percent of mana remaining. (userdata)
            IsRealHero                      	= bool IsRealHero()
Is this a real hero? (userdata)
            HasInventory                    	= bool HasInventory()
Does this unit have an inventory. (userdata)
            MoveToNPCToGiveItem             	= void MoveToNPCToGiveItem(handle hNPC, handle hItem)
Give an item to another unit. (userdata)
            IsNightmared                    	= bool IsNightmared()
 (userdata)
            ModifyHealth                    	= void ModifyHealth(int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags)
Sets the health to a specific value, with optional flags or inflictors. (userdata)
            IsCreep                         	= bool IsCreep()
Is this unit a creep? (userdata)
            GetCursorCastTarget             	= handle GetCursorCastTarget()
 (userdata)
            IsMagicImmune                   	= bool IsMagicImmune()
 (userdata)
            HasFlyMovementCapability        	= bool HasFlyMovementCapability()
 (userdata)
            GetStatusResistance             	= float GetStatusResistance()
 (userdata)
            GetMinimumGoldBounty            	= int GetMinimumGoldBounty()
Get the minimum gold bounty for this unit. (userdata)
            GetPlayerOwner                  	= handle GetPlayerOwner()
Returns the player that owns this unit. (userdata)
            GetNeutralSpawnerName           	= string GetNeutralSpawnerName()
Get the name of this camp's neutral spawner. (userdata)
            QueueTeamConceptNoSpectators    	= void QueueTeamConceptNoSpectators(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators. (userdata)
            SetBaseAttackTime               	= void SetBaseAttackTime(float flBaseAttackTime)
 (userdata)
            IsBoss                          	= bool IsBoss()
Is this unit a boss? (userdata)
            IsTower                         	= bool IsTower()
Is this a tower? (userdata)
            SetBaseDamageMax                	= void SetBaseDamageMax(int nMax)
Sets the maximum base damage. (userdata)
            SetRevealRadius                 	= void SetRevealRadius(float revealRadius)
sets the client side map reveal radius for this unit (userdata)
            GetAttackTarget                 	= handle GetAttackTarget()
 (userdata)
            CastAbilityOnTarget             	= void CastAbilityOnTarget(handle hTarget, handle hAbility, int iPlayerIndex)
Cast an ability on a target entity. (userdata)
            ChangeTeam                      	= void ChangeTeam(int iTeamNum)
 (userdata)
            Kill                            	= void Kill(handle hAbility, handle hAttacker)
Kills this NPC, with the params Ability and Attacker. (userdata)
            HasAnyActiveAbilities           	= bool HasAnyActiveAbilities()
 (userdata)
            Hold                            	= void Hold()
Hold position. (userdata)
            GetLevel                        	= int GetLevel()
Returns the level of this unit. (userdata)
            HasAbility                      	= bool HasAbility(string pszAbilityName)
See whether this unit has an ability by name. (userdata)
            IsHero                          	= bool IsHero()
Is this a hero or hero illusion? (userdata)
            GetModifierNameByIndex          	= string GetModifierNameByIndex(int nIndex)
Get a modifier name by index. (userdata)
            AddAbility                      	= handle AddAbility(string pszAbilityName)
Add an ability to this unit by name. (userdata)
            SetMustReachEachGoalEntity      	= void SetMustReachEachGoalEntity(bool must)
Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
            IsReincarnating                 	= bool IsReincarnating()
 (userdata)
            IsAttacking                     	= bool IsAttacking()
 (userdata)
            MoveToPosition                  	= void MoveToPosition(Vector vDest)
Issue a Move-To command. (userdata)
            ProvidesVision                  	= bool ProvidesVision()
 (userdata)
            MoveToPositionAggressive        	= void MoveToPositionAggressive(Vector vDest)
Issue an Attack-Move-To command. (userdata)
            GetAttackSpeed                  	= float GetAttackSpeed()
 (userdata)
            MakeIllusion                    	= void MakeIllusion()
 (userdata)
            GetBaseAttackRange              	= int GetBaseAttackRange()
 (userdata)
            SwapItems                       	= void SwapItems(int nSlot1, int nSlot2)
Swap the contents of two item slots (slot1, slot2) (userdata)
            GetHealthRegen                  	= float GetHealthRegen()
 (userdata)
            GetIdealSpeed                   	= float GetIdealSpeed()
Returns speed after all modifiers. (userdata)
            GetDamageMin                    	= int GetDamageMin()
Get the minimum attack damage of this unit. (userdata)
            SetPhysicalArmorBaseValue       	= void SetPhysicalArmorBaseValue(float flPhysicalArmorValue)
Sets base physical armor value. (userdata)
            PatrolToPosition                	= void PatrolToPosition(Vector vDest)
Issue a Patrol-To command. (userdata)
            IsInRangeOfShop                 	= bool IsInRangeOfShop(int nShopType, bool bPhysical)
Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear (userdata)
            GetBaseMoveSpeed                	= float GetBaseMoveSpeed()
 (userdata)
            IsCreepHero                     	= bool IsCreepHero()
Is this unit a creep hero? (userdata)
            IsEvadeDisabled                 	= bool IsEvadeDisabled()
 (userdata)
            GetNeverMoveToClearSpace        	= bool GetNeverMoveToClearSpace()
If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
            QueueConcept                    	= void QueueConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay. (userdata)
            HasFlyingVision                 	= bool HasFlyingVision()
 (userdata)
            GetGoldBounty                   	= int GetGoldBounty()
Get the gold bounty on this unit. (userdata)
            GetAggroTarget                  	= handle GetAggroTarget()
Returns this unit's aggro target. (userdata)
            FadeGesture                     	= void FadeGesture(int nActivity)
Fade and remove the given gesture activity. (userdata)
            SetMaxMana                      	= void SetMaxMana(float flMaxMana)
Set the maximum mana of this unit. (userdata)
            TriggerModifierDodge            	= bool TriggerModifierDodge()
 (userdata)
            TriggerSpellReflect             	= void TriggerSpellReflect(handle hAbility)
Trigger the Lotus Orb-like effect.(hAbility) (userdata)
            IsDisarmed                      	= bool IsDisarmed()
 (userdata)
            GetHealthDeficit                	= int GetHealthDeficit()
Returns integer amount of health missing from max. (userdata)
            SetAttackCapability             	= void SetAttackCapability(int iAttackCapabilities)
 (userdata)
            IsIdle                          	= bool IsIdle()
Is this creature currently idle? (userdata)
            IsAlive                         	= bool IsAlive()
Is this unit alive? (userdata)
            CastAbilityNoTarget             	= void CastAbilityNoTarget(handle hAbility, int iPlayerIndex)
Cast an ability with no target. (userdata)
            StartGestureWithPlaybackRate    	= void StartGestureWithPlaybackRate(int nActivity, float flRate)
Add the given gesture activity with a playback rate override. (userdata)
            CastAbilityOnPosition           	= void CastAbilityOnPosition(Vector vPosition, handle hAbility, int iPlayerIndex)
Cast an ability on a position. (userdata)
            CastAbilityImmediately          	= void CastAbilityImmediately(handle hAbility, int iPlayerIndex)
Cast an ability immediately. (userdata)
            AddItemByName                   	= handle AddItemByName(string pszItemName)
Add an item to this unit's inventory. (userdata)
            GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
 (userdata)
            SetNeverMoveToClearSpace        	= void SetNeverMoveToClearSpace(bool neverMoveToClearSpace)
If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
            IsSilenced                      	= bool IsSilenced()
 (userdata)
            GetBaseMaxHealth                	= float GetBaseMaxHealth()
Gets the base max health value. (userdata)
            TriggerSpellAbsorb              	= bool TriggerSpellAbsorb(handle hAbility)
 (userdata)
            GetAcquisitionRange             	= float GetAcquisitionRange()
Gets the range at which this unit will auto-acquire. (userdata)
            IsBuilding                      	= bool IsBuilding()
Is this unit a building? (userdata)
            SetBaseMaxHealth                	= void SetBaseMaxHealth(float flBaseMaxHealth)
Set a new base max health value. (userdata)
            IsMoving                        	= bool IsMoving()
Is this unit moving? (userdata)
            SetFollowRange                  	= void SetFollowRange(float flFollowRange)
 (userdata)
            IsOwnedByAnyPlayer              	= bool IsOwnedByAnyPlayer()
Is this unit owned by any non-bot player? (userdata)
            CastAbilityToggle               	= void CastAbilityToggle(handle hAbility, int iPlayerIndex)
Toggle an ability. (userdata)
            IsSpeciallyUndeniable           	= bool IsSpeciallyUndeniable()
 (userdata)
            GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
Returns base physical armor value. (userdata)
            GetLastIdleChangeTime           	= float GetLastIdleChangeTime()
Get the last game time that this unit switched to/from idle state. (userdata)
            StartGestureFadeWithSequenceSettings	= void StartGestureFadeWithSequenceSettings(int nActivity)
Add the given gesture activity faded according to its sequence settings. (userdata)
            SetMoveCapability               	= void SetMoveCapability(int iMoveCapabilities)
 (userdata)
            GetIdealSpeedNoSlows            	= float GetIdealSpeedNoSlows()
Returns speed after all modifiers, but excluding those that reduce speed. (userdata)
         }
         IsAttackingEntity               	= function: 0x0118e000 (function)
         SetHealthBarOffsetOverride      	= function: 0x011884c8 (function)
         FaceTowards                     	= function: 0x01188960 (function)
         SetDayTimeVisionRange           	= function: 0x0118d2b8 (function)
         RemoveGesture                   	= function: 0x0118c698 (function)
         GetAverageTrueAttackDamage      	= function: 0x0118a468 (function)
         DestroyAllSpeechBubbles         	= function: 0x0118f9f8 (function)
         FindAllModifiers                	= function: 0x0118f0f8 (function)
         IsBaseNPC                       	= function: 0x011f8620 (function)
         SpeakConcept                    	= function: 0x01188b40 (function)
         GetRangedProjectileName         	= function: 0x01193480 (function)
         NotOnMinimap                    	= function: 0x01192460 (function)
         GetHealthDeficit                	= function: 0x011891f0 (function)
         GetInitialGoalEntity            	= function: 0x01188eb8 (function)
         GetUnitName                     	= function: 0x01193588 (function)
         QueueTeamConcept                	= function: 0x011888f0 (function)
         IsConsideredHero                	= function: 0x0118c958 (function)
         CanSellItems                    	= function: 0x0118abb0 (function)
         HasMovementCapability           	= function: 0x011930d0 (function)
         GetLastDamageTime               	= function: 0x01189278 (function)
         RemoveAbility                   	= function: 0x0118ae08 (function)
         HealWithParams                  	= function: 0x0118a0c0 (function)
         SetForceAttackTargetAlly        	= function: 0x0118e5c0 (function)
         SetModifierStackCount           	= function: 0x0118f310 (function)
         SetInitialGoalEntity            	= function: 0x01188e30 (function)
         IsOutOfGame                     	= function: 0x01192870 (function)
         NotOnMinimapForEnemies          	= function: 0x011924e0 (function)
         DisassembleItem                 	= function: 0x0118a928 (function)
         GetSpellAmplification           	= function: 0x0118b098 (function)
         SetAttacking                    	= function: 0x0118e108 (function)
         SetCustomHealthLabel            	= function: 0x01190298 (function)
         GetLastIdleChangeTime           	= function: 0x01188788 (function)
         SetShouldDoFlyHeightVisual      	= function: 0x01190208 (function)
         SetCursorCastTarget             	= function: 0x01190180 (function)
         IsTower                         	= function: 0x0118cad8 (function)
         GetCloneSource                  	= function: 0x011898f8 (function)
         IsFrozen                        	= function: 0x01192970 (function)
         ModifyHealth                    	= function: 0x01189c38 (function)
         DropItemAtPosition              	= function: 0x0118a690 (function)
         RemoveAllModifiers              	= function: 0x0118fff8 (function)
         BoundingRadius2D                	= function: 0x0118f6d0 (function)
         GetModifierCount                	= function: 0x0118ed28 (function)
         SetCursorPosition               	= function: 0x011916a8 (function)
         GetHullRadius                   	= function: 0x01189a28 (function)
         AddNoDraw                       	= function: 0x0118fe80 (function)
         GetCreationTime                 	= function: 0x0118fe28 (function)
         CalculateGenericBonuses         	= function: 0x01188c18 (function)
         AngerNearbyUnits                	= function: 0x0118fda0 (function)
         RespawnUnit                     	= function: 0x0118fd20 (function)
         SetControllableByPlayer         	= function: 0x0118db48 (function)
         SetAttackCapability             	= function: 0x01192ea0 (function)
         UnitCanRespawn                  	= function: 0x0118fc18 (function)
         SetBaseManaRegen                	= function: 0x0118b708 (function)
         NotifyWearablesOfModelChange    	= function: 0x0118fb88 (function)
         GetCursorPosition               	= function: 0x01191848 (function)
         GetBaseAttackTime               	= function: 0x0118bbc0 (function)
         GetModelRadius                  	= function: 0x0118fa80 (function)
         ManageModelChanges              	= function: 0x0118f868 (function)
         IsUnableToMiss                  	= function: 0x01192248 (function)
         IsPhantomBlocker                	= function: 0x0118f7e0 (function)
         MakePhantomBlocker              	= function: 0x0118f758 (function)
         HasAttackCapability             	= function: 0x01193158 (function)
         GetAttacksPerSecond             	= function: 0x0118bcd0 (function)
         GetBaseDamageMin                	= function: 0x0118dcd8 (function)
         Purge                           	= function: 0x0118ff80 (function)
         MakeVisibleToTeam               	= function: 0x0118f5c0 (function)
         IsCreature                      	= function: 0x0118ce38 (function)
         IsCourier                       	= function: 0x0118cd40 (function)
         PerformAttack                   	= function: 0x0118a4f8 (function)
         GetDeathXP                      	= function: 0x0118d5e8 (function)
         GetOpposingTeamNumber           	= function: 0x0118f538 (function)
         SetOrigin                       	= function: 0x01191560 (function)
         CanBeSeenByAnyOpposingTeam      	= function: 0x0118f4a8 (function)
         NoUnitCollision                 	= function: 0x01191f48 (function)
         HasModifier                     	= function: 0x0118f208 (function)
         SetCanSellItems                 	= function: 0x0118ab30 (function)
         ForcePlayActivityOnce           	= function: 0x0118c810 (function)
         SetIdleAcquire                  	= function: 0x0118ec28 (function)
         Heal                            	= function: 0x0118a068 (function)
         FindModifierByNameAndCaster     	= function: 0x0118f068 (function)
         SetUnitCanRespawn               	= function: 0x0118fc98 (function)
         SetDeathXP                      	= function: 0x0118d568 (function)
         GetMaxMana                      	= function: 0x01189de8 (function)
         RemoveVerticalMotionController  	= function: 0x0118e8d8 (function)
         IsBarracks                      	= function: 0x0118cc48 (function)
         IsPositionInRange               	= function: 0x0118eb18 (function)
         IsCurrentlyHorizontalMotionControlled	= function: 0x0118ea00 (function)
         GetMoveSpeedModifier            	= function: 0x0118bfc0 (function)
         GetForceAttackTarget            	= function: 0x0118e4b0 (function)
         AddNewModifier                  	= function: 0x0118eca8 (function)
         SwapAbilities                   	= function: 0x01190e80 (function)
         Interrupt                       	= function: 0x0118e6a8 (function)
         IsPhased                        	= function: 0x01192a70 (function)
         SetForceAttackTarget            	= function: 0x0118e538 (function)
         IsCurrentlyVerticalMotionControlled	= function: 0x0118e968 (function)
         GetAdditionalBattleMusicWeight  	= function: 0x0118e390 (function)
         IsShrine                        	= function: 0x0118ceb8 (function)
         AlertNearbyUnits                	= function: 0x0118e308 (function)
         SetAggroTarget                  	= function: 0x0118e288 (function)
         GetGoldBounty                   	= function: 0x0118d888 (function)
         SetMinimumGoldBounty            	= function: 0x0118d668 (function)
         SellItem                        	= function: 0x0118a8a8 (function)
         IsSoftDisarmed                  	= function: 0x011f8600 (function)
         GetMainControllingPlayer        	= function: 0x0118dab8 (function)
         IsOwnedByAnyPlayer              	= function: 0x0118da30 (function)
         GetAttackAnimationPoint         	= function: 0x0118df78 (function)
         AttackNoEarlierThan             	= function: 0x0118dde0 (function)
         GetDamageMax                    	= function: 0x0118b338 (function)
         AttackReady                     	= function: 0x0118dd60 (function)
         IsRangedAttacker                	= function: 0x011932e8 (function)
         GetUnitLabel                    	= function: 0x01193608 (function)
         SetBaseMoveSpeed                	= function: 0x0118ba28 (function)
         SetAcquisitionRange             	= function: 0x0118a1c8 (function)
         FindAbilityByName               	= function: 0x01190f88 (function)
         GetItemInSlot                   	= function: 0x011919f8 (function)
         SetMustReachEachGoalEntity      	= function: 0x01188f40 (function)
         PickupDroppedItem               	= function: 0x0118a7a0 (function)
         IsControllableByAnyPlayer       	= function: 0x0118d9a0 (function)
         GetCurrentActiveAbility         	= function: 0x01191230 (function)
         GiveMana                        	= function: 0x01189f68 (function)
         IsSpeciallyDeniable             	= function: 0x011922c8 (function)
         GetAttackCapability             	= function: 0x01192e18 (function)
         GetHealthPercent                	= function: 0x01189168 (function)
         PickupRune                      	= function: 0x0118a828 (function)
         IsNightmared                    	= function: 0x01192048 (function)
         IsRealHero                      	= function: 0x0118a648 (function)
         HasInventory                    	= function: 0x011918f8 (function)
         MoveToNPCToGiveItem             	= function: 0x0118a718 (function)
         TriggerSpellAbsorb              	= function: 0x0118c898 (function)
         Kill                            	= function: 0x0118a578 (function)
         IsCreep                         	= function: 0x0118ccc8 (function)
         GetCursorCastTarget             	= function: 0x011917c0 (function)
         IsMagicImmune                   	= function: 0x01191ec8 (function)
         HasFlyMovementCapability        	= function: 0x01193040 (function)
         GetStatusResistance             	= function: 0x0118af90 (function)
         IsMuted                         	= function: 0x01191c78 (function)
         GetPlayerOwner                  	= function: 0x0118dc58 (function)
         GetNeutralSpawnerName           	= function: 0x0118d038 (function)
         IsSummoned                      	= function: 0x01189878 (function)
         SetBaseAttackTime               	= function: 0x0118bb38 (function)
         GetCursorTargetingNothing       	= function: 0x011918a0 (function)
         QueueTeamConceptNoSpectators    	= function: 0x01188da0 (function)
         SetBaseDamageMax                	= function: 0x0118b230 (function)
         SetRevealRadius                 	= function: 0x01190100 (function)
         GetAttackTarget                 	= function: 0x0118e188 (function)
         IsInRangeOfShop                 	= function: 0x01189aa8 (function)
         ChangeTeam                      	= function: 0x01188ca0 (function)
         IsFort                          	= function: 0x0118cbd0 (function)
         HasAnyActiveAbilities           	= function: 0x011931e0 (function)
         Hold                            	= function: 0x011915b8 (function)
         GetLevel                        	= function: 0x01189698 (function)
         CastAbilityOnTarget             	= function: 0x01191340 (function)
         IsHero                          	= function: 0x0118a5d0 (function)
         GetModifierNameByIndex          	= function: 0x0118edb0 (function)
         SetHullRadius                   	= function: 0x011890e8 (function)
         HasAbility                      	= function: 0x0118ae88 (function)
         GetCollisionPadding             	= function: 0x01188fd0 (function)
         IsAttacking                     	= function: 0x0118e088 (function)
         MoveToPosition                  	= function: 0x01189300 (function)
         ProvidesVision                  	= function: 0x01191fc8 (function)
         MoveToPositionAggressive        	= function: 0x01189380 (function)
         GetCooldownReduction            	= function: 0x0118c0d0 (function)
         MakeIllusion                    	= function: 0x0118c1d8 (function)
         GetAttackSpeed                  	= function: 0x0118beb8 (function)
         IsCreepHero                     	= function: 0x0118c9e0 (function)
         GetBaseAttackRange              	= function: 0x0118a360 (function)
         GetIdealSpeed                   	= function: 0x011895b8 (function)
         SetPhysicalArmorBaseValue       	= function: 0x0118b4c8 (function)
         GetDamageMin                    	= function: 0x0118b2b8 (function)
         PatrolToPosition                	= function: 0x01189518 (function)
         SwapItems                       	= function: 0x0118ad88 (function)
         ReduceMana                      	= function: 0x01189ee8 (function)
         GetHealthRegen                  	= function: 0x0118b9a8 (function)
         IsEvadeDisabled                 	= function: 0x01192148 (function)
         GetNeverMoveToClearSpace        	= function: 0x01188558 (function)
         QueueConcept                    	= function: 0x01188870 (function)
         HasFlyingVision                 	= function: 0x01193268 (function)
         IsReincarnating                 	= function: 0x0118c2d8 (function)
         GetAggroTarget                  	= function: 0x0118e208 (function)
         UnHideAbilityToSlot             	= function: 0x01190f00 (function)
         FadeGesture                     	= function: 0x0118c718 (function)
         SetMaxMana                      	= function: 0x01189d10 (function)
         TriggerModifierDodge            	= function: 0x01190d70 (function)
         IsDisarmed                      	= function: 0x01191af8 (function)
         TriggerSpellReflect             	= function: 0x01190df8 (function)
         GetBaseNightTimeVisionRange     	= function: 0x0118d3c8 (function)
         GetMinimumGoldBounty            	= function: 0x0118d6f0 (function)
         IsAlive                         	= function: 0x0118d0c0 (function)
         IsIdle                          	= function: 0x01188818 (function)
         StartGestureWithPlaybackRate    	= function: 0x0118c608 (function)
         CastAbilityOnPosition           	= function: 0x011912b8 (function)
         CastAbilityNoTarget             	= function: 0x011913c8 (function)
         AddItemByName                   	= function: 0x0118ac30 (function)
         CastAbilityImmediately          	= function: 0x011914d8 (function)
         SetNeverMoveToClearSpace        	= function: 0x01188658 (function)
         IsSilenced                      	= function: 0x01191bf8 (function)
         GetBaseMaxHealth                	= function: 0x01189bb0 (function)
         IsBoss                          	= function: 0x0118cdc0 (function)
         GetAcquisitionRange             	= function: 0x0118a140 (function)
         IsBuilding                      	= function: 0x0118cb50 (function)
         SetBaseMaxHealth                	= function: 0x01189b28 (function)
         IsMoving                        	= function: 0x01190080 (function)
         SetFollowRange                  	= function: 0x011899a8 (function)
         GetBonusManaRegen               	= function: 0x0118b790 (function)
         CastAbilityToggle               	= function: 0x01191450 (function)
         SetBaseDamageMin                	= function: 0x0118b1a8 (function)
         GetPhysicalArmorBaseValue       	= function: 0x0118b558 (function)
         IsSpeciallyUndeniable           	= function: 0x01192350 (function)
         StartGestureFadeWithSequenceSettings	= function: 0x0118c570 (function)
         AddAbility                      	= function: 0x0118ad08 (function)
         GetIdealSpeedNoSlows            	= function: 0x01189610 (function)
         ScriptPlayScene                 	= function: 0x0112ce30 (function)
         FDesc                           	= table: 0x0112ce08 (table)
         {
            GetSceneByIndex                 	= handle GetSceneByIndex(int index)
Returns the instance of the scene entity at the specified index. (userdata)
            GetCurrentScene                 	= handle GetCurrentScene()
Returns the instance of the oldest active scene entity (if any). (userdata)
            ScriptPlayScene                 	= float ScriptPlayScene(string pszScene, float flDelay)
( vcd file, delay ) - play specified vcd file (userdata)
         }
         IsNull                          	= function: 0x0112cda8 (function)
         GetCurrentScene                 	= function: 0x0112cf18 (function)
         GetSceneByIndex                 	= function: 0x0112cf98 (function)
         SetGraphLookTarget              	= function: 0x01187338 (function)
         SetGraphParameterEnum           	= function: 0x011877e0 (function)
         SetGraphParameterInt            	= function: 0x01187758 (function)
         IsSequenceFinished              	= function: 0x011870e0 (function)
         ResetSequence                   	= function: 0x01186fb0 (function)
         SetSequence                     	= function: 0x01187230 (function)
         FDesc                           	= table: 0x01186d88 (table)
         {
            SetGraphLookTarget              	= void SetGraphLookTarget(Vector vValue)
Pass the desired look target in world space to the graph (userdata)
            SetGraphParameterEnum           	= void SetGraphParameterEnum(string szName, int nValue)
Pass the enum (int) value to the specified param (userdata)
            SetGraphParameterInt            	= void SetGraphParameterInt(string szName, int nValue)
Pass the int value to the specified param (userdata)
            IsSequenceFinished              	= bool IsSequenceFinished()
Ask whether the main sequence is done playing. (userdata)
            ResetSequence                   	= void ResetSequence(string pSequenceName)
Sets the active sequence by name, resetting the current cycle. (userdata)
            SetCycle                        	= void SetCycle(float flCycle)
Set the cycle of the animation. (userdata)
            SetGraphParameter               	= void SetGraphParameter(string pszParam, table svArg)
Set the specific param value, type is inferred from the type in script (userdata)
            SetGraphParameterVector         	= void SetGraphParameterVector(string szName, Vector vValue)
Pass the vector value to the specified param in the graph (userdata)
            GetSequence                     	= string GetSequence()
Returns the name of the active sequence. (userdata)
            StopAnimation                   	= void StopAnimation()
Stop the current animation by setting playback rate to 0.0. (userdata)
            SequenceDuration                	= float SequenceDuration(string pSequenceName)
Returns the duration in seconds of the given sequence name. (userdata)
            SetGraphParameterFloat          	= void SetGraphParameterFloat(string szName, float flValue)
Pass the float value to the specified param (userdata)
            GetGraphParameter               	= table GetGraphParameter(string pszParam)
Get the value of the given animGraph parameter (userdata)
            SetPoseParameter                	= float SetPoseParameter(string szName, float fValue)
Set the specified pose parameter to the specified value. (userdata)
            SetGraphParameterBool           	= void SetGraphParameterBool(string szName, bool bValue)
Set the specific param on or off (userdata)
            SetSequence                     	= void SetSequence(string pSequenceName)
Sets the active sequence by name, keeping the current cycle. (userdata)
            ActiveSequenceDuration          	= float ActiveSequenceDuration()
Returns the duration in seconds of the active sequence. (userdata)
            GetCycle                        	= float GetCycle()
Get the cycle of the animation. (userdata)
         }
         SetGraphParameter               	= function: 0x011871c0 (function)
         SetGraphParameterVector         	= function: 0x011872b0 (function)
         GetSequence                     	= function: 0x01187050 (function)
         StopAnimation                   	= function: 0x01186eb0 (function)
         SequenceDuration                	= function: 0x01187168 (function)
         SetGraphParameterFloat          	= function: 0x011876d0 (function)
         GetGraphParameter               	= function: 0x011873c0 (function)
         IsNull                          	= function: 0x01186d28 (function)
         SetPoseParameter                	= function: 0x01186db0 (function)
         SetCycle                        	= function: 0x01186f30 (function)
         SetGraphParameterBool           	= function: 0x01187648 (function)
         ActiveSequenceDuration          	= function: 0x01187410 (function)
         GetCycle                        	= function: 0x01186e38 (function)
         SetMaterialGroupHash            	= function: 0x01185f40 (function)
         GetModelScale                   	= function: 0x01185a20 (function)
         GetMaterialGroupHash            	= function: 0x01185fc8 (function)
         SetRenderMode                   	= function: 0x011862f8 (function)
         ScriptLookupAttachment          	= function: 0x01185b98 (function)
         FDesc                           	= table: 0x011859f8 (table)
         {
            SetMaterialGroupHash            	= void SetMaterialGroupHash(unsigned nHash)
SetMaterialGroupHash( uint32 ): Set the material group hash of this entity. (userdata)
            GetModelScale                   	= float GetModelScale()
Get scale of entity's model. (userdata)
            GetMaterialGroupHash            	= unsigned GetMaterialGroupHash()
GetMaterialGroupHash(): Get the material group hash of this entity. (userdata)
            SetMaterialGroup                	= void SetMaterialGroup(string pMaterialGroup)
SetMaterialGroup( string ): Set the material group of this entity. (userdata)
            SetSize                         	= void SetSize(Vector mins, Vector maxs)
 (userdata)
            SetModelScale                   	= void SetModelScale(float flScale)
Set scale of entity's model. (userdata)
            SetMaterialGroupMask            	= void SetMaterialGroupMask(uint64 nMeshGroupMask)
SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity. (userdata)
            SetSkin                         	= void SetSkin(int iSkin)
Set skin (int). (userdata)
            SetBodygroupByName              	= void SetBodygroupByName(string pName, int iValue)
Sets a bodygroup by name. (userdata)
            GetMaterialGroupMask            	= uint64 GetMaterialGroupMask()
GetMaterialGroupMask(): Get the mesh group mask of this entity. (userdata)
            SetModel                        	= void SetModel(string pModelName)
 (userdata)
            SetRenderAlpha                  	= void SetRenderAlpha(int nAlpha)
SetRenderAlpha( int ): Set the alpha modulation of this entity. (userdata)
            SetBodygroup                    	= void SetBodygroup(int iGroup, int iValue)
Sets a bodygroup. (userdata)
            GetAttachmentAngles             	= Vector GetAttachmentAngles(int iAttachment)
Get the attachment id's angles as a p,y,r vector. (userdata)
            SetSingleMeshGroup              	= void SetSingleMeshGroup(string pMeshGroupName)
SetSingleMeshGroup( string ): Set a single mesh group for this entity. (userdata)
            SetLightGroup                   	= void SetLightGroup(string pLightGroup)
SetLightGroup( string ): Sets the light group of the entity. (userdata)
            GetAttachmentForward            	= Vector GetAttachmentForward(int iAttachment)
Get the attachment id's forward vector. (userdata)
            GetRenderAlpha                  	= int GetRenderAlpha()
GetRenderAlpha(): Get the alpha modulation of this entity. (userdata)
            SetRenderColor                  	= void SetRenderColor(int r, int g, int b)
SetRenderColor( r, g, b ): Sets the render color of the entity. (userdata)
            SetRenderMode                   	= void SetRenderMode(int nMode)
SetRenderMode( int ): Sets the render mode of the entity. (userdata)
            ScriptLookupAttachment          	= int ScriptLookupAttachment(string pAttachmentName)
Get the named attachment id. (userdata)
            GetAttachmentOrigin             	= Vector GetAttachmentOrigin(int iAttachment)
Get the attachment id's origin vector. (userdata)
            GetRenderColor                  	= Vector GetRenderColor()
GetRenderColor(): Get the render color of the entity. (userdata)
         }
         SetModelScale                   	= function: 0x01185b18 (function)
         SetMaterialGroupMask            	= function: 0x01186178 (function)
         SetSkin                         	= function: 0x01186bc0 (function)
         SetBodygroupByName              	= function: 0x01186b38 (function)
         SetBodygroup                    	= function: 0x01186ab8 (function)
         GetMaterialGroupMask            	= function: 0x01186200 (function)
         SetModel                        	= function: 0x01185c20 (function)
         SetRenderAlpha                  	= function: 0x01185dd8 (function)
         SetSingleMeshGroup              	= function: 0x01186050 (function)
         GetAttachmentAngles             	= function: 0x01185d50 (function)
         SetMaterialGroup                	= function: 0x01186478 (function)
         SetLightGroup                   	= function: 0x01185e58 (function)
         GetAttachmentForward            	= function: 0x01185cc0 (function)
         IsNull                          	= function: 0x01185998 (function)
         SetRenderColor                  	= function: 0x01186378 (function)
         SetSize                         	= function: 0x01185ec8 (function)
         GetRenderAlpha                  	= function: 0x011860a0 (function)
         GetAttachmentOrigin             	= function: 0x01185aa0 (function)
         GetRenderColor                  	= function: 0x011863f8 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table)
         {
            GetTeamNumber                   	= int GetTeamNumber()
Get the team number of this entity. (userdata)
            GetChildren                     	= handle GetChildren()
Get the entities parented to this entity. (userdata)
            IsNPC                           	= bool IsNPC()
Is this entity an CAI_BaseNPC? (userdata)
            SetAngularVelocity              	= void SetAngularVelocity(float pitchVel, float yawVel, float rollVel)
Set the local angular velocity - takes float pitch,yaw,roll velocities (userdata)
            IsPlayerPawn                    	= bool IsPlayerPawn()
Is this entity a player pawn? (userdata)
            Kill                            	= void Kill()
 (userdata)
            SetLocalScale                   	= void SetLocalScale(float flScale)
 (userdata)
            DeleteAttribute                 	= void DeleteAttribute(string pName)
Delete an entity attribute. (userdata)
            GetLocalScale                   	= float GetLocalScale()
 (userdata)
            GetSpawnGroupHandle             	= int GetSpawnGroupHandle()
Returns the spawn group handle of this entity (userdata)
            SetLocalOrigin                  	= void SetLocalOrigin(Vector origin)
Set entity local origin from a Vector (userdata)
            TransformPointWorldToEntity     	= Vector TransformPointWorldToEntity(Vector vPoint)
Returns the input Vector transformed from world to entity space (userdata)
            SetContextThink                 	= void SetContextThink(string pszContextName, handle hThinkFunc, float flInterval)
Set a think function on this entity. (userdata)
            Attribute_SetIntValue           	= void Attribute_SetIntValue(string pName, int nValue)
Set int value for an entity attribute. (userdata)
            HasAttribute                    	= bool HasAttribute(string pName)
See if an entity has a particular attribute. (userdata)
            Attribute_GetIntValue           	= int Attribute_GetIntValue(string pName, int nDefault)
Get int value for an entity attribute. (userdata)
            GetBoundingMaxs                 	= Vector GetBoundingMaxs()
Get a vector containing max bounds, centered on object. (userdata)
            GetCenter                       	= Vector GetCenter()
Get vector to center of object - absolute coords (userdata)
            GetOwner                        	= handle GetOwner()
Gets this entity's owner (userdata)
            SetConstraint                   	= void SetConstraint(Vector vPos)
Set the position of the constraint. (userdata)
            GetContext                      	= table GetContext(string name)
GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found). (userdata)
            SetMass                         	= void SetMass(float flMass)
Set the mass of an entity. (does nothing if it doesn't have a physics object) (userdata)
            SetAbsScale                     	= void SetAbsScale(float flScale)
 (userdata)
            OverrideFriction                	= void OverrideFriction(float duration, float friction)
Takes duration, value for a temporary override. (userdata)
            SetEntityName                   	= void SetEntityName(string pName)
Set the name of an entity. (userdata)
            GetUpVector                     	= Vector GetUpVector()
Get the up vector of the entity. (userdata)
            GetVelocity                     	= Vector GetVelocity()
 (userdata)
            RemoveEffects                   	= void RemoveEffects(int nFlags)
RemoveEffects( int ): Removes the render effect flag. (userdata)
            SetLocalAngles                  	= void SetLocalAngles(float fPitch, float fYaw, float fRoll)
Set entity local pitch, yaw, roll by component (userdata)
            Attribute_SetFloatValue         	= void Attribute_SetFloatValue(string pName, float flValue)
Set float value for an entity attribute. (userdata)
            GetBaseVelocity                 	= Vector GetBaseVelocity()
Get Base? velocity. (userdata)
            GetOrigin                       	= Vector GetOrigin()
 (userdata)
            GatherCriteria                  	= void GatherCriteria(handle hResult)
Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks. (userdata)
            Trigger                         	= void Trigger()
Fires off this entity's OnTrigger responses. (userdata)
            IsDOTANPC                       	= bool IsDOTANPC()
Is this entity a Dota NPC? (userdata)
            GetLocalAngles                  	= QAngle GetLocalAngles()
Get entity local pitch, yaw, roll as a QAngle (userdata)
            SetHealth                       	= void SetHealth(int nHealth)
Set the health of this entity. (userdata)
            IsPlayer                        	= bool IsPlayer()
Back compat: Is this entity a player pawn *or* controller? (userdata)
            GetLocalAngularVelocity         	= QAngle GetLocalAngularVelocity()
Maybe local angvel (userdata)
            GetAngularVelocity              	= Vector GetAngularVelocity()
Get the local angular velocity - returns a vector of pitch,yaw,roll (userdata)
            Attribute_GetFloatValue         	= float Attribute_GetFloatValue(string pName, float flDefault)
Get float value for an entity attribute. (userdata)
            GetAbsScale                     	= float GetAbsScale()
 (userdata)
            TakeDamage                      	= int TakeDamage(handle hInfo)
Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object. (userdata)
            TransformPointEntityToWorld     	= Vector TransformPointEntityToWorld(Vector vPoint)
Returns the input Vector transformed from entity to world space (userdata)
            EmitSoundParams                 	= void EmitSoundParams(string soundname, int nPitch, float flVolume, float flDelay)
Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0. (userdata)
            SetForwardVector                	= void SetForwardVector(Vector v)
Set the orientation of the entity to have this forward vector. (userdata)
            SetContextNum                   	= void SetContextNum(string pName, float fValue, float duration)
SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever'). (userdata)
            GetAbsOrigin                    	= Vector GetAbsOrigin()
 (userdata)
            EmitSound                       	= void EmitSound(string soundname)
Plays a sound from this entity. (userdata)
            NextMovePeer                    	= handle NextMovePeer()
 (userdata)
            ApplyLocalAngularVelocityImpulse	= void ApplyLocalAngularVelocityImpulse(Vector angImpulse)
Apply an Ang Velocity Impulse (userdata)
            GetMaxHealth                    	= int GetMaxHealth()
Get the maximum health of this entity. (userdata)
            PrecacheScriptSound             	= void PrecacheScriptSound(string soundname)
Precache a sound for later playing. (userdata)
            ApplyAbsVelocityImpulse         	= void ApplyAbsVelocityImpulse(Vector vecImpulse)
Apply a Velocity Impulse (userdata)
            GetLocalVelocity                	= Vector GetLocalVelocity()
Get Entity relative velocity. (userdata)
            SetVelocity                     	= void SetVelocity(Vector vecVelocity)
 (userdata)
            GetHealth                       	= int GetHealth()
Get the health of this entity. (userdata)
            EyeAngles                       	= QAngle EyeAngles()
Get the qangles that this entity is looking at. (userdata)
            GetForwardVector                	= Vector GetForwardVector()
Get the forward vector of the entity. (userdata)
            GetModelName                    	= string GetModelName()
Returns the name of the model. (userdata)
            SetContext                      	= void SetContext(string pName, string pValue, float duration)
SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever'). (userdata)
            GetRightVector                  	= Vector GetRightVector()
Get the right vector of the entity. (userdata)
            GetAnglesAsVector               	= Vector GetAnglesAsVector()
Get entity pitch, yaw, roll as a vector. (userdata)
            SetAbsAngles                    	= void SetAbsAngles(float fPitch, float fYaw, float fRoll)
Set entity pitch, yaw, roll by component. (userdata)
            SetMaxHealth                    	= void SetMaxHealth(int amt)
Set the maximum health of this entity. (userdata)
            GetAngles                       	= QAngle GetAngles()
 (userdata)
            IsPlayerController              	= bool IsPlayerController()
Is this entity a player controller? (userdata)
            IsAlive                         	= bool IsAlive()
Is this entity alive? (userdata)
            SetParent                       	= void SetParent(handle hParent, string pAttachmentname)
Set the parent for this entity. (userdata)
            GetBounds                       	= table GetBounds()
Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object. (userdata)
            AddEffects                      	= void AddEffects(int nFlags)
AddEffects( int ): Adds the render effect flag. (userdata)
            GetBoundingMins                 	= Vector GetBoundingMins()
Get a vector containing min bounds, centered on object. (userdata)
            EyePosition                     	= Vector EyePosition()
Get vector to eye position - absolute coords. (userdata)
            SetAngles                       	= void SetAngles(float fPitch, float fYaw, float fRoll)
Set entity pitch, yaw, roll by component. (userdata)
            SetGravity                      	= void SetGravity(float flGravity)
Set PLAYER gravity, ignored for objects. (userdata)
            GetOwnerEntity                  	= handle GetOwnerEntity()
Get the owner entity, if there is one (userdata)
            FirstMoveChild                  	= handle FirstMoveChild()
 (userdata)
            SetFriction                     	= void SetFriction(float flFriction)
Set PLAYER friction, ignored for objects. (userdata)
            GetLocalOrigin                  	= Vector GetLocalOrigin()
Get entity local origin as a Vector (userdata)
            SetOrigin                       	= void SetOrigin(Vector v)
 (userdata)
            GetMoveParent                   	= handle GetMoveParent()
If in hierarchy, retrieves the entity's parent. (userdata)
            GetRootMoveParent               	= handle GetRootMoveParent()
If in hierarchy, walks up the hierarchy to find the root parent. (userdata)
            StopSound                       	= void StopSound(string soundname)
Stops a named sound playing from this entity. (userdata)
            SetOwner                        	= void SetOwner(handle pOwner)
Sets this entity's owner (userdata)
            GetMass                         	= float GetMass()
Get the mass of an entity. (returns 0 if it doesn't have a physics object) (userdata)
            ValidatePrivateScriptScope      	= void ValidatePrivateScriptScope()
Validates the private script scope and creates it if one doesn't exist. (userdata)
            GetSoundDuration                	= float GetSoundDuration(string soundname, string actormodel)
Returns float duration of the sound. Takes soundname and optional actormodelname. (userdata)
            SetAbsOrigin                    	= void SetAbsOrigin(Vector origin)
 (userdata)
            GetTeam                         	= int GetTeam()
Get the team number of this entity. (userdata)
            SetTeam                         	= void SetTeam(int iTeamNum)
 (userdata)
            FollowEntity                    	= void FollowEntity(handle hEnt, bool bBoneMerge)
hEntity to follow, bool bBoneMerge (userdata)
         }
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table)
         {
            GetEntityIndex                  	= int GetEntityIndex()
 (userdata)
            DisconnectRedirectedOutput      	= void DisconnectRedirectedOutput(string, string, handle)
Removes a connected script function from an I/O event on the passed entity. (userdata)
            GetOrCreatePublicScriptScope    	= handle GetOrCreatePublicScriptScope()
Retrieve, creating if necessary, the public script-side data associated with an entity (userdata)
            GetOrCreatePrivateScriptScope   	= handle GetOrCreatePrivateScriptScope()
Retrieve, creating if necessary, the private per-instance script-side data associated with an entity (userdata)
            GetPrivateScriptScope           	= handle GetPrivateScriptScope()
Retrieve the private per-instance script-side data associated with an entity (userdata)
            RedirectOutput                  	= void RedirectOutput(string, string, handle)
Adds an I/O connection that will call the named function on the passed entity when the specified output fires. (userdata)
            GetIntAttr                      	= int GetIntAttr(string)
Get Integer Attribute (userdata)
            FireOutput                      	= void FireOutput(string, handle, handle, table, float)
Fire an entity output (userdata)
            GetDebugName                    	= string GetDebugName()
Get the entity name w/help if not defined (i.e. classname/etc) (userdata)
            DisconnectOutput                	= void DisconnectOutput(string, string)
Removes a connected script function from an I/O event on this entity. (userdata)
            Destroy                         	= void Destroy()
 (userdata)
            GetClassname                    	= string GetClassname()
 (userdata)
            GetName                         	= string GetName()
 (userdata)
            ConnectOutput                   	= void ConnectOutput(string, string)
Adds an I/O connection that will call the named function on this entity when the specified output fires. (userdata)
            entindex                        	= int entindex()
 (userdata)
            GetEntityHandle                 	= ehandle GetEntityHandle()
Get the entity as an EHANDLE (userdata)
            RemoveSelf                      	= void RemoveSelf()
Delete this entity (userdata)
            SetIntAttr                      	= void SetIntAttr(string, int)
Set Integer Attribute (userdata)
            GetPublicScriptScope            	= handle GetPublicScriptScope()
Retrieve the public script-side data associated with an entity (userdata)
         }
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      FDesc                           	= table: 0x011bf4c8 (table)
      {
         SetAnimation                    	= void SetAnimation(string pAnimation)
Set the animation sequence for this entity. (userdata)
         SetServerAuthoritative          	= void SetServerAuthoritative(bool bIsServerAuthoritative)
Determines whether response criteria is matched on server or client (userdata)
      }
      IsNull                          	= function: 0x011bf468 (function)
      SetAnimation                    	= function: 0x011aad10 (function)
      SetServerAuthoritative          	= function: 0x011aadd0 (function)
   }
   ACT_DOTA_LIFESTEALER_EJECT      	= 1704 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_BUILDING	= 796 (number)
   ACT_VM_LOWERED_TO_IDLE          	= 215 (number)
   AE_FOOTSTEP                     	= 20 (number)
   ACT_SCRIPT_CUSTOM_24            	= 935 (number)
   ACT_MELEE_VM_PULLBACK           	= 833 (number)
   AE_CL_ADD_PARTICLE_EFFECT_CP    	= 10 (number)
   DOTA_ABILITY_BEHAVIOR_UNIT_TARGET	= 8 (number)
   MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES	= 23 (number)
   ACT_DOTA_ROQUELAIRE_LAND_IDLE   	= 1616 (number)
   ACT_MP_RELOAD_CROUCH_LOOP       	= 540 (number)
   GetDedicatedServerKeyV2         	= function: 0x01146d38 (function)
   ACT_DOTA_SLARK_POUNCE           	= 1604 (number)
   ACT_PRIMARY_VM_PULLBACK         	= 811 (number)
   DOTA_HUD_VISIBILITY_INVALID     	= -1 (number)
   _PublishedHelp                  	= table: 0x011f8800 (table)
   {
   }
   ACT_DOTA_MK_SPRING_CAST         	= 1723 (number)
   ScriptDebugRemoveWatchPattern   	= function: 0x011b28b8 (function)
   ACT_MP_GESTURE_VC_NODYES_SECONDARY	= 773 (number)
   DOTA_ATTRIBUTE_STRENGTH         	= 0 (number)
   DOTA_HUD_VISIBILITY_ACTION_MINIMAP	= 4 (number)
   MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE	= 51 (number)
   ACT_WALK_SUITCASE               	= 324 (number)
   ACT_RANGE_ATTACK_HMG1           	= 277 (number)
   ACT_DEPLOY                      	= 471 (number)
   ACT_MP_AIRWALK_ITEM1            	= 646 (number)
   AE_CL_ENABLE_BODYGROUP          	= 28 (number)
   CDOTA_NeutralSpawner            	= table: 0x011b29a8 (table)
   {
      metatable = table: 0x011b2518
      {
         FDesc                           	= table: 0x011b25a0 (table)
         {
         }
         IsNull                          	= function: 0x011b2540 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      CreatePendingUnits              	= function: 0x011b2b50 (function)
      FDesc                           	= table: 0x011b2a30 (table)
      {
         CreatePendingUnits              	= void CreatePendingUnits()
 (userdata)
         SpawnNextBatch                  	= void SpawnNextBatch(bool bIgnoreBlockers)
 (userdata)
         SelectSpawnType                 	= void SelectSpawnType()
 (userdata)
      }
      IsNull                          	= function: 0x011b29d0 (function)
      SpawnNextBatch                  	= function: 0x011b2bd8 (function)
      SelectSpawnType                 	= function: 0x011b2a58 (function)
   }
   ACT_MP_ATTACK_STAND_PRIMARY     	= 568 (number)
   DOTA_CONNECTION_STATE_DISCONNECTED	= 3 (number)
   FCVAR_REPLICATED                	= 8192 (number)
   ACT_VM_DRYFIRE_SILENCED         	= 479 (number)
   DOTA_LOADOUT_TYPE_WEAPON2       	= 2 (number)
   ACT_DIE_STANDING                	= 411 (number)
   ACT_IDLE_ANGRY                  	= 77 (number)
   ACT_MP_SECONDARY_GRENADE1_IDLE  	= 702 (number)
   CreateEffect                    	= function: 0x0113ffb0 (function)
   DOTA_PROJECTILE_ATTACHMENT_HITLOCATION	= 3 (number)
   ACT_ITEM2_VM_IDLE               	= 865 (number)
   ACT_BUSY_SIT_CHAIR_EXIT         	= 392 (number)
   RotationDelta                   	= function: 0x0113e4a8 (function)
   ACT_DIE_CROUCH_HEADSHOT         	= 991 (number)
   DOTA_UNIT_TARGET_BUILDING       	= 4 (number)
   ACT_VM_RELEASE                  	= 220 (number)
   ACT_CSGO_FALL                   	= 1021 (number)
   DOTA_UNIT_ORDER_MOVE_TO_DIRECTION	= 28 (number)
   ACT_SCRIPT_CUSTOM_16            	= 927 (number)
   ACT_RUN_CROUCH_AIM              	= 13 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY_END	= 610 (number)
   ACT_VM_UNUSABLE_TO_USABLE       	= 806 (number)
   MODIFIER_PROPERTY_MODEL_SCALE   	= 213 (number)
   ACT_RANGE_ATTACK_TRIPWIRE       	= 287 (number)
   ACT_ARM                         	= 71 (number)
   ACT_OBJ_DETERIORATING           	= 469 (number)
   cvar_getf                       	= function: 0x0113c358 (function)
   ACT_MP_GESTURE_VC_HANDMOUTH_PDA 	= 799 (number)
   ACT_DIE_BACKSIDE                	= 404 (number)
   DOTA_LOADOUT_TYPE_BACK          	= 10 (number)
   ACT_PDA_VM_LOWERED_TO_IDLE      	= 851 (number)
   ACT_FLINCH_RIGHTLEG             	= 124 (number)
   ACT_VM_RECOIL3                  	= 218 (number)
   DOTA_LOADOUT_TYPE_ARMS          	= 6 (number)
   ACT_SLAM_STICKWALL_DETONATOR_HOLSTER	= 231 (number)
   DOTA_LOADOUT_TYPE_ABILITY4      	= 26 (number)
   ACT_MP_GESTURE_VC_NODNO_ITEM1   	= 786 (number)
   DOTA_GAMERULES_STATE_INIT       	= 0 (number)
   ACT_DOTA_GREEVIL_CAST           	= 1617 (number)
   ACT_DOTA_RADIANT_CREEP_HAMMER   	= 1782 (number)
   ACT_DROP_WEAPON                 	= 73 (number)
   ACT_MP_STAND_SECONDARY          	= 590 (number)
   ACT_VM_SWINGMISS                	= 211 (number)
   GetItemCost                     	= function: 0x011457f0 (function)
   ACT_RANGE_ATTACK_AUTOGUN        	= 882 (number)
   ACT_ITEM1_VM_LOWERED_TO_IDLE    	= 862 (number)
   ACT_ITEM2_VM_LOWERED_TO_IDLE    	= 873 (number)
   OVERHEAD_ALERT_MANA_ADD         	= 11 (number)
   ACT_MP_AIRWALK_SECONDARY        	= 594 (number)
   ACT_CSGO_DEPLOY                 	= 1007 (number)
   MODIFIER_STATE_SILENCED         	= 3 (number)
   EmitSoundOnEntityForPlayer      	= function: 0x01146528 (function)
   DOTA_MINIMAP_EVENT_TEAMMATE_DIED	= 64 (number)
   ACT_WALK_AIM                    	= 7 (number)
   MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE	= 156 (number)
   ACT_MP_RUN_MELEE                	= 623 (number)
   ACT_CLIMB_DOWN                  	= 34 (number)
   ACT_OVERLAY_SHIELD_ATTACK       	= 448 (number)
   ACT_PRIMARY_VM_DRYFIRE          	= 815 (number)
   vec3_origin                     	= Vector 00000000011449B8 [0.000000 0.000000 0.000000] (userdata)
   DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED	= 1024 (number)
   PATTACH_INVALID                 	= -1 (number)
   DOTA_ModifyXP_Unspecified       	= 0 (number)
   g_rr                            	= table: 0x011f8f40 (table)
   {
      metatable                       	= table: 0x01111960 (table, already seen)
   }
   setfenv                         	= function: builtin#11 (function)
   ACT_CSGO_RELOAD                 	= 1002 (number)
   ACT_MP_WALK_PRIMARY             	= 558 (number)
   ACT_DOTA_RUN                    	= 1502 (number)
   CDOTA_Ability_Nian_Leap         	= table: 0x011afaa0 (table)
   {
      metatable = table: 0x0117bba8
      {
         IsHiddenAsSecondaryAbility      	= function: 0x01181060 (function)
         IsSharedWithTeammates           	= function: 0x0117ce30 (function)
         SetCurrentAbilityCharges        	= function: 0x01181390 (function)
         GetInitialAbilityCharges        	= function: 0x01181420 (function)
         ToggleAutoCast                  	= function: 0x0117cfb8 (function)
         RefreshIntrinsicModifier        	= function: 0x0117dbd0 (function)
         GetCastPointModifier            	= function: 0x0117ca28 (function)
         GetAbilityName                  	= function: 0x0117bff0 (function)
         PlaysDefaultAnimWhenStolen      	= function: 0x011811f0 (function)
         OnAbilityPhaseInterrupted       	= function: 0x0117dce8 (function)
         SetHidden                       	= function: 0x0117ceb8 (function)
         IsPassive                       	= function: 0x0117c278 (function)
         GetBackswingTime                	= function: 0x01180348 (function)
         GetCooldownTime                 	= function: 0x0117e640 (function)
         PayManaCost                     	= function: 0x0117d220 (function)
         GetModifierValue                	= function: 0x0117ccc8 (function)
         GetCursorTargetingNothing       	= function: 0x0117bf60 (function)
         GetCooldownTimeRemaining        	= function: 0x0117e6c0 (function)
         GetToggleState                  	= function: 0x0117d7b0 (function)
         IsInAbilityPhase                	= function: 0x01180bb0 (function)
         EndCooldown                     	= function: 0x0117e3b0 (function)
         GetBehaviorInt                  	= function: 0x0117d8b0 (function)
         ToggleAbility                   	= function: 0x0117c7a0 (function)
         OnSpellStart                    	= function: 0x0117dd78 (function)
         GetChannelledManaCostPerSecond  	= function: 0x01180450 (function)
         IsToggle                        	= function: 0x0117c398 (function)
         GetAbilityDamageType            	= function: 0x0117dac8 (function)
         RequiresFacing                  	= function: 0x01180d38 (function)
         GetAutoCastState                	= function: 0x0117d038 (function)
         DecrementModifierRefCount       	= function: 0x0117e088 (function)
         IsItem                          	= function: 0x0117d0c0 (function)
         UseResources                    	= function: 0x0117e860 (function)
         IsAttributeBonus                	= function: 0x0117e228 (function)
         MarkAbilityButtonDirty          	= function: 0x01180910 (function)
         GetAbilityTargetFlags           	= function: 0x0117da40 (function)
         SetOverrideCastPoint            	= function: 0x0117cc40 (function)
         GetChannelTime                  	= function: 0x0117d118 (function)
         CreateVisibilityNode            	= function: 0x0117d728 (function)
         ResetToggleOnRespawn            	= function: 0x01180678 (function)
         SetRefCountsModifiers           	= function: 0x0117dee8 (function)
         UpgradeAbility                  	= function: 0x0117c620 (function)
         SetFrozenCooldown               	= function: 0x0117e750 (function)
         ShouldUseResources              	= function: 0x0117e7d8 (function)
         GetUpgradeRecommended           	= function: 0x0117e8e0 (function)
         GetModifierValueBonus           	= function: 0x0117de60 (function)
         GetMaxLevel                     	= function: 0x0117db50 (function)
         GetCursorPosition               	= function: 0x0117bce0 (function)
         CanAbilityBeUpgraded            	= function: 0x0117c160 (function)
         ContinueCasting                 	= function: 0x0117cb30 (function)
         IsOwnersManaEnough              	= function: 0x0117d320 (function)
         HeroXPChange                    	= function: 0x01180810 (function)
         StartCooldown                   	= function: 0x0117e330 (function)
         RefundManaCost                  	= function: 0x0117d2a0 (function)
         GetAbilityTargetTeam            	= function: 0x0117d930 (function)
         GetAnimationIgnoresModelScale   	= function: 0x0117cbb0 (function)
         GetAbilityIndex                 	= function: 0x0117c520 (function)
         OnHeroLevelUp                   	= function: 0x01180700 (function)
         GetMaxAbilityCharges            	= function: 0x011814b0 (function)
         SetInAbilityPhase               	= function: 0x01180b28 (function)
         GetDuration                     	= function: 0x0117d650 (function)
         IsChanneling                    	= function: 0x01180cb8 (function)
         GetAbilityTargetType            	= function: 0x0117d9b8 (function)
         GetCastRange_Engine             	= function: 0x0117c8a0 (function)
         SetStealable                    	= function: 0x01180ed8 (function)
         RefreshCharges                  	= function: 0x01181310 (function)
         IsFullyCastable                 	= function: 0x0117e1a8 (function)
         GetCastRange                    	= function: 0x011f8580 (function)
         SpeakTrigger                    	= function: 0x01180aa8 (function)
         SetChanneling                   	= function: 0x01180c38 (function)
         GetChannelStartTime             	= function: 0x0117d198 (function)
         OnAbilityPinged                 	= function: 0x0117c6a0 (function)
         ProcsMagicStick                 	= function: 0x0117e2b0 (function)
         GetCooldown                     	= function: 0x0117e430 (function)
         GetAssociatedSecondaryAbilities 	= function: 0x01180e48 (function)
         IsHiddenWhenStolen              	= function: 0x01180fd8 (function)
         GetEffectiveCastRange           	= function: 0x0117c920 (function)
         IsOwnersGoldEnough              	= function: 0x0117d428 (function)
         IsHidden                        	= function: 0x0117c418 (function)
         GetLevelSpecialValueFor         	= function: 0x0117e968 (function)
         SetAbilityIndex                 	= function: 0x0117c070 (function)
         IsCooldownReady                 	= function: 0x0117e538 (function)
         GetCastPoint                    	= function: 0x0117c9a8 (function)
         OnUpgrade                       	= function: 0x01180148 (function)
         GetLevel                        	= function: 0x0117bed0 (function)
         GetSpecialValueFor              	= function: 0x0117ea80 (function)
         GetStolenActivityModifier       	= function: 0x01181280 (function)
         GetEffectiveCooldown            	= function: 0x0117e4b0 (function)
         GetBehavior                     	= function: 0x0117d830 (function)
         IsCosmetic_Engine               	= function: 0x0117cdb0 (function)
         GetAbilityType                  	= function: 0x0117c5a0 (function)
         GetPlaybackRateOverride         	= function: 0x0117c2c0 (function)
         IsStealable                     	= function: 0x01180f58 (function)
         EndChannel                      	= function: 0x0117c720 (function)
         SetUpgradeRecommended           	= function: 0x011815c8 (function)
         PayGoldCostForUpgrade           	= function: 0x0117d4b0 (function)
         OnAbilityPhaseStart             	= function: 0x0117dc60 (function)
         FDesc                           	= table: 0x0117bc30 (table)
         {
            IsHiddenAsSecondaryAbility      	= bool IsHiddenAsSecondaryAbility()
 (userdata)
            IsSharedWithTeammates           	= bool IsSharedWithTeammates()
 (userdata)
            SetCurrentAbilityCharges        	= void SetCurrentAbilityCharges(int nCharges)
 (userdata)
            GetInitialAbilityCharges        	= int GetInitialAbilityCharges(int iLevel)
 (userdata)
            ToggleAutoCast                  	= void ToggleAutoCast()
 (userdata)
            RefreshIntrinsicModifier        	= void RefreshIntrinsicModifier()
 (userdata)
            GetCastPointModifier            	= float GetCastPointModifier()
 (userdata)
            GetAbilityName                  	= string GetAbilityName()
Returns the name of this ability. (userdata)
            PlaysDefaultAnimWhenStolen      	= bool PlaysDefaultAnimWhenStolen()
 (userdata)
            OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
 (userdata)
            SetHidden                       	= void SetHidden(bool bHidden)
 (userdata)
            IsPassive                       	= bool IsPassive()
 (userdata)
            GetBackswingTime                	= float GetBackswingTime()
 (userdata)
            GetCooldownTime                 	= float GetCooldownTime()
 (userdata)
            PayManaCost                     	= void PayManaCost()
 (userdata)
            GetModifierValue                	= float GetModifierValue()
 (userdata)
            GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
 (userdata)
            GetCooldownTimeRemaining        	= float GetCooldownTimeRemaining()
 (userdata)
            GetToggleState                  	= bool GetToggleState()
 (userdata)
            IsInAbilityPhase                	= bool IsInAbilityPhase()
Returns whether the ability is currently casting. (userdata)
            EndCooldown                     	= void EndCooldown()
Clear the cooldown remaining on this ability. (userdata)
            GetBehaviorInt                  	= int GetBehaviorInt()
Get ability behavior flags as an int for compatability. (userdata)
            ToggleAbility                   	= void ToggleAbility()
 (userdata)
            OnSpellStart                    	= void OnSpellStart()
 (userdata)
            GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
 (userdata)
            IsToggle                        	= bool IsToggle()
 (userdata)
            GetAbilityDamageType            	= int GetAbilityDamageType()
 (userdata)
            RequiresFacing                  	= bool RequiresFacing()
 (userdata)
            GetAutoCastState                	= bool GetAutoCastState()
 (userdata)
            DecrementModifierRefCount       	= void DecrementModifierRefCount()
 (userdata)
            IsItem                          	= bool IsItem()
 (userdata)
            UseResources                    	= void UseResources(bool bMana, bool bGold, bool bCooldown)
 (userdata)
            IsAttributeBonus                	= bool IsAttributeBonus()
 (userdata)
            MarkAbilityButtonDirty          	= void MarkAbilityButtonDirty()
Mark the ability button for this ability as needing a refresh. (userdata)
            GetAbilityTargetFlags           	= int GetAbilityTargetFlags()
 (userdata)
            SetOverrideCastPoint            	= void SetOverrideCastPoint(float flCastPoint)
 (userdata)
            GetCloneSource                  	= handle GetCloneSource()
 (userdata)
            CreateVisibilityNode            	= void CreateVisibilityNode(Vector vLocation, float fRadius, float fDuration)
 (userdata)
            ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
 (userdata)
            SetRefCountsModifiers           	= void SetRefCountsModifiers(bool bRefCounts)
 (userdata)
            UpgradeAbility                  	= void UpgradeAbility(bool bSupressSpeech)
 (userdata)
            SetFrozenCooldown               	= void SetFrozenCooldown(bool bFrozenCooldown)
 (userdata)
            ShouldUseResources              	= bool ShouldUseResources()
 (userdata)
            GetUpgradeRecommended           	= bool GetUpgradeRecommended()
 (userdata)
            GetModifierValueBonus           	= float GetModifierValueBonus()
 (userdata)
            SetUpgradeRecommended           	= void SetUpgradeRecommended(bool bUpgradeRecommended)
 (userdata)
            GetCursorPosition               	= Vector GetCursorPosition()
 (userdata)
            CanAbilityBeUpgraded            	= <unknown> CanAbilityBeUpgraded()
 (userdata)
            ContinueCasting                 	= bool ContinueCasting()
 (userdata)
            IsOwnersManaEnough              	= bool IsOwnersManaEnough()
 (userdata)
            HeroXPChange                    	= bool HeroXPChange(float flXP)
 (userdata)
            StartCooldown                   	= void StartCooldown(float flCooldown)
 (userdata)
            RefundManaCost                  	= void RefundManaCost()
 (userdata)
            GetAbilityTargetTeam            	= int GetAbilityTargetTeam()
 (userdata)
            GetAnimationIgnoresModelScale   	= bool GetAnimationIgnoresModelScale()
 (userdata)
            GetAbilityIndex                 	= int GetAbilityIndex()
 (userdata)
            OnHeroLevelUp                   	= void OnHeroLevelUp()
 (userdata)
            GetMaxAbilityCharges            	= int GetMaxAbilityCharges(int iLevel)
 (userdata)
            SetInAbilityPhase               	= void SetInAbilityPhase(bool bInAbilityPhase)
 (userdata)
            GetDuration                     	= float GetDuration()
 (userdata)
            IsChanneling                    	= bool IsChanneling()
Returns whether the ability is currently channeling. (userdata)
            GetAbilityTargetType            	= int GetAbilityTargetType()
 (userdata)
            SetStealable                    	= void SetStealable(bool bStealable)
 (userdata)
            RefreshCharges                  	= void RefreshCharges()
 (userdata)
            IsFullyCastable                 	= bool IsFullyCastable()
Returns whether the ability can be cast. (userdata)
            GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Gets the cast range of the ability. (userdata)
            SpeakTrigger                    	= <unknown> SpeakTrigger()
 (userdata)
            SetChanneling                   	= void SetChanneling(bool bChanneling)
 (userdata)
            GetChannelStartTime             	= float GetChannelStartTime()
 (userdata)
            OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
 (userdata)
            ProcsMagicStick                 	= bool ProcsMagicStick()
 (userdata)
            GetCooldown                     	= float GetCooldown(int iLevel)
Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left. (userdata)
            GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
 (userdata)
            IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
 (userdata)
            CastAbility                     	= bool CastAbility()
 (userdata)
            IsOwnersGoldEnough              	= bool IsOwnersGoldEnough(int nIssuerPlayerID)
 (userdata)
            IsHidden                        	= bool IsHidden()
 (userdata)
            GetLevelSpecialValueFor         	= table GetLevelSpecialValueFor(string szName, int nLevel)
 (userdata)
            SetAbilityIndex                 	= void SetAbilityIndex(int iIndex)
 (userdata)
            IsCooldownReady                 	= bool IsCooldownReady()
 (userdata)
            GetCastPoint                    	= float GetCastPoint()
 (userdata)
            OnUpgrade                       	= void OnUpgrade()
 (userdata)
            GetLevel                        	= int GetLevel()
Get the current level of the ability. (userdata)
            GetSpecialValueFor              	= table GetSpecialValueFor(string szName)
Gets a value from this ability's special value block for its current level. (userdata)
            GetStolenActivityModifier       	= string GetStolenActivityModifier()
 (userdata)
            GetEffectiveCooldown            	= float GetEffectiveCooldown(int iLevel)
 (userdata)
            GetBehavior                     	= int GetBehavior()
 (userdata)
            GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
 (userdata)
            IsStealable                     	= bool IsStealable()
 (userdata)
            EndChannel                      	= void EndChannel(bool bInterrupted)
 (userdata)
            PayGoldCostForUpgrade           	= void PayGoldCostForUpgrade()
 (userdata)
            OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
 (userdata)
            SetLevel                        	= void SetLevel(int iLevel)
Sets the level of this ability. (userdata)
            OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
 (userdata)
            SetActivated                    	= void SetActivated(bool bActivated)
 (userdata)
            GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
 (userdata)
            IsOwnersGoldEnoughForUpgrade    	= bool IsOwnersGoldEnoughForUpgrade()
 (userdata)
            IsTrained                       	= bool IsTrained()
 (userdata)
            NumModifiersUsingAbility        	= int NumModifiersUsingAbility()
 (userdata)
            GetAbilityKeyValues             	= table GetAbilityKeyValues()
Gets the key values definition for this ability. (userdata)
            GetAbilityType                  	= int GetAbilityType()
 (userdata)
            IncrementModifierRefCount       	= void IncrementModifierRefCount()
 (userdata)
            PayGoldCost                     	= void PayGoldCost()
 (userdata)
            GetManaCost                     	= int GetManaCost(int iLevel)
 (userdata)
            IsCosmetic                      	= bool IsCosmetic(handle hEntity)
 (userdata)
            GetConceptRecipientType         	= int GetConceptRecipientType()
 (userdata)
            GetMaxLevel                     	= int GetMaxLevel()
 (userdata)
            IsRefreshable                   	= bool IsRefreshable()
 (userdata)
            GetSharedCooldownName           	= string GetSharedCooldownName()
 (userdata)
            GetAOERadius                    	= int GetAOERadius()
 (userdata)
            GetLevelSpecialValueNoOverride  	= table GetLevelSpecialValueNoOverride(string szName, int nLevel)
 (userdata)
            IsStolen                        	= bool IsStolen()
 (userdata)
            RefCountsModifiers              	= bool RefCountsModifiers()
 (userdata)
            GetAbilityDamage                	= int GetAbilityDamage()
 (userdata)
            GetCursorTarget                 	= handle GetCursorTarget()
 (userdata)
            GetCaster                       	= handle GetCaster()
 (userdata)
            OnOwnerSpawned                  	= void OnOwnerSpawned()
 (userdata)
            GetChannelTime                  	= float GetChannelTime()
 (userdata)
            OnOwnerDied                     	= void OnOwnerDied()
 (userdata)
            GetHeroLevelRequiredToUpgrade   	= int GetHeroLevelRequiredToUpgrade()
 (userdata)
            GetGoldCost                     	= int GetGoldCost(int iLevel)
 (userdata)
            SetStolen                       	= void SetStolen(bool bStolen)
 (userdata)
            GetGoldCostForUpgrade           	= int GetGoldCostForUpgrade(int iLevel)
 (userdata)
            SpeakAbilityConcept             	= void SpeakAbilityConcept(int iConcept)
 (userdata)
            OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
 (userdata)
            OnChannelThink                  	= void OnChannelThink(float flInterval)
 (userdata)
            GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
 (userdata)
            GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Gets the cast range of the ability, taking modifiers into account. (userdata)
            GetCurrentAbilityCharges        	= int GetCurrentAbilityCharges()
 (userdata)
            IsActivated                     	= bool IsActivated()
 (userdata)
            OnToggle                        	= void OnToggle()
 (userdata)
         }
         SetActivated                    	= function: 0x0117cf38 (function)
         IsTrained                       	= function: 0x0117be30 (function)
         GetAssociatedPrimaryAbilities   	= function: 0x01180db8 (function)
         IsOwnersGoldEnoughForUpgrade    	= function: 0x0117d538 (function)
         IsCosmetic                      	= function: 0x011f85a0 (function)
         GetAOERadius                    	= function: 0x0117cab0 (function)
         GetCaster                       	= function: 0x0117bd58 (function)
         GetGoldCost                     	= function: 0x011804e0 (function)
         CastAbility                     	= function: 0x0117c820 (function)
         GetCursorTarget                 	= function: 0x0117bdb0 (function)
         IncrementModifierRefCount       	= function: 0x0117dff8 (function)
         GetAbilityKeyValues             	= function: 0x0117bc58 (function)
         GetConceptRecipientType         	= function: 0x01180a20 (function)
         GetAbilityDamage                	= function: 0x0117d5c8 (function)
         IsRefreshable                   	= function: 0x0117cd30 (function)
         GetSharedCooldownName           	= function: 0x0117e5b8 (function)
         SetLevel                        	= function: 0x0117c0e0 (function)
         GetLevelSpecialValueNoOverride  	= function: 0x0117e9f0 (function)
         IsStolen                        	= function: 0x01181170 (function)
         RefCountsModifiers              	= function: 0x0117df70 (function)
         PayGoldCost                     	= function: 0x0117d3a8 (function)
         GetCloneSource                  	= function: 0x0117d6a8 (function)
         NumModifiersUsingAbility        	= function: 0x0117e118 (function)
         OnChannelFinish                 	= function: 0x011800c8 (function)
         OnOwnerSpawned                  	= function: 0x011801c8 (function)
         OnOwnerDied                     	= function: 0x011802c8 (function)
         GetHeroLevelRequiredToUpgrade   	= function: 0x0117c1e8 (function)
         GetManaCost                     	= function: 0x011803d0 (function)
         SetStolen                       	= function: 0x011810f0 (function)
         GetGoldCostForUpgrade           	= function: 0x01180560 (function)
         SpeakAbilityConcept             	= function: 0x01180998 (function)
         OnHeroCalculateStatBonus        	= function: 0x01180780 (function)
         OnChannelThink                  	= function: 0x01180890 (function)
         GetIntrinsicModifierName        	= function: 0x011805e8 (function)
         IsNull                          	= function: 0x0117bbd0 (function)
         GetCurrentAbilityCharges        	= function: 0x01181538 (function)
         IsActivated                     	= function: 0x0117c470 (function)
         OnToggle                        	= function: 0x01180248 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      FDesc                           	= table: 0x011afb28 (table)
      {
         SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
      }
      IsNull                          	= function: 0x011afac8 (function)
      SetPlaybackRate                 	= function: 0x011afb50 (function)
   }
   MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE	= 57 (number)
   ACT_STEP_FORE                   	= 144 (number)
   PauseGame                       	= function: 0x01144f80 (function)
   ACT_SLAM_TRIPMINE_DRAW          	= 251 (number)
   ACT_MP_JUMP_MELEE               	= 627 (number)
   MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE	= 47 (number)
   ACT_MP_ATTACK_STAND_POSTFIRE    	= 549 (number)
   ACT_OVERLAY_SHIELD_UP_IDLE      	= 447 (number)
   DOTA_LOADOUT_TYPE_BELT          	= 8 (number)
   DOTA_TEAM_CUSTOM_7              	= 12 (number)
   ACT_VICTORY_DANCE               	= 113 (number)
   MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING	= 165 (number)
   ACT_FLINCH_STOMACH              	= 120 (number)
   ACT_RUN                         	= 10 (number)
   IsLocationVisible               	= function: 0x01150070 (function)
   Rad2Deg                         	= function: 0x011c1828 (function)
   ACT_DOTA_RELAX_END              	= 1610 (number)
   ACT_DOTA_CAST_LIFE_BREAK_START  	= 1563 (number)
   MELEE_HIT_WORLD                 	= 6 (number)
   ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE	= 312 (number)
   ACT_DOTA_RELAX_START            	= 1608 (number)
   DumpSpawnGroupEntityFilters     	= function: 0x011b4048 (function)
   OVERHEAD_ALERT_MAGICAL_BLOCK    	= 16 (number)
   ACT_BUSY_LEAN_LEFT              	= 381 (number)
   ACT_GRABBITYGLOVES_RELEASE      	= 956 (number)
   ACT_MP_CROUCHWALK               	= 511 (number)
   DAMAGE_TYPE_MAGICAL             	= 2 (number)
   ACT_SCRIPT_CUSTOM_4             	= 915 (number)
   DOTA_ABILITY_BEHAVIOR_OVERSHOOT 	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_TOGGLE    	= 512 (number)
   ACT_JUMP_AUTOGUN                	= 883 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2	= 78 (number)
   ACT_VM_DRYFIRE                  	= 196 (number)
   ACT_DOTA_WHIRLING_AXES_RANGED   	= 1669 (number)
   ACT_SLAM_STICKWALL_ND_DRAW      	= 233 (number)
   StartSoundEventUnreliable       	= function: 0x0113d638 (function)
   ACT_IDLE_AGITATED               	= 80 (number)
   ACT_SMG2_RELOAD2                	= 268 (number)
   DOTA_HEROPICK_STATE_CM_BAN9     	= 15 (number)
   ACT_CSGO_LAND_LIGHT             	= 1023 (number)
   AE_CL_CLOTH_ATTR                	= 42 (number)
   ACT_MP_CROUCHWALK_ITEM2         	= 664 (number)
   ACT_RUN_RIFLE_STIMULATED        	= 330 (number)
   DOTA_STASH_SLOT_2               	= 10 (number)
   GetTargetLinearLocation         	= function: 0x011468e0 (function)
   ACT_VM_SECONDARYATTACK          	= 194 (number)
   ACT_RUN_AIM_PISTOL              	= 367 (number)
   ACT_IDLE_SMG1_STIMULATED        	= 326 (number)
   MODIFIER_ATTRIBUTE_MULTIPLE     	= 2 (number)
   type                            	= function: builtin#3 (function)
   MODIFIER_PROPERTY_INVISIBILITY_LEVEL	= 13 (number)
   MODIFIER_PROPERTY_REINCARNATION 	= 114 (number)
   ACT_IDLE                        	= 1 (number)
   ACT_DROP_WEAPON_SHOTGUN         	= 74 (number)
   VectorLerp                      	= function: 0x011d89e8 (function)
   ACT_DOTA_THIRST                 	= 1537 (number)
   ACT_RUN_CROUCH                  	= 12 (number)
   ACT_PDA_VM_RELOAD               	= 847 (number)
   ACT_SECONDARY_VM_PRIMARYATTACK  	= 823 (number)
   ACT_ITEM1_VM_SECONDARYATTACK    	= 857 (number)
   ACT_ITEM2_VM_SECONDARYATTACK    	= 868 (number)
   MODIFIER_STATE_NOT_ON_MINIMAP   	= 20 (number)
   DOTA_ModifyGold_PurchaseConsumable	= 3 (number)
   ACT_DOTA_CHILLING_TOUCH         	= 1673 (number)
   DOTA_MINIMAP_EVENT_RADAR        	= 4096 (number)
   ACT_TURN                        	= 462 (number)
   DOTA_UNIT_ORDER_TRAIN_ABILITY   	= 11 (number)
   ACT_MP_SECONDARY_GRENADE1_DRAW  	= 701 (number)
   ACT_RANGE_ATTACK_PISTOL         	= 284 (number)
   ACT_DOTA_IDLE_RARE              	= 1501 (number)
   DOTA_LOADOUT_TYPE_BODY_HEAD     	= 16 (number)
   ACT_VM_SPRINT_IDLE              	= 434 (number)
   ACT_ITEM2_VM_RELOAD             	= 869 (number)
   ACT_CROUCHING_SHIELD_UP_IDLE    	= 457 (number)
   ACT_MP_STAND_ITEM2              	= 659 (number)
   _sourceline                     	= function: 0x011c6350 (function)
   ACT_DOTA_GESTURE_ACCENT         	= 1625 (number)
   DOTA_RUNE_INVALID               	= -1 (number)
   ACT_SLAM_STICKWALL_ATTACH2      	= 227 (number)
   MODIFIER_STATE_BLIND            	= 30 (number)
   ACT_MP_CROUCH_DEPLOYED          	= 506 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_BUILDING	= 795 (number)
   DOTA_ModifyGold_CheatCommand    	= 8 (number)
   GetTeamHeroKills                	= function: 0x01146ed0 (function)
   ACT_SCRIPT_CUSTOM_15            	= 926 (number)
   PrecacheResource                	= function: 0x01145e18 (function)
   assert                          	= function: builtin#2 (function)
   ACT_CSGO_SILENCER_DETACH        	= 1009 (number)
   SPECIAL1                        	= 8 (number)
   ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED	= 423 (number)
   ACT_FLICK_LEFT                  	= 900 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP	= 584 (number)
   ACT_ITEM2_VM_IDLE_LOWERED       	= 872 (number)
   DOTA_LOADOUT_TYPE_HEAD          	= 4 (number)
   AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT	= 51 (number)
   MODIFIER_STATE_DOMINATED        	= 29 (number)
   DOTA_DEFAULT_UI_ENDGAME_CHAT    	= 23 (number)
   MODIFIER_PROPERTY_PROJECTILE_NAME	= 113 (number)
   ACT_MP_ATTACK_CROUCH_ITEM2      	= 672 (number)
   ACT_CROUCHIDLE_AGITATED         	= 105 (number)
   ACT_DOTA_TELEPORT_STATUE        	= 1771 (number)
   ACT_STEP_BACK                   	= 143 (number)
   ACT_DOTA_WEAVERBUG_ATTACH       	= 1561 (number)
   ACT_MP_RELOAD_STAND             	= 536 (number)
   SpawnEntityListFromTableAsynchronous	= function: 0x0113e070 (function)
   ACT_DOTA_FLEE                   	= 1685 (number)
   ACT_DOTA_BELLYACHE_END          	= 1614 (number)
   DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS	= 1 (number)
   ACT_DOTA_CAST_REFRACTION        	= 1597 (number)
   DOTA_MAX_ABILITIES              	= 32 (number)
   ACT_MP_SPRINT                   	= 512 (number)
   ScriptDebugTextDraw             	= function: 0x011b3320 (function)
   next                            	= function: builtin#4 (function)
   ACT_MP_ATTACK_STAND_GRENADE_SECONDARY	= 617 (number)
   ACT_WALK_AIM_RIFLE_STIMULATED   	= 332 (number)
   ACT_DI_ALYX_ZOMBIE_SHOTGUN26    	= 418 (number)
   GetWorldMaxY                    	= function: 0x01144d80 (function)
   ACT_MP_ATTACK_STAND_PDA         	= 755 (number)
   DOTA_LOADOUT_TYPE_BLINK_EFFECT  	= 70 (number)
   FCVAR_DEMO                      	= 65536 (number)
   ACT_DOTA_MK_STRIKE              	= 1715 (number)
   MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT	= 63 (number)
   ACT_PDA_VM_SECONDARYATTACK      	= 846 (number)
   ACT_DOTA_TELEPORT_END_REACT     	= 1632 (number)
   ACT_MELEE_VM_IDLE_LOWERED       	= 839 (number)
   AE_CL_HIDE_PARTICLE_EFFECT      	= 18 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING	= 793 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_MELEE	= 775 (number)
   DOTA_ITEM_SLOT_3                	= 2 (number)
   FireGameEvent                   	= function: 0x0113da70 (function)
   ACT_RUN_AIM                     	= 11 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR     	= 27 (number)
   ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY	= 950 (number)
   DOTA_TEAM_CUSTOM_6              	= 11 (number)
   ACT_IDLE_SMG1_RELAXED           	= 325 (number)
   ACT_DOTA_SPAWN_STATUE           	= 1774 (number)
   PRESENSING                      	= 1 (number)
   DOTA_HUD_VISIBILITY_ACTION_PANEL	= 3 (number)
   ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE	= 533 (number)
   VectorDistanceSq                	= function: 0x011c54d0 (function)
   ExecuteOrderFromTable           	= function: 0x01129748 (function)
   MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL	= 6 (number)
   math                            	= table: 0x01114cb0 (table)
   {
      ceil                            	= function: builtin#39 (function)
      tan                             	= function: builtin#45 (function)
      huge                            	= inf (number)
      log10                           	= function: builtin#41 (function)
      randomseed                      	= function: builtin#64 (function)
      cos                             	= function: builtin#44 (function)
      sinh                            	= function: builtin#49 (function)
      random                          	= function: builtin#63 (function)
      mod                             	= function: builtin#59 (function)
      pi                              	= 3.1415926535898 (number)
      max                             	= function: builtin#62 (function)
      atan2                           	= function: builtin#57 (function)
      ldexp                           	= function: builtin#60 (function)
      floor                           	= function: builtin#38 (function)
      sqrt                            	= function: builtin#40 (function)
      deg                             	= function: builtin#54 (function)
      atan                            	= function: builtin#48 (function)
      fmod                            	= function: builtin#59 (function)
      acos                            	= function: builtin#47 (function)
      pow                             	= function: builtin#58 (function)
      abs                             	= function: builtin#37 (function)
      min                             	= function: builtin#61 (function)
      log                             	= function: builtin#56 (function)
      frexp                           	= function: builtin#52 (function)
      sin                             	= function: builtin#43 (function)
      tanh                            	= function: builtin#51 (function)
      exp                             	= function: builtin#42 (function)
      modf                            	= function: builtin#53 (function)
      cosh                            	= function: builtin#50 (function)
      asin                            	= function: builtin#46 (function)
      rad                             	= function: builtin#55 (function)
   }
   MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION	= 171 (number)
   ACT_OVERLAY_SHIELD_DOWN         	= 446 (number)
   ACT_MP_ATTACK_SWIM_PRIMARY      	= 572 (number)
   ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK	= 971 (number)
   ACT_DYINGLOOP                   	= 430 (number)
   ACT_CROUCH_IDLE_SHOTGUN         	= 894 (number)
   DOTA_DEFAULT_UI_TOP_HEROES      	= 1 (number)
   ACT_ITEM2_VM_IDLE_TO_LOWERED    	= 871 (number)
   ACT_VR_SHOTGUN_RELOAD_1         	= 974 (number)
   ACT_IDLE_AUTOGUN                	= 878 (number)
   PrecacheUnitFromTableSync       	= function: 0x01145188 (function)
   ACT_PLAYER_CROUCH_WALK_FIRE     	= 490 (number)
   ACT_DOTA_NIAN_PIN_START         	= 1655 (number)
   OVERHEAD_ALERT_CRITICAL         	= 2 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1	= 77 (number)
   ACT_BARNACLE_CHOMP              	= 177 (number)
   DOTA_HUD_VISIBILITY_ENDGAME     	= 22 (number)
   __RegisterGameEventListeners    	= function: 0x011b19e8 (function)
   DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK	= 131072 (number)
   ACT_VM_DETACH_SILENCER          	= 223 (number)
   ACT_SCRIPT_CUSTOM_14            	= 925 (number)
   DOTA_LOADOUT_TYPE_PERSONA_SELECTOR	= 57 (number)
   ACT_FLINCH_STOMACH_BACK         	= 128 (number)
   DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS	= 2097152 (number)
   DOTA_UNIT_TARGET_NONE           	= 0 (number)
   DOTA_HEROPICK_STATE_CM_SELECT6  	= 26 (number)
   DOTA_ATTRIBUTE_AGILITY_ARMOR    	= 4 (number)
   DOTA_HEROPICK_STATE_CM_BAN8     	= 14 (number)
   OVERHEAD_ALERT_EVADE            	= 7 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_1  	= 1526 (number)
   ACT_RANGE_ATTACK_RPG            	= 290 (number)
   ACT_SHOTGUN_PUMP                	= 264 (number)
   ACT_SLAM_STICKWALL_ND_ATTACH2   	= 229 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE	= 16384 (number)
   ACT_PRIMARY_VM_IDLE_TO_LOWERED  	= 816 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_ITEM1	= 784 (number)
   ScriptDebugHook                 	= function: 0x011b34c8 (function)
   ACT_SCRIPT_CUSTOM_1             	= 912 (number)
   MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS	= 36 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_PDA  	= 802 (number)
   ACT_VM_IDLE_EMPTY_LEFT          	= 482 (number)
   ACT_MP_JUMP                     	= 513 (number)
   ACT_DOTA_IDLE_SLEEPING          	= 1622 (number)
   ACT_DOTA_LIFESTEALER_RAGE       	= 1566 (number)
   ACT_DOTA_ALCHEMIST_CONCOCTION   	= 1573 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY	= 765 (number)
   UF_FAIL_CONSIDERED_HERO         	= 4 (number)
   ACT_DOTA_DISABLED               	= 1509 (number)
   ACT_GESTURE_TURN_RIGHT90        	= 170 (number)
   ACT_MP_ATTACK_STAND_PRIMARYFIRE 	= 522 (number)
   _DeepPrintTable                 	= function: 0x011dde00 (function)
   ACT_SLEEP                       	= 898 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG1   	= 303 (number)
   ACT_VR_PISTOL_BURST_ATTACK      	= 986 (number)
   ACT_PDA_VM_PRIMARYATTACK        	= 845 (number)
   ACT_MP_GRENADE1_DRAW            	= 689 (number)
   ACT_90_RIGHT                    	= 140 (number)
   ACT_COVER_LOW                   	= 5 (number)
   ACT_GESTURE_FLINCH_LEFTLEG      	= 163 (number)
   MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE	= 112 (number)
   ACT_MP_GESTURE_FLINCH_CHEST     	= 683 (number)
   MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE	= 248 (number)
   MODIFIER_PROPERTY_STATS_INTELLECT_BONUS	= 98 (number)
   ACT_WALK_RIFLE_RELAXED          	= 327 (number)
   ACT_DOTA_CENTAUR_STAMPEDE       	= 1611 (number)
   ACT_CROUCHING_SHIELD_ATTACK     	= 458 (number)
   LUA_MODIFIER_MOTION_NONE        	= 0 (number)
   FCVAR_NOTIFY                    	= 256 (number)
   ACT_GESTURE_RANGE_ATTACK_HMG1   	= 301 (number)
   DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION	= 3 (number)
   Clamp                           	= function: 0x011c1848 (function)
   ACT_MP_ATTACK_STAND_MELEE       	= 632 (number)
   AE_WPN_PLAYWPNSOUND             	= 34 (number)
   ACT_DIE_BACKSHOT                	= 117 (number)
   UF_FAIL_MAGIC_IMMUNE_ALLY       	= 16 (number)
   ACT_DOTA_FLINCH                 	= 1507 (number)
   DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING	= 1024 (number)
   ACT_MP_ATTACK_CROUCH_SECONDARY  	= 602 (number)
   ACT_MP_RELOAD_AIRWALK           	= 545 (number)
   ACT_ITEM1_VM_IDLE_LOWERED       	= 861 (number)
   MODIFIER_EVENT_ON_PROCESS_CLEAVE	= 193 (number)
   CenterCameraOnUnit              	= function: 0x01147270 (function)
   ACT_GRABBITYGLOVES_PULL         	= 961 (number)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP	= 1552 (number)
   ACT_PLAYER_WALK_FIRE            	= 491 (number)
   ACT_GRABBITYGLOVES_ACTIVE       	= 958 (number)
   rawset                          	= function: builtin#13 (function)
   ACT_SHIELD_UP_IDLE              	= 452 (number)
   MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE	= 251 (number)
   ACT_DOTA_MINI_TAUNT             	= 1681 (number)
   DOTA_UNIT_ORDER_CONTINUE        	= 33 (number)
   DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1	= 36 (number)
   ACT_CSGO_TWITCH_BUYZONE         	= 1012 (number)
   DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1	= 47 (number)
   ACT_VM_PRIMARYATTACK_SILENCED   	= 477 (number)
   ACT_VM_IS_PRIMARYATTACK         	= 487 (number)
   ACT_VM_HOLSTER                  	= 184 (number)
   coroutine                       	= table: 0x01113708 (table)
   {
      yield                           	= function: builtin#33 (function)
      wrap                            	= function: builtin#36 (function)
      status                          	= function: builtin#30 (function)
      resume                          	= function: builtin#34 (function)
      running                         	= function: builtin#31 (function)
      create                          	= function: builtin#32 (function)
   }
   DOTA_PROJECTILE_ATTACHMENT_LAST 	= 6 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_PROTECT	= 10 (number)
   FIND_FARTHEST                   	= 2 (number)
   MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER	= 66 (number)
   PlayerInstanceFromIndex         	= function: 0x0113dc90 (function)
   NDEBUG_PERSIST_TILL_NEXT_SERVER 	= 0.01023 (number)
   DebugScreenTextPretty           	= function: 0x0113f768 (function)
   ACT_DOTA_WAIT_IDLE              	= 1689 (number)
   ACT_MP_ATTACK_SWIM_BUILDING     	= 738 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS	= 80 (number)
   DOTA_DAMAGE_FLAG_BYPASSES_BLOCK 	= 8 (number)
   ACT_RELOAD_SMG1                 	= 373 (number)
   DOTA_HEROPICK_STATE_CM_BAN11    	= 17 (number)
   ACT_DOTA_ATTACK_STATUE          	= 1765 (number)
   ACT_VM_PICKUP                   	= 219 (number)
   QUEST_TEXT_REPLACE_VALUE_REWARD 	= 3 (number)
   DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK	= 4 (number)
   DMG_BULLET                      	= 2 (number)
   ACT_MP_CROUCHWALK_BUILDING      	= 730 (number)
   DOTA_TEAM_CUSTOM_MIN            	= 6 (number)
   DOTA_CONNECTION_STATE_CONNECTED 	= 2 (number)
   ACT_DOTA_STATIC_STORM           	= 1680 (number)
   ACT_DOTA_GREET                  	= 1690 (number)
   DOTA_ModifyGold_AbilityCost     	= 7 (number)
   CDOTA_Item_EmptyBottle          	= table: 0x011aa828 (table)
   {
      metatable = table: 0x0117ebf0
      {
         GetInitialCharges               	= function: 0x0117f098 (function)
         LaunchLootRequiredHeight        	= function: 0x01185580 (function)
         IsRecipeGenerated               	= function: 0x0117f948 (function)
         GetShareability                 	= function: 0x0117f468 (function)
         IsItem                          	= function: 0x0117f7e8 (function)
         IsDisassemblable                	= function: 0x0117f1a8 (function)
         GetCurrentCharges               	= function: 0x0117f120 (function)
         GetSecondaryCharges             	= function: 0x0117f3b8 (function)
         FDesc                           	= table: 0x0117ec78 (table)
         {
            GetInitialCharges               	= int GetInitialCharges()
Get the initial number of charges this item has. (userdata)
            LaunchLootRequiredHeight        	= void LaunchLootRequiredHeight(bool bAutoUse, float flRequiredHeight, float flHeight, float flDuration, Vector vEndPoint)
 (userdata)
            IsRecipeGenerated               	= bool IsRecipeGenerated()
 (userdata)
            GetShareability                 	= int GetShareability()
 (userdata)
            IsItem                          	= bool IsItem()
 (userdata)
            IsDisassemblable                	= bool IsDisassemblable()
 (userdata)
            GetCurrentCharges               	= int GetCurrentCharges()
Get the number of charges this item currently has. (userdata)
            GetSecondaryCharges             	= int GetSecondaryCharges()
Get the number of secondary charges this item currently has. (userdata)
            IsMuted                         	= bool IsMuted()
 (userdata)
            IsCastOnPickup                  	= bool IsCastOnPickup()
 (userdata)
            SetOnlyPlayerHeroPickup         	= void SetOnlyPlayerHeroPickup(bool bOnlyPlayerHero)
 (userdata)
            GetValuelessCharges             	= int GetValuelessCharges()
Get the number of valueless charges this item currently has. (userdata)
            SetPurchaseTime                 	= void SetPurchaseTime(float flTime)
Set the purchase time of this item (userdata)
            Think                           	= void Think()
Think this item (userdata)
            SetCanBeUsedOutOfInventory      	= void SetCanBeUsedOutOfInventory(bool bValue)
 (userdata)
            GetItemSlot                     	= int GetItemSlot()
 (userdata)
            CanBeUsedOutOfInventory         	= bool CanBeUsedOutOfInventory()
 (userdata)
            ModifyNumValuelessCharges       	= void ModifyNumValuelessCharges(int iCharges)
Modifies the number of valueless charges on this item (userdata)
            IsPermanent                     	= bool IsPermanent()
Is this a permanent item? (userdata)
            IsCombinable                    	= bool IsCombinable()
 (userdata)
            IsKillable                      	= bool IsKillable()
 (userdata)
            SetCastOnPickup                 	= void SetCastOnPickup(bool bCastOnPickUp)
 (userdata)
            IsAlertableItem                 	= bool IsAlertableItem()
 (userdata)
            SpendCharge                     	= void SpendCharge()
 (userdata)
            IsStackable                     	= bool IsStackable()
 (userdata)
            GetParent                       	= handle GetParent()
Get the parent for this item. (userdata)
            SetSecondaryCharges             	= void SetSecondaryCharges(int iCharges)
Set the number of secondary charges on this item (userdata)
            IsInBackpack                    	= bool IsInBackpack()
 (userdata)
            IsPurchasable                   	= bool IsPurchasable()
 (userdata)
            StacksWithOtherOwners           	= bool StacksWithOtherOwners()
 (userdata)
            IsCombineLocked                 	= bool IsCombineLocked()
 (userdata)
            LaunchLoot                      	= void LaunchLoot(bool bAutoUse, float flHeight, float flDuration, Vector vEndPoint)
 (userdata)
            GetCost                         	= int GetCost()
 (userdata)
            SetCurrentCharges               	= void SetCurrentCharges(int iCharges)
Set the number of charges on this item (userdata)
            SetCombineLocked                	= void SetCombineLocked(bool bCombineLocked)
 (userdata)
            SetSellable                     	= void SetSellable(bool bSellable)
 (userdata)
            SetDroppable                    	= void SetDroppable(bool bDroppable)
 (userdata)
            GetPurchaseTime                 	= float GetPurchaseTime()
Get the purchase time of this item (userdata)
            GetPurchaser                    	= handle GetPurchaser()
Get the purchaser for this item. (userdata)
            SetPurchaser                    	= void SetPurchaser(handle hPurchaser)
Set the purchaser of record for this item. (userdata)
            GetContainer                    	= handle GetContainer()
Get the container for this item. (userdata)
            SetItemState                    	= void SetItemState(int iState)
Sets whether item is unequipped or ready. (userdata)
            OnUnequip                       	= void OnUnequip()
 (userdata)
            GetItemState                    	= int GetItemState()
Gets whether item is unequipped or ready. (userdata)
            SetStacksWithOtherOwners        	= void SetStacksWithOtherOwners(bool bStacksWithOtherOwners)
 (userdata)
            LaunchLootInitialHeight         	= void LaunchLootInitialHeight(bool bAutoUse, float flInitialHeight, float flLaunchHeight, float flDuration, Vector vEndPoint)
 (userdata)
            IsDroppable                     	= bool IsDroppable()
 (userdata)
            IsRecipe                        	= bool IsRecipe()
 (userdata)
            IsSellable                      	= bool IsSellable()
 (userdata)
            OnEquip                         	= void OnEquip()
 (userdata)
            RequiresCharges                 	= bool RequiresCharges()
 (userdata)
            IsNeutralDrop                   	= bool IsNeutralDrop()
 (userdata)
            SetShareability                 	= void SetShareability(int iShareability)
 (userdata)
         }
         IsCastOnPickup                  	= function: 0x01184660 (function)
         SetOnlyPlayerHeroPickup         	= function: 0x0117f8c0 (function)
         GetValuelessCharges             	= function: 0x0117f330 (function)
         SetPurchaseTime                 	= function: 0x0117ec40 (function)
         Think                           	= function: 0x0117eca0 (function)
         SetCanBeUsedOutOfInventory      	= function: 0x01185610 (function)
         GetItemSlot                     	= function: 0x011857a8 (function)
         GetParent                       	= function: 0x01185828 (function)
         IsInBackpack                    	= function: 0x01185728 (function)
         CanBeUsedOutOfInventory         	= function: 0x011856a0 (function)
         ModifyNumValuelessCharges       	= function: 0x0117f5c8 (function)
         IsPermanent                     	= function: 0x0117fbc8 (function)
         IsCombinable                    	= function: 0x0117f840 (function)
         IsKillable                      	= function: 0x0117ee60 (function)
         SetCastOnPickup                 	= function: 0x011846e0 (function)
         IsAlertableItem                 	= function: 0x0117f230 (function)
         SpendCharge                     	= function: 0x0117f768 (function)
         IsStackable                     	= function: 0x0117fc20 (function)
         IsDroppable                     	= function: 0x0117ecd0 (function)
         SetSecondaryCharges             	= function: 0x0117f6e0 (function)
         LaunchLoot                      	= function: 0x01185478 (function)
         IsPurchasable                   	= function: 0x0117efd0 (function)
         SetCombineLocked                	= function: 0x011853f0 (function)
         IsCombineLocked                 	= function: 0x01185370 (function)
         SetSellable                     	= function: 0x0117ff48 (function)
         GetCost                         	= function: 0x0117fae8 (function)
         SetCurrentCharges               	= function: 0x0117f658 (function)
         SetDroppable                    	= function: 0x0117fec8 (function)
         GetPurchaser                    	= function: 0x0117fe48 (function)
         SetPurchaser                    	= function: 0x0117fdc8 (function)
         GetPurchaseTime                 	= function: 0x0117ef50 (function)
         GetContainer                    	= function: 0x0117fd48 (function)
         SetItemState                    	= function: 0x0117fcc8 (function)
         GetItemState                    	= function: 0x0117fb40 (function)
         SetStacksWithOtherOwners        	= function: 0x0117fa58 (function)
         OnUnequip                       	= function: 0x0117edb8 (function)
         StacksWithOtherOwners           	= function: 0x0117f9d0 (function)
         OnEquip                         	= function: 0x0117ed60 (function)
         LaunchLootInitialHeight         	= function: 0x011854f8 (function)
         IsMuted                         	= function: 0x01180028 (function)
         IsRecipe                        	= function: 0x0117ffa8 (function)
         IsSellable                      	= function: 0x0117f050 (function)
         IsNull                          	= function: 0x0117ec18 (function)
         RequiresCharges                 	= function: 0x0117f2b0 (function)
         SetShareability                 	= function: 0x0117f4e8 (function)
         IsNeutralDrop                   	= function: 0x0117f568 (function)
         IsHiddenAsSecondaryAbility      	= function: 0x01181060 (function)
         IsSharedWithTeammates           	= function: 0x0117ce30 (function)
         SetCurrentAbilityCharges        	= function: 0x01181390 (function)
         GetInitialAbilityCharges        	= function: 0x01181420 (function)
         ToggleAutoCast                  	= function: 0x0117cfb8 (function)
         RefreshIntrinsicModifier        	= function: 0x0117dbd0 (function)
         GetCastPointModifier            	= function: 0x0117ca28 (function)
         GetAbilityName                  	= function: 0x0117bff0 (function)
         PlaysDefaultAnimWhenStolen      	= function: 0x011811f0 (function)
         OnAbilityPhaseInterrupted       	= function: 0x0117dce8 (function)
         SetHidden                       	= function: 0x0117ceb8 (function)
         IsPassive                       	= function: 0x0117c278 (function)
         GetBackswingTime                	= function: 0x01180348 (function)
         GetCooldownTime                 	= function: 0x0117e640 (function)
         PayManaCost                     	= function: 0x0117d220 (function)
         GetModifierValue                	= function: 0x0117ccc8 (function)
         GetCursorTargetingNothing       	= function: 0x0117bf60 (function)
         GetCooldownTimeRemaining        	= function: 0x0117e6c0 (function)
         GetToggleState                  	= function: 0x0117d7b0 (function)
         IsInAbilityPhase                	= function: 0x01180bb0 (function)
         EndCooldown                     	= function: 0x0117e3b0 (function)
         GetBehaviorInt                  	= function: 0x0117d8b0 (function)
         ToggleAbility                   	= function: 0x0117c7a0 (function)
         OnSpellStart                    	= function: 0x0117dd78 (function)
         GetChannelledManaCostPerSecond  	= function: 0x01180450 (function)
         IsToggle                        	= function: 0x0117c398 (function)
         GetAbilityDamageType            	= function: 0x0117dac8 (function)
         RequiresFacing                  	= function: 0x01180d38 (function)
         GetAutoCastState                	= function: 0x0117d038 (function)
         DecrementModifierRefCount       	= function: 0x0117e088 (function)
         IsItem                          	= function: 0x0117d0c0 (function)
         UseResources                    	= function: 0x0117e860 (function)
         IsAttributeBonus                	= function: 0x0117e228 (function)
         MarkAbilityButtonDirty          	= function: 0x01180910 (function)
         GetAbilityTargetFlags           	= function: 0x0117da40 (function)
         SetOverrideCastPoint            	= function: 0x0117cc40 (function)
         GetChannelTime                  	= function: 0x0117d118 (function)
         CreateVisibilityNode            	= function: 0x0117d728 (function)
         ResetToggleOnRespawn            	= function: 0x01180678 (function)
         SetRefCountsModifiers           	= function: 0x0117dee8 (function)
         UpgradeAbility                  	= function: 0x0117c620 (function)
         SetFrozenCooldown               	= function: 0x0117e750 (function)
         ShouldUseResources              	= function: 0x0117e7d8 (function)
         GetUpgradeRecommended           	= function: 0x0117e8e0 (function)
         GetModifierValueBonus           	= function: 0x0117de60 (function)
         GetMaxLevel                     	= function: 0x0117db50 (function)
         GetCursorPosition               	= function: 0x0117bce0 (function)
         CanAbilityBeUpgraded            	= function: 0x0117c160 (function)
         ContinueCasting                 	= function: 0x0117cb30 (function)
         IsOwnersManaEnough              	= function: 0x0117d320 (function)
         HeroXPChange                    	= function: 0x01180810 (function)
         StartCooldown                   	= function: 0x0117e330 (function)
         RefundManaCost                  	= function: 0x0117d2a0 (function)
         GetAbilityTargetTeam            	= function: 0x0117d930 (function)
         GetAnimationIgnoresModelScale   	= function: 0x0117cbb0 (function)
         GetAbilityIndex                 	= function: 0x0117c520 (function)
         OnHeroLevelUp                   	= function: 0x01180700 (function)
         GetMaxAbilityCharges            	= function: 0x011814b0 (function)
         SetInAbilityPhase               	= function: 0x01180b28 (function)
         GetDuration                     	= function: 0x0117d650 (function)
         IsChanneling                    	= function: 0x01180cb8 (function)
         GetAbilityTargetType            	= function: 0x0117d9b8 (function)
         GetCastRange_Engine             	= function: 0x0117c8a0 (function)
         SetStealable                    	= function: 0x01180ed8 (function)
         RefreshCharges                  	= function: 0x01181310 (function)
         IsFullyCastable                 	= function: 0x0117e1a8 (function)
         GetCastRange                    	= function: 0x011f8580 (function)
         SpeakTrigger                    	= function: 0x01180aa8 (function)
         SetChanneling                   	= function: 0x01180c38 (function)
         GetChannelStartTime             	= function: 0x0117d198 (function)
         OnAbilityPinged                 	= function: 0x0117c6a0 (function)
         ProcsMagicStick                 	= function: 0x0117e2b0 (function)
         GetCooldown                     	= function: 0x0117e430 (function)
         GetAssociatedSecondaryAbilities 	= function: 0x01180e48 (function)
         IsHiddenWhenStolen              	= function: 0x01180fd8 (function)
         GetEffectiveCastRange           	= function: 0x0117c920 (function)
         IsOwnersGoldEnough              	= function: 0x0117d428 (function)
         IsHidden                        	= function: 0x0117c418 (function)
         GetLevelSpecialValueFor         	= function: 0x0117e968 (function)
         SetAbilityIndex                 	= function: 0x0117c070 (function)
         IsCooldownReady                 	= function: 0x0117e538 (function)
         GetCastPoint                    	= function: 0x0117c9a8 (function)
         OnUpgrade                       	= function: 0x01180148 (function)
         GetLevel                        	= function: 0x0117bed0 (function)
         GetSpecialValueFor              	= function: 0x0117ea80 (function)
         GetStolenActivityModifier       	= function: 0x01181280 (function)
         GetEffectiveCooldown            	= function: 0x0117e4b0 (function)
         GetBehavior                     	= function: 0x0117d830 (function)
         IsCosmetic_Engine               	= function: 0x0117cdb0 (function)
         GetAbilityType                  	= function: 0x0117c5a0 (function)
         GetPlaybackRateOverride         	= function: 0x0117c2c0 (function)
         IsStealable                     	= function: 0x01180f58 (function)
         EndChannel                      	= function: 0x0117c720 (function)
         SetUpgradeRecommended           	= function: 0x011815c8 (function)
         PayGoldCostForUpgrade           	= function: 0x0117d4b0 (function)
         OnAbilityPhaseStart             	= function: 0x0117dc60 (function)
         FDesc                           	= table: 0x0117bc30 (table, already seen)
         SetActivated                    	= function: 0x0117cf38 (function)
         IsTrained                       	= function: 0x0117be30 (function)
         GetAssociatedPrimaryAbilities   	= function: 0x01180db8 (function)
         IsOwnersGoldEnoughForUpgrade    	= function: 0x0117d538 (function)
         IsCosmetic                      	= function: 0x011f85a0 (function)
         GetAOERadius                    	= function: 0x0117cab0 (function)
         GetCaster                       	= function: 0x0117bd58 (function)
         GetGoldCost                     	= function: 0x011804e0 (function)
         CastAbility                     	= function: 0x0117c820 (function)
         GetCursorTarget                 	= function: 0x0117bdb0 (function)
         IncrementModifierRefCount       	= function: 0x0117dff8 (function)
         GetAbilityKeyValues             	= function: 0x0117bc58 (function)
         GetConceptRecipientType         	= function: 0x01180a20 (function)
         GetAbilityDamage                	= function: 0x0117d5c8 (function)
         IsRefreshable                   	= function: 0x0117cd30 (function)
         GetSharedCooldownName           	= function: 0x0117e5b8 (function)
         SetLevel                        	= function: 0x0117c0e0 (function)
         GetLevelSpecialValueNoOverride  	= function: 0x0117e9f0 (function)
         IsStolen                        	= function: 0x01181170 (function)
         RefCountsModifiers              	= function: 0x0117df70 (function)
         PayGoldCost                     	= function: 0x0117d3a8 (function)
         GetCloneSource                  	= function: 0x0117d6a8 (function)
         NumModifiersUsingAbility        	= function: 0x0117e118 (function)
         OnChannelFinish                 	= function: 0x011800c8 (function)
         OnOwnerSpawned                  	= function: 0x011801c8 (function)
         OnOwnerDied                     	= function: 0x011802c8 (function)
         GetHeroLevelRequiredToUpgrade   	= function: 0x0117c1e8 (function)
         GetManaCost                     	= function: 0x011803d0 (function)
         SetStolen                       	= function: 0x011810f0 (function)
         GetGoldCostForUpgrade           	= function: 0x01180560 (function)
         SpeakAbilityConcept             	= function: 0x01180998 (function)
         OnHeroCalculateStatBonus        	= function: 0x01180780 (function)
         OnChannelThink                  	= function: 0x01180890 (function)
         GetIntrinsicModifierName        	= function: 0x011805e8 (function)
         IsNull                          	= function: 0x0117bbd0 (function)
         GetCurrentAbilityCharges        	= function: 0x01181538 (function)
         IsActivated                     	= function: 0x0117c470 (function)
         OnToggle                        	= function: 0x01180248 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      ClearStoredRune                 	= function: 0x011aaa48 (function)
      FDesc                           	= table: 0x011aa8b0 (table)
      {
         SetStoredRune                   	= void SetStoredRune(int iRuneType)
Set the stored rune. (userdata)
         OnRune                          	= bool OnRune(int iRuneType)
Place a rune in the bottle. (userdata)
         ClearStoredRune                 	= void ClearStoredRune()
Clear the stored rune. (userdata)
      }
      IsNull                          	= function: 0x011aa850 (function)
      OnRune                          	= function: 0x011aa8d8 (function)
      SetStoredRune                   	= function: 0x011aa9c8 (function)
   }
   DOTA_LOADOUT_TYPE_WEATHER       	= 65 (number)
   MODIFIER_PROPERTY_SUPER_ILLUSION	= 153 (number)
   MODIFIER_PROPERTY_FIXED_NIGHT_VISION	= 145 (number)
   ACT_DOTA_RATTLETRAP_BATTERYASSAULT	= 1549 (number)
   ACT_DOTA_ES_STONE_CALLER        	= 1714 (number)
   ACT_WALK_AIM_RIFLE              	= 354 (number)
   CreateRune                      	= function: 0x01151d68 (function)
   ACT_MP_JUMP_START_BUILDING      	= 732 (number)
   ACT_SMG2_FIRE2                  	= 266 (number)
   ACT_SIGNAL_TAKECOVER            	= 59 (number)
   DOTA_LOADOUT_TYPE_KILL_EFFECT   	= 79 (number)
   ACT_BUSY_LEAN_BACK              	= 384 (number)
   pcall                           	= function: builtin#20 (function)
   ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING	= 743 (number)
   DOTA_ModifyGold_Building        	= 11 (number)
   DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL	= 4096 (number)
   DOTA_MINIMAP_EVENT_HINT_LOCATION	= 512 (number)
   DOTA_SHOP_CUSTOM                	= 6 (number)
   DOTA_LOADOUT_TYPE_MOUNT         	= 17 (number)
   ACT_DOTA_SLEEPING_END           	= 1626 (number)
   ACT_VM_MISSCENTER               	= 207 (number)
   ACT_VM_SPRINT_LEAVE             	= 435 (number)
   ShowMessage                     	= function: 0x0113cb00 (function)
   PATTACH_WORLDORIGIN             	= 8 (number)
   ScriptDebugAddWatchPattern      	= function: 0x011b2608 (function)
   DOTA_UNIT_ORDER_NONE            	= 0 (number)
   ACT_SCRIPT_CUSTOM_2             	= 913 (number)
   FireEntityIOInputVec            	= function: 0x0113c640 (function)
   ACT_MP_AIRWALK_ITEM2            	= 663 (number)
   ACT_MP_ATTACK_AIRWALK_SECONDARY 	= 604 (number)
   ACT_DOTA_ATTACK                 	= 1503 (number)
   EndScriptDebug                  	= function: 0x011b3790 (function)
   ACT_MP_RELOAD_AIRWALK_LOOP      	= 546 (number)
   ACT_SCRIPT_CUSTOM_22            	= 933 (number)
   DOTA_LOADOUT_TYPE_LOADING_SCREEN	= 64 (number)
   DOTA_UNIT_CAP_NO_ATTACK         	= 0 (number)
   ACT_MP_ATTACK_CROUCH_SECONDARYFIRE	= 528 (number)
   ACT_CROUCHING_SHIELD_KNOCKBACK  	= 459 (number)
   ACT_COVER                       	= 3 (number)
   MODIFIER_PROPERTY_IS_ILLUSION   	= 150 (number)
   ACT_DOTA_ITEM_LOOK              	= 1628 (number)
   DOTA_DEFAULT_MAX_TEAM_PLAYERS   	= 10 (number)
   UF_FAIL_COURIER                 	= 7 (number)
   ACT_MP_CROUCH_ITEM1             	= 643 (number)
   DOTA_MINIMAP_EVENT_MOVE_TO_TARGET	= 16384 (number)
   ScriptDebugDrawWatchesEnabled   	= true (boolean)
   instanceof                      	= function: 0x011c7168 (function)
   ACT_FLINCH_HEAD_BACK            	= 126 (number)
   ACT_MP_GESTURE_FLINCH_RIGHTARM  	= 686 (number)
   PrecacheUnitByNameSync_Engine   	= function: 0x011453b8 (function)
   AE_WPN_PRIMARYATTACK            	= 33 (number)
   DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN	= 37 (number)
   DOTA_INVENTORY_ALLOW_STASH      	= 2 (number)
   GetDedicatedServerKey           	= function: 0x01146cb0 (function)
   DOTA_PLAYER_LOADOUT_START       	= 58 (number)
   ACT_VR_SHOTGUN_GRENADE_TWIST    	= 987 (number)
   ACT_DOTA_INTRO_LOOP             	= 1649 (number)
   DMG_CLUB                        	= 128 (number)
   ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP	= 578 (number)
   MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS	= 217 (number)
   AE_IK_SET_LOCK_ROTATION_ALPHA   	= 38 (number)
   ACT_DI_ALYX_HEADCRAB_MELEE      	= 415 (number)
   ACT_MELEE_ATTACK_SWING          	= 291 (number)
   MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE	= 39 (number)
   ACT_DOTA_KILLTAUNT              	= 1535 (number)
   ACT_CROUCH_IDLE_DUAL            	= 890 (number)
   MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS	= 111 (number)
   ACT_MP_ATTACK_STAND_GRENADE_MELEE	= 638 (number)
   GetTargetAOELocation            	= function: 0x01146858 (function)
   UF_FAIL_CUSTOM                  	= 23 (number)
   ACT_DOTA_CAST_FORGE_SPIRIT_ORB  	= 1744 (number)
   DOTA_DEFAULT_UI_ACTION_PANEL    	= 3 (number)
   DOTA_ITEM_SLOT_1                	= 0 (number)
   DOTA_LOADOUT_TYPE_GLOVES        	= 11 (number)
   ACT_SHIELD_KNOCKBACK            	= 454 (number)
   module                          	= function: 0x01113e60 (function)
   ACT_RANGE_ATTACK_PISTOL_LOW     	= 285 (number)
   DOTA_ModifyGold_GameTick        	= 10 (number)
   ACT_RAGDOLL_RECOVERY_FRONT      	= 951 (number)
   GetGroundHeight                 	= function: 0x01145cc0 (function)
   ACT_CROSSBOW_DRAW_UNLOADED      	= 474 (number)
   ACT_MP_CROUCH_BUILDING          	= 726 (number)
   ACT_IDLE_MELEE                  	= 341 (number)
   DOTA_GC_TEAM_BAD_GUYS           	= 1 (number)
   ACT_WALK_AIM_AUTOGUN            	= 876 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS	= 14 (number)
   ACT_SHIPLADDER_UP               	= 36 (number)
   ACT_MP_JUMP_PRIMARY             	= 561 (number)
   ACT_WALK_RPG_RELAXED            	= 351 (number)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION	= 238 (number)
   UTIL_ResetMessageText           	= function: 0x011409e8 (function)
   ACT_MP_GESTURE_FLINCH_MELEE     	= 679 (number)
   ACT_IDLE_AIM_RIFLE_STIMULATED   	= 331 (number)
   DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY	= 4 (number)
   ACT_DOTA_AREA_DENY              	= 1661 (number)
   ACT_GAUSS_SPINUP                	= 475 (number)
   DOTA_DEFAULT_UI_ENDGAME         	= 22 (number)
   ACT_DOTA_ENFEEBLE               	= 1674 (number)
   ACT_MP_CROUCH_IDLE              	= 504 (number)
   DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR	= 2 (number)
   DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT	= 64 (number)
   DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD	= 2 (number)
   ACT_VM_MISSLEFT                 	= 203 (number)
   DOTA_HEROPICK_STATE_CM_BAN6     	= 12 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_PANEL	= 5 (number)
   DOTA_HEROPICK_STATE_CM_SELECT7  	= 27 (number)
   VectorIsZero                    	= function: 0x011d8a08 (function)
   AE_CL_MFOOTSTEP_LEFT_LOUD       	= 25 (number)
   ACT_RANGE_ATTACK_SLAM           	= 286 (number)
   AE_DOTA_PET_ITEM_DROP           	= 53 (number)
   MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE	= 95 (number)
   MODIFIER_FUNCTION_INVALID       	= 255 (number)
   ACT_DI_ALYX_ZOMBIE_MELEE        	= 413 (number)
   ACT_FLINCH_RIGHTARM             	= 122 (number)
   DOTA_HEROPICK_STATE_CM_SELECT3  	= 23 (number)
   DOTA_ModifyGold_RoshanKill      	= 15 (number)
   EntityClassNameOverrides        	= table: 0x011dc8c8 (table)
   {
   }
   ACT_GESTURE_FLINCH_HEAD         	= 158 (number)
   ACT_GESTURE_MELEE_ATTACK2       	= 148 (number)
   ACT_RELOAD_SUCCEED              	= 874 (number)
   ACT_VM_DEPLOY                   	= 181 (number)
   ACT_MELEE_VM_PRIMARYATTACK      	= 834 (number)
   ACT_RUN_AIM_AGITATED            	= 101 (number)
   ACT_SLAM_DETONATOR_IDLE         	= 256 (number)
   DOTA_TEAM_CUSTOM_3              	= 8 (number)
   Plat_FloatTime                  	= function: 0x0113d090 (function)
   ACT_DOTA_ECHO_SLAM              	= 1539 (number)
   FCVAR_PRINTABLEONLY             	= 1024 (number)
   newproxy                        	= function: builtin#28 (function)
   CDOTA_ShopTrigger               	= table: 0x011b3108 (table)
   {
      metatable = table: 0x011aa438
      {
         Enable                          	= function: 0x011aa5e0 (function)
         IsTouching                      	= function: 0x011aa4e8 (function)
         FDesc                           	= table: 0x011aa4c0 (table)
         {
            Enable                          	= void Enable()
Enable the trigger (userdata)
            IsTouching                      	= bool IsTouching(handle hEnt)
Checks whether the passed entity is touching the trigger. (userdata)
            Disable                         	= void Disable()
Disable's the trigger (userdata)
         }
         IsNull                          	= function: 0x011aa460 (function)
         Disable                         	= function: 0x011aa638 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      FDesc                           	= table: 0x011b3190 (table)
      {
         SetShopType                     	= void SetShopType(int eShopType)
Set the DOTA_SHOP_TYPE. (userdata)
         GetShopType                     	= int GetShopType()
Get the DOTA_SHOP_TYPE (userdata)
      }
      IsNull                          	= function: 0x011b3130 (function)
      GetShopType                     	= function: 0x011b3288 (function)
      SetShopType                     	= function: 0x011b31b8 (function)
   }
   ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE	= 500 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT	= 16 (number)
   ACT_IDLE_AIM_PISTOL             	= 884 (number)
   DOTA_HEROPICK_STATE_CM_SELECT10 	= 30 (number)
   ACT_MP_WALK                     	= 509 (number)
   MODIFIER_PROPERTY_FIXED_ATTACK_RATE	= 30 (number)
   ACT_DOTA_CAGED_CREEP_RAGE_OUT   	= 1645 (number)
   DOTA_HEROPICK_STATE_SCENARIO_PICK	= 61 (number)
   MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL	= 131 (number)
   ACT_VM_IDLE                     	= 185 (number)
   DOTA_DEFAULT_UI_INVENTORY_ITEMS 	= 7 (number)
   ACT_RANGE_ATTACK_DUAL           	= 891 (number)
   ACT_IDLE_RPG                    	= 344 (number)
   MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE	= 49 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_3	= 4 (number)
   DOTA_ABILITY_BEHAVIOR_POINT     	= 16 (number)
   DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1	= 31 (number)
   ACT_MP_RELOAD_SWIM_LOOP         	= 543 (number)
   ACT_OBJ_ASSEMBLING              	= 463 (number)
   ACT_HL2MP_GESTURE_RELOAD_MELEE  	= 501 (number)
   EmitAnnouncerSound              	= function: 0x011462e8 (function)
   ACT_SIGNAL_HALT                 	= 56 (number)
   EmitSoundOnLocationForAllies    	= function: 0x01146258 (function)
   ACT_SECONDARY_VM_IDLE_TO_LOWERED	= 827 (number)
   DOTA_LOADOUT_TYPE_COURIER_EFFECT	= 83 (number)
   MODIFIER_ATTRIBUTE_NONE         	= 0 (number)
   ACT_IDLE_HURT                   	= 82 (number)
   ACT_RUN_AIM_SHOTGUN             	= 363 (number)
   CBaseTrigger                    	= table: 0x011aa438 (table, already seen)
   DOTA_LOADOUT_TYPE_COSTUME       	= 15 (number)
   DebugDrawLine_vCol              	= function: 0x0113fa70 (function)
   IsMangoTree                     	= function: 0x0114fee0 (function)
   DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN	= 8 (number)
   ACT_VM_THROW                    	= 190 (number)
   DOTA_STASH_SLOT_5               	= 13 (number)
   AE_EMPTY                        	= 0 (number)
   ACT_GESTURE_TURN_RIGHT45_FLAT   	= 172 (number)
   MODIFIER_ATTRIBUTE_AURA_PRIORITY	= 8 (number)
   ACT_RANGE_AIM_PISTOL_LOW        	= 294 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_MELEE	= 776 (number)
   GetWorldMaxX                    	= function: 0x01144d00 (function)
   DOTA_MAX_SPECTATOR_LOBBY_SIZE   	= 15 (number)
   ACT_VR_SHOTGUN_RELOAD_3         	= 976 (number)
   DOTA_HEROPICK_STATE_SELECT_PENALTY	= 59 (number)
   ACT_DOTA_GREEVIL_HOOK_START     	= 1619 (number)
   ACT_MP_RELOAD_STAND_END         	= 538 (number)
   DOTA_ATTRIBUTE_AGILITY          	= 1 (number)
   ACT_GESTURE_FLINCH_RIGHTLEG     	= 164 (number)
   DOTA_UNIT_ORDER_DISASSEMBLE_ITEM	= 18 (number)
   DOTA_LOADOUT_TYPE_INVALID       	= -1 (number)
   MODIFIER_STATE_NO_TEAM_SELECT   	= 27 (number)
   ACT_MP_ATTACK_STAND_GRENADE     	= 525 (number)
   ACT_SLAM_TRIPMINE_TO_STICKWALL_ND	= 254 (number)
   DOTA_DEFAULT_UI_TOP_BAR         	= 27 (number)
   ACT_MP_SWIM_DEPLOYED            	= 520 (number)
   CEntityInstance                 	= table: 0x01125f08 (table)
   {
      GetEntityIndex                  	= function: 0x011265d0 (function)
      DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
      GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
      FDesc                           	= table: 0x01125fb0 (table, already seen)
      IsNull                          	= function: 0x01125f30 (function)
      GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
      GetPrivateScriptScope           	= function: 0x01126448 (function)
      entindex                        	= function: 0x01126600 (function)
      GetIntAttr                      	= function: 0x01126178 (function)
      FireOutput                      	= function: 0x01126010 (function)
      Destroy                         	= function: 0x011262c8 (function)
      GetDebugName                    	= function: 0x01126340 (function)
      SetIntAttr                      	= function: 0x01125f78 (function)
      GetClassname                    	= function: 0x01126068 (function)
      GetName                         	= function: 0x01126630 (function)
      ConnectOutput                   	= function: 0x01113ac8 (function)
      RedirectOutput                  	= function: 0x01113668 (function)
      GetEntityHandle                 	= function: 0x01113cb0 (function)
      DisconnectOutput                	= function: 0x01113ef0 (function)
      RemoveSelf                      	= function: 0x011260f8 (function)
      GetPublicScriptScope            	= function: 0x011178d8 (function)
   }
   ACT_GESTURE_RANGE_ATTACK_THROW  	= 311 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY	= 8 (number)
   AE_DOTA_SUPPRESS_CONSTANT_LAYER 	= 54 (number)
   CreateUniformRandomStream       	= function: 0x0113d3a8 (function)
   ACT_DOTA_SAND_KING_BURROW_OUT   	= 1569 (number)
   DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE	= 64 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARYFIRE	= 526 (number)
   ACT_MP_ATTACK_STAND_ITEM1       	= 653 (number)
   CDOTA_BaseNPC_Creature          	= table: 0x011b0230 (table)
   {
      metatable                       	= table: 0x01188418 (table, already seen)
      SetHPRegenGain                  	= function: 0x011b0ba0 (function)
      SetDisableResistanceGain        	= function: 0x011b0870 (function)
      RemoveAllItemDrops              	= function: 0x011b14f0 (function)
      SetMoveSpeedGain                	= function: 0x011b0a20 (function)
      SetRequiresReachingEndPath      	= function: 0x011b0338 (function)
      GetDisableResistance            	= function: 0x011b05e0 (function)
      IsReincarnating                 	= function: 0x011b02e0 (function)
      SetAttackTimeGain               	= function: 0x011b0900 (function)
      SetHPGain                       	= function: 0x011b0668 (function)
      IsNull                          	= function: 0x011b0258 (function)
      SetDamageGain                   	= function: 0x011b0ca8 (function)
      SetArmorGain                    	= function: 0x011b0d28 (function)
      SetAggroOnOwnerOnDamage         	= function: 0x011b13e8 (function)
      GetUltimateDisableResistance    	= function: 0x011b0758 (function)
      CreatureLevelUp                 	= function: 0x011b0948 (function)
      AddItemDrop                     	= function: 0x011b1470 (function)
      SetXPGain                       	= function: 0x011b1390 (function)
      SetBountyGain                   	= function: 0x011b0aa8 (function)
      IsChampion                      	= function: 0x011b0430 (function)
      SetManaRegenGain                	= function: 0x011b0c20 (function)
      SetChampion                     	= function: 0x011b03b0 (function)
      SetMagicResistanceGain          	= function: 0x011b07e8 (function)
      SetDisableResistance            	= function: 0x011b0550 (function)
      FDesc                           	= table: 0x011b02b8 (table)
      {
         SetHPRegenGain                  	= void SetHPRegenGain(float flHPRegenGain)
Set the hit points regen gained per level on this creature. (userdata)
         SetDisableResistanceGain        	= void SetDisableResistanceGain(float flDisableResistanceGain)
Set the disable resistance gained per level on this creature. (userdata)
         RemoveAllItemDrops              	= void RemoveAllItemDrops()
Remove all item drops from this creature. (userdata)
         SetMoveSpeedGain                	= void SetMoveSpeedGain(int nMoveSpeedGain)
Set the move speed gained per level on this creature. (userdata)
         SetRequiresReachingEndPath      	= void SetRequiresReachingEndPath(bool bRequiresReachingEndPath)
Set whether creatures require reaching their end path before becoming idle (userdata)
         GetDisableResistance            	= float GetDisableResistance()
Set creature's current disable resistance (userdata)
         IsReincarnating                 	= bool IsReincarnating()
Is this creature respawning? (userdata)
         SetAttackTimeGain               	= void SetAttackTimeGain(float flAttackTimeGain)
Set the attack time gained per level on this creature. (userdata)
         SetHPGain                       	= void SetHPGain(int nHPGain)
Set the hit points gained per level on this creature. (userdata)
         SetDamageGain                   	= void SetDamageGain(int nDamageGain)
Set the damage gained per level on this creature. (userdata)
         SetArmorGain                    	= void SetArmorGain(float flArmorGain)
Set the armor gained per level on this creature. (userdata)
         SetAggroOnOwnerOnDamage         	= void SetAggroOnOwnerOnDamage(bool bAggro)
Does this creature aggro on the owner of the attacking unit when taking damage? (userdata)
         GetUltimateDisableResistance    	= float GetUltimateDisableResistance()
Set creature's current disable resistance from ultimates (userdata)
         SetChampion                     	= void SetChampion(bool bIsChampion)
Flag this unit as a champion creature. (userdata)
         SetXPGain                       	= void SetXPGain(int nXPGain)
Set the XP gained per level on this creature. (userdata)
         AddItemDrop                     	= void AddItemDrop(handle hDropData)
Add the specified item drop to this creature. (userdata)
         SetBountyGain                   	= void SetBountyGain(int nBountyGain)
Set the bounty gold gained per level on this creature. (userdata)
         SetManaRegenGain                	= void SetManaRegenGain(float flManaRegenGain)
Set the mana points regen gained per level on this creature. (userdata)
         SetDisableResistance            	= void SetDisableResistance(float flDisableResistance)
Set creature's current disable resistance (userdata)
         SetMagicResistanceGain          	= void SetMagicResistanceGain(float flMagicResistanceGain)
Set the magic resistance gained per level on this creature. (userdata)
         IsChampion                      	= bool IsChampion()
Is this unit a champion? (userdata)
         CreatureLevelUp                 	= void CreatureLevelUp(int iLevels)
Level the creature up by the specified number of levels (userdata)
         SetManaGain                     	= void SetManaGain(int nManaGain)
Set the mana points gained per level on this creature. (userdata)
         SetUltimateDisableResistance    	= void SetUltimateDisableResistance(float flUltDisableResistance)
Set creature's current disable resistance from ultimates (userdata)
      }
      SetManaGain                     	= function: 0x011b06e8 (function)
      SetUltimateDisableResistance    	= function: 0x011b04b0 (function)
   }
   DebugDrawClear                  	= function: 0x0113fb80 (function)
   DOTA_ModifyGold_SharedGold      	= 18 (number)
   ACT_WALK_HURT                   	= 106 (number)
   ACT_DOTA_CAGED_CREEP_SMASH      	= 1646 (number)
   FCVAR_HIDDEN                    	= 16 (number)
   DOTA_HUD_VISIBILITY_TOP_SCOREBOARD	= 2 (number)
   ACT_MP_ATTACK_AIRWALK_MELEE     	= 637 (number)
   ACT_DOTA_AMBUSH                 	= 1627 (number)
   ACT_SCRIPT_CUSTOM_0             	= 911 (number)
   AE_CL_DOTA_STOP_STATUS_EFFECT   	= 49 (number)
   MODIFIER_PROPERTY_STATS_STRENGTH_BONUS	= 96 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET	= 16777216 (number)
   ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE	= 1554 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP	= 615 (number)
   DOTA_HEROPICK_STATE_CM_SELECT4  	= 24 (number)
   GetGroundPosition               	= function: 0x01145c38 (function)
   ACT_DOTA_FATAL_BONDS            	= 1675 (number)
   DOTA_UNIT_ORDER_ATTACK_MOVE     	= 3 (number)
   ACT_DOTA_ATTACK_SPECIAL         	= 1758 (number)
   ACT_MELEE_VM_DRYFIRE            	= 837 (number)
   DebugDrawScreenTextLine         	= function: 0x0113f6e0 (function)
   ACT_IDLE_DUAL                   	= 887 (number)
   MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE	= 85 (number)
   CreateUnitByName                	= function: 0x01145100 (function)
   ACT_IDLE_AIM_SHOTGUN            	= 893 (number)
   ACT_SIGNAL_GROUP                	= 55 (number)
   AE_START_SCRIPTED_EFFECT        	= 13 (number)
   GetSystemTime                   	= function: 0x01144e00 (function)
   ACT_DOTA_CUSTOM_TOWER_DIE       	= 1736 (number)
   ACT_DOTA_ALCHEMIST_CONCOCTION_THROW	= 1579 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8	= 84 (number)
   LimitPathingSearchDepth         	= function: 0x01146ff0 (function)
   CalcDistanceBetweenEntityOBB    	= function: 0x01140d08 (function)
   ACT_WALK_ON_FIRE                	= 134 (number)
   ACT_DIE_CROUCH_BACKSIDE         	= 408 (number)
   ACT_ITEM1_VM_HOLSTER            	= 853 (number)
   ACT_MP_JUMP_START_ITEM1         	= 649 (number)
   ACT_MP_STAND_MELEE              	= 621 (number)
   ACT_CSGO_FLINCH_MOLOTOV         	= 1019 (number)
   DOTA_RUNE_ILLUSION              	= 2 (number)
   ACT_PRIMARY_VM_RELOAD           	= 814 (number)
   ACT_DOTA_FXANIM                 	= 1709 (number)
   ACT_CROUCH_IDLE_RIFLE           	= 896 (number)
   DestroyDamageInfo               	= function: 0x0113ff28 (function)
   ACT_GESTURE_RANGE_ATTACK2       	= 146 (number)
   RegisterSpawnGroupFilterProxy   	= function: 0x011402b8 (function)
   LEGEND_OBJECT_TYPE_MONSTER      	= 1 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK	= 16 (number)
   MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS	= 91 (number)
   ACT_MP_JUMP_FLOAT_BUILDING      	= 733 (number)
   OVERHEAD_ALERT_LAST_HIT_EARLY   	= 13 (number)
   AppendToLogFile                 	= function: 0x0113cf18 (function)
   ACT_CSGO_IDLE_TURN_BALANCEADJUST	= 1014 (number)
   StartSoundEventFromPositionReliable	= function: 0x0113f2c0 (function)
   ACT_BARNACLE_HIT                	= 175 (number)
   ACT_DOTA_CAST_ICE_WALL_ORB      	= 1745 (number)
   DOTA_TEAM_CUSTOM_2              	= 7 (number)
   OVERHEAD_ALERT_GOLD             	= 0 (number)
   AE_CL_MFOOTSTEP_RIGHT_LOUD      	= 26 (number)
   ACT_COVER_SMG1_LOW              	= 297 (number)
   ACT_RANGE_ATTACK1               	= 16 (number)
   ACT_VM_MAUL_LOOP                	= 221 (number)
   CBaseAnimating                  	= table: 0x01186d00 (table)
   {
      metatable = table: 0x01185970
      {
         SetMaterialGroupHash            	= function: 0x01185f40 (function)
         GetModelScale                   	= function: 0x01185a20 (function)
         GetMaterialGroupHash            	= function: 0x01185fc8 (function)
         SetRenderMode                   	= function: 0x011862f8 (function)
         ScriptLookupAttachment          	= function: 0x01185b98 (function)
         FDesc                           	= table: 0x011859f8 (table, already seen)
         SetModelScale                   	= function: 0x01185b18 (function)
         SetMaterialGroupMask            	= function: 0x01186178 (function)
         SetSkin                         	= function: 0x01186bc0 (function)
         SetBodygroupByName              	= function: 0x01186b38 (function)
         SetBodygroup                    	= function: 0x01186ab8 (function)
         GetMaterialGroupMask            	= function: 0x01186200 (function)
         SetModel                        	= function: 0x01185c20 (function)
         SetRenderAlpha                  	= function: 0x01185dd8 (function)
         SetSingleMeshGroup              	= function: 0x01186050 (function)
         GetAttachmentAngles             	= function: 0x01185d50 (function)
         SetMaterialGroup                	= function: 0x01186478 (function)
         SetLightGroup                   	= function: 0x01185e58 (function)
         GetAttachmentForward            	= function: 0x01185cc0 (function)
         IsNull                          	= function: 0x01185998 (function)
         SetRenderColor                  	= function: 0x01186378 (function)
         SetSize                         	= function: 0x01185ec8 (function)
         GetRenderAlpha                  	= function: 0x011860a0 (function)
         GetAttachmentOrigin             	= function: 0x01185aa0 (function)
         GetRenderColor                  	= function: 0x011863f8 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      SetGraphLookTarget              	= function: 0x01187338 (function)
      SetGraphParameterEnum           	= function: 0x011877e0 (function)
      SetGraphParameterInt            	= function: 0x01187758 (function)
      IsSequenceFinished              	= function: 0x011870e0 (function)
      ResetSequence                   	= function: 0x01186fb0 (function)
      SetSequence                     	= function: 0x01187230 (function)
      FDesc                           	= table: 0x01186d88 (table, already seen)
      SetGraphParameter               	= function: 0x011871c0 (function)
      SetGraphParameterVector         	= function: 0x011872b0 (function)
      GetSequence                     	= function: 0x01187050 (function)
      StopAnimation                   	= function: 0x01186eb0 (function)
      SequenceDuration                	= function: 0x01187168 (function)
      SetGraphParameterFloat          	= function: 0x011876d0 (function)
      GetGraphParameter               	= function: 0x011873c0 (function)
      IsNull                          	= function: 0x01186d28 (function)
      SetPoseParameter                	= function: 0x01186db0 (function)
      SetCycle                        	= function: 0x01186f30 (function)
      SetGraphParameterBool           	= function: 0x01187648 (function)
      ActiveSequenceDuration          	= function: 0x01187410 (function)
      GetCycle                        	= function: 0x01186e38 (function)
   }
   ACT_MP_ATTACK_STAND_GRENADE_PRIMARY	= 586 (number)
   MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE	= 29 (number)
   ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE	= 1 (number)
   ACT_ITEM2_VM_PRIMARYATTACK      	= 867 (number)
   MODIFIER_PROPERTY_STATS_AGILITY_BONUS	= 97 (number)
   OVERHEAD_ALERT_BONUS_SPELL_DAMAGE	= 4 (number)
   ACT_RAGDOLL_RECOVERY_BACK       	= 952 (number)
   ACT_BUSY_SIT_GROUND_EXIT        	= 389 (number)
   DOTA_SHOP_SIDE                  	= 1 (number)
   gcinfo                          	= function: builtin#26 (function)
   DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1	= 55 (number)
   ACT_DOTA_CAST_COLD_SNAP_ORB     	= 1737 (number)
   AE_STOP_SCRIPTED_EFFECT         	= 14 (number)
   ACT_VM_SWINGHARD                	= 210 (number)
   AE_RAGDOLL                      	= 27 (number)
   MODIFIER_STATE_NO_HEALTH_BAR    	= 22 (number)
   ACT_TINY_AVALANCHE              	= 1558 (number)
   SplineVectors                   	= function: 0x0113c1c0 (function)
   ACT_DOTA_DEFEAT_STATUE          	= 1770 (number)
   AnglesToVector                  	= function: 0x0113e220 (function)
   DOTA_DEFAULT_UI_INVALID         	= -1 (number)
   CreateIllusions                 	= function: 0x01145770 (function)
   DOTA_ABILITY_BEHAVIOR_PASSIVE   	= 2 (number)
   DOTA_HUD_VISIBILITY_COUNT       	= 30 (number)
   ACT_SCRIPT_CUSTOM_12            	= 923 (number)
   DOTA_LOADOUT_TYPE_LEGS          	= 12 (number)
   UF_FAIL_OTHER                   	= 8 (number)
   ACT_DOTA_TELEPORT_COOP_EXIT     	= 1694 (number)
   ACT_MP_GESTURE_VC_NODYES_MELEE  	= 779 (number)
   VectorAngles                    	= function: 0x01145d40 (function)
   ACT_RANGE_ATTACK_SMG1           	= 279 (number)
   DMG_BURN                        	= 8 (number)
   UTIL_Remove                     	= function: 0x0113c7d0 (function)
   DOTA_HUD_VISIBILITY_INVENTORY_ITEMS	= 7 (number)
   MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW	= 170 (number)
   DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS	= 12 (number)
   ACT_SLAM_STICKWALL_DETONATE     	= 230 (number)
   FCVAR_VCONSOLE_SET_FOCUS        	= 1073741824 (number)
   GetPotentialNeutralItemDrop     	= function: 0x01146a00 (function)
   DOTA_UNIT_ORDER_CAST_TOGGLE     	= 9 (number)
   ACT_RELOAD                      	= 67 (number)
   ACT_SMG2_DRAW2                  	= 267 (number)
   ACT_DOTA_PRESENT_ITEM           	= 1635 (number)
   DOTA_MAX_PLAYERS                	= 64 (number)
   ACT_MP_JUMP_START_SECONDARY     	= 597 (number)
   DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES	= 1048576 (number)
   ACT_GAUSS_SPINCYCLE             	= 476 (number)
   ACT_DOTA_LEAP_STUN              	= 1658 (number)
   MODIFIER_PROPERTY_BONUS_NIGHT_VISION	= 141 (number)
   CreateUnitByNameAsync           	= function: 0x01145330 (function)
   ACT_PHYSCANNON_ANIMATE_POST     	= 401 (number)
   ACT_TURN_LEFT                   	= 42 (number)
   VectorDistance                  	= function: 0x011c54f0 (function)
   PrecacheItemByNameSync          	= function: 0x011454c8 (function)
   DOTA_DEFAULT_UI_PREGAME_STRATEGYUI	= 25 (number)
   DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX	= 0 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_4	= 5 (number)
   CBaseEntity                     	= table: 0x01137138 (table)
   {
      metatable                       	= table: 0x01125f08 (table, already seen)
      GetTeamNumber                   	= function: 0x01139f78 (function)
      GetChildren                     	= function: 0x01137bf0 (function)
      IsNPC                           	= function: 0x01139068 (function)
      SetTeam                         	= function: 0x0113a070 (function)
      FDesc                           	= table: 0x011371c0 (table, already seen)
      IsNull                          	= function: 0x01137160 (function)
      Kill                            	= function: 0x01137820 (function)
      SetLocalScale                   	= function: 0x01139df8 (function)
      DeleteAttribute                 	= function: 0x01138640 (function)
      GetLocalScale                   	= function: 0x01139d78 (function)
      GetSpawnGroupHandle             	= function: 0x01139af0 (function)
      SetLocalOrigin                  	= function: 0x011388b0 (function)
      TransformPointWorldToEntity     	= function: 0x01138a40 (function)
      SetContextThink                 	= function: 0x0113a1e0 (function)
      Attribute_SetIntValue           	= function: 0x011384b0 (function)
      HasAttribute                    	= function: 0x011385c0 (function)
      Attribute_GetIntValue           	= function: 0x01138538 (function)
      GetBoundingMaxs                 	= function: 0x01138bd8 (function)
      GetCenter                       	= function: 0x01139ef8 (function)
      GetOwner                        	= function: 0x01138750 (function)
      SetConstraint                   	= function: 0x01138120 (function)
      GetContext                      	= function: 0x0113a360 (function)
      SetMass                         	= function: 0x01139a78 (function)
      SetAbsScale                     	= function: 0x01139cf8 (function)
      OverrideFriction                	= function: 0x01139810 (function)
      SetEntityName                   	= function: 0x01138850 (function)
      GetUpVector                     	= function: 0x01137188 (function)
      GetVelocity                     	= function: 0x01139568 (function)
      RemoveEffects                   	= function: 0x01138320 (function)
      SetLocalAngles                  	= function: 0x01137f70 (function)
      IsBaseNPC                       	= function: 0x011f85c0 (function)
      Attribute_SetFloatValue         	= function: 0x011383a0 (function)
      GetBoundingMins                 	= function: 0x01138b58 (function)
      GetOwnerEntity                  	= function: 0x01137b70 (function)
      SetMaxHealth                    	= function: 0x011391e0 (function)
      GetBaseVelocity                 	= function: 0x01139790 (function)
      GetOrigin                       	= function: 0x0113bda8 (function)
      IsPlayer                        	= function: 0x0113bd28 (function)
      GatherCriteria                  	= function: 0x01138de8 (function)
      Trigger                         	= function: 0x0113a168 (function)
      IsDOTANPC                       	= function: 0x011390e0 (function)
      GetAbsScale                     	= function: 0x01139c78 (function)
      SetHealth                       	= function: 0x01139260 (function)
      ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
      SetAbsOrigin                    	= function: 0x01139e78 (function)
      GetMass                         	= function: 0x01139a20 (function)
      Attribute_GetFloatValue         	= function: 0x01138428 (function)
      EmitSoundParams                 	= function: 0x01139918 (function)
      TakeDamage                      	= function: 0x01138e68 (function)
      TransformPointEntityToWorld     	= function: 0x011389b0 (function)
      EmitSound                       	= function: 0x01139898 (function)
      SetForwardVector                	= function: 0x01138ad0 (function)
      SetContextNum                   	= function: 0x0113a2e0 (function)
      GetAbsOrigin                    	= function: 0x01139b78 (function)
      GetLocalAngularVelocity         	= function: 0x01139708 (function)
      NextMovePeer                    	= function: 0x01137e48 (function)
      ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
      GetMaxHealth                    	= function: 0x01139160 (function)
      PrecacheScriptSound             	= function: 0x0113bca0 (function)
      GetLocalVelocity                	= function: 0x011394e0 (function)
      SetVelocity                     	= function: 0x01139460 (function)
      FirstMoveChild                  	= function: 0x011379c0 (function)
      GetHealth                       	= function: 0x011392e0 (function)
      EyeAngles                       	= function: 0x01137df0 (function)
      SetAbsAngles                    	= function: 0x01137ce8 (function)
      GetModelName                    	= function: 0x01137af0 (function)
      SetContext                      	= function: 0x0113a260 (function)
      GetRightVector                  	= function: 0x01137940 (function)
      GetAnglesAsVector               	= function: 0x01137d68 (function)
      SetThink                        	= function: 0x011b4068 (function)
      IsPlayerController              	= function: 0x01138fe0 (function)
      GetAngles                       	= function: 0x01139bf8 (function)
      IsPlayerPawn                    	= function: 0x01138f60 (function)
      IsAlive                         	= function: 0x01138ee8 (function)
      SetParent                       	= function: 0x011380a0 (function)
      GetBounds                       	= function: 0x01138c58 (function)
      AddEffects                      	= function: 0x011382a0 (function)
      IsInstance                      	= function: 0x011b4508 (function)
      EyePosition                     	= function: 0x011381a0 (function)
      GetForwardVector                	= function: 0x011378b8 (function)
      SetGravity                      	= function: 0x01139360 (function)
      StopThink                       	= function: 0x011b44e8 (function)
      GetMoveParent                   	= function: 0x01137a60 (function)
      SetFriction                     	= function: 0x011393e0 (function)
      GetLocalOrigin                  	= function: 0x01138930 (function)
      SetOrigin                       	= function: 0x01137ef0 (function)
      SetAngles                       	= function: 0x01138220 (function)
      GetRootMoveParent               	= function: 0x01137c60 (function)
      StopSound                       	= function: 0x01139998 (function)
      SetOwner                        	= function: 0x011387d0 (function)
      GetAngularVelocity              	= function: 0x01138cd8 (function)
      ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
      GetSoundDuration                	= function: 0x0113bc18 (function)
      GetTeam                         	= function: 0x01139ff8 (function)
      SetAngularVelocity              	= function: 0x01138d60 (function)
      GetLocalAngles                  	= function: 0x01137ff0 (function)
      FollowEntity                    	= function: 0x0113a0e8 (function)
   }
   ACT_MP_RELOAD_STAND_SECONDARY   	= 605 (number)
   ACT_MP_JUMP_FLOAT               	= 515 (number)
   DOTA_BUFF_REMOVE_ENEMY          	= 1 (number)
   MODIFIER_STATE_CANNOT_MISS      	= 16 (number)
   ACT_DOTA_SHUFFLE_L              	= 1749 (number)
   ACT_DOTA_NECRO_GHOST_SHROUD     	= 1724 (number)
   AxisAngleToQuaternion           	= function: 0x0113bf90 (function)
   ACT_MP_ATTACK_STAND_ITEM2       	= 670 (number)
   ACT_MP_WALK_SECONDARY           	= 593 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE   	= 535 (number)
   ACT_DISARM                      	= 72 (number)
   ACT_RELOAD_SMG1_LOW             	= 374 (number)
   ACT_MP_MELEE_GRENADE2_IDLE      	= 711 (number)
   ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK	= 946 (number)
   DOTA_GC_TEAM_GOOD_GUYS          	= 0 (number)
   ACT_DOTA_CAST_DEAFENING_BLAST   	= 1590 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_SCORE	= 21 (number)
   DOTA_ModifyGold_Unspecified     	= 0 (number)
   Vector                          	= function: 0x01116930 (function)
   QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= 1 (number)
   DOTA_INVENTORY_ALL_ACCESS       	= 3 (number)
   ACT_DI_ALYX_ANTLION             	= 416 (number)
   DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS	= 12 (number)
   DOTA_ITEM_SLOT_7                	= 6 (number)
   ACT_VM_IDLE_LOWERED             	= 214 (number)
   ACT_MP_GESTURE_VC_NODYES_ITEM2  	= 791 (number)
   DOTA_ModifyGold_AbandonedRedistribute	= 5 (number)
   DOTA_HUD_VISIBILITY_KILLCAM     	= 26 (number)
   ACT_DOTA_SHARPEN_WEAPON_OUT     	= 1638 (number)
   ACT_TURNLEFT45                  	= 461 (number)
   GetFrameCount                   	= function: 0x01140238 (function)
   DoEntFireByInstanceHandle       	= function: 0x0113c9e0 (function)
   DisconnectClient                	= function: 0x01146750 (function)
   ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY	= 619 (number)
   ACT_DIEVIOLENT                  	= 23 (number)
   DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY	= 0 (number)
   ACT_DOTA_CHANNEL_ABILITY_3      	= 1522 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_MELEE	= 640 (number)
   DOTA_DEFAULT_UI_QUICK_STATS     	= 24 (number)
   ACT_DOTA_BELLYACHE_START        	= 1612 (number)
   DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION	= 65536 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST	= 75 (number)
   ACT_MP_JUMP_START_ITEM2         	= 666 (number)
   ACT_MP_GESTURE_VC_NODYES        	= 761 (number)
   MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE	= 55 (number)
   FireEntityIOInputNameOnly       	= function: 0x0113c240 (function)
   ACT_DOTA_GENERIC_CHANNEL_1_START	= 1754 (number)
   ACT_DOTA_TINKER_REARM3          	= 1557 (number)
   ACT_RUN_AIM_AUTOGUN             	= 877 (number)
   ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE	= 300 (number)
   AE_CL_FOOTSTEP_LEFT             	= 21 (number)
   SpawnEntityListFromTableSynchronous	= function: 0x0113dfd8 (function)
   ScriptDebugText                 	= table: 0x011b1a08 (table)
   {
   }
   GetSystemTimeMS                 	= function: 0x01144e80 (function)
   StopSoundEvent                  	= function: 0x0113f1d8 (function)
   ACT_MP_STAND_ITEM1              	= 642 (number)
   DOTA_DEFAULT_UI_TOP_MENU_BUTTONS	= 17 (number)
   ACT_RUN_STEALTH_PISTOL          	= 361 (number)
   ACT_DOTA_COLD_FEET              	= 1671 (number)
   MODIFIER_EVENT_ON_HERO_KILLED   	= 206 (number)
   DOTA_MUSIC_STATUS_BATTLE        	= 2 (number)
   ACT_IDLE_STIMULATED             	= 79 (number)
   QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= 0 (number)
   DOTA_GC_TEAM_NOTEAM             	= 5 (number)
   StopListeningToAllGameEvents    	= function: 0x0113d9e0 (function)
   ACT_DOTA_SPIRIT_BREAKER_CHARGE_END	= 1594 (number)
   Dynamic_Wrap                    	= function: 0x011b15b8 (function)
   DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN	= 2048 (number)
   SpawnEntityGroupFromTable       	= function: 0x0113df48 (function)
   AE_DOTA_PET_ITEM_PICKUP         	= 52 (number)
   test                            	= function: 0x01360cc8 (function)
   EntIndexToHScript               	= function: 0x0113db78 (function)
   ACT_MP_RUN_PDA                  	= 746 (number)
   ACT_SECONDARY_VM_RELOAD         	= 825 (number)
   ACT_ITEM1_VM_PRIMARYATTACK      	= 856 (number)
   ACT_MP_WALK_MELEE               	= 624 (number)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET	= 9 (number)
   DOTA_ATTACK_RECORD_FAIL_NO      	= 0 (number)
   ACT_WALK_AIM_RELAXED            	= 95 (number)
   ACT_MP_WALK_PDA                 	= 747 (number)
   DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT	= -2147483648 (number)
   ACT_MP_WALK_BUILDING            	= 728 (number)
   ACT_DIE_CHESTSHOT               	= 115 (number)
   ACT_SHOTGUN_RELOAD_START        	= 262 (number)
   time_remap_smoke_side           	= 1761 (number)
   EmitAnnouncerSoundForPlayer     	= function: 0x01146498 (function)
   ACT_SPECIAL_ATTACK1             	= 108 (number)
   ACT_SCRIPT_CUSTOM_11            	= 922 (number)
   ACT_IDLE_RELAXED                	= 78 (number)
   ACT_RUN_CROUCH_RIFLE            	= 359 (number)
   DOTA_LOADOUT_TYPE_ARMOR         	= 7 (number)
   ACT_DOTA_RATTLETRAP_POWERCOGS   	= 1550 (number)
   ACT_RANGE_ATTACK1_LOW           	= 18 (number)
   ACT_SLAM_STICKWALL_ND_ATTACH    	= 228 (number)
   ACT_RUN_AIM_RIFLE_STIMULATED    	= 333 (number)
   debugoverlay                    	= table: 0x01365240 (table)
   {
      metatable = table: 0x01361538
      {
         VertArrow                       	= function: 0x01361b88 (function)
         Sphere                          	= function: 0x013618d0 (function)
         YawArrow                        	= function: 0x01361b08 (function)
         Capsule                         	= function: 0x01361a10 (function)
         SweptBox                        	= function: 0x01361e90 (function)
         EntitySkeleton                  	= function: 0x01365110 (function)
         FDesc                           	= table: 0x013615c0 (table)
         {
            VertArrow                       	= void VertArrow(Vector, Vector, float, int, int, int, int, bool, float)
Draws a vertical arrow. Specify endpoints in world space. (userdata)
            Sphere                          	= void Sphere(Vector, float, int, int, int, int, bool, float)
Draws a wireframe sphere. Specify center in world space. (userdata)
            YawArrow                        	= void YawArrow(Vector, float, float, float, int, int, int, int, bool, float)
Draws a arrow associated with a specific yaw. Specify endpoints in world space. (userdata)
            Capsule                         	= void Capsule(Vector, Quaternion, float, float, int, int, int, int, bool, float)
Draws a capsule. Specify base in world space. (userdata)
            SweptBox                        	= void SweptBox(Vector, Vector, Vector, Vector, Quaternion, int, int, int, int, float)
Draws a swept box. Specify endpoints in world space and the bounds in local space. (userdata)
            EntitySkeleton                  	= void EntitySkeleton(ehandle, float)
Draws the skeleton of the entity (userdata)
            Line2D                          	= void Line2D(Vector2D, Vector2D, int, int, int, int, float)
Draws a line between two points in screenspace (userdata)
            Texture                         	= void Texture(string, Vector2D, Vector2D, int, int, int, int, Vector2D, Vector2D, float)
Draws a screen-space texture. Coordinates are in pixels. (userdata)
            EntityAxis                      	= void EntityAxis(ehandle, float, bool, float)
Draws the axis of the entity origin (userdata)
            Cross3D                         	= void Cross3D(Vector, float, int, int, int, int, bool, float)
Draws a world-aligned cross. Specify origin in world space. (userdata)
            PushAndClearDebugOverlayScope   	= void PushAndClearDebugOverlayScope(utlstringtoken)
Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id. (userdata)
            Triangle                        	= void Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)
Draws a filled triangle. Specify vertices in world space. (userdata)
            Line                            	= void Line(Vector, Vector, int, int, int, int, bool, float)
Draws a line between two points (userdata)
            BoxAngles                       	= void BoxAngles(Vector, Vector, Vector, Quaternion, int, int, int, int, bool, float)
Draws an oriented box at the origin. Specify bounds in local space. (userdata)
            Axis                            	= void Axis(Vector, Quaternion, float, bool, float)
Draws an axis. Specify origin + orientation in world space. (userdata)
            DrawTickMarkedLine              	= void DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, int, bool, float)
Draws a dashed line. Specify endpoints in world space. (userdata)
            CircleScreenOriented            	= void CircleScreenOriented(Vector, float, int, int, int, int, bool, float)
Draws a circle oriented to the screen. Specify center in world space. (userdata)
            Cross                           	= void Cross(Vector, float, int, int, int, int, bool, float)
Draws a screen-aligned cross. Specify origin in world space. (userdata)
            EntityText                      	= void EntityText(ehandle, int, string, int, int, int, int, float)
Draws text on an entity (userdata)
            Circle                          	= void Circle(Vector, Quaternion, float, int, int, int, int, bool, float)
Draws a circle. Specify center in world space. (userdata)
            EntityAttachments               	= void EntityAttachments(ehandle, float, float)
Draws the attachments of the entity (userdata)
            Cone                            	= void Cone(Vector, Vector, float, float, int, int, int, int, bool, float)
Draws a wireframe cone. Specify endpoint and direction in world space. (userdata)
            Box                             	= void Box(Vector, Vector, int, int, int, int, bool, float)
Draws a world-space axis-aligned box. Specify bounds in world space. (userdata)
            PushDebugOverlayScope           	= void PushDebugOverlayScope(utlstringtoken)
Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch. (userdata)
            Cross3DOriented                 	= void Cross3DOriented(Vector, Quaternion, float, int, int, int, int, bool, float)
Draws an oriented cross. Specify origin in world space. (userdata)
            EntityBounds                    	= void EntityBounds(ehandle, int, int, int, int, bool, float)
Draws bounds of an entity (userdata)
            RemoveAllInScope                	= void RemoveAllInScope(utlstringtoken)
Removes all overlays marked with a specific identifier, regardless of their lifetime. (userdata)
            VectorText3D                    	= void VectorText3D(Vector, Quaternion, string, int, int, int, int, bool, float)
Draws 3D text. Specify origin + orientation in world space. (userdata)
            SolidCone                       	= void SolidCone(Vector, Vector, float, float, int, int, int, int, bool, float)
Draws a solid cone. Specify endpoint and direction in world space. (userdata)
            FilledRect2D                    	= void FilledRect2D(Vector2D, Vector2D, int, int, int, int, float)
Draws a screen-space filled 2D rectangle. Coordinates are in pixels. (userdata)
            HorzArrow                       	= void HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)
Draws a horizontal arrow. Specify endpoints in world space. (userdata)
            PopDebugOverlayScope            	= void PopDebugOverlayScope()
Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch. (userdata)
            Text                            	= void Text(Vector, int, string, float, int, int, int, int, float)
Draws 2D text. Specify origin in world space. (userdata)
         }
         IsNull                          	= function: 0x01361560 (function)
         Line2D                          	= function: 0x013616c8 (function)
         Texture                         	= function: 0x01361d10 (function)
         RemoveAllInScope                	= function: 0x01365898 (function)
         Cross3D                         	= function: 0x01362058 (function)
         PushAndClearDebugOverlayScope   	= function: 0x013656f8 (function)
         Cross3DOriented                 	= function: 0x01361638 (function)
         Line                            	= function: 0x013615e8 (function)
         BoxAngles                       	= function: 0x01361740 (function)
         Axis                            	= function: 0x01361f88 (function)
         DrawTickMarkedLine              	= function: 0x01361e08 (function)
         CircleScreenOriented            	= function: 0x013619c0 (function)
         Cross                           	= function: 0x01362000 (function)
         EntityText                      	= function: 0x01365920 (function)
         Circle                          	= function: 0x01361948 (function)
         EntityAttachments               	= function: 0x01365190 (function)
         Cone                            	= function: 0x01361c08 (function)
         Box                             	= function: 0x01361588 (function)
         EntityAxis                      	= function: 0x01365a20 (function)
         PopDebugOverlayScope            	= function: 0x01365810 (function)
         EntityBounds                    	= function: 0x013659a0 (function)
         VectorText3D                    	= function: 0x01361a88 (function)
         FilledRect2D                    	= function: 0x01361c90 (function)
         SolidCone                       	= function: 0x01361d88 (function)
         Triangle                        	= function: 0x0135bf28 (function)
         HorzArrow                       	= function: 0x013617f0 (function)
         PushDebugOverlayScope           	= function: 0x01365788 (function)
         Text                            	= function: 0x01361f10 (function)
      }
      __self                          	= userdata: 0x01365280 (userdata)
   }
   UF_FAIL_INVALID_LOCATION        	= 24 (number)
   ACT_MP_CROUCHWALK_PRIMARY       	= 560 (number)
   DOTA_DEFAULT_UI_INVENTORY_QUICKBUY	= 8 (number)
   GetMapName                      	= function: 0x0113cb80 (function)
   RotateQuaternionByAxisAngle     	= function: 0x0113c420 (function)
   ACT_OVERLAY_SHIELD_UP           	= 445 (number)
   SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= 0 (number)
   MODIFIER_STATE_BLOCK_DISABLED   	= 12 (number)
   UF_FAIL_ENEMY                   	= 2 (number)
   MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE	= 4 (number)
   CLogicScript                    	= table: 0x011c0e70 (table)
   {
      metatable                       	= table: 0x01137138 (table, already seen)
      FDesc                           	= table: 0x011c0ef8 (table)
      {
      }
      IsNull                          	= function: 0x011c0e98 (function)
   }
   ACT_MP_CROUCH_DEPLOYED_IDLE     	= 505 (number)
   ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE	= 1593 (number)
   ACT_IDLE_ANGRY_SHOTGUN          	= 319 (number)
   ACT_DOTA_VICTORY_STATUE         	= 1769 (number)
   ACT_DOTA_DIE                    	= 1506 (number)
   ACT_DOTA_CAST_ABILITY_2_ALLY    	= 1748 (number)
   DOTA_RUNE_COUNT                 	= 8 (number)
   EmitAnnouncerSoundForTeamOnLocation	= function: 0x01146400 (function)
   ACT_WALK_AIM_STIMULATED         	= 96 (number)
   ACT_CSGO_RELOAD_LOOP            	= 1004 (number)
   ManuallyTriggerSpawnGroupCompletion	= function: 0x01140580 (function)
   ACT_MP_JUMP_LAND_ITEM1          	= 651 (number)
   DOTA_LOADOUT_TYPE_SUMMON        	= 18 (number)
   ACT_DUCK_DODGE                  	= 395 (number)
   FindClearRandomPositionAroundUnit	= function: 0x01145aa0 (function)
   DOTA_ATTRIBUTE_STRENGTH_HP      	= 1 (number)
   ACT_CSGO_DEFUSE_WITH_KIT        	= 994 (number)
   ACT_GESTURE_RANGE_ATTACK_SLAM   	= 309 (number)
   OVERHEAD_ALERT_OUTGOING_DAMAGE  	= 18 (number)
   ACT_DOTA_SHRUG                  	= 1633 (number)
   ACT_DOTA_IDLE_STATUE            	= 1763 (number)
   DMG_PLASMA                      	= 16777216 (number)
   ACT_MELEE_ATTACK1               	= 65 (number)
   DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD	= 1 (number)
   ACT_MP_GRENADE1_IDLE            	= 690 (number)
   ACT_DEPLOY_IDLE                 	= 472 (number)
   ACT_SLAM_THROW_THROW_ND         	= 241 (number)
   MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES	= 38 (number)
   ACT_PDA_VM_IDLE_TO_LOWERED      	= 849 (number)
   ACT_DOTA_TRANSITION_IDLE        	= 1759 (number)
   DotProduct                      	= function: 0x011467d8 (function)
   ACT_RUN_AGITATED                	= 89 (number)
   DOTA_UNIT_ORDER_PING_ABILITY    	= 27 (number)
   ACT_RUN_AIM_STEALTH_PISTOL      	= 370 (number)
   ACT_DOTA_TINKER_REARM2          	= 1556 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE	= 22 (number)
   ACT_DOTA_GS_INK_CREATURE        	= 1730 (number)
   ACT_OBJ_STARTUP                 	= 465 (number)
   DropNeutralItemAtPositionForHero	= function: 0x01146968 (function)
   ACT_PHYSCANNON_DETACH           	= 398 (number)
   ACT_OVERLAY_PRIMARYATTACK       	= 444 (number)
   DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS	= 21 (number)
   UTIL_MessageText_WithContext    	= function: 0x011408c8 (function)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4	= 80 (number)
   ACT_MP_DEPLOYED_IDLE            	= 507 (number)
   ACT_CSGO_RELOAD_END             	= 1005 (number)
   ACT_VR_PISTOL_SLIDE_RELEASE     	= 944 (number)
   DAMAGE_TYPE_PURE                	= 4 (number)
   MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY	= 33 (number)
   PrecacheEntityListFromTable     	= function: 0x0113e190 (function)
   CreateTrigger                   	= function: 0x01140618 (function)
   DOTA_UNIT_CAP_MOVE_NONE         	= 0 (number)
   ACT_PRIMARY_VM_SECONDARYATTACK  	= 813 (number)
   DOTA_ABILITY_BEHAVIOR_CHANNELLED	= 128 (number)
   ACT_IDLE_ANGRY_MELEE            	= 342 (number)
   ACT_VM_SWINGHIT                 	= 212 (number)
   ACT_FLY                         	= 25 (number)
   DOTA_ITEM_SLOT_4                	= 3 (number)
   ACT_DOTA_CHANNEL_ABILITY_2      	= 1521 (number)
   DOTA_UNIT_ORDER_PICKUP_ITEM     	= 14 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_PDA	= 800 (number)
   AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB	= 57 (number)
   MODIFIER_STATE_MAGIC_IMMUNE     	= 9 (number)
   OVERHEAD_ALERT_LAST_HIT_CLOSE   	= 14 (number)
   ACT_180_LEFT                    	= 137 (number)
   ACT_DOTA_OVERRIDE_LOADOUT       	= 1751 (number)
   MODIFIER_PROPERTY_OVERRIDE_ANIMATION	= 134 (number)
   ACT_DOTA_CAST_ALACRITY          	= 1585 (number)
   DOTA_BUFF_REMOVE_ALL            	= 0 (number)
   ACT_SMG2_DRYFIRE2               	= 269 (number)
   ACT_GESTURE_BARNACLE_STRANGLE   	= 397 (number)
   ACT_DOTA_TAUNT                  	= 1536 (number)
   ACT_RUN_CROUCH_AIM_RIFLE        	= 360 (number)
   ACT_ITEM2_VM_DRAW               	= 863 (number)
   DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1	= 34 (number)
   DOTA_UNIT_ORDER_CAST_RIVER_PAINT	= 35 (number)
   rr_QueryBestResponse            	= function: 0x0113fc88 (function)
   ACT_VM_DRAW                     	= 183 (number)
   DOTA_UNIT_ORDER_MOVE_ITEM       	= 19 (number)
   DOTA_DAMAGE_FLAG_PROPERTY_FIRE  	= 8192 (number)
   ACT_DOTA_GESTURE_POINT          	= 1624 (number)
   ACT_SHIPLADDER_DOWN             	= 37 (number)
   ACT_SCRIPT_CUSTOM_27            	= 938 (number)
   MODIFIER_PROPERTY_SUPPRESS_TELEPORT	= 243 (number)
   ITEM_NOT_SHAREABLE              	= 2 (number)
   MODIFIER_PROPERTY_MOVESPEED_LIMIT	= 28 (number)
   DOTA_LOADOUT_TYPE_WEAPON        	= 0 (number)
   ACT_MP_RELOAD_STAND_PRIMARY_LOOP	= 575 (number)
   PrecacheItemByNameAsync         	= function: 0x01145550 (function)
   ACT_SMG2_IDLE2                  	= 265 (number)
   DOTA_UNIT_ORDER_GLYPH           	= 24 (number)
   SpawnDOTAShopTriggerRadiusApproximate	= function: 0x01146f58 (function)
   OVERHEAD_ALERT_HEAL             	= 10 (number)
   MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE	= 127 (number)
   ACT_WAVEFORM_END                	= 1546 (number)
   DOTA_ATTRIBUTE_MAX              	= 3 (number)
   MODIFIER_STATE_PROVIDES_VISION  	= 10 (number)
   ACT_MP_JUMP_PDA                 	= 750 (number)
   ACT_VR_SHOTGUN_TRIGGER_SQUEEZE  	= 978 (number)
   MODIFIER_EVENT_ON_HEAL_RECEIVED 	= 207 (number)
   ACT_DOTA_IMPALE                 	= 1787 (number)
   PATTACH_OVERHEAD_FOLLOW         	= 7 (number)
   MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT	= 34 (number)
   ACT_BUSY_LEAN_LEFT_ENTRY        	= 382 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM	= 20 (number)
   DOTA_INVENTORY_ALLOW_MAIN       	= 1 (number)
   MODIFIER_PROPERTY_REFLECT_SPELL 	= 138 (number)
   MODIFIER_STATE_FLYING           	= 24 (number)
   ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED	= 523 (number)
   ACT_CSGO_NULL                   	= 992 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE	= 71 (number)
   ACT_SCRIPT_CUSTOM_10            	= 921 (number)
   DOTA_ABILITY_BEHAVIOR_AOE       	= 32 (number)
   SPECIAL3                        	= 10 (number)
   ACT_DOTA_CAGED_CREEP_SMASH_OUT  	= 1647 (number)
   DOTA_ModifyXP_MAX               	= 6 (number)
   ACT_VR_PISTOL_LOW_KICK          	= 985 (number)
   ACT_SLAM_DETONATOR_DRAW         	= 257 (number)
   ACT_GESTURE_TURN_RIGHT          	= 166 (number)
   ScriptDebugRemoveTextFilter     	= function: 0x011b34a8 (function)
   DOTA_LOADOUT_TYPE_TAUNT         	= 20 (number)
   ACT_SLAM_THROW_TO_STICKWALL     	= 245 (number)
   ACT_DOTA_PIERCE_THE_VEIL        	= 1760 (number)
   DOTA_PLAYER_LOADOUT_END         	= 85 (number)
   MODIFIER_STATE_CANNOT_TARGET_ENEMIES	= 15 (number)
   DOTA_HUD_VISIBILITY_TOP_HEROES  	= 1 (number)
   ACT_ROLL_RIGHT                  	= 41 (number)
   loadstring                      	= function: builtin#24 (function)
   DOTA_UNIT_TARGET_BASIC          	= 18 (number)
   ACT_VR_PISTOL_LAST_SHOT         	= 943 (number)
   DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS	= 512 (number)
   DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR	= 16384 (number)
   DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND	= 18 (number)
   ACT_WALK_AIM_DUAL               	= 885 (number)
   ACT_MP_JUMP_LAND_ITEM2          	= 668 (number)
   MODIFIER_PROPERTY_SPELLS_REQUIRE_HP	= 221 (number)
   AE_CL_PLAYSOUND_ATTACHMENT      	= 2 (number)
   ACT_DOTA_NIGHTSTALKER_TRANSITION	= 1565 (number)
   DOTA_SPEECH_USER_SINGLE         	= 1 (number)
   MODIFIER_EVENT_ON_HEALTH_GAINED 	= 203 (number)
   DOTA_UNIT_ORDER_MOVE_RELATIVE   	= 39 (number)
   DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED	= 256 (number)
   MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE	= 50 (number)
   ACT_DOTA_FLAIL                  	= 1508 (number)
   UF_FAIL_ATTACK_IMMUNE           	= 22 (number)
   ACT_DOTA_CAST_CHAOS_METEOR_ORB  	= 1742 (number)
   ACT_SWIM                        	= 28 (number)
   ACT_DOTA_CAPTURE                	= 1533 (number)
   ACT_DOTA_TINKER_REARM1          	= 1555 (number)
   ACT_MP_AIRWALK                  	= 510 (number)
   DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS	= 17 (number)
   DOTA_SHOP_SIDE2                 	= 4 (number)
   AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN	= 32 (number)
   DebuggerBreak                   	= function: 0x01117538 (function)
   CDOTA_CustomUIManager           	= table: 0x0120c5c8 (table)
   {
      DynamicHud_SetVisible           	= function: 0x0120c778 (function)
      DynamicHud_SetDialogVariables   	= function: 0x0120c800 (function)
      FDesc                           	= table: 0x0120c650 (table)
      {
         DynamicHud_SetVisible           	= void DynamicHud_SetVisible(int, string, bool)
Toggle the visibility of an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, bool Visible ) (userdata)
         DynamicHud_Create               	= void DynamicHud_Create(int, string, string, handle)
Create a new custom UI HUD element for the specified player(s). ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ ) (userdata)
         DynamicHud_Destroy              	= void DynamicHud_Destroy(int, string)
Destroy a custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID ) (userdata)
         DynamicHud_SetDialogVariables   	= void DynamicHud_SetDialogVariables(int, string, handle)
Add or modify dialog variables for an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables ) (userdata)
      }
      IsNull                          	= function: 0x0120c5f0 (function)
      DynamicHud_Destroy              	= function: 0x0120c700 (function)
      DynamicHud_Create               	= function: 0x0120c678 (function)
   }
   AE_DOTA_CREATE_CLINKZ_ATTACK    	= 56 (number)
   HeroMaxLevel                    	= function: 0x01146ba8 (function)
   OVERHEAD_ALERT_DEATH            	= 20 (number)
   ACT_SLAM_THROW_TO_STICKWALL_ND  	= 246 (number)
   ACT_DOTA_IDLE_SLEEPING_END      	= 1639 (number)
   MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE	= 154 (number)
   DOTA_DEFAULT_UI_TOP_BAR_SCORE   	= 21 (number)
   ACT_MP_STAND_PDA                	= 744 (number)
   FindUnitsInRadius               	= function: 0x01145a18 (function)
   DOTA_UNIT_CAP_MOVE_GROUND       	= 1 (number)
   ACT_RANGE_ATTACK_SHOTGUN        	= 282 (number)
   MODIFIER_STATE_SPECIALLY_UNDENIABLE	= 49 (number)
   ACT_DOTA_ATTACK_EVENT_BASH      	= 1705 (number)
   OVERHEAD_ALERT_DAMAGE           	= 6 (number)
   ACT_IDLE_ON_FIRE                	= 133 (number)
   GlobalSys                       	= table: 0x01143f30 (table)
   {
      metatable = table: 0x01143ab8
      {
         CommandLineFloat                	= function: 0x01143cd0 (function)
         CommandLineInt                  	= function: 0x0113e6f0 (function)
         FDesc                           	= table: 0x01143b40 (table)
         {
            CommandLineCheck                	= table CommandLineCheck(string)
CommandLineCheck(name) : returns true if the command line param was used, otherwise false. (userdata)
            CommandLineStr                  	= table CommandLineStr(string, string)
CommandLineStr(name) : returns the command line param as a string. (userdata)
            CommandLineFloat                	= table CommandLineFloat(string, float)
CommandLineFloat(name) : returns the command line param as a float. (userdata)
            CommandLineInt                  	= table CommandLineInt(string, int)
CommandLineInt(name) : returns the command line param as an int. (userdata)
         }
         IsNull                          	= function: 0x01143ae0 (function)
         CommandLineCheck                	= function: 0x01143c58 (function)
         CommandLineStr                  	= function: 0x01143d58 (function)
      }
      __self                          	= userdata: 0x01143f70 (userdata)
   }
   MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE	= 136 (number)
   ABILITY_TYPE_BASIC              	= 0 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY	= 587 (number)
   DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE	= 5 (number)
   StartSoundEvent                 	= function: 0x0113d530 (function)
   MODIFIER_STATE_COMMAND_RESTRICTED	= 19 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND	= 18 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT	= 262144 (number)
   FireGameEventLocal              	= function: 0x0113daf0 (function)
   ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY	= 618 (number)
   ACT_SLAM_THROW_ND_IDLE          	= 238 (number)
   ACT_MP_GESTURE_FLINCH_RIGHTLEG  	= 688 (number)
   GetWorldMinX                    	= function: 0x01144c00 (function)
   EntityClasses                   	= table: 0x011dc878 (table)
   {
      CEntityInstance                 	= table: 0x011e21b0 (table)
      {
         metatable                       	= table: 0x01125f08 (table, already seen)
         describe_R                      	= function: 0x011e20b0 (function)
         __initprops__                   	= table: 0x011e21d8 (table)
         {
         }
         inspect                         	= function: 0x011e20d0 (function)
         __class__                       	= table: 0x011e21b0 (table, already seen)
         __getbase__                     	= function: 0x011eac70 (function)
         __getclass__                    	= function: 0x011eac50 (function)
         __instanceof__                  	= function: 0x011eac30 (function)
         constructor                     	= function: 0x011e1ff8 (function)
         Specification                   	= table: 0x011e2150 (table)
         {
            scriptclassname                 	= "CEntityInstance" (string)
         }
      }
      CBaseEntity                     	= table: 0x011eb000 (table)
      {
         metatable                       	= table: 0x01137138 (table, already seen)
         describe_R                      	= function: 0x011ead78 (function)
         __initprops__                   	= table: 0x011eb028 (table)
         {
         }
         inspect                         	= function: 0x011eaf20 (function)
         __class__                       	= table: 0x011eb000 (table, already seen)
         __getbase__                     	= function: 0x011eb140 (function)
         __getclass__                    	= function: 0x011eb120 (function)
         __instanceof__                  	= function: 0x011eb100 (function)
         constructor                     	= function: 0x011ead58 (function)
         Specification                   	= table: 0x011eafa0 (table)
         {
            scriptclassname                 	= "CBaseEntity" (string)
         }
      }
   }
   ACT_HL2MP_IDLE_MELEE            	= 496 (number)
   GetSpawnGroupEntityFilterFunc   	= function: 0x011b4028 (function)
   ACT_VM_HITCENTER                	= 201 (number)
   DOTA_LOADOUT_TYPE_SHAPESHIFT    	= 19 (number)
   ACT_LAND                        	= 32 (number)
   DOTA_SHOWGENERICPOPUP_TINT_SCREEN	= 1 (number)
   ACT_WALK_AIM_STEALTH            	= 98 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE	= 18 (number)
   ACT_MP_GESTURE_FLINCH_LEFTARM   	= 685 (number)
   MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT	= 27 (number)
   RemoveFOWViewer                 	= function: 0x011460c0 (function)
   ACT_MP_ITEM1_GRENADE1_ATTACK    	= 715 (number)
   RotateOrientation               	= function: 0x0113e3a0 (function)
   AE_CL_STOPSOUND                 	= 5 (number)
   ACT_WALK_CROUCH_RPG             	= 349 (number)
   ACT_DOTA_CAST_ABILITY_7         	= 1598 (number)
   DOUBLE_SHOT                     	= 2 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE	= 103 (number)
   DOTA_DAMAGE_FLAG_REFLECTION     	= 16 (number)
   DMG_POISON                      	= 131072 (number)
   UF_FAIL_DEAD                    	= 15 (number)
   ACT_MP_WALK_ITEM1               	= 645 (number)
   ACT_VM_IDLE_TO_LOWERED          	= 213 (number)
   PATTACH_ROOTBONE_FOLLOW         	= 9 (number)
   CDOTA_Modifier_Lua_Vertical_Motion	= table: 0x011335e0 (table)
   {
      metatable = table: 0x011310f0
      {
         GetAuraSearchTeam               	= function: 0x011328b0 (function)
         OnDestroy                       	= function: 0x01131140 (function)
         DestroyOnExpire                 	= function: 0x011318b8 (function)
         SetHasCustomTransmitterData     	= function: 0x01131cf0 (function)
         IsNull                          	= function: 0x01131118 (function)
         IsDebuff                        	= function: 0x01131478 (function)
         AllowIllusionDuplicate          	= function: 0x01131728 (function)
         HeroEffectPriority              	= function: 0x01132248 (function)
         IsPermanent                     	= function: 0x01131910 (function)
         GetAuraEntityReject             	= function: 0x011330d0 (function)
         GetAuraSearchFlags              	= function: 0x01132fc8 (function)
         OnStackCountChanged             	= function: 0x011313f0 (function)
         GetStatusEffectName             	= function: 0x0113bfd0 (function)
         RemoveOnDeath                   	= function: 0x011317b0 (function)
         GetPriority                     	= function: 0x01132110 (function)
         StatusEffectPriority            	= function: 0x0113f180 (function)
         OnRemoved                       	= function: 0x01131370 (function)
         GetTexture                      	= function: 0x01132010 (function)
         GetEffectName                   	= function: 0x01131e80 (function)
         IsPurgable                      	= function: 0x01131550 (function)
         GetAuraRadius                   	= function: 0x01133050 (function)
         GetAuraSearchType               	= function: 0x01132f40 (function)
         GetAuraDuration                 	= function: 0x01117700 (function)
         GetCritDamage                   	= function: 0x01131d80 (function)
         IsAura                          	= function: 0x011316b0 (function)
         GetAttributes                   	= function: 0x01132090 (function)
         IsPurgeException                	= function: 0x011315d0 (function)
         OnRefresh                       	= function: 0x011312a0 (function)
         OnCreated                       	= function: 0x01131220 (function)
         OnIntervalThink                 	= function: 0x011311a0 (function)
         ShouldUseOverheadOffset         	= function: 0x01131f88 (function)
         FDesc                           	= table: 0x01131178 (table)
         {
            GetAuraSearchTeam               	= int GetAuraSearchTeam()
Return the teams this aura applies its buff to. (userdata)
            OnDestroy                       	= void OnDestroy()
Runs when the modifier is destroyed (after unit loses modifier). (userdata)
            GetAuraDuration                 	= float GetAuraDuration()
Returns aura stickiness (userdata)
            SetHasCustomTransmitterData     	= void SetHasCustomTransmitterData(bool bHasCustomData)
 (userdata)
            IsDebuff                        	= bool IsDebuff()
True/false if this modifier should be displayed as a debuff. (userdata)
            AllowIllusionDuplicate          	= bool AllowIllusionDuplicate()
True/false if this modifier is active on illusions. (userdata)
            HeroEffectPriority              	= int HeroEffectPriority()
Relationship of this hero effect with those from other buffs (higher is more likely to be shown). (userdata)
            IsPermanent                     	= bool IsPermanent()
 (userdata)
            GetAuraSearchFlags              	= int GetAuraSearchFlags()
Return the unit flags this aura respects when placing buffs. (userdata)
            OnStackCountChanged             	= void OnStackCountChanged(int iStackCount)
Runs when stack count changes (param is old count). (userdata)
            GetStatusEffectName             	= string GetStatusEffectName()
Return the name of the status effect particle system that is created while this modifier is active. (userdata)
            RemoveOnDeath                   	= bool RemoveOnDeath()
True/false if this modifier is removed when the parent dies. (userdata)
            GetPriority                     	= int GetPriority()
Return the priority order this modifier will be applied over others. (userdata)
            StatusEffectPriority            	= int StatusEffectPriority()
Relationship of this status effect with those from other buffs (higher is more likely to be shown). (userdata)
            OnRemoved                       	= void OnRemoved()
Runs when the modifier is destroyed (before unit loses modifier). (userdata)
            GetTexture                      	= string GetTexture()
Return the name of the buff icon to be shown for this modifier. (userdata)
            GetEffectName                   	= string GetEffectName()
Return the name of the particle system that is created while this modifier is active. (userdata)
            IsPurgable                      	= bool IsPurgable()
True/false if this modifier can be purged. (userdata)
            GetAuraEntityReject             	= bool GetAuraEntityReject(handle hEntity)
Return true/false if this entity should receive the aura under specific conditions (userdata)
            GetAuraRadius                   	= int GetAuraRadius()
Return the range around the parent this aura tries to apply its buff. (userdata)
            GetAuraSearchType               	= int GetAuraSearchType()
Return the unit classifications this aura applies its buff to. (userdata)
            GetCritDamage                   	= float GetCritDamage()
A Modifier that listens to MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE has to have a GetCritDamage implementation so we can know when to evaluate it. Value should be in 'times the original value format' e.g: 1.5 not 150 (userdata)
            CanParentBeAutoAttacked         	= bool CanParentBeAutoAttacked()
 (userdata)
            GetAttributes                   	= int GetAttributes()
Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t (userdata)
            DestroyOnExpire                 	= bool DestroyOnExpire()
True/false if this buff is removed when the duration expires. (userdata)
            OnRefresh                       	= void OnRefresh(handle table)
Runs when the modifier is refreshed. (userdata)
            OnCreated                       	= void OnCreated(handle table)
Runs when the modifier is created. (userdata)
            OnIntervalThink                 	= void OnIntervalThink()
Runs when the think interval occurs. (userdata)
            ShouldUseOverheadOffset         	= bool ShouldUseOverheadOffset()
Apply the overhead offset to the attached effect. (userdata)
            IsPurgeException                	= bool IsPurgeException()
True/false if this modifier can be purged by strong dispels. (userdata)
            IsHidden                        	= bool IsHidden()
True/false if this modifier should be displayed on the buff bar. (userdata)
            GetModifierAura                 	= string GetModifierAura()
The name of the secondary modifier that will be applied by this modifier (if it is an aura). (userdata)
            IsAura                          	= bool IsAura()
True/false if this modifier is an aura. (userdata)
            GetHeroEffectName               	= string GetHeroEffectName()
Return the name of the hero effect particle system that is created while this modifier is active. (userdata)
            GetEffectAttachType             	= int GetEffectAttachType()
Return the attach type of the particle system from GetEffectName. (userdata)
            IsStunDebuff                    	= bool IsStunDebuff()
True/false if this modifier is considered a stun for purge reasons. (userdata)
            IsAuraActiveOnDeath             	= bool IsAuraActiveOnDeath()
True/false if this aura provides buffs when the parent is dead. (userdata)
         }
         IsHidden                        	= function: 0x011314d0 (function)
         CanParentBeAutoAttacked         	= function: 0x01144b80 (function)
         GetModifierAura                 	= function: 0x01131e00 (function)
         GetHeroEffectName               	= function: 0x011321c0 (function)
         GetEffectAttachType             	= function: 0x01131f00 (function)
         IsStunDebuff                    	= function: 0x01131658 (function)
         IsAuraActiveOnDeath             	= function: 0x01131830 (function)
         StartIntervalThink              	= function: 0x01130498 (function)
         GetRemainingTime                	= function: 0x0112ff08 (function)
         GetLastAppliedTime              	= function: 0x01130728 (function)
         AddParticle                     	= function: 0x011305a0 (function)
         GetAuraDuration                 	= function: 0x011307b0 (function)
         FDesc                           	= table: 0x0112f328 (table)
         {
            StartIntervalThink              	= void StartIntervalThink(float flInterval)
Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1. (userdata)
            GetAbility                      	= handle GetAbility()
Get the ability that generated the modifier. (userdata)
            GetParent                       	= handle GetParent()
Get the unit the modifier is parented to. (userdata)
            GetAuraDuration                 	= float GetAuraDuration()
Returns aura stickiness (default 0.5) (userdata)
            GetRemainingTime                	= float GetRemainingTime()
 (userdata)
            HasFunction                     	= bool HasFunction(int iFunction)
 (userdata)
            DecrementStackCount             	= void DecrementStackCount()
Decrease this modifier's stack count by 1. (userdata)
            SendBuffRefreshToClients        	= void SendBuffRefreshToClients()
 (userdata)
            SetStackCount                   	= void SetStackCount(int iCount)
 (userdata)
            AddParticle                     	= void AddParticle(int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect)
(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect (userdata)
            DestroyOnExpire                 	= bool DestroyOnExpire()
 (userdata)
            GetDieTime                      	= float GetDieTime()
 (userdata)
            GetStackCount                   	= int GetStackCount()
 (userdata)
            GetDuration                     	= float GetDuration()
 (userdata)
            IsDebuff                        	= bool IsDebuff()
 (userdata)
            GetCaster                       	= handle GetCaster()
Get the owner of the ability responsible for the modifier. (userdata)
            GetLastAppliedTime              	= float GetLastAppliedTime()
 (userdata)
            CheckStateToTable               	= void CheckStateToTable(handle table)
 (userdata)
            GetCreationTime                 	= float GetCreationTime()
 (userdata)
            SetOverheadEffectOffset         	= bool SetOverheadEffectOffset(float flOffset)
 (userdata)
            SetDuration                     	= void SetDuration(float flDuration, bool bInformClient)
(flTime, bInformClients) (userdata)
            ForceRefresh                    	= void ForceRefresh()
Run all associated refresh functions on this modifier as if it was re-applied. (userdata)
            Destroy                         	= void Destroy()
Run all associated destroy functions, then remove the modifier. (userdata)
            GetSerialNumber                 	= int GetSerialNumber()
 (userdata)
            GetName                         	= string GetName()
 (userdata)
            GetClass                        	= string GetClass()
 (userdata)
            GetElapsedTime                  	= float GetElapsedTime()
 (userdata)
            IncrementStackCount             	= void IncrementStackCount()
Increase this modifier's stack count by 1. (userdata)
            GetAuraOwner                    	= handle GetAuraOwner()
 (userdata)
            IsStunDebuff                    	= bool IsStunDebuff()
 (userdata)
            IsHexDebuff                     	= bool IsHexDebuff()
 (userdata)
         }
         GetStackCount                   	= function: 0x0112fa00 (function)
         GetDuration                     	= function: 0x0112fb80 (function)
         IsDebuff                        	= function: 0x0112f5e8 (function)
         CheckStateToTable               	= function: 0x0112f2f0 (function)
         GetSerialNumber                 	= function: 0x01130830 (function)
         SetDuration                     	= function: 0x01130520 (function)
         GetAbility                      	= function: 0x011309b0 (function)
         IsHexDebuff                     	= function: 0x0112f6e8 (function)
         IncrementStackCount             	= function: 0x0112f8f0 (function)
         HasFunction                     	= function: 0x0112f4d8 (function)
         SendBuffRefreshToClients        	= function: 0x0112f558 (function)
         SetStackCount                   	= function: 0x0112fa80 (function)
         GetCreationTime                 	= function: 0x011306a8 (function)
         GetElapsedTime                  	= function: 0x0112ff90 (function)
         GetCaster                       	= function: 0x011308b0 (function)
         GetDieTime                      	= function: 0x0112fb00 (function)
         GetAuraOwner                    	= function: 0x01130398 (function)
         ForceRefresh                    	= function: 0x01130318 (function)
         Destroy                         	= function: 0x0112f428 (function)
         IsNull                          	= function: 0x0112f2c8 (function)
         DecrementStackCount             	= function: 0x0112f978 (function)
         GetClass                        	= function: 0x0112f3a8 (function)
         GetName                         	= function: 0x0112f350 (function)
         SetOverheadEffectOffset         	= function: 0x01130620 (function)
         GetParent                       	= function: 0x01130930 (function)
         IsStunDebuff                    	= function: 0x0112f668 (function)
         DestroyOnExpire                 	= function: 0x01130418 (function)
      }
      SetMotionPriority               	= function: 0x01133690 (function)
      OnVerticalMotionInterrupted     	= function: 0x011338a8 (function)
      UpdateVerticalMotion            	= function: 0x01133630 (function)
      FDesc                           	= table: 0x01133668 (table)
      {
         ApplyVerticalMotionController   	= bool ApplyVerticalMotionController()
Starts the vertical motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateVerticalMotion            	= void UpdateVerticalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         GetMotionPriority               	= int GetMotionPriority()
Get the priority (userdata)
         OnVerticalMotionInterrupted     	= void OnVerticalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
         SetMotionPriority               	= void SetMotionPriority(int nMotionPriority)
Set the priority (userdata)
      }
      IsNull                          	= function: 0x01133608 (function)
      ApplyVerticalMotionController   	= function: 0x01117828 (function)
      GetMotionPriority               	= function: 0x01133718 (function)
   }
   DOTA_LOADOUT_TYPE_NECK          	= 9 (number)
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX	= 26 (number)
   ACT_CSGO_ALIVE_LOOP             	= 1016 (number)
   MODIFIER_PROPERTY_ILLUSION_LABEL	= 151 (number)
   ACT_MP_GESTURE_FLINCH_STOMACH   	= 684 (number)
   ACT_HL2MP_JUMP_MELEE            	= 502 (number)
   DOTA_GAMERULES_STATE_SCENARIO_SETUP	= 8 (number)
   MODIFIER_FUNCTION_LAST          	= 254 (number)
   ACT_DOTA_SHALLOW_GRAVE          	= 1670 (number)
   MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE	= 142 (number)
   CDOTA_Modifier_Lua_Motion_Both  	= table: 0x01133aa8 (table)
   {
      metatable                       	= table: 0x011310f0 (table, already seen)
      UpdateVerticalMotion            	= function: 0x01133ec8 (function)
      ApplyHorizontalMotionController 	= function: 0x01133c08 (function)
      GetPriority                     	= function: 0x01133bb0 (function)
      OnHorizontalMotionInterrupted   	= function: 0x01133e70 (function)
      OnVerticalMotionInterrupted     	= function: 0x01133f20 (function)
      SetPriority                     	= function: 0x01133b58 (function)
      FDesc                           	= table: 0x01133b30 (table)
      {
         OnVerticalMotionInterrupted     	= void OnVerticalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
         ApplyVerticalMotionController   	= bool ApplyVerticalMotionController()
Starts the vertical motion controller effects for this buff.  Returns true if successful. (userdata)
         OnHorizontalMotionInterrupted   	= void OnHorizontalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
         SetPriority                     	= void SetPriority(int nMotionPriority)
Set the priority (userdata)
         UpdateVerticalMotion            	= void UpdateVerticalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         ApplyHorizontalMotionController 	= bool ApplyHorizontalMotionController()
Starts the horizontal motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateHorizontalMotion          	= void UpdateHorizontalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         GetPriority                     	= int GetPriority()
Get the priority (userdata)
      }
      IsNull                          	= function: 0x01133ad0 (function)
      UpdateHorizontalMotion          	= function: 0x01133d50 (function)
      ApplyVerticalMotionController   	= function: 0x01133af8 (function)
   }
   MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2	= 21 (number)
   MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR	= 132 (number)
   ACT_RELOAD_PISTOL_LOW           	= 372 (number)
   ACT_TINY_GROWL                  	= 1560 (number)
   ACT_DIE_RIGHTSIDE               	= 403 (number)
   EF_NODRAW                       	= 32 (number)
   MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED	= 195 (number)
   ACT_VM_RELOAD_EMPTY             	= 182 (number)
   ACT_DOTA_LIFESTEALER_INFEST_END 	= 1577 (number)
   PATTACH_EYES_FOLLOW             	= 6 (number)
   ACT_SMG2_TOAUTO                 	= 270 (number)
   DOTA_GAMERULES_STATE_HERO_SELECTION	= 3 (number)
   AE_SV_BODYGROUP_SET_VALUE       	= 31 (number)
   UTIL_MessageTextAll_WithContext 	= function: 0x01140838 (function)
   ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW	= 308 (number)
   StopSoundOn                     	= function: 0x0113d218 (function)
   AE_DOTA_SWITCH_ATTACK_COMBO     	= 59 (number)
   ACT_MP_VCD                      	= 521 (number)
   ACT_SCRIPT_CUSTOM_31            	= 942 (number)
   MELEE_HIT                       	= 5 (number)
   ACT_PDA_VM_DRAW                 	= 841 (number)
   ACT_RUN_RIFLE_RELAXED           	= 328 (number)
   bit                             	= table: 0x01115ea8 (table)
   {
      rol                             	= function: builtin#71 (function)
      rshift                          	= function: builtin#69 (function)
      ror                             	= function: builtin#72 (function)
      bswap                           	= function: builtin#67 (function)
      bxor                            	= function: builtin#75 (function)
      bor                             	= function: builtin#74 (function)
      arshift                         	= function: builtin#70 (function)
      bnot                            	= function: builtin#66 (function)
      tobit                           	= function: builtin#65 (function)
      lshift                          	= function: builtin#68 (function)
      tohex                           	= function: builtin#76 (function)
      band                            	= function: builtin#73 (function)
   }
   DOTA_LOADOUT_PERSONA_1_END      	= 56 (number)
   MODIFIER_PROPERTY_AVOID_SPELL   	= 68 (number)
   DOTA_ITEM_STASH_MIN             	= 9 (number)
   ACT_OBJ_IDLE                    	= 467 (number)
   RandomVector                    	= function: 0x01144b00 (function)
   ACT_MP_ATTACK_CROUCH_GRENADE    	= 529 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET	= 1 (number)
   ACT_SLAM_TRIPMINE_TO_THROW_ND   	= 255 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1	= 32 (number)
   ACT_GRABBITYGLOVES_GRAB         	= 955 (number)
   AE_CL_BODYGROUP_SET_VALUE       	= 30 (number)
   ACT_PDA_VM_PULLBACK             	= 844 (number)
   DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK	= 32768 (number)
   ACT_SLAM_TRIPMINE_IDLE          	= 250 (number)
   ACT_PLAYER_RUN_FIRE             	= 492 (number)
   ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE	= 534 (number)
   ACT_MP_ITEM2_GRENADE1_IDLE      	= 720 (number)
   ACT_ANTLION_SCUTTLE_LEFT        	= 969 (number)
   ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK	= 1570 (number)
   DOTA_LOADOUT_TYPE_RADIANT_CREEPS	= 73 (number)
   ACT_RELOAD_PISTOL               	= 371 (number)
   ScriptDebugFirstLine            	= 6 (number)
   DOTA_DEFAULT_UI_INVENTORY_GOLD  	= 11 (number)
   PrecacheUnitByNameSync          	= function: 0x01201c90 (function)
   tonumber                        	= function: builtin#17 (function)
   DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM	= 20 (number)
   ACT_MP_RUN_SECONDARY            	= 592 (number)
   ScriptDebugAddWatch             	= function: 0x011b2450 (function)
   CDOTABaseAbility                	= table: 0x0117bba8 (table, already seen)
   ACT_DO_NOT_DISTURB              	= 179 (number)
   DOTA_UNIT_ORDER_RADAR           	= 31 (number)
   ACT_DOTA_ATTACK_PARTICLE        	= 1762 (number)
   MODIFIER_EVENT_ON_DOMINATED     	= 229 (number)
   __UNKNOWN__                     	= 12 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_SHOP	= 6 (number)
   ACT_MP_ATTACK_SWIM_SECONDARYFIRE	= 531 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2	= 788 (number)
   DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS	= 2 (number)
   ACT_TURNRIGHT45                 	= 460 (number)
   DOTAGameManager                 	= table: 0x0112dfd8 (table)
   {
      metatable = table: 0x0112dc90
      {
         GetHeroDataByName_Script        	= function: 0x0112df20 (function)
         GetHeroNameForUnitName          	= function: 0x0112de40 (function)
         GetHeroUnitNameByID             	= function: 0x0112dce0 (function)
         FDesc                           	= table: 0x0112dd18 (table)
         {
            GetHeroNameForUnitName          	= string GetHeroNameForUnitName(string)
Get the hero name given a unit name. (userdata)
            GetHeroDataByName_Script        	= table GetHeroDataByName_Script(string)
Get the hero unit  (userdata)
            GetHeroUnitNameByID             	= string GetHeroUnitNameByID(int)
Get the hero unit name given the hero ID. (userdata)
            GetHeroNameByID                 	= string GetHeroNameByID(int)
Get the hero name given a hero ID. (userdata)
            GetHeroIDByName                 	= int GetHeroIDByName(string)
Get the hero ID given the hero name. (userdata)
         }
         IsNull                          	= function: 0x0112dcb8 (function)
         GetHeroNameByID                 	= function: 0x0112dd40 (function)
         GetHeroIDByName                 	= function: 0x0112ddc0 (function)
      }
      __self                          	= userdata: 0x0112e018 (userdata)
   }
   ACT_IDLE_RPG_RELAXED            	= 343 (number)
   MODIFIER_STATE_OUT_OF_GAME      	= 31 (number)
   ACT_MELEE_VM_LOWERED_TO_IDLE    	= 840 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET	= 32768 (number)
   MODIFIER_STATE_INVULNERABLE     	= 8 (number)
   ACT_MP_JUMP_LAND_SECONDARY      	= 599 (number)
   ACT_DOTA_RAZE_2                 	= 1664 (number)
   DMG_NEVERGIB                    	= 4096 (number)
   ACT_IDLE_AIM_AUTOGUN            	= 879 (number)
   ACT_DOTA_RELAX_OUT              	= 1779 (number)
   ACT_SIGNAL2                     	= 51 (number)
   debug                           	= table: 0x01115890 (table)
   {
      traceback                       	= function: builtin#146 (function)
      setlocal                        	= function: builtin#138 (function)
      getupvalue                      	= function: builtin#139 (function)
      setupvalue                      	= function: builtin#140 (function)
      upvalueid                       	= function: builtin#141 (function)
      getlocal                        	= function: builtin#137 (function)
      getregistry                     	= function: builtin#131 (function)
      getinfo                         	= function: builtin#136 (function)
      sethook                         	= function: builtin#143 (function)
      setmetatable                    	= function: builtin#133 (function)
      upvaluejoin                     	= function: builtin#142 (function)
      gethook                         	= function: builtin#144 (function)
      debug                           	= function: builtin#145 (function)
      getmetatable                    	= function: builtin#132 (function)
      setfenv                         	= function: builtin#135 (function)
      getfenv                         	= function: builtin#134 (function)
   }
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN	= 25 (number)
   ACT_MP_GESTURE_FLINCH           	= 676 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE	= 81 (number)
   UF_FAIL_SUMMONED                	= 11 (number)
   ACT_MP_JUMP_ITEM1               	= 648 (number)
   DOTA_LOADOUT_TYPE_MEGA_KILLS    	= 60 (number)
   DOTA_HUD_VISIBILITY_AGHANIMS_STATUS	= 29 (number)
   ACT_MP_ATTACK_SWIM_SECONDARY    	= 603 (number)
   ACT_DIE_HEADSHOT                	= 114 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST	= 4 (number)
   MODIFIER_PRIORITY_NORMAL        	= 1 (number)
   ABILITY_TYPE_ULTIMATE           	= 1 (number)
   RELOAD                          	= 3 (number)
   DOTA_UNIT_ORDER_CAST_TARGET     	= 6 (number)
   ACT_BUSY_STAND                  	= 393 (number)
   DOTA_HEROPICK_STATE_CM_INTRO    	= 5 (number)
   DOTA_SHOP_SECRET                	= 2 (number)
   ACT_WALK_CARRY                  	= 428 (number)
   ACT_PDA_VM_IDLE_LOWERED         	= 850 (number)
   ACT_EXPLODE                     	= 910 (number)
   ACT_GESTURE_FLINCH_LEFTARM      	= 161 (number)
   LinkLuaModifier                 	= function: 0x011f8780 (function)
   DOTA_HEROPICK_STATE_CM_BAN2     	= 8 (number)
   PlayerResource                  	= table: 0x01365340 (table)
   {
      metatable = table: 0x011b5160
      {
         GetEventGameUpgrades            	= function: 0x011b83e8 (function)
         GetDenies                       	= function: 0x011b70e8 (function)
         GetNthCourierForTeam            	= function: 0x011ba510 (function)
         RecordEventActionGrantForPrimaryEvent	= function: 0x011b8590 (function)
         GetLastHits                     	= function: 0x011b6ce8 (function)
         GetTeam                         	= function: 0x011b97e8 (function)
         GetCustomBuybackCost            	= function: 0x011b7ce8 (function)
         FDesc                           	= table: 0x011b51e8 (table)
         {
            GetEventGameUpgrades            	= handle GetEventGameUpgrades(int nPlayerID)
(nPlayerID) (userdata)
            GetDenies                       	= int GetDenies(int iPlayerID)
 (userdata)
            GetNthCourierForTeam            	= handle GetNthCourierForTeam(int nCourierIndex, int nTeamNumber)
 (userdata)
            RecordEventActionGrantForPrimaryEvent	= void RecordEventActionGrantForPrimaryEvent(int iPlayerID, string pszActionName, int unAudit, unsigned unQuantity, unsigned unAuditData)
 (userdata)
            GetLastHits                     	= int GetLastHits(int iPlayerID)
 (userdata)
            GetTeam                         	= int GetTeam(int iPlayerID)
 (userdata)
            GetCustomBuybackCost            	= int GetCustomBuybackCost(int iPlayerID)
 (userdata)
            GetPlayerName                   	= string GetPlayerName(int iPlayerID)
 (userdata)
            NumPlayers                      	= int NumPlayers()
 (userdata)
            GetTowerDamageTaken             	= int GetTowerDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
            IsDisableHelpSetForPlayerID     	= bool IsDisableHelpSetForPlayerID(int nPlayerID, int nOtherPlayerID)
 (userdata)
            SetCustomBuybackCost            	= void SetCustomBuybackCost(int iPlayerID, int iGoldCost)
Set the buyback cost for this player. (userdata)
            GetMisses                       	= int GetMisses(int iPlayerID)
 (userdata)
            GetClaimedDenies                	= int GetClaimedDenies(int iPlayerID)
 (userdata)
            IncrementTotalEarnedXP          	= void IncrementTotalEarnedXP(int iPlayerID, int iXP, int nReason)
 (userdata)
            IsBroadcaster                   	= bool IsBroadcaster(int iPlayerID)
 (userdata)
            AddRunePickup                   	= void AddRunePickup(int iPlayerID, int nRunes)
 (userdata)
            GetSteamID                      	= uint64 GetSteamID(int iPlayerID)
Get the 64 bit steam ID for a given player. (userdata)
            GetCreepDamageTaken             	= int GetCreepDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
            GetUnitShareMaskForPlayer       	= int GetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID)
 (userdata)
            GetCustomBuybackCooldown        	= float GetCustomBuybackCooldown(int iPlayerID)
 (userdata)
            HasSelectedHero                 	= bool HasSelectedHero(int iPlayerID)
 (userdata)
            IsFakeClient                    	= bool IsFakeClient(int iPlayerID)
 (userdata)
            GetNetWorth                     	= int GetNetWorth(int iPlayerID)
 (userdata)
            GetTotalEarnedXP                	= int GetTotalEarnedXP(int iPlayerID)
 (userdata)
            HaveAllPlayersJoined            	= bool HaveAllPlayersJoined()
 (userdata)
            GetSelectedHeroName             	= string GetSelectedHeroName(int iPlayerID)
 (userdata)
            AddAegisPickup                  	= void AddAegisPickup(int iPlayerID)
 (userdata)
            GetDamageDoneToHero             	= int GetDamageDoneToHero(int iPlayerID, int iVictimID)
 (userdata)
            GetLabyrinthEventGameHeroUnlocks	= handle GetLabyrinthEventGameHeroUnlocks(int nPlayerID)
(nPlayerID) (userdata)
            HasRandomed                     	= bool HasRandomed(int iPlayerID)
 (userdata)
            GetLiveSpectatorTeam            	= <unknown> GetLiveSpectatorTeam(int iPlayerID)
 (userdata)
            IsValidTeamPlayerID             	= bool IsValidTeamPlayerID(int nPlayerID)
 (userdata)
            GetHealing                      	= float GetHealing(int iPlayerID)
 (userdata)
            GetTotalGoldSpent               	= int GetTotalGoldSpent(int iPlayerID)
 (userdata)
            GetXPPerMin                     	= float GetXPPerMin(int iPlayerID)
 (userdata)
            GetGoldPerMin                   	= float GetGoldPerMin(int iPlayerID)
 (userdata)
            ClearLastHitStreak              	= void ClearLastHitStreak(int iPlayerID)
 (userdata)
            SetBuybackCooldownTime          	= void SetBuybackCooldownTime(int nPlayerID, float flBuybackCooldown)
 (userdata)
            AddCandyEvent                   	= void AddCandyEvent(int iPlayerID, int nReason)
 (userdata)
            IncrementNearbyCreepDeaths      	= void IncrementNearbyCreepDeaths(int iPlayerID, int nCreeps)
 (userdata)
            GetTotalEarnedGold              	= int GetTotalEarnedGold(int iPlayerID)
 (userdata)
            UpdateTeamSlot                  	= void UpdateTeamSlot(int iPlayerID, int iTeamNumber, int desiredSlot)
 (userdata)
            SetCustomTeamAssignment         	= void SetCustomTeamAssignment(int iPlayerID, int iTeamAssignment)
Set custom team assignment for this player. (userdata)
            IsHeroSharedWithPlayerID        	= bool IsHeroSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)
 (userdata)
            GetSelectedHeroEntity           	= handle GetSelectedHeroEntity(int iPlayerID)
 (userdata)
            GetNearbyCreepDeaths            	= int GetNearbyCreepDeaths(int iPlayerID)
 (userdata)
            GetConnectionState              	= <unknown> GetConnectionState(int iPlayerID)
 (userdata)
            GetStreak                       	= int GetStreak(int iPlayerID)
 (userdata)
            GetKillsDoneToHero              	= int GetKillsDoneToHero(int iPlayerID, int iVictimID)
 (userdata)
            AddClaimedFarm                  	= void AddClaimedFarm(int iPlayerID, float flFarmValue, bool bEarnedValue)
 (userdata)
            GetHeroDamageTaken              	= int GetHeroDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
            ReplaceHeroWithNoTransfer       	= handle ReplaceHeroWithNoTransfer(int iPlayerID, string pszHeroClass, int nGold, int nXP)
(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP, without transferring items/abilities if same hero (userdata)
            GetSelectedHeroID               	= int GetSelectedHeroID(int iPlayerID)
 (userdata)
            GetRunePickups                  	= int GetRunePickups(int iPlayerID)
 (userdata)
            GetClaimedFarm                  	= float GetClaimedFarm(int iPlayerID, bool bOnlyEarned)
 (userdata)
            GetEventPremiumPoints           	= unsigned GetEventPremiumPoints(int nPlayerID)
 (userdata)
            IncrementDenies                 	= void IncrementDenies(int iPlayerID, int nValue)
 (userdata)
            ClearKillsMatrix                	= void ClearKillsMatrix(int iPlayerID)
 (userdata)
            GetGoldSpentOnConsumables       	= int GetGoldSpentOnConsumables(int iPlayerID)
 (userdata)
            IsValidPlayerID                 	= bool IsValidPlayerID(int iPlayerID)
 (userdata)
            GetNthPlayerIDOnTeam            	= int GetNthPlayerIDOnTeam(int iTeamNumber, int iNthPlayer)
 (userdata)
            IsValidTeamPlayer               	= bool IsValidTeamPlayer(int iPlayerID)
 (userdata)
            SetCustomBuybackCooldown        	= void SetCustomBuybackCooldown(int iPlayerID, float flCooldownTime)
Set the buyback cooldown for this player. (userdata)
            CanRepick                       	= bool CanRepick(int iPlayerID)
 (userdata)
            GetAegisPickups                 	= int GetAegisPickups(int iPlayerID)
 (userdata)
            SetHasRandomed                  	= void SetHasRandomed(int iPlayerID)
 (userdata)
            SetCameraTarget                 	= void SetCameraTarget(int nPlayerID, handle hTarget)
(playerID, entity) - force the given player's camera to follow the given entity (userdata)
            IncrementLastHitMultikill       	= void IncrementLastHitMultikill(int iPlayerID, int nCount)
 (userdata)
            HasSetEventGameCustomActionClaimCount	= bool HasSetEventGameCustomActionClaimCount()
 (userdata)
            IsValidPlayer                   	= bool IsValidPlayer(int iPlayerID)
 (userdata)
            ClearLastHitMultikill           	= void ClearLastHitMultikill(int iPlayerID)
 (userdata)
            ModifyGold                      	= int ModifyGold(int iPlayerID, int iGoldChange, bool bReliable, int nReason)
 (userdata)
            GetGoldSpentOnSupport           	= int GetGoldSpentOnSupport(int iPlayerID)
 (userdata)
            GetPlayerCount                  	= int GetPlayerCount()
Includes spectators and players not assigned to a team (userdata)
            ClearStreak                     	= void ClearStreak(int iPlayerID)
 (userdata)
            AreUnitsSharedWithPlayerID      	= bool AreUnitsSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)
 (userdata)
            GetPartyID                      	= uint64 GetPartyID(int iPlayerID)
 (userdata)
            GetSteamAccountID               	= unsigned GetSteamAccountID(int iPlayerID)
 (userdata)
            SetBuybackGoldLimitTime         	= void SetBuybackGoldLimitTime(int nPlayerID, float flBuybackCooldown)
 (userdata)
            GetTimeOfLastConsumablePurchase 	= float GetTimeOfLastConsumablePurchase(int iPlayerID)
 (userdata)
            GetTimeOfLastItemPurchase       	= float GetTimeOfLastItemPurchase(int iPlayerID)
 (userdata)
            ClearRawPlayerDamageMatrix      	= void ClearRawPlayerDamageMatrix(int iPlayerID)
 (userdata)
            GetBroadcasterChannel           	= unsigned GetBroadcasterChannel(int iPlayerID)
 (userdata)
            IncrementClaimedMisses          	= void IncrementClaimedMisses(int iPlayerID, int nValue)
 (userdata)
            AddGoldSpentOnSupport           	= void AddGoldSpentOnSupport(int iPlayerID, int iCost)
 (userdata)
            GetPlayerCountForTeam           	= int GetPlayerCountForTeam(int iTeam)
 (userdata)
            GetRespawnSeconds               	= int GetRespawnSeconds(int iPlayerID)
 (userdata)
            GetTeamPlayerCount              	= int GetTeamPlayerCount()
(Deprecated: use GetNumConnectedHumanPlayers) Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game (userdata)
            IsHeroSelected                  	= bool IsHeroSelected(string pHeroname, bool bIgnoreUnrevealedPick)
 (userdata)
            GetLevel                        	= int GetLevel(int iPlayerID)
 (userdata)
            GetLastHitMultikill             	= int GetLastHitMultikill(int iPlayerID)
 (userdata)
            GetPreferredCourierForPlayer    	= handle GetPreferredCourierForPlayer(int nPlayerId)
 (userdata)
            AddNeutralItemToStash           	= void AddNeutralItemToStash(int iPlayerID, int nTeamNumber, handle hItem)
 (userdata)
            RecordEventActionGrant          	= void RecordEventActionGrant(int iPlayerID, int eEvent, int unActionID, int unAudit, unsigned unQuantity, unsigned unAuditData)
 (userdata)
            GetEventRanks                   	= <unknown> GetEventRanks(int nPlayerID)
 (userdata)
            GetGoldLostToDeath              	= int GetGoldLostToDeath(int iPlayerID)
 (userdata)
            GetEventGameCustomActionClaimCountByName	= int GetEventGameCustomActionClaimCountByName(int nPlayerID, string pActionName)
(nPlayerID, pActionName) (userdata)
            GetEventGameCustomActionClaimCount	= int GetEventGameCustomActionClaimCount(int nPlayerID, unsigned unActionID)
(nPlayerID, nActionID) (userdata)
            SetGold                         	= void SetGold(int iPlayerID, int iGold, bool bReliable)
 (userdata)
            SetCustomPlayerColor            	= void SetCustomPlayerColor(int iPlayerID, int r, int g, int b)
Set custom color for player (minimap, scoreboard, etc) (userdata)
            GetTowerKills                   	= int GetTowerKills(int iPlayerID)
 (userdata)
            ReplaceHeroWith                 	= handle ReplaceHeroWith(int iPlayerID, string pszHeroClass, int nGold, int nXP)
(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP (userdata)
            GetUnreliableGold               	= int GetUnreliableGold(int iPlayerID)
 (userdata)
            GetAssists                      	= int GetAssists(int iPlayerID)
 (userdata)
            HasCustomGameTicketForPlayerID  	= bool HasCustomGameTicketForPlayerID(int iPlayerID)
Does this player have a custom game ticket for this game? (userdata)
            GetDeaths                       	= int GetDeaths(int iPlayerID)
 (userdata)
            WhoSelectedHero                 	= int WhoSelectedHero(string pHeroFilename, bool bIgnoreUnrevealedPick)
 (userdata)
            GetGoldSpentOnItems             	= int GetGoldSpentOnItems(int iPlayerID)
 (userdata)
            IncrementKills                  	= void IncrementKills(int iPlayerID, int iVictimID)
 (userdata)
            RecordConsumableAbilityChargeChange	= void RecordConsumableAbilityChargeChange(int iPlayerID, int item_definition_index, int nChargeIncrementOrDecrement)
Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement) (userdata)
            IncrementAssists                	= void IncrementAssists(int iPlayerID, int iVictimID)
 (userdata)
            SetCustomIntParam               	= void SetCustomIntParam(int iPlayerID, int iParam)
 (userdata)
            NumTeamPlayers                  	= int NumTeamPlayers()
 (userdata)
            GetKills                        	= int GetKills(int iPlayerID)
 (userdata)
            SetOverrideSelectionEntity      	= void SetOverrideSelectionEntity(int nPlayerID, handle hEntity)
Set the forced selection entity for a player. (userdata)
            GetNumConnectedHumanPlayers     	= int GetNumConnectedHumanPlayers()
Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game (userdata)
            GetReliableGold                 	= int GetReliableGold(int iPlayerID)
 (userdata)
            ResetBuybackCostTime            	= void ResetBuybackCostTime(int nPlayerID)
 (userdata)
            GetNumItemsPurchased            	= int GetNumItemsPurchased(int iPlayerID)
 (userdata)
            GetGoldSpentOnBuybacks          	= int GetGoldSpentOnBuybacks(int iPlayerID)
 (userdata)
            GetStuns                        	= float GetStuns(int iPlayerID)
 (userdata)
            IncrementLastHits               	= void IncrementLastHits(int iPlayerID, int nCount)
 (userdata)
            GetClaimedMisses                	= int GetClaimedMisses(int iPlayerID)
 (userdata)
            SpendGold                       	= void SpendGold(int iPlayerID, int iCost, int iReason)
 (userdata)
            ResetTotalEarnedGold            	= void ResetTotalEarnedGold(int iPlayerID)
 (userdata)
            SetUnitShareMaskForPlayer       	= void SetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID, int nFlag, bool bState)
 (userdata)
            GetGold                         	= int GetGold(int iPlayerID)
 (userdata)
            GetNumConsumablesPurchased      	= int GetNumConsumablesPurchased(int iPlayerID)
 (userdata)
            SetCanRepick                    	= void SetCanRepick(int iPlayerID, bool bCanRepick)
 (userdata)
            GetPlayer                       	= handle GetPlayer(int iPlayerID)
 (userdata)
            IncrementLastHitStreak          	= void IncrementLastHitStreak(int iPlayerID, int nCount)
 (userdata)
            GetEventPointsForPlayerID       	= unsigned GetEventPointsForPlayerID(int nPlayerID)
 (userdata)
            GetRoshanKills                  	= int GetRoshanKills(int iPlayerID)
 (userdata)
            IncrementClaimedDenies          	= void IncrementClaimedDenies(int iPlayerID, int nValue)
 (userdata)
            IncrementDeaths                 	= void IncrementDeaths(int iPlayerID, int iKillerID)
 (userdata)
            IncrementMisses                 	= void IncrementMisses(int iPlayerID, int nValue)
 (userdata)
            GetPlayerLoadedCompletely       	= bool GetPlayerLoadedCompletely(int iPlayerID)
 (userdata)
            GetTeamKills                    	= int GetTeamKills(int iTeam)
 (userdata)
            GetBroadcasterChannelSlot       	= unsigned GetBroadcasterChannelSlot(int iPlayerID)
 (userdata)
            GetCustomTeamAssignment         	= int GetCustomTeamAssignment(int iPlayerID)
Get the current custom team assignment for this player. (userdata)
            GetNumCouriersForTeam           	= int GetNumCouriersForTeam(int nTeamNumber)
 (userdata)
            IncrementStreak                 	= void IncrementStreak(int iPlayerID, int nCount)
 (userdata)
            GetRawPlayerDamage              	= int GetRawPlayerDamage(int iPlayerID)
 (userdata)
            SetLastBuybackTime              	= void SetLastBuybackTime(int iPlayerID, int iLastBuybackTime)
 (userdata)
            GetLastHitStreak                	= int GetLastHitStreak(int iPlayerID)
 (userdata)
            GetTimeOfLastDeath              	= float GetTimeOfLastDeath(int iPlayerID)
 (userdata)
         }
         IsNull                          	= function: 0x011b5188 (function)
         NumPlayers                      	= function: 0x011b5298 (function)
         GetTowerDamageTaken             	= function: 0x011f86c0 (function)
         IncrementDeaths_Engine          	= function: 0x011b5a88 (function)
         GetEventRankGranted             	= function: 0x011ba0a8 (function)
         IsDisableHelpSetForPlayerID     	= function: 0x011ba2d8 (function)
         GetRoshanKills                  	= function: 0x011b59a8 (function)
         GetMisses                       	= function: 0x011b96e8 (function)
         GetClaimedDenies                	= function: 0x011b95e0 (function)
         IncrementTotalEarnedXP          	= function: 0x011f8700 (function)
         IsBroadcaster                   	= function: 0x011b98c8 (function)
         GetCreepDamageTaken_Engine      	= function: 0x011b7b50 (function)
         AddRunePickup                   	= function: 0x011b7350 (function)
         GetSteamID                      	= function: 0x011b9a60 (function)
         GetCreepDamageTaken             	= function: 0x011f8680 (function)
         GetUnitShareMaskForPlayer       	= function: 0x011ba128 (function)
         GetCustomBuybackCooldown        	= function: 0x011ba760 (function)
         GetRawPlayerDamage              	= function: 0x011b7928 (function)
         IsFakeClient                    	= function: 0x011b9b68 (function)
         GetNetWorth                     	= function: 0x011b6460 (function)
         GetTotalEarnedXP                	= function: 0x011b77a0 (function)
         HaveAllPlayersJoined            	= function: 0x011b9c68 (function)
         GetSelectedHeroName             	= function: 0x011b6870 (function)
         AddAegisPickup                  	= function: 0x011b7250 (function)
         GetDamageDoneToHero             	= function: 0x011b7c60 (function)
         GetLabyrinthEventGameHeroUnlocks	= function: 0x011b8350 (function)
         HasRandomed                     	= function: 0x011b67f0 (function)
         GetLiveSpectatorTeam            	= function: 0x011b9840 (function)
         IsValidTeamPlayerID             	= function: 0x011b86b0 (function)
         GetHealing                      	= function: 0x011b5850 (function)
         GetTotalGoldSpent               	= function: 0x011b5cf8 (function)
         GetXPPerMin                     	= function: 0x011b6138 (function)
         GetHeroDamageTaken_Engine       	= function: 0x011b7bd8 (function)
         GetGoldPerMin                   	= function: 0x011b60b8 (function)
         ClearLastHitStreak              	= function: 0x011b6d98 (function)
         SetBuybackCooldownTime          	= function: 0x011ba598 (function)
         AddCandyEvent                   	= function: 0x011b9f10 (function)
         IncrementNearbyCreepDeaths      	= function: 0x011b6fb0 (function)
         GetTotalEarnedGold              	= function: 0x011b5c70 (function)
         UpdateTeamSlot                  	= function: 0x011b9768 (function)
         SetCustomTeamAssignment         	= function: 0x011b7d70 (function)
         IsHeroSharedWithPlayerID        	= function: 0x011ba1b8 (function)
         GetSelectedHeroEntity           	= function: 0x011b6a80 (function)
         GetNearbyCreepDeaths            	= function: 0x011b7008 (function)
         GetConnectionState              	= function: 0x011b9d80 (function)
         GetStreak                       	= function: 0x011b62a8 (function)
         GetKillsDoneToHero              	= function: 0x011b65e8 (function)
         AddClaimedFarm                  	= function: 0x011b7828 (function)
         GetHeroDamageTaken              	= function: 0x011f86a0 (function)
         ReplaceHeroWithNoTransfer       	= function: 0x011b7f90 (function)
         GetSelectedHeroID               	= function: 0x011b68f8 (function)
         GetRunePickups                  	= function: 0x011b72d0 (function)
         GetClaimedFarm                  	= function: 0x011b78a8 (function)
         GetEventPremiumPoints           	= function: 0x011ba020 (function)
         IncrementDenies                 	= function: 0x011b7090 (function)
         ClearKillsMatrix                	= function: 0x011b7a40 (function)
         GetGoldSpentOnConsumables       	= function: 0x011b5e90 (function)
         IsValidPlayerID                 	= function: 0x011b8738 (function)
         GetNthPlayerIDOnTeam            	= function: 0x011b6c08 (function)
         IsValidTeamPlayer               	= function: 0x011b5210 (function)
         SetCustomBuybackCooldown        	= function: 0x011ba6d0 (function)
         CanRepick                       	= function: 0x011b66f0 (function)
         GetAegisPickups                 	= function: 0x011b71d0 (function)
         SetHasRandomed                  	= function: 0x011b6770 (function)
         SetCameraTarget                 	= function: 0x011b8020 (function)
         IncrementLastHitMultikill       	= function: 0x011b6e78 (function)
         HasSetEventGameCustomActionClaimCount	= function: 0x011b8180 (function)
         IsValidPlayer                   	= function: 0x011b5390 (function)
         ClearLastHitMultikill           	= function: 0x011b6ed0 (function)
         ModifyGold                      	= function: 0x011b6300 (function)
         GetGoldSpentOnSupport           	= function: 0x011b5e08 (function)
         GetPlayerCount                  	= function: 0x011b5410 (function)
         ClearStreak                     	= function: 0x011b6250 (function)
         AreUnitsSharedWithPlayerID      	= function: 0x011ba248 (function)
         GetPartyID                      	= function: 0x011b9be8 (function)
         GetSteamAccountID               	= function: 0x011b9ae0 (function)
         SetBuybackGoldLimitTime         	= function: 0x011ba5f0 (function)
         GetTimeOfLastConsumablePurchase 	= function: 0x011b7578 (function)
         GetTimeOfLastItemPurchase       	= function: 0x011b74e8 (function)
         ResetTotalEarnedGold            	= function: 0x011b5be8 (function)
         GetBroadcasterChannel           	= function: 0x011b9948 (function)
         IncrementClaimedMisses          	= function: 0x011b7140 (function)
         AddGoldSpentOnSupport           	= function: 0x011b5d80 (function)
         GetPlayerCountForTeam           	= function: 0x011b56c0 (function)
         GetBroadcasterChannelSlot       	= function: 0x011b99d0 (function)
         GetTeamPlayerCount              	= function: 0x011b54b0 (function)
         IsHeroSelected                  	= function: 0x011b6980 (function)
         HeroLevelUp                     	= function: 0x011f8720 (function)
         GetLevel                        	= function: 0x011b58a8 (function)
         IncrementTotalEarnedXP_Engine   	= function: 0x011b7718 (function)
         GetLastHitMultikill             	= function: 0x011b6f28 (function)
         GetEventPremiumPointsGranted    	= function: 0x011ba020 (function)
         GetTowerDamageTaken_Engine      	= function: 0x011b7ac8 (function)
         GetPreferredCourierForPlayer    	= function: 0x011ba480 (function)
         AddNeutralItemToStash           	= function: 0x011b8628 (function)
         RecordEventActionGrant          	= function: 0x011b8508 (function)
         GetGoldLostToDeath              	= function: 0x011b5fa8 (function)
         GetEventRanks                   	= function: 0x011ba0a8 (function)
         GetEventGameCustomActionClaimCountByName	= function: 0x011b82b0 (function)
         GetEventGameCustomActionClaimCount	= function: 0x011b8218 (function)
         SetCustomPlayerColor            	= function: 0x011b80f8 (function)
         SetGold                         	= function: 0x011b6358 (function)
         SetCustomIntParam               	= function: 0x011b5748 (function)
         ReplaceHeroWith                 	= function: 0x011b7f10 (function)
         HasCustomGameTicketForPlayerID  	= function: 0x011b7e80 (function)
         GetUnreliableGold               	= function: 0x011b6560 (function)
         GetAssists                      	= function: 0x011b5b38 (function)
         GetRespawnSeconds               	= function: 0x011b7690 (function)
         GetDeaths                       	= function: 0x011b5b90 (function)
         WhoSelectedHero                 	= function: 0x011b6a00 (function)
         SetCustomBuybackCost            	= function: 0x011ba7f0 (function)
         IncrementKills                  	= function: 0x011b55d0 (function)
         RecordConsumableAbilityChargeChange	= function: 0x011b8470 (function)
         IncrementAssists                	= function: 0x011b5628 (function)
         GetNumConsumablesPurchased      	= function: 0x011b73d0 (function)
         NumTeamPlayers                  	= function: 0x011b5310 (function)
         GetKills                        	= function: 0x011b5ae0 (function)
         SetOverrideSelectionEntity      	= function: 0x011b80a0 (function)
         GetReliableGold                 	= function: 0x011b64e0 (function)
         GetNumConnectedHumanPlayers     	= function: 0x011b5540 (function)
         ResetBuybackCostTime            	= function: 0x011ba648 (function)
         GetNumItemsPurchased            	= function: 0x011b7460 (function)
         GetGoldSpentOnBuybacks          	= function: 0x011b6030 (function)
         GetStuns                        	= function: 0x011b57d0 (function)
         IncrementLastHits               	= function: 0x011b6c90 (function)
         GetClaimedMisses                	= function: 0x011b94d0 (function)
         IncrementClaimedDenies          	= function: 0x011b9558 (function)
         ClearRawPlayerDamageMatrix      	= function: 0x011b79b0 (function)
         SetUnitShareMaskForPlayer       	= function: 0x011ba368 (function)
         GetTowerKills                   	= function: 0x011b5928 (function)
         HasSelectedHero                 	= function: 0x011b6b08 (function)
         IncrementLastHitStreak          	= function: 0x011b6d40 (function)
         GetEventPointsForPlayerID       	= function: 0x011b9f90 (function)
         GetPlayer                       	= function: 0x011b6b88 (function)
         GetPlayerName                   	= function: 0x011b9e90 (function)
         SetCanRepick                    	= function: 0x011b6670 (function)
         SpendGold                       	= function: 0x011b63b0 (function)
         IncrementDeaths                 	= function: 0x011f86e0 (function)
         IncrementMisses                 	= function: 0x011b9668 (function)
         GetPlayerLoadedCompletely       	= function: 0x011b9cf0 (function)
         GetTeamKills                    	= function: 0x011b5a28 (function)
         GetGold                         	= function: 0x011b6408 (function)
         GetCustomTeamAssignment         	= function: 0x011b7df8 (function)
         GetNumCouriersForTeam           	= function: 0x011ba3f8 (function)
         GetGoldSpentOnItems             	= function: 0x011b5f20 (function)
         IncrementStreak                 	= function: 0x011b61f8 (function)
         SetLastBuybackTime              	= function: 0x011b9e08 (function)
         GetLastHitStreak                	= function: 0x011b6df0 (function)
         GetTimeOfLastDeath              	= function: 0x011b7608 (function)
         GetTeamNumber                   	= function: 0x01139f78 (function)
         GetChildren                     	= function: 0x01137bf0 (function)
         IsNPC                           	= function: 0x01139068 (function)
         SetTeam                         	= function: 0x0113a070 (function)
         FDesc                           	= table: 0x011371c0 (table, already seen)
         IsNull                          	= function: 0x01137160 (function)
         Kill                            	= function: 0x01137820 (function)
         SetLocalScale                   	= function: 0x01139df8 (function)
         DeleteAttribute                 	= function: 0x01138640 (function)
         GetLocalScale                   	= function: 0x01139d78 (function)
         GetSpawnGroupHandle             	= function: 0x01139af0 (function)
         SetLocalOrigin                  	= function: 0x011388b0 (function)
         TransformPointWorldToEntity     	= function: 0x01138a40 (function)
         SetContextThink                 	= function: 0x0113a1e0 (function)
         Attribute_SetIntValue           	= function: 0x011384b0 (function)
         HasAttribute                    	= function: 0x011385c0 (function)
         Attribute_GetIntValue           	= function: 0x01138538 (function)
         GetBoundingMaxs                 	= function: 0x01138bd8 (function)
         GetCenter                       	= function: 0x01139ef8 (function)
         GetOwner                        	= function: 0x01138750 (function)
         SetConstraint                   	= function: 0x01138120 (function)
         GetContext                      	= function: 0x0113a360 (function)
         SetMass                         	= function: 0x01139a78 (function)
         SetAbsScale                     	= function: 0x01139cf8 (function)
         OverrideFriction                	= function: 0x01139810 (function)
         SetEntityName                   	= function: 0x01138850 (function)
         GetUpVector                     	= function: 0x01137188 (function)
         GetVelocity                     	= function: 0x01139568 (function)
         RemoveEffects                   	= function: 0x01138320 (function)
         SetLocalAngles                  	= function: 0x01137f70 (function)
         IsBaseNPC                       	= function: 0x011f85c0 (function)
         Attribute_SetFloatValue         	= function: 0x011383a0 (function)
         GetBoundingMins                 	= function: 0x01138b58 (function)
         GetOwnerEntity                  	= function: 0x01137b70 (function)
         SetMaxHealth                    	= function: 0x011391e0 (function)
         GetBaseVelocity                 	= function: 0x01139790 (function)
         GetOrigin                       	= function: 0x0113bda8 (function)
         IsPlayer                        	= function: 0x0113bd28 (function)
         GatherCriteria                  	= function: 0x01138de8 (function)
         Trigger                         	= function: 0x0113a168 (function)
         IsDOTANPC                       	= function: 0x011390e0 (function)
         GetAbsScale                     	= function: 0x01139c78 (function)
         SetHealth                       	= function: 0x01139260 (function)
         ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
         SetAbsOrigin                    	= function: 0x01139e78 (function)
         GetMass                         	= function: 0x01139a20 (function)
         Attribute_GetFloatValue         	= function: 0x01138428 (function)
         EmitSoundParams                 	= function: 0x01139918 (function)
         TakeDamage                      	= function: 0x01138e68 (function)
         TransformPointEntityToWorld     	= function: 0x011389b0 (function)
         EmitSound                       	= function: 0x01139898 (function)
         SetForwardVector                	= function: 0x01138ad0 (function)
         SetContextNum                   	= function: 0x0113a2e0 (function)
         GetAbsOrigin                    	= function: 0x01139b78 (function)
         GetLocalAngularVelocity         	= function: 0x01139708 (function)
         NextMovePeer                    	= function: 0x01137e48 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
         GetMaxHealth                    	= function: 0x01139160 (function)
         PrecacheScriptSound             	= function: 0x0113bca0 (function)
         GetLocalVelocity                	= function: 0x011394e0 (function)
         SetVelocity                     	= function: 0x01139460 (function)
         FirstMoveChild                  	= function: 0x011379c0 (function)
         GetHealth                       	= function: 0x011392e0 (function)
         EyeAngles                       	= function: 0x01137df0 (function)
         SetAbsAngles                    	= function: 0x01137ce8 (function)
         GetModelName                    	= function: 0x01137af0 (function)
         SetContext                      	= function: 0x0113a260 (function)
         GetRightVector                  	= function: 0x01137940 (function)
         GetAnglesAsVector               	= function: 0x01137d68 (function)
         SetThink                        	= function: 0x011b4068 (function)
         IsPlayerController              	= function: 0x01138fe0 (function)
         GetAngles                       	= function: 0x01139bf8 (function)
         IsPlayerPawn                    	= function: 0x01138f60 (function)
         IsAlive                         	= function: 0x01138ee8 (function)
         SetParent                       	= function: 0x011380a0 (function)
         GetBounds                       	= function: 0x01138c58 (function)
         AddEffects                      	= function: 0x011382a0 (function)
         IsInstance                      	= function: 0x011b4508 (function)
         EyePosition                     	= function: 0x011381a0 (function)
         GetForwardVector                	= function: 0x011378b8 (function)
         SetGravity                      	= function: 0x01139360 (function)
         StopThink                       	= function: 0x011b44e8 (function)
         GetMoveParent                   	= function: 0x01137a60 (function)
         SetFriction                     	= function: 0x011393e0 (function)
         GetLocalOrigin                  	= function: 0x01138930 (function)
         SetOrigin                       	= function: 0x01137ef0 (function)
         SetAngles                       	= function: 0x01138220 (function)
         GetRootMoveParent               	= function: 0x01137c60 (function)
         StopSound                       	= function: 0x01139998 (function)
         SetOwner                        	= function: 0x011387d0 (function)
         GetAngularVelocity              	= function: 0x01138cd8 (function)
         ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
         GetSoundDuration                	= function: 0x0113bc18 (function)
         GetTeam                         	= function: 0x01139ff8 (function)
         SetAngularVelocity              	= function: 0x01138d60 (function)
         GetLocalAngles                  	= function: 0x01137ff0 (function)
         FollowEntity                    	= function: 0x0113a0e8 (function)
         GetEntityIndex                  	= function: 0x011265d0 (function)
         DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
         GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
         FDesc                           	= table: 0x01125fb0 (table, already seen)
         IsNull                          	= function: 0x01125f30 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
         GetPrivateScriptScope           	= function: 0x01126448 (function)
         entindex                        	= function: 0x01126600 (function)
         GetIntAttr                      	= function: 0x01126178 (function)
         FireOutput                      	= function: 0x01126010 (function)
         Destroy                         	= function: 0x011262c8 (function)
         GetDebugName                    	= function: 0x01126340 (function)
         SetIntAttr                      	= function: 0x01125f78 (function)
         GetClassname                    	= function: 0x01126068 (function)
         GetName                         	= function: 0x01126630 (function)
         ConnectOutput                   	= function: 0x01113ac8 (function)
         RedirectOutput                  	= function: 0x01113668 (function)
         GetEntityHandle                 	= function: 0x01113cb0 (function)
         DisconnectOutput                	= function: 0x01113ef0 (function)
         RemoveSelf                      	= function: 0x011260f8 (function)
         GetPublicScriptScope            	= function: 0x011178d8 (function)
      }
      __self                          	= userdata: 0x01365380 (userdata)
   }
   MODIFIER_EVENT_ON_ABILITY_END_CHANNEL	= 186 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END	= 1654 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2	= 3 (number)
   UF_FAIL_ANCIENT                 	= 9 (number)
   CDOTA_PlayerResource            	= table: 0x011b5160 (table, already seen)
   ListenToGameEventEx             	= function: 0x01360c88 (function)
   CDOTA_Modifier_Lua_Horizontal_Motion	= table: 0x01133258 (table)
   {
      metatable                       	= table: 0x011310f0 (table, already seen)
      OnHorizontalMotionInterrupted   	= function: 0x01133478 (function)
      ApplyHorizontalMotionController 	= function: 0x011333e0 (function)
      SetPriority                     	= function: 0x01133308 (function)
      FDesc                           	= table: 0x011332e0 (table)
      {
         OnHorizontalMotionInterrupted   	= void OnHorizontalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
         SetPriority                     	= void SetPriority(int nMotionPriority)
Set the priority (userdata)
         ApplyHorizontalMotionController 	= bool ApplyHorizontalMotionController()
Starts the horizontal motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateHorizontalMotion          	= void UpdateHorizontalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         GetPriority                     	= int GetPriority()
Get the priority (userdata)
      }
      IsNull                          	= function: 0x01133280 (function)
      UpdateHorizontalMotion          	= function: 0x011332a8 (function)
      GetPriority                     	= function: 0x01133388 (function)
   }
   EventManager                    	= table: 0x0135bc40 (table)
   {
      Init                            	= function: 0x01360ca8 (function)
      __initprops__                   	= table: 0x0135b920 (table)
      {
      }
      onEntityKilled                  	= function: 0x01360d68 (function)
      onDotaOnHeroFinishSpawn         	= function: 0x01360d28 (function)
      __class__                       	= table: 0x0135bc40 (table, already seen)
      __getbase__                     	= function: 0x0135bee0 (function)
      __getclass__                    	= function: 0x0135d2c0 (function)
      __instanceof__                  	= function: 0x0135bcd0 (function)
      onDotaPlayerPickHero            	= function: 0x01360f30 (function)
      onEntityHurt                    	= function: 0x01360f10 (function)
      onDotaUnitEvent                 	= function: 0x01360d48 (function)
   }
   GetItemDefQuantity              	= function: 0x01150648 (function)
   RemoveSpawnGroupFilterProxy     	= function: 0x01140348 (function)
   DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM	= 2 (number)
   LEGEND_OBJECT_TYPE_PLAYER       	= 0 (number)
   CustomUI                        	= table: 0x0120c9e8 (table)
   {
      metatable                       	= table: 0x0120c5c8 (table, already seen)
      __self                          	= userdata: 0x0120ca28 (userdata)
   }
   DOTA_HEROPICK_STATE_CM_BAN13    	= 19 (number)
   DOTA_UNIT_CAP_MOVE_FLY          	= 2 (number)
   CustomGameEventManager          	= table: 0x0120c2a0 (table)
   {
      metatable = table: 0x0120bf18
      {
         Send_ServerToPlayer             	= function: 0x0120c308 (function)
         UnregisterListener              	= function: 0x0120c0c8 (function)
         Send_ServerToAllClients         	= function: 0x0120c150 (function)
         RegisterListener                	= function: 0x0120bfc8 (function)
         FDesc                           	= table: 0x0120bfa0 (table)
         {
            Send_ServerToPlayer             	= void Send_ServerToPlayer(handle, string, handle)
( Entity Player, string EventName, table EventData ) (userdata)
            UnregisterListener              	= void UnregisterListener(int)
( int ListnerID ) - Unregister a specific listener (userdata)
            Send_ServerToAllClients         	= void Send_ServerToAllClients(string, handle)
( string EventName, table EventData ) (userdata)
            RegisterListener                	= int RegisterListener(string, handle)
( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later. (userdata)
            Send_ServerToTeam               	= void Send_ServerToTeam(int, string, handle)
( int TeamNumber, string EventName, table EventData ) (userdata)
         }
         IsNull                          	= function: 0x0120bf40 (function)
         Send_ServerToTeam               	= function: 0x0120c050 (function)
      }
      __self                          	= userdata: 0x0120c470 (userdata)
   }
   ACT_SCRIPT_CUSTOM_17            	= 928 (number)
   ACT_GESTURE_RANGE_ATTACK_TRIPWIRE	= 310 (number)
   CustomNetTables                 	= table: 0x0120bd88 (table)
   {
      metatable = table: 0x0120bb38
      {
         FDesc                           	= table: 0x0120bbc0 (table)
         {
            SetTableValue                   	= bool SetTableValue(string, string, handle)
( string TableName, string KeyName, script_table Value ) (userdata)
            GetTableValue                   	= table GetTableValue(string, string)
( string TableName, string KeyName ) (userdata)
         }
         IsNull                          	= function: 0x0120bb60 (function)
         GetTableValue                   	= function: 0x0120bce0 (function)
         SetTableValue                   	= function: 0x0120bbe8 (function)
      }
      __self                          	= userdata: 0x0120bdc8 (userdata)
   }
   EmitAnnouncerSoundForTeam       	= function: 0x01146370 (function)
   CCustomNetTableManager          	= table: 0x0120bb38 (table, already seen)
   VoteSystem                      	= table: 0x0120b9a8 (table)
   {
      metatable = table: 0x01206520
      {
         FDesc                           	= table: 0x012065a8 (table)
         {
            StartVote                       	= void StartVote(handle)
Starts a vote, based upon a table of parameters (userdata)
         }
         IsNull                          	= function: 0x01206548 (function)
         StartVote                       	= function: 0x012065d0 (function)
      }
      __self                          	= userdata: 0x0120b9e8 (userdata)
   }
   CDOTAVoteSystem                 	= table: 0x01206520 (table, already seen)
   Tutorial                        	= table: 0x01206250 (table)
   {
      metatable = table: 0x01205c08
      {
         AddBot                          	= function: 0x01206908 (function)
         AddShopWhitelistItem            	= function: 0x012069b8 (function)
         SetTutorialConvar               	= function: 0x01206380 (function)
         SetItemGuide                    	= function: 0x01206048 (function)
         FinishTutorial                  	= function: 0x01206788 (function)
         SetTimeFrozen                   	= function: 0x01206808 (function)
         EnableCreepAggroViz             	= function: 0x01206620 (function)
         FDesc                           	= table: 0x01205c90 (table)
         {
            AddBot                          	= bool AddBot(string, string, string, bool)
Add a computer controlled bot. (userdata)
            AddShopWhitelistItem            	= void AddShopWhitelistItem(string)
Add an item to the shop whitelist. (userdata)
            SetTutorialConvar               	= void SetTutorialConvar(string, string)
Set a tutorial convar (userdata)
            SetItemGuide                    	= void SetItemGuide(string)
Set the current item guide. (userdata)
            FinishTutorial                  	= void FinishTutorial()
End the tutorial. (userdata)
            SetTimeFrozen                   	= void SetTimeFrozen(bool)
Set if we should freeze time or not. (userdata)
            EnableCreepAggroViz             	= void EnableCreepAggroViz(bool)
Alert the player when a creep becomes agro to their hero. (userdata)
            ForceGameStart                  	= void ForceGameStart()
Force the start of the game. (userdata)
            CompleteQuest                   	= void CompleteQuest(string)
Complete a quest, (userdata)
            SetOrModifyPlayerGold           	= void SetOrModifyPlayerGold(int, bool)
Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify (userdata)
            EnableTowerAggroViz             	= void EnableTowerAggroViz(bool)
Alert the player when a tower becomes agro to their hero. (userdata)
            SetQuickBuy                     	= void SetQuickBuy(string)
Set players quick buy item. (userdata)
            UpgradePlayerAbility            	= void UpgradePlayerAbility(string)
Upgrade a specific ability for the local hero (userdata)
            SetShopOpen                     	= void SetShopOpen(bool)
Set the shop open or closed. (userdata)
            GetTimeFrozen                   	= bool GetTimeFrozen()
Is our time frozen? (userdata)
            IsItemInWhiteList               	= bool IsItemInWhiteList(string)
Is this item currently in the white list. (userdata)
            AddQuest                        	= void AddQuest(string, int, string, string)
Add a quest to the quest log (userdata)
            SetTutorialUI                   	= void SetTutorialUI(int)
Set the UI to use a reduced version to focus attention to specific elements. (userdata)
            StartTutorialMode               	= void StartTutorialMode()
Initialize Tutorial Mode (userdata)
            RemoveShopWhitelistItem         	= void RemoveShopWhitelistItem(string)
Remove an item from the shop whitelist. (userdata)
            SetWhiteListEnabled             	= void SetWhiteListEnabled(bool)
Set if we should whitelist shop items. (userdata)
            CreateLocationTask              	= void CreateLocationTask(Vector)
Add a task to move to a specific location (userdata)
            SelectHero                      	= void SelectHero(string)
Select a hero for the local player (userdata)
            EnablePlayerOffscreenTip        	= void EnablePlayerOffscreenTip(bool)
Enable the tip to alert players how to find their hero. (userdata)
            SelectPlayerTeam                	= void SelectPlayerTeam(string)
Select the team for the local player (userdata)
         }
         IsNull                          	= function: 0x01205c30 (function)
         SetOrModifyPlayerGold           	= function: 0x01205f08 (function)
         CompleteQuest                   	= function: 0x01205fc8 (function)
         SetQuickBuy                     	= function: 0x01205e88 (function)
         EnableTowerAggroViz             	= function: 0x012066a8 (function)
         SetShopOpen                     	= function: 0x01205d18 (function)
         UpgradePlayerAbility            	= function: 0x01205e28 (function)
         SetTutorialUI                   	= function: 0x01206b20 (function)
         GetTimeFrozen                   	= function: 0x01206888 (function)
         IsItemInWhiteList               	= function: 0x01206ac8 (function)
         AddQuest                        	= function: 0x01205c58 (function)
         RemoveShopWhitelistItem         	= function: 0x01206a40 (function)
         StartTutorialMode               	= function: 0x01206170 (function)
         SetWhiteListEnabled             	= function: 0x01206960 (function)
         CreateLocationTask              	= function: 0x012060e8 (function)
         EnablePlayerOffscreenTip        	= function: 0x01206408 (function)
         SelectHero                      	= function: 0x01205da8 (function)
         SelectPlayerTeam                	= function: 0x01205cb8 (function)
         ForceGameStart                  	= function: 0x01206730 (function)
      }
      __self                          	= userdata: 0x01206290 (userdata)
   }
   CDOTABaseGameMode               	= table: 0x01190d20 (table)
   {
      metatable                       	= table: 0x01137138 (table, already seen)
      SetWeatherEffectsDisabled       	= function: 0x0119a4c0 (function)
      SetBountyRuneSpawnInterval      	= function: 0x0114b130 (function)
      SetNeutralStashTeamViewOnlyEnabled	= function: 0x0119b4d0 (function)
      GetEventWindowStartTime         	= function: 0x0119b688 (function)
      SetDaynightCycleAdvanceRate     	= function: 0x0119a318 (function)
      SetCustomScanCooldown           	= function: 0x0114a3e0 (function)
      FDesc                           	= table: 0x01187eb0 (table)
      {
         SetWeatherEffectsDisabled       	= void SetWeatherEffectsDisabled(bool bDisable)
Set if weather effects are disabled. (userdata)
         SetBountyRuneSpawnInterval      	= void SetBountyRuneSpawnInterval(float flInterval)
Set bounty rune spawn rate (userdata)
         SetNeutralStashTeamViewOnlyEnabled	= void SetNeutralStashTeamViewOnlyEnabled(bool bEnable)
When enabled, the all neutral items tab cannot be viewed. (userdata)
         GetEventWindowStartTime         	= unsigned GetEventWindowStartTime()
Get the Event Window Start Time passed from the GC. (userdata)
         SetDaynightCycleAdvanceRate     	= void SetDaynightCycleAdvanceRate(float flRate)
Sets the rate at which the day/night cycle advances (1.0 = default). (userdata)
         SetCustomScanCooldown           	= void SetCustomScanCooldown(float flCooldown)
Set a custom cooldown for team Scan ability. (userdata)
         SetTopBarTeamValuesVisible      	= void SetTopBarTeamValuesVisible(bool bVisible)
Turning on/off the team values on the top game bar. (userdata)
         SetRandomHeroBonusItemGrantDisabled	= void SetRandomHeroBonusItemGrantDisabled(bool bDisabled)
Disables bonus items for randoming a hero. (userdata)
         AddItemToCustomShop             	= void AddItemToCustomShop(string pszItemName, string pszShopName, string pszCategory)
( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop. (userdata)
         GetUseCustomHeroLevels          	= bool GetUseCustomHeroLevels()
Are custom-defined XP values for hero level ups in use? (userdata)
         SetKillingSpreeAnnouncerDisabled	= void SetKillingSpreeAnnouncerDisabled(bool bDisabled)
Mutes the in-game killing spree announcer. (userdata)
         SetCustomBackpackCooldownPercent	= void SetCustomBackpackCooldownPercent(float flPercent)
Set the rate cooldown ticks down for items in the backpack. (userdata)
         GetDaynightCycleAdvanceRate     	= float GetDaynightCycleAdvanceRate()
Get the rate at which the day/night cycle advances (1.0 = default). (userdata)
         GetTowerBackdoorProtectionEnabled	= bool GetTowerBackdoorProtectionEnabled()
Gets whether tower backdoor protection is enabled or not. (userdata)
         GetEventGameSeed                	= int GetEventGameSeed()
Get the Game Seed passed from the GC. (userdata)
         GetCustomBuybackCooldownEnabled 	= bool GetCustomBuybackCooldownEnabled()
Turns on capability to define custom buyback cooldowns. (userdata)
         SetSelectionGoldPenaltyEnabled  	= void SetSelectionGoldPenaltyEnabled(bool bEnabled)
Enable/disable gold penalty for late picking. (userdata)
         SetForcedHUDSkin                	= void SetForcedHUDSkin(string pValue)
Specify a HUD skin that is forced on for this game mode. (userdata)
         SetKillableTombstones           	= void SetKillableTombstones(bool bEnabled)
Set whether tombstones can be channeled to be removed by enemy heroes. (userdata)
         GetTopBarTeamValuesVisible      	= bool GetTopBarTeamValuesVisible()
Turning on/off the team values on the top game bar. (userdata)
         DisableClumpingBehaviorByDefault	= void DisableClumpingBehaviorByDefault(bool bDisabled)
Disable npc_dota_creature clumping behavior by default. (userdata)
         RemoveRealTimeCombatAnalyzerQuery	= void RemoveRealTimeCombatAnalyzerQuery(int nQueryID)
Stop tracking a combat analyzer query. (userdata)
         SetExecuteOrderFilter           	= void SetExecuteOrderFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         GetStickyItemDisabled           	= bool GetStickyItemDisabled()
Hide the sticky item in the quickbuy. (userdata)
         SetItemAddedToInventoryFilter   	= void SetItemAddedToInventoryFilter(handle hFunction, handle hContext)
Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event (userdata)
         SetBotsAlwaysPushWithHuman      	= void SetBotsAlwaysPushWithHuman(bool bAlwaysPush)
Set if the bots should try their best to push with a human player. (userdata)
         SetPowerRuneSpawnInterval       	= void SetPowerRuneSpawnInterval(float flInterval)
Set power rune spawn rate (userdata)
         SetCustomBackpackSwapCooldown   	= void SetCustomBackpackSwapCooldown(float flCooldown)
Set a custom cooldown for swapping items into the backpack. (userdata)
         GetFixedRespawnTime             	= float GetFixedRespawnTime()
Gets the fixed respawn time. (userdata)
         SetCustomGlyphCooldown          	= void SetCustomGlyphCooldown(float flCooldown)
Set a custom cooldown for team Glyph ability. (userdata)
         SetCameraDistanceOverride       	= void SetCameraDistanceOverride(float flCameraDistanceOverride)
Set a different camera distance; dota default is 1134. (userdata)
         SetPauseEnabled                 	= void SetPauseEnabled(bool bEnabled)
Set pausing enabled/disabled (userdata)
         SetFountainPercentageManaRegen  	= void SetFountainPercentageManaRegen(float flPercentageManaRegen)
Set the percentage rate that the fountain will regen mana. (-1 for default) (userdata)
         AreWeatherEffectsDisabled       	= bool AreWeatherEffectsDisabled()
Get if weather effects are disabled on the client. (userdata)
         SetTPScrollSlotItemOverride     	= void SetTPScrollSlotItemOverride(string pItemName)
Sets the item which goes in the TP scroll slot (userdata)
         SetTopBarTeamValuesOverride     	= void SetTopBarTeamValuesOverride(bool bOverride)
Override the values of the team values on the top game bar. (userdata)
         GetStashPurchasingDisabled      	= bool GetStashPurchasingDisabled()
Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items. (userdata)
         SetUseDefaultDOTARuneSpawnLogic 	= void SetUseDefaultDOTARuneSpawnLogic(bool bEnabled)
If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals. (userdata)
         GetCustomAttributeDerivedStatValue	= float GetCustomAttributeDerivedStatValue(int nDerivedStatType)
Get current derived stat value constant. (userdata)
         ClearRuneSpawnFilter            	= void ClearRuneSpawnFilter()
Clear the script filter that controls what rune spawns. (userdata)
         RemoveItemFromCustomShop        	= void RemoveItemFromCustomShop(string pszItemName, string pszShopName)
( pszItem, pszShop ) Remove an item to purchase at a custom shop. (userdata)
         SetFountainConstantManaRegen    	= void SetFountainConstantManaRegen(float flConstantManaRegen)
Set the constant rate that the fountain will regen mana. (-1 for default) (userdata)
         SetRespawnTimeScale             	= void SetRespawnTimeScale(float flValue)
Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations. (userdata)
         ClearDamageFilter               	= void ClearDamageFilter()
Clear the script filter that controls how a unit takes damage. (userdata)
         ClearModifyGoldFilter           	= void ClearModifyGoldFilter()
Clear the script filter that controls how hero gold is modified. (userdata)
         SetUnseenFogOfWarEnabled        	= void SetUnseenFogOfWarEnabled(bool bEnabled)
Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war. (userdata)
         SetStashPurchasingDisabled      	= void SetStashPurchasingDisabled(bool bDisabled)
Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items. (userdata)
         GetAnnouncerDisabled            	= bool GetAnnouncerDisabled()
Are in-game announcers disabled? (userdata)
         SetCustomAttributeDerivedStatValue	= void SetCustomAttributeDerivedStatValue(int nStatType, float flNewValue)
Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue. (userdata)
         GetCustomRadiantScore           	= int GetCustomRadiantScore()
Get the topbar score display value for radiant. (userdata)
         GetHUDVisible                   	= bool GetHUDVisible(int iElement)
Returns the HUD element visibility. (userdata)
         ListenForQuerySucceeded         	= void ListenForQuerySucceeded(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query succeeded. (userdata)
         GetRespawnTimeScale             	= float GetRespawnTimeScale()
Returns the scale applied to non-fixed respawn times. (userdata)
         SetTowerBackdoorProtectionEnabled	= void SetTowerBackdoorProtectionEnabled(bool bEnabled)
Enables/Disables tower backdoor protection. (userdata)
         SetCustomRadiantScore           	= void SetCustomRadiantScore(int nScore)
Sets the topbar score display value for radiant. (userdata)
         SetRuneEnabled                  	= void SetRuneEnabled(int nRune, bool bEnabled)
Set if a given type of rune is enabled. (userdata)
         SetMinimumAttackSpeed           	= void SetMinimumAttackSpeed(int nMinSpeed)
Set the minimum attack speed for units. (userdata)
         SetAlwaysShowPlayerNames        	= void SetAlwaysShowPlayerNames(bool bEnabled)
Set whether player names are always shown, regardless of client setting. (userdata)
         DisableHudFlip                  	= void DisableHudFlip(bool bDisable)
Use to disable hud flip for this mod (userdata)
         GetMaximumAttackSpeed           	= int GetMaximumAttackSpeed()
Get the maximum attack speed for units. (userdata)
         SetModifyGoldFilter             	= void SetModifyGoldFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         SetCanSellAnywhere              	= void SetCanSellAnywhere(bool bAllow)
bool bAllow (userdata)
         SetMaximumAttackSpeed           	= void SetMaximumAttackSpeed(int nMaxSpeed)
Set the maximum attack speed for units. (userdata)
         SetStickyItemDisabled           	= void SetStickyItemDisabled(bool bDisabled)
Hide the sticky item in the quickbuy. (userdata)
         SetHealingFilter                	= void SetHealingFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         GetMinimumAttackSpeed           	= int GetMinimumAttackSpeed()
Get the minimum attack speed for units. (userdata)
         SetCustomXPRequiredToReachNextLevel	= void SetCustomXPRequiredToReachNextLevel(handle hTable)
Allows definition of a table of hero XP values. (userdata)
         SetNeutralStashEnabled          	= void SetNeutralStashEnabled(bool bEnable)
Allow items to be sent to the neutral stash. (userdata)
         SetBotThinkingEnabled           	= void SetBotThinkingEnabled(bool bEnabled)
Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map. (userdata)
         SetForceRightClickAttackDisabled	= void SetForceRightClickAttackDisabled(bool bDisabled)
Prevent users from using the right click deny setting. (userdata)
         GetAlwaysShowPlayerNames        	= bool GetAlwaysShowPlayerNames()
Get whether player names are always shown, regardless of client setting. (userdata)
         GetCustomBuybackCostEnabled     	= bool GetCustomBuybackCostEnabled()
Turns on capability to define custom buyback costs. (userdata)
         SetModifyExperienceFilter       	= void SetModifyExperienceFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         GetFogOfWarDisabled             	= bool GetFogOfWarDisabled()
Turn the fog of war on or off. (userdata)
         IsBuybackEnabled                	= bool IsBuybackEnabled()
Enables or disables buyback completely. (userdata)
         GetTopBarTeamValuesOverride     	= bool GetTopBarTeamValuesOverride()
Override the values of the team values on the top game bar. (userdata)
         GetGoldSoundDisabled            	= bool GetGoldSoundDisabled()
Turn the sound when gold is acquired off/on. (userdata)
         IsAbilityUpgradeWhitelisted     	= bool IsAbilityUpgradeWhitelisted(string pszAbilityName)
const char* pszAbilityName (userdata)
         SetCustomBuybackCostEnabled     	= void SetCustomBuybackCostEnabled(bool bEnabled)
Turns on capability to define custom buyback costs. (userdata)
         GetCustomScanCooldown           	= float GetCustomScanCooldown()
Get the current custom scan cooldown. (userdata)
         SetCameraZRange                 	= void SetCameraZRange(float flMinZ, float flMaxZ)
Sets the camera Z range (userdata)
         SetDeathOverlayDisabled         	= void SetDeathOverlayDisabled(bool bDisabled)
Specify whether the full screen death overlay effect plays when the selected hero dies. (userdata)
         ClearExecuteOrderFilter         	= void ClearExecuteOrderFilter()
Clear the script filter that controls when a unit picks up an item. (userdata)
         SetFogOfWarDisabled             	= void SetFogOfWarDisabled(bool bDisabled)
Turn the fog of war on or off. (userdata)
         SetHudCombatEventsDisabled      	= void SetHudCombatEventsDisabled(bool bDisabled)
Specify whether the default combat events will show in the HUD. (userdata)
         ClearModifyExperienceFilter     	= void ClearModifyExperienceFilter()
Clear the script filter that controls how hero experience is modified. (userdata)
         SetCustomDireScore              	= void SetCustomDireScore(int nScore)
Sets the topbar score display value for dire. (userdata)
         SetAllowNeutralItemDrops        	= void SetAllowNeutralItemDrops(bool bEnabled)
If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped. (userdata)
         SetCustomHeroMaxLevel           	= void SetCustomHeroMaxLevel(int)
Allows definition of the max level heroes can achieve (default is 25). (userdata)
         ClearHealingFilter              	= void ClearHealingFilter()
Clear the script filter that controls how a unit heals. (userdata)
         SetLoseGoldOnDeath              	= void SetLoseGoldOnDeath(bool bEnabled)
Use to disable gold loss on death. (userdata)
         SetInnateMeleeDamageBlockPerLevelAmount	= void SetInnateMeleeDamageBlockPerLevelAmount(int nPerLevelAmount)
Set the amount innately blocked by melee heroes gained per level. (userdata)
         SetInnateMeleeDamageBlockAmount 	= void SetInnateMeleeDamageBlockAmount(int nAmount)
Set the amount blocked innately by melee heroes. (userdata)
         SetInnateMeleeDamageBlockPercent	= void SetInnateMeleeDamageBlockPercent(int nPercent)
Set the percent chance a melee hero will innately block damage. (userdata)
         SetDraftingHeroPickSelectTimeOverride	= void SetDraftingHeroPickSelectTimeOverride(float flValue)
Set drafting hero pick time (userdata)
         ClearBountyRunePickupFilter     	= void ClearBountyRunePickupFilter()
Clear the script filter that controls bounty rune pickup behavior. (userdata)
         SetNeutralItemHideUndiscoveredEnabled	= void SetNeutralItemHideUndiscoveredEnabled(bool bEnable)
When enabled, undiscovered items in the neutral item stash are hidden. (userdata)
         SetBotsInLateGame               	= void SetBotsInLateGame(bool bLateGame)
Set if bots should enable their late game behavior. (userdata)
         GetCustomDireScore              	= int GetCustomDireScore()
Get the topbar score display value for dire. (userdata)
         GetCameraDistanceOverride       	= float GetCameraDistanceOverride()
Set a different camera distance; dota default is 1134. (userdata)
         AddRealTimeCombatAnalyzerQuery  	= int AddRealTimeCombatAnalyzerQuery(handle hQueryTable, handle hPlayer, string pszQueryName)
Begin tracking a sequence of events using the real time combat analyzer. (userdata)
         GetWaterRuneLastSpawnTime       	= int GetWaterRuneLastSpawnTime()
Gets the time from game start during which water runes spawn (userdata)
         SetCustomBuybackCooldownEnabled 	= void SetCustomBuybackCooldownEnabled(bool bEnabled)
Turns on capability to define custom buyback cooldowns. (userdata)
         ListenForQueryFailed            	= void ListenForQueryFailed(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query failed. (userdata)
         SetAlwaysShowPlayerInventory    	= void SetAlwaysShowPlayerInventory(bool bAlwaysShow)
Show the player hero's inventory in the HUD, regardless of what unit is selected. (userdata)
         ListenForQueryProgressChanged   	= void ListenForQueryProgressChanged(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query progress changed. (userdata)
         SetCustomTerrainWeatherEffect   	= void SetCustomTerrainWeatherEffect(string pszEffectName)
Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode. (userdata)
         ClearItemAddedToInventoryFilter 	= void ClearItemAddedToInventoryFilter()
Clear the script filter that controls the item added to inventory filter. (userdata)
         GetAlwaysShowPlayerInventory    	= bool GetAlwaysShowPlayerInventory()
Show the player hero's inventory in the HUD, regardless of what unit is selected. (userdata)
         ClearModifierGainedFilter       	= void ClearModifierGainedFilter()
Clear the script filter that controls the modifier filter. (userdata)
         EnableAbilityUpgradeWhitelist   	= void EnableAbilityUpgradeWhitelist(bool bEnabled)
bool bEnabled (userdata)
         SetTrackingProjectileFilter     	= void SetTrackingProjectileFilter(handle hFunction, handle hContext)
Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         SetBotsMaxPushTier              	= void SetBotsMaxPushTier(int nMaxTier)
Set the max tier of tower that bots want to push. (-1 to disable) (userdata)
         SetFountainPercentageHealthRegen	= void SetFountainPercentageHealthRegen(float flPercentageHealthRegen)
Set the percentage rate that the fountain will regen health. (-1 for default) (userdata)
         SetModifierGainedFilter         	= void SetModifierGainedFilter(handle hFunction, handle hContext)
Set a filter function to control modifiers that are gained, return false to destroy modifier. (userdata)
         SetDraftingBanningTimeOverride  	= void SetDraftingBanningTimeOverride(float flValue)
Set drafting hero banning time (userdata)
         SetGiveFreeTPOnDeath            	= void SetGiveFreeTPOnDeath(bool bGive)
bool bGive (userdata)
         SetRecommendedItemsDisabled     	= void SetRecommendedItemsDisabled(bool bDisabled)
Turn the panel for showing recommended items at the shop off/on. (userdata)
         SetFreeCourierModeEnabled       	= void SetFreeCourierModeEnabled(bool bEnabled)
If set to true, enable 7.23 free courier mode. (userdata)
         SetBountyRunePickupFilter       	= void SetBountyRunePickupFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         SetOverrideSelectionEntity      	= void SetOverrideSelectionEntity(handle hOverrideEntity)
Set an override for the default selection entity, instead of each player's hero. (userdata)
         SetFixedRespawnTime             	= void SetFixedRespawnTime(float flFixedRespawnTime)
Set a fixed delay for all players to respawn after. (userdata)
         IsDaynightCycleDisabled         	= bool IsDaynightCycleDisabled()
Is the day/night cycle disabled? (userdata)
         GetCustomBackpackSwapCooldown   	= float GetCustomBackpackSwapCooldown()
Get the current custom backpack swap cooldown. (userdata)
         GetRecommendedItemsDisabled     	= bool GetRecommendedItemsDisabled()
Turn the panel for showing recommended items at the shop off/on. (userdata)
         SetUseCustomHeroLevels          	= void SetUseCustomHeroLevels(bool bEnabled)
Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on. (userdata)
         AddAbilityUpgradeToWhitelist    	= void AddAbilityUpgradeToWhitelist(string pszAbilityName)
const char* pszAbilityName (userdata)
         RemoveAbilityUpgradeFromWhitelist	= void RemoveAbilityUpgradeFromWhitelist(string pszAbilityName)
const char* pszAbilityName (userdata)
         SetFriendlyBuildingMoveToEnabled	= void SetFriendlyBuildingMoveToEnabled(bool bEnabled)
Allows clicks on friendly buildings to be handled normally. (userdata)
         SetTopBarTeamValue              	= void SetTopBarTeamValue(int iTeam, int nValue)
Set the team values on the top game bar. (userdata)
         ShouldGiveFreeTPOnDeath         	= bool ShouldGiveFreeTPOnDeath()
 (userdata)
         AllocateFowBlockerRegion        	= handle AllocateFowBlockerRegion(float flMinX, float flMinY, float flMaxX, float flMaxY, float flGridSize)
Allocates an entity which can be used by custom games to control FoW occlusion volumes (userdata)
         ClearTrackingProjectileFilter   	= void ClearTrackingProjectileFilter()
Clear the script filter that controls when tracking projectiles are launched. (userdata)
         SetSendToStashEnabled           	= void SetSendToStashEnabled(bool bEnable)
Allow items to be sent to the stash. (userdata)
         SetPlayerHeroAvailabilityFiltered	= void SetPlayerHeroAvailabilityFiltered(bool bFilter)
bool bFilter (userdata)
         SetUseTurboCouriers             	= void SetUseTurboCouriers(bool bEnabled)
Enables or disables turbo couriers. (userdata)
         GetCustomBackpackCooldownPercent	= float GetCustomBackpackCooldownPercent()
Get the current rate cooldown ticks down for items in the backpack. (userdata)
         SetCameraSmoothCountOverride    	= void SetCameraSmoothCountOverride(int nSmoothCount)
Set a different camera smooth count; dota default is 8. (userdata)
         SetBuybackEnabled               	= void SetBuybackEnabled(bool bEnabled)
Enables or disables buyback completely. (userdata)
         SetDamageFilter                 	= void SetDamageFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
         SetWaterRuneLastSpawnTime       	= void SetWaterRuneLastSpawnTime(int nValue)
Sets the time from game start during which water runes spawn (userdata)
         SetAbilityTuningValueFilter     	= void SetAbilityTuningValueFilter(handle hFunction, handle hContext)
Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values) (userdata)
         SetHUDVisible                   	= void SetHUDVisible(int iHUDElement, bool bVisible)
Set the HUD element visibility. (userdata)
         GetCustomGlyphCooldown          	= float GetCustomGlyphCooldown()
Get the current custom glyph cooldown. (userdata)
         SetGoldSoundDisabled            	= void SetGoldSoundDisabled(bool bDisabled)
Turn the sound when gold is acquired off/on. (userdata)
         SetRemoveIllusionsOnDeath       	= void SetRemoveIllusionsOnDeath(bool bRemove)
Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds. (userdata)
         SetCustomGameForceHero          	= void SetCustomGameForceHero(string pHeroName)
Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection. (userdata)
         SetAnnouncerDisabled            	= void SetAnnouncerDisabled(bool bDisabled)
Mutes the in-game announcer. (userdata)
         SetDefaultStickyItem            	= void SetDefaultStickyItem(string pItem)
Sets the default sticky item in the quickbuy (userdata)
         GetCustomHeroMaxLevel           	= int GetCustomHeroMaxLevel()
Allows definition of the max level heroes can achieve (default is 25). (userdata)
         SetDaynightCycleDisabled        	= void SetDaynightCycleDisabled(bool bDisable)
Enable or disable the day/night cycle. (userdata)
         SetRuneSpawnFilter              	= void SetRuneSpawnFilter(handle hFunction, handle hContext)
Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
      }
      IsNull                          	= function: 0x01187e50 (function)
      SetTopBarTeamValuesVisible      	= function: 0x0119a650 (function)
      SetRandomHeroBonusItemGrantDisabled	= function: 0x0114a238 (function)
      AddItemToCustomShop             	= function: 0x01187fc8 (function)
      GetUseCustomHeroLevels          	= function: 0x0119a7f8 (function)
      SetKillingSpreeAnnouncerDisabled	= function: 0x0114a9e8 (function)
      SetCustomBackpackCooldownPercent	= function: 0x0114a4f0 (function)
      GetDaynightCycleAdvanceRate     	= function: 0x0119a170 (function)
      GetTowerBackdoorProtectionEnabled	= function: 0x0119a908 (function)
      GetEventGameSeed                	= function: 0x0119b600 (function)
      GetCustomBuybackCooldownEnabled 	= function: 0x011999d0 (function)
      SetSelectionGoldPenaltyEnabled  	= function: 0x0114a588 (function)
      SetForcedHUDSkin                	= function: 0x0114a1b0 (function)
      SetKillableTombstones           	= function: 0x0114a358 (function)
      GetTopBarTeamValuesVisible      	= function: 0x0119a6e0 (function)
      DisableClumpingBehaviorByDefault	= function: 0x01147c58 (function)
      RemoveRealTimeCombatAnalyzerQuery	= function: 0x0119b328 (function)
      SetExecuteOrderFilter           	= function: 0x0114b3f0 (function)
      GetStickyItemDisabled           	= function: 0x01199e38 (function)
      SetItemAddedToInventoryFilter   	= function: 0x0119af48 (function)
      SetBotsAlwaysPushWithHuman      	= function: 0x0114a848 (function)
      SetPowerRuneSpawnInterval       	= function: 0x0114b0a0 (function)
      SetCustomBackpackSwapCooldown   	= function: 0x0114aee8 (function)
      GetFixedRespawnTime             	= function: 0x0119aa28 (function)
      SetCustomGlyphCooldown          	= function: 0x0114a468 (function)
      SetCameraDistanceOverride       	= function: 0x011497c0 (function)
      SetPauseEnabled                 	= function: 0x01149ba8 (function)
      SetFountainPercentageManaRegen  	= function: 0x0114ac38 (function)
      AreWeatherEffectsDisabled       	= function: 0x0119a430 (function)
      SetTPScrollSlotItemOverride     	= function: 0x01187e78 (function)
      SetTopBarTeamValuesOverride     	= function: 0x01199cb0 (function)
      GetStashPurchasingDisabled      	= function: 0x01199da8 (function)
      SetUseDefaultDOTARuneSpawnLogic 	= function: 0x0114b010 (function)
      GetCustomAttributeDerivedStatValue	= function: 0x0119b7d0 (function)
      ClearRuneSpawnFilter            	= function: 0x0114b368 (function)
      RemoveItemFromCustomShop        	= function: 0x01188050 (function)
      SetAnnouncerDisabled            	= function: 0x0114a960 (function)
      SetRespawnTimeScale             	= function: 0x0119aab0 (function)
      ClearDamageFilter               	= function: 0x0114b580 (function)
      ClearModifyGoldFilter           	= function: 0x0119abf8 (function)
      SetUnseenFogOfWarEnabled        	= function: 0x01147ab0 (function)
      SetStashPurchasingDisabled      	= function: 0x01147910 (function)
      GetAnnouncerDisabled            	= function: 0x0119a9a0 (function)
      SetCustomAttributeDerivedStatValue	= function: 0x0114af78 (function)
      GetCustomRadiantScore           	= function: 0x0119bc48 (function)
      GetHUDVisible                   	= function: 0x0119a550 (function)
      ListenForQuerySucceeded         	= function: 0x0119b210 (function)
      GetRespawnTimeScale             	= function: 0x0119ab38 (function)
      SetTowerBackdoorProtectionEnabled	= function: 0x0114a618 (function)
      SetCustomRadiantScore           	= function: 0x0119b710 (function)
      SetRuneEnabled                  	= function: 0x01149e70 (function)
      SetMinimumAttackSpeed           	= function: 0x0114add8 (function)
      SetAlwaysShowPlayerNames        	= function: 0x01149970 (function)
      DisableHudFlip                  	= function: 0x01149ef0 (function)
      GetMaximumAttackSpeed           	= function: 0x0119a060 (function)
      SetModifyGoldFilter             	= function: 0x0119ab98 (function)
      SetCanSellAnywhere              	= function: 0x01187ed8 (function)
      SetMaximumAttackSpeed           	= function: 0x0114ae60 (function)
      SetStickyItemDisabled           	= function: 0x011479a0 (function)
      SetHealingFilter                	= function: 0x0114b608 (function)
      GetMinimumAttackSpeed           	= function: 0x01199fd8 (function)
      SetCustomXPRequiredToReachNextLevel	= function: 0x01149b10 (function)
      SetNeutralStashEnabled          	= function: 0x0119b3c0 (function)
      SetBotThinkingEnabled           	= function: 0x0114a6b0 (function)
      SetForceRightClickAttackDisabled	= function: 0x01147b40 (function)
      GetAlwaysShowPlayerNames        	= function: 0x01199ae8 (function)
      GetCustomBuybackCostEnabled     	= function: 0x01199f48 (function)
      SetModifyExperienceFilter       	= function: 0x0119ac80 (function)
      GetFogOfWarDisabled             	= function: 0x01199ec0 (function)
      IsBuybackEnabled                	= function: 0x01199a60 (function)
      GetTopBarTeamValuesOverride     	= function: 0x0119a5c0 (function)
      GetGoldSoundDisabled            	= function: 0x01199848 (function)
      IsAbilityUpgradeWhitelisted     	= function: 0x01199718 (function)
      SetCustomBuybackCostEnabled     	= function: 0x01148988 (function)
      GetCustomScanCooldown           	= function: 0x0119b868 (function)
      SetCameraZRange                 	= function: 0x01147bd8 (function)
      SetDeathOverlayDisabled         	= function: 0x0114a008 (function)
      ClearExecuteOrderFilter         	= function: 0x0114b478 (function)
      SetFogOfWarDisabled             	= function: 0x01147a28 (function)
      SetHudCombatEventsDisabled      	= function: 0x0114a090 (function)
      ClearModifyExperienceFilter     	= function: 0x0119ad10 (function)
      SetCustomDireScore              	= function: 0x01147d58 (function)
      SetAllowNeutralItemDrops        	= function: 0x01149cb8 (function)
      SetCustomHeroMaxLevel           	= function: 0x01149a88 (function)
      ClearHealingFilter              	= function: 0x0114b690 (function)
      SetLoseGoldOnDeath              	= function: 0x0114a2d0 (function)
      SetInnateMeleeDamageBlockPerLevelAmount	= function: 0x01147f08 (function)
      SetInnateMeleeDamageBlockAmount 	= function: 0x01147e78 (function)
      SetInnateMeleeDamageBlockPercent	= function: 0x01147de0 (function)
      SetDraftingHeroPickSelectTimeOverride	= function: 0x01149dd8 (function)
      ClearBountyRunePickupFilter     	= function: 0x0114b7a8 (function)
      SetNeutralItemHideUndiscoveredEnabled	= function: 0x0119b568 (function)
      SetBotsInLateGame               	= function: 0x0114a738 (function)
      GetCustomDireScore              	= function: 0x0119bcd0 (function)
      GetCameraDistanceOverride       	= function: 0x01199c20 (function)
      AddRealTimeCombatAnalyzerQuery  	= function: 0x0119b298 (function)
      GetWaterRuneLastSpawnTime       	= function: 0x0119bb28 (function)
      SetCustomBuybackCooldownEnabled 	= function: 0x01148a18 (function)
      ListenForQueryFailed            	= function: 0x0119b188 (function)
      SetAlwaysShowPlayerInventory    	= function: 0x0119bd58 (function)
      ListenForQueryProgressChanged   	= function: 0x0119b0f8 (function)
      SetCustomTerrainWeatherEffect   	= function: 0x0119b068 (function)
      ClearItemAddedToInventoryFilter 	= function: 0x0119afd8 (function)
      GetAlwaysShowPlayerInventory    	= function: 0x01199b30 (function)
      ClearModifierGainedFilter       	= function: 0x0119aeb8 (function)
      EnableAbilityUpgradeWhitelist   	= function: 0x011997b8 (function)
      SetTrackingProjectileFilter     	= function: 0x0114b1c0 (function)
      SetBotsMaxPushTier              	= function: 0x0114a7c0 (function)
      SetFountainPercentageHealthRegen	= function: 0x0114aba0 (function)
      SetModifierGainedFilter         	= function: 0x0119ae30 (function)
      SetDraftingBanningTimeOverride  	= function: 0x01149d48 (function)
      SetGiveFreeTPOnDeath            	= function: 0x0119a3a8 (function)
      SetRecommendedItemsDisabled     	= function: 0x01147880 (function)
      SetFreeCourierModeEnabled       	= function: 0x01149c28 (function)
      SetBountyRunePickupFilter       	= function: 0x0114b718 (function)
      SetOverrideSelectionEntity      	= function: 0x011498e0 (function)
      SetFountainConstantManaRegen    	= function: 0x0114acc8 (function)
      IsDaynightCycleDisabled         	= function: 0x0119a0e8 (function)
      GetCustomBackpackSwapCooldown   	= function: 0x0119b978 (function)
      GetRecommendedItemsDisabled     	= function: 0x011998d0 (function)
      SetUseCustomHeroLevels          	= function: 0x01149a00 (function)
      AddAbilityUpgradeToWhitelist    	= function: 0x01187f38 (function)
      RemoveAbilityUpgradeFromWhitelist	= function: 0x01199938 (function)
      SetFriendlyBuildingMoveToEnabled	= function: 0x01149f70 (function)
      ShouldGiveFreeTPOnDeath         	= function: 0x0119a200 (function)
      AllocateFowBlockerRegion        	= function: 0x01147cf0 (function)
      SetTopBarTeamValue              	= function: 0x0119a770 (function)
      ClearTrackingProjectileFilter   	= function: 0x0114b250 (function)
      SetSendToStashEnabled           	= function: 0x0119b448 (function)
      SetPlayerHeroAvailabilityFiltered	= function: 0x0114aa80 (function)
      SetUseTurboCouriers             	= function: 0x011496b0 (function)
      GetCustomBackpackCooldownPercent	= function: 0x0119ba08 (function)
      SetCameraSmoothCountOverride    	= function: 0x01149850 (function)
      SetBuybackEnabled               	= function: 0x01149738 (function)
      SetDamageFilter                 	= function: 0x0114b500 (function)
      SetWaterRuneLastSpawnTime       	= function: 0x0119bbb8 (function)
      SetAbilityTuningValueFilter     	= function: 0x0119ada0 (function)
      SetHUDVisible                   	= function: 0x0114ad58 (function)
      GetCustomGlyphCooldown          	= function: 0x0119b8f0 (function)
      SetGoldSoundDisabled            	= function: 0x0119bde8 (function)
      SetRemoveIllusionsOnDeath       	= function: 0x0114a120 (function)
      SetCustomGameForceHero          	= function: 0x0114a8d8 (function)
      SetFixedRespawnTime             	= function: 0x0114ab18 (function)
      SetDefaultStickyItem            	= function: 0x0119baa0 (function)
      GetCustomHeroMaxLevel           	= function: 0x0119a880 (function)
      SetDaynightCycleDisabled        	= function: 0x0119a288 (function)
      SetRuneSpawnFilter              	= function: 0x0114b2e0 (function)
   }
   CDOTATutorial                   	= table: 0x01205c08 (table, already seen)
   ACT_DOTA_CAST_EMP               	= 1584 (number)
   GameRules                       	= table: 0x01205a80 (table)
   {
      metatable = table: 0x011f9070
      {
         SetUseBaseGoldBountyOnHeroes    	= function: 0x01203160 (function)
         SetRuneSpawnTime                	= function: 0x01203b48 (function)
         FDesc                           	= table: 0x011f90f8 (table)
         {
            SetUseBaseGoldBountyOnHeroes    	= void SetUseBaseGoldBountyOnHeroes(bool)
Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas. (userdata)
            SetRuneSpawnTime                	= void SetRuneSpawnTime(float)
Sets the amount of time between rune spawns. (userdata)
            GetStateTransitionTime          	= float GetStateTransitionTime()
Get time remaining between state changes. (userdata)
            IsTemporaryNight                	= bool IsTemporaryNight()
Is it temporarily night-time? (userdata)
            SetGlyphCooldown                	= void SetGlyphCooldown(int, float)
Set Glyph cooldown for team (userdata)
            GetNextRuneSpawnTime            	= float GetNextRuneSpawnTime()
Gets next rune spawn time (userdata)
            SetCustomVictoryMessageDuration 	= void SetCustomVictoryMessageDuration(float)
Sets the victory message duration. (userdata)
            GetNianTotalDamageTaken         	= int GetNianTotalDamageTaken()
For New Bloom, get total damage taken by the Nian / Year Beast (userdata)
            AddHeroIDToBlacklist            	= void AddHeroIDToBlacklist(int)
Add the hero ID to the hero blacklist if it is not already present (userdata)
            SetGameWinner                   	= void SetGameWinner(int)
Makes the specified team win (userdata)
            AddHeroToWhitelist              	= void AddHeroToWhitelist(string)
Add the hero to the hero whitelist if it is not already present (userdata)
            GetGameSessionConfigValue       	= string GetGameSessionConfigValue(string, string)
Get a string value from the game session config (map options) (userdata)
            GetDroppedItem                  	= handle GetDroppedItem(int)
Gets the Xth dropped item (userdata)
            SetCustomGameAllowMusicAtGameStart	= void SetCustomGameAllowMusicAtGameStart(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            GetCustomGameTeamMaxPlayers     	= int GetCustomGameTeamMaxPlayers(int)
Get whether a team is selectable during game setup (userdata)
            SetEnableAlternateHeroGrids     	= void SetEnableAlternateHeroGrids(bool)
Allow alternate hero grids to be used (DOTA+, etc).  True by default. (userdata)
            SetCustomGameAllowHeroPickMusic 	= void SetCustomGameAllowHeroPickMusic(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            SetCustomGameTeamMaxPlayers     	= void SetCustomGameTeamMaxPlayers(int, int)
Set whether a team is selectable during game setup (userdata)
            ClearPlayerHeroAvailability     	= void ClearPlayerHeroAvailability(int)
Clears available heroes of player of given ID (userdata)
            IsGamePaused                    	= bool IsGamePaused()
Returns whether the game is paused. (userdata)
            LockCustomGameSetupTeamAssignment	= void LockCustomGameSetupTeamAssignment(bool)
Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams. (userdata)
            SetPostGameTime                 	= void SetPostGameTime(float)
Sets the amount of time players have between the game ending and the server disconnecting them. (userdata)
            SetItemStockCount               	= void SetItemStockCount(int, int, string, int)
Set the stock count of the item (userdata)
            IsHeroEnabledViaLists           	= bool IsHeroEnabledViaLists(string)
Is the hero not blacklisted, and is it either whitelisted or the whitelist is empty? (userdata)
            BotPopulate                     	= void BotPopulate()
Fills all the teams with bots if cheat mode is enabled. (userdata)
            SetFirstBloodActive             	= void SetFirstBloodActive(bool)
Sets whether First Blood has been triggered. (userdata)
            GetWeatherWindDirection         	= Vector GetWeatherWindDirection()
Get Weather Wind Direction Vector (userdata)
            SetCreepMinimapIconScale        	= void SetCreepMinimapIconScale(float)
(flMinimapCreepIconScale) - Scale the creep icons on the minimap. (userdata)
            SetWeatherWindDirection         	= void SetWeatherWindDirection(Vector)
Set Weather Wind Direction Vector (userdata)
            NumDroppedItems                 	= int NumDroppedItems()
Returns the number of items currently dropped on the ground (userdata)
            AddMinimapDebugPoint            	= void AddMinimapDebugPoint(int, Vector, int, int, int, int, float)
Add a point on the minimap. (userdata)
            IsItemInWhiteList               	= bool IsItemInWhiteList(string)
Query an item in the whitelist (userdata)
            FinishCustomGameSetup           	= void FinishCustomGameSetup()
Indicate that the custom game setup phase is complete, and advance to the game. (userdata)
            RemoveItemFromWhiteList         	= void RemoveItemFromWhiteList(string)
Remove an item from the whitelist (userdata)
            ClearRiverPaint                 	= void ClearRiverPaint()
Clears the current river paint (userdata)
            GetItemStockCount               	= int GetItemStockCount(int, string, int)
Get the stock count of the item (userdata)
            AddEventMetadataLeaderboardEntryRawScore	= bool AddEventMetadataLeaderboardEntryRawScore(string, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 ) (userdata)
            BeginNightstalkerNight          	= void BeginNightstalkerNight(float)
Begin night stalker night. (userdata)
            SetUseCustomHeroXPValues        	= void SetUseCustomHeroXPValues(bool)
Allows heroes in the map to give a specific amount of XP (this value must be set). (userdata)
            Playtesting_UpdateAddOnKeyValues	= void Playtesting_UpdateAddOnKeyValues()
Updates custom hero, unit and ability KeyValues in memory with the latest values from disk (userdata)
            SetCreepSpawningEnabled         	= void SetCreepSpawningEnabled(bool)
Sets whether the regular Dota creeps spawn. (userdata)
            ForceGameStart                  	= void ForceGameStart()
Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS (userdata)
            GetItemStockTime                	= float GetItemStockTime(int, string, int)
Get the time an item will be added to stock (userdata)
            SetTimeOfDay                    	= void SetTimeOfDay(float)
Set the time of day. (userdata)
            SetGoldPerTick                  	= void SetGoldPerTick(int)
Set the auto gold increase per timed interval. (userdata)
            IncreaseItemStock               	= void IncreaseItemStock(int, string, int, int)
Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID . (userdata)
            SendCustomMessageToTeam         	= void SendCustomMessageToTeam(string, int, int, int)
Sends a message on behalf of a player to the specified team. (userdata)
            SetSpeechUseSpawnInsteadOfRespawnConcept	= void SetSpeechUseSpawnInsteadOfRespawnConcept(bool)
Set whether to speak a Spawn concept instead of a Respawn concept on respawn. (userdata)
            Script_GetMatchID               	= uint64 Script_GetMatchID()
Get the MatchID for this game. (userdata)
            ModifyGoldFiltered              	= int ModifyGoldFiltered(int, int, bool, int)
Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true (userdata)
            SetGameTimeFrozen               	= void SetGameTimeFrozen(bool)
Freeze the game time. (userdata)
            SetSafeToLeave                  	= void SetSafeToLeave(bool)
(bSafeToLeave) - Mark this game as safe to leave. (userdata)
            ResetToCustomGameSetup          	= void ResetToCustomGameSetup()
Restart at custom game setup. (userdata)
            IsCheatMode                     	= bool IsCheatMode()
Are cheats enabled on the server (userdata)
            RemoveHeroIDFromBlacklist       	= void RemoveHeroIDFromBlacklist(int)
Remove the hero ID from the hero blacklist if present (userdata)
            AddBotPlayerWithEntityScript    	= handle AddBotPlayerWithEntityScript(string, string, int, string, bool)
Spawn a bot player of the passed hero name, player name, and team. (userdata)
            Defeated                        	= void Defeated()
Kills the ancient, etc. (userdata)
            ResetToHeroSelection            	= void ResetToHeroSelection()
Restart the game at hero selection (userdata)
            ForceCreepSpawn                 	= void ForceCreepSpawn()
Spawn the next wave of creeps. (userdata)
            BeginTemporaryNight             	= void BeginTemporaryNight(float)
Begin temporary night. (userdata)
            AddHeroToPlayerAvailability     	= void AddHeroToPlayerAvailability(int, int)
Adds hero of given ID to available heroes of player of given ID (userdata)
            SetGoldTickTime                 	= void SetGoldTickTime(float)
Set the time interval between auto gold increases. (userdata)
            ExecuteTeamPing                 	= void ExecuteTeamPing(int, float, float, handle, int)
Sends a minimap ping to all players on the team (userdata)
            SetCustomGameAllowBattleMusic   	= void SetCustomGameAllowBattleMusic(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            SpawnNeutralCreeps              	= void SpawnNeutralCreeps()
Spawn and release the next set of neutral camps. (userdata)
            SetRiverPaint                   	= void SetRiverPaint(int, float)
Paints the river for a duration (userdata)
            ResetDefeated                   	= void ResetDefeated()
Restart after killing the ancient, etc. (userdata)
            ClearHeroWhitelist              	= void ClearHeroWhitelist()
Clears the hero whitelist (userdata)
            SetCustomGameBansPerTeam        	= void SetCustomGameBansPerTeam(int)
Set number of hero bans each team gets (userdata)
            SetEventMetadataCustomTable     	= bool SetEventMetadataCustomTable(handle)
Event-only ( table hMetadataTable ) (userdata)
            SetCustomGameDifficulty         	= void SetCustomGameDifficulty(int)
Set the difficulty level of the custom game mode (userdata)
            SetEventSignoutCustomTable      	= bool SetEventSignoutCustomTable(handle)
Event-only ( table hMetadataTable ) (userdata)
            SetWhiteListEnabled             	= void SetWhiteListEnabled(bool)
Item whitelist functionality enable/disable (userdata)
            SetAllowOutpostBonuses          	= void SetAllowOutpostBonuses(bool)
Allow Outposts granting XP (userdata)
            GetIetmStockDuration            	= float GetIetmStockDuration(int, string, int)
Get the time it takes to add a new item to stock (userdata)
            AddEventMetadataLeaderboardEntry	= bool AddEventMetadataLeaderboardEntry(string, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 ) (userdata)
            PrepareSpawners                 	= void PrepareSpawners(float)
Prepare Dota lane style spawners with a given interval (userdata)
            SetStartingGold                 	= void SetStartingGold(int)
Set the starting gold amount. (userdata)
            GetCustomGameDifficulty         	= int GetCustomGameDifficulty()
Returns the difficulty level of the custom game mode (userdata)
            SetCustomGameAllowSecondaryAbilitiesOnOtherUnits	= void SetCustomGameAllowSecondaryAbilitiesOnOtherUnits(bool)
Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero. (userdata)
            IsDev                           	= bool IsDev()
 (userdata)
            RemoveFakeClient                	= void RemoveFakeClient(int)
Removes a fake client (userdata)
            PlayerHasCustomGameHostPrivileges	= bool PlayerHasCustomGameHostPrivileges(handle)
Whether a player has custom game host privileges (shuffle teams, etc.) (userdata)
            GetNextBountyRuneSpawnTime      	= float GetNextBountyRuneSpawnTime()
Gets next bounty rune spawn time (userdata)
            MakeTeamLose                    	= void MakeTeamLose(int)
Makes the specified team lose (userdata)
            ShouldHideBlacklistedHeroes     	= bool ShouldHideBlacklistedHeroes()
Are blacklisted heroes hidden, or just dimmed, in hero picking? (userdata)
            IsHeroRespawnEnabled            	= bool IsHeroRespawnEnabled()
Returns whether hero respawn is enabled. (userdata)
            SetHideBlacklistedHeroes        	= void SetHideBlacklistedHeroes(bool)
Should blacklisted heroes be hidden, or just dimmed, in hero picking? (userdata)
            AddHeroToBlacklist              	= void AddHeroToBlacklist(string)
Add the hero to the hero blacklist if it is not already present (userdata)
            RemoveHeroIDFromWhitelist       	= void RemoveHeroIDFromWhitelist(int)
Remove the hero ID from the hero whitelist if present (userdata)
            GetPlayerCustomGameAccountRecord	= table GetPlayerCustomGameAccountRecord(int)
(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session (userdata)
            RemoveHeroFromWhitelist         	= void RemoveHeroFromWhitelist(string)
Remove the hero from the hero whitelist if present (userdata)
            RemoveHeroFromBlacklist         	= void RemoveHeroFromBlacklist(string)
Remove the hero from the hero blacklist if present (userdata)
            AddHeroIDToWhitelist            	= void AddHeroIDToWhitelist(int)
Add the hero ID to the hero whitelist if it is not already present (userdata)
            ClearHeroBlacklist              	= void ClearHeroBlacklist()
Clears the hero blacklist (userdata)
            GetDOTATime                     	= float GetDOTATime(bool, bool)
(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time. (userdata)
            SetCustomGameSetupAutoLaunchDelay	= void SetCustomGameSetupAutoLaunchDelay(float)
Set the amount of time to wait for auto launch. (userdata)
            GetMatchSignoutComplete         	= bool GetMatchSignoutComplete()
Have we received the post match signout message that includes reward information (userdata)
            SetCustomGameSetupTimeout       	= void SetCustomGameSetupTimeout(float)
Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called) (userdata)
            SetSameHeroSelectionEnabled     	= void SetSameHeroSelectionEnabled(bool)
When true, players can repeatedly pick the same hero. (userdata)
            IsDaytime                       	= bool IsDaytime()
Is it day time? (userdata)
            SetNextBountyRuneSpawnTime      	= void SetNextBountyRuneSpawnTime(float)
Sets next bounty rune spawn time (userdata)
            EnableCustomGameSetupAutoLaunch 	= void EnableCustomGameSetupAutoLaunch(bool)
Enabled (true) or disable (false) auto launch for custom game setup. (userdata)
            SetHeroMinimapIconScale         	= void SetHeroMinimapIconScale(float)
(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap. (userdata)
            SendCustomMessage               	= void SendCustomMessage(string, int, int)
Sends a message on behalf of a player. (userdata)
            SetShowcaseTime                 	= void SetShowcaseTime(float)
Sets the amount of time players have between the strategy phase and entering the pre-game phase. (userdata)
            SetCustomGameEndDelay           	= void SetCustomGameEndDelay(float)
Sets the game end delay. (userdata)
            SetIgnoreLobbyTeamsInCustomGame 	= void SetIgnoreLobbyTeamsInCustomGame(bool)
Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true. (userdata)
            GetGameTime                     	= float GetGameTime()
Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused (userdata)
            SetHeroRespawnEnabled           	= void SetHeroRespawnEnabled(bool)
Control if the normal DOTA hero respawn rules apply. (userdata)
            IsInBanPhase                    	= bool IsInBanPhase()
Are we in the ban phase of hero pick? (userdata)
            SetNextRuneSpawnTime            	= void SetNextRuneSpawnTime(float)
Sets next rune spawn time (userdata)
            SetHeroSelectionTime            	= void SetHeroSelectionTime(float)
Sets the amount of time players have to pick their hero. (userdata)
            SetUseUniversalShopMode         	= void SetUseUniversalShopMode(bool)
When true, all items are available at as long as any shop is in range. (userdata)
            SetHideKillMessageHeaders       	= void SetHideKillMessageHeaders(bool)
Sets whether the multikill, streak, and first-blood banners appear at the top of the screen. (userdata)
            GetTimeOfDay                    	= float GetTimeOfDay()
Get the time of day (userdata)
            State_Get                       	= int State_Get()
Get the current Gamerules state (userdata)
            GetGameFrameTime                	= float GetGameFrameTime()
Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused (userdata)
            SetCustomGameSetupRemainingTime 	= void SetCustomGameSetupRemainingTime(float)
Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever (userdata)
            GetDifficulty                   	= int GetDifficulty()
Returns difficulty level of the custom game mode (userdata)
            SetStrategyTime                 	= void SetStrategyTime(float)
Sets the amount of time players have between the hero selection and entering the showcase phase. (userdata)
            SetTreeRegrowTime               	= void SetTreeRegrowTime(float)
Sets the tree regrow time in seconds. (userdata)
            GetAnnouncer                    	= handle GetAnnouncer(int)
Get the announcer for a team (userdata)
            DidMatchSignoutTimeOut          	= bool DidMatchSignoutTimeOut()
true when we have waited some time after end of the game and not received signout (userdata)
            ResetGameTime                   	= void ResetGameTime()
Restart gametime from 0 (userdata)
            SpawnAndReleaseCreeps           	= void SpawnAndReleaseCreeps()
Spawn and release the next creep wave from Dota lane style spawners. (userdata)
            GetBannedHeroes                 	= table GetBannedHeroes()
Returns the hero unit names banned in this game, if any (userdata)
            SetOverlayHealthBarUnit         	= void SetOverlayHealthBarUnit(handle, int)
Show this unit's health on the overlay health bar (userdata)
            GetBannedHeroIDs                	= table GetBannedHeroIDs()
Returns the hero unit IDs banned in this game, if any (userdata)
            IsNightstalkerNight             	= bool IsNightstalkerNight()
Is it night stalker night-time? (userdata)
            AddItemToWhiteList              	= void AddItemToWhiteList(string)
Add an item to the whitelist (userdata)
            SetCustomGameAccountRecordSaveFunction	= void SetCustomGameAccountRecordSaveFunction(handle, handle)
(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table) (userdata)
            SetPreGameTime                  	= void SetPreGameTime(float)
Sets the amount of time players have between picking their hero and game start. (userdata)
            SetCustomVictoryMessage         	= void SetCustomVictoryMessage(string)
Sets the victory message. (userdata)
            AddMinimapDebugPointForTeam     	= void AddMinimapDebugPointForTeam(int, Vector, int, int, int, int, float, int)
Add a point on the minimap for a specific team. (userdata)
            SetHeroSelectPenaltyTime        	= void SetHeroSelectPenaltyTime(float)
Sets amount of penalty time before randoming a hero (userdata)
            SetRuneMinimapIconScale         	= void SetRuneMinimapIconScale(float)
(flMinimapRuneIconScale) - Scale the rune icons on the minimap. (userdata)
            SetFilterMoreGold               	= void SetFilterMoreGold(bool)
Sets whether to filter more gold events than normal (userdata)
            GetGameModeEntity               	= handle GetGameModeEntity()
Get the game mode entity (userdata)
         }
         IsNull                          	= function: 0x011f9098 (function)
         IsTemporaryNight                	= function: 0x01203478 (function)
         SetGlyphCooldown                	= function: 0x01208018 (function)
         GetNextRuneSpawnTime            	= function: 0x01207d08 (function)
         SetCustomVictoryMessageDuration 	= function: 0x01205230 (function)
         GetNianTotalDamageTaken         	= function: 0x01204ef8 (function)
         AddHeroIDToBlacklist            	= function: 0x012081b0 (function)
         SetPreGameTime                  	= function: 0x01203948 (function)
         AddHeroToWhitelist              	= function: 0x012054e0 (function)
         GetGameSessionConfigValue       	= function: 0x01204608 (function)
         GetDroppedItem                  	= function: 0x011f9338 (function)
         SetCustomGameAllowMusicAtGameStart	= function: 0x012044c8 (function)
         GetCustomGameTeamMaxPlayers     	= function: 0x01204288 (function)
         SetEnableAlternateHeroGrids     	= function: 0x01203e88 (function)
         SetCustomGameAllowHeroPickMusic 	= function: 0x012043a8 (function)
         SetCustomGameTeamMaxPlayers     	= function: 0x012041f8 (function)
         ClearPlayerHeroAvailability     	= function: 0x012058b0 (function)
         IsGamePaused                    	= function: 0x012052c0 (function)
         AddItemToWhiteList              	= function: 0x012070c8 (function)
         SetPostGameTime                 	= function: 0x012039c8 (function)
         SetItemStockCount               	= function: 0x01207bf8 (function)
         IsHeroEnabledViaLists           	= function: 0x01205940 (function)
         BotPopulate                     	= function: 0x01206eb8 (function)
         SetFirstBloodActive             	= function: 0x01205008 (function)
         GetWeatherWindDirection         	= function: 0x01207950 (function)
         SetCreepMinimapIconScale        	= function: 0x01204930 (function)
         SetWeatherWindDirection         	= function: 0x01207c80 (function)
         NumDroppedItems                 	= function: 0x01202e50 (function)
         AddMinimapDebugPoint            	= function: 0x01203ce8 (function)
         IsItemInWhiteList               	= function: 0x012071d8 (function)
         SetCustomGameEndDelay           	= function: 0x012051a8 (function)
         RemoveItemFromWhiteList         	= function: 0x01207150 (function)
         ClearRiverPaint                 	= function: 0x01202dd0 (function)
         GetItemStockCount               	= function: 0x012079d8 (function)
         AddEventMetadataLeaderboardEntryRawScore	= function: 0x01206d88 (function)
         BeginNightstalkerNight          	= function: 0x01203610 (function)
         SetUseCustomHeroXPValues        	= function: 0x01204b50 (function)
         Playtesting_UpdateAddOnKeyValues	= function: 0x01203068 (function)
         SetCreepSpawningEnabled         	= function: 0x012049c0 (function)
         ForceGameStart                  	= function: 0x01207260 (function)
         GetItemStockTime                	= function: 0x01207a60 (function)
         SetTimeOfDay                    	= function: 0x012031f0 (function)
         SetGoldPerTick                  	= function: 0x01204ce8 (function)
         IncreaseItemStock               	= function: 0x01207b70 (function)
         SendCustomMessageToTeam         	= function: 0x01202f58 (function)
         SetSpeechUseSpawnInsteadOfRespawnConcept	= function: 0x01207710 (function)
         Script_GetMatchID               	= function: 0x01206bd8 (function)
         ModifyGoldFiltered              	= function: 0x01207fc0 (function)
         SetGameTimeFrozen               	= function: 0x01207608 (function)
         SetSafeToLeave                  	= function: 0x01204ad0 (function)
         ResetToCustomGameSetup          	= function: 0x01206f38 (function)
         IsCheatMode                     	= function: 0x012078d0 (function)
         RemoveHeroIDFromBlacklist       	= function: 0x012053c8 (function)
         AddBotPlayerWithEntityScript    	= function: 0x012074f0 (function)
         Defeated                        	= function: 0x011f9178 (function)
         ResetToHeroSelection            	= function: 0x012037b0 (function)
         ForceCreepSpawn                 	= function: 0x012072e0 (function)
         BeginTemporaryNight             	= function: 0x01203500 (function)
         AddHeroToPlayerAvailability     	= function: 0x01205820 (function)
         SetGoldTickTime                 	= function: 0x01204c68 (function)
         ExecuteTeamPing                 	= function: 0x01207690 (function)
         SetCustomGameAllowBattleMusic   	= function: 0x01204438 (function)
         SpawnNeutralCreeps              	= function: 0x01207468 (function)
         SetRiverPaint                   	= function: 0x012030e0 (function)
         ResetDefeated                   	= function: 0x011f94d0 (function)
         ClearHeroWhitelist              	= function: 0x01205708 (function)
         SetCustomGameBansPerTeam        	= function: 0x01207840 (function)
         SetEventMetadataCustomTable     	= function: 0x01206c60 (function)
         SetCustomGameDifficulty         	= function: 0x01204be0 (function)
         SetEventSignoutCustomTable      	= function: 0x01206e28 (function)
         SetCustomVictoryMessage         	= function: 0x01205120 (function)
         SetAllowOutpostBonuses          	= function: 0x012080a0 (function)
         GetIetmStockDuration            	= function: 0x01207ae8 (function)
         AddEventMetadataLeaderboardEntry	= function: 0x01206cf0 (function)
         PrepareSpawners                 	= function: 0x01207360 (function)
         SetStartingGold                 	= function: 0x01204d68 (function)
         GetCustomGameDifficulty         	= function: 0x011f8938 (function)
         SetCustomGameAllowSecondaryAbilitiesOnOtherUnits	= function: 0x01204560 (function)
         IsDev                           	= function: 0x011f8ac8 (function)
         RemoveFakeClient                	= function: 0x01207580 (function)
         PlayerHasCustomGameHostPrivileges	= function: 0x01204718 (function)
         GetNextBountyRuneSpawnTime      	= function: 0x01207e18 (function)
         MakeTeamLose                    	= function: 0x011f88f0 (function)
         ShouldHideBlacklistedHeroes     	= function: 0x012059c8 (function)
         IsHeroRespawnEnabled            	= function: 0x01205340 (function)
         SetHideBlacklistedHeroes        	= function: 0x01205790 (function)
         RemoveHeroIDFromWhitelist       	= function: 0x01205678 (function)
         AddHeroToBlacklist              	= function: 0x01208128 (function)
         RemoveHeroFromWhitelist         	= function: 0x012055f0 (function)
         GetPlayerCustomGameAccountRecord	= function: 0x012047b0 (function)
         AddHeroIDToWhitelist            	= function: 0x01205568 (function)
         RemoveHeroFromBlacklist         	= function: 0x01208238 (function)
         ClearHeroBlacklist              	= function: 0x01205458 (function)
         State_Get                       	= function: 0x011f9120 (function)
         GetGameModeEntity               	= function: 0x01204f80 (function)
         SetCustomGameSetupAutoLaunchDelay	= function: 0x01204038 (function)
         GetMatchSignoutComplete         	= function: 0x01204de8 (function)
         SetCustomGameSetupTimeout       	= function: 0x01203f18 (function)
         SetSameHeroSelectionEnabled     	= function: 0x01203bd0 (function)
         SetHeroMinimapIconScale         	= function: 0x012048d0 (function)
         SetNextBountyRuneSpawnTime      	= function: 0x01207ea8 (function)
         EnableCustomGameSetupAutoLaunch 	= function: 0x012040d0 (function)
         IsDaytime                       	= function: 0x012033f8 (function)
         SetShowcaseTime                 	= function: 0x01203ac8 (function)
         GetDOTATime                     	= function: 0x011f90c0 (function)
         GetStateTransitionTime          	= function: 0x01203370 (function)
         SetIgnoreLobbyTeamsInCustomGame 	= function: 0x012077b0 (function)
         SetGameWinner                   	= function: 0x011f8870 (function)
         SetHeroRespawnEnabled           	= function: 0x01202fe0 (function)
         IsInBanPhase                    	= function: 0x012032f0 (function)
         GetGameTime                     	= function: 0x011f9208 (function)
         SetHeroSelectionTime            	= function: 0x012038c0 (function)
         SetUseUniversalShopMode         	= function: 0x01203c60 (function)
         SetHideKillMessageHeaders       	= function: 0x01205090 (function)
         SetHeroSelectPenaltyTime        	= function: 0x01204318 (function)
         GetTimeOfDay                    	= function: 0x01203270 (function)
         AddMinimapDebugPointForTeam     	= function: 0x01203d70 (function)
         FinishCustomGameSetup           	= function: 0x01203e00 (function)
         GetDifficulty                   	= function: 0x011f9428 (function)
         SetStrategyTime                 	= function: 0x01203a48 (function)
         SetTreeRegrowTime               	= function: 0x01203838 (function)
         SetCustomGameSetupRemainingTime 	= function: 0x01203fa8 (function)
         DidMatchSignoutTimeOut          	= function: 0x01204e70 (function)
         ResetGameTime                   	= function: 0x01206fc0 (function)
         SpawnAndReleaseCreeps           	= function: 0x012073e0 (function)
         GetBannedHeroes                 	= function: 0x011f89c0 (function)
         SetOverlayHealthBarUnit         	= function: 0x01203698 (function)
         GetAnnouncer                    	= function: 0x01204698 (function)
         SendCustomMessage               	= function: 0x01202ed0 (function)
         GetGameFrameTime                	= function: 0x011f9288 (function)
         SetCustomGameAccountRecordSaveFunction	= function: 0x01204848 (function)
         SetWhiteListEnabled             	= function: 0x01207040 (function)
         LockCustomGameSetupTeamAssignment	= function: 0x01204160 (function)
         GetBannedHeroIDs                	= function: 0x011f8a40 (function)
         IsNightstalkerNight             	= function: 0x01203588 (function)
         SetRuneMinimapIconScale         	= function: 0x01204a48 (function)
         SetNextRuneSpawnTime            	= function: 0x01207d90 (function)
         SetFilterMoreGold               	= function: 0x01207f38 (function)
      }
      AddonTemplate                   	= table: 0x01365598 (table)
      {
         metatable = table: 0x01360f78
         {
            __class__                       	= table: 0x01360f78 (table, already seen)
            __getbase__                     	= function: 0x013610e0 (function)
            __getclass__                    	= function: 0x013610c0 (function)
            __initprops__                   	= table: 0x01361078 (table)
            {
            }
            __instanceof__                  	= function: 0x013610a0 (function)
            OnThink                         	= function: 0x01361180 (function)
            GameThink                       	= function: 0x01361160 (function)
            InitGameMode                    	= function: 0x01361140 (function)
         }
      }
      __self                          	= userdata: 0x01205ac0 (userdata)
   }
   __VScriptServerDebugHook        	= function: 0x011b3750 (function)
   CDOTAGameRules                  	= table: 0x011f9070 (table, already seen)
   MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE	= 17 (number)
   ACT_DOTA_CONSTANT_LAYER         	= 1532 (number)
   DOTA_PROJECTILE_ATTACHMENT_NONE 	= 0 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM	= 19 (number)
   ACT_DOTA_CAST_ABILITY_ROT       	= 1547 (number)
   MODIFIER_PROPERTY_EXP_RATE_BOOST	= 125 (number)
   EntityUtils                     	= table: 0x011dc940 (table)
   {
      GetRootScriptClass              	= function: 0x011eb1c0 (function)
      GetClassFieldType               	= function: 0x011eb1e0 (function)
   }
   h                               	= function: 0x011eb140 (function)
   c                               	= table: 0x011eb000 (table, already seen)
   ACT_RUN_AIM_DUAL                	= 886 (number)
   ACT_DOTA_MIDNIGHT_PULSE         	= 1676 (number)
   FDesc                           	= table: 0x01117560 (table)
   {
      GetItemDefQuantity              	= int GetItemDefQuantity(int, int)
 (userdata)
      SpawnEntityGroupFromTable       	= bool SpawnEntityGroupFromTable(handle, bool, handle)
Hierarchically spawn an entity group from a set of spawn tables. (userdata)
      LoadKeyValuesFromString         	= table LoadKeyValuesFromString(string)
Creates a table from the specified keyvalues string (userdata)
      PrecacheUnitFromTableSync       	= void PrecacheUnitFromTableSync(handle, handle)
Precaches a DOTA unit from a table of entity key values. (userdata)
      GetXPNeededToReachNextLevel     	= int GetXPNeededToReachNextLevel(int)
Get amount of XP required to reach the next level. (userdata)
      EntIndexToHScript               	= handle EntIndexToHScript(int)
Turn an entity index integer to an HScript representing that entity's script instance. (userdata)
      StartSoundEventReliable         	= void StartSoundEventReliable(string, handle)
Start a sound event with reliable delivery (userdata)
      Plat_FloatTime                  	= float Plat_FloatTime()
Get the current float time from the engine (userdata)
      StopEffect                      	= void StopEffect(handle, string)
Pass entity and effect name (userdata)
      Say                             	= void Say(handle, string, bool)
Have Entity say string, and teamOnly or not (userdata)
      QSlerp                          	= QAngle QSlerp(QAngle, QAngle, float)
(from angle, to angle, time) - Spherical lerp of angle from->to based on time (userdata)
      PrecacheItemByNameAsync         	= void PrecacheItemByNameAsync(string, handle)
Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished. (userdata)
      StartSoundEventUnreliable       	= void StartSoundEventUnreliable(string, handle)
Start a sound event with optional delivery (userdata)
      RandomInt                       	= int RandomInt(int, int)
Get a random int within a range (userdata)
      RollPercentage                  	= bool RollPercentage(int)
(int nPct) (userdata)
      SendToConsole                   	= void SendToConsole(string)
Send a string to the console as a client command (userdata)
      CreateItemOnPositionForLaunch   	= handle CreateItemOnPositionForLaunch(Vector, handle)
Create a physical item at a given location, can start in air (but doesn't clear a space) (userdata)
      DOTA_SpawnMapAtPosition         	= int DOTA_SpawnMapAtPosition(string, Vector, bool, handle, handle, handle)
Spawn a .vmap at the target location. (userdata)
      VectorToAngles                  	= QAngle VectorToAngles(Vector)
Get Qangles (with no roll) for a Vector. (userdata)
      IsDedicatedServer               	= bool IsDedicatedServer()
Returns true if this server is a dedicated server. (userdata)
      SplineVectors                   	= Vector SplineVectors(Vector, Vector, float)
(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1] (userdata)
      EmitAnnouncerSoundForPlayer     	= void EmitAnnouncerSoundForPlayer(string, int)
Emit an announcer sound for a player. (userdata)
      Msg                             	= void Msg(string)
Print a message (userdata)
      AnglesToVector                  	= Vector AnglesToVector(QAngle)
Generate a vector given a QAngles (userdata)
      GetTargetLinearLocation         	= Vector GetTargetLinearLocation(int, int, int, Vector, int, int, int)
 (userdata)
      rr_AddDecisionRule              	= bool rr_AddDecisionRule(handle)
Add a rule to the decision database. (userdata)
      FindClearSpaceForUnit           	= bool FindClearSpaceForUnit(handle, Vector, bool)
Place a unit somewhere not already occupied. (userdata)
      LoadKeyValues                   	= table LoadKeyValues(string)
Creates a table from the specified keyvalues text file (userdata)
      TraceLine                       	= bool TraceLine(handle)
Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid (userdata)
      ShowMessage                     	= void ShowMessage(string)
Print a hud message on all clients (userdata)
      GetWorldMinY                    	= float GetWorldMinY()
Gets the world's minimum Y position. (userdata)
      CreateItemOnPositionSync        	= handle CreateItemOnPositionSync(Vector, handle)
Create a physical item at a given location (userdata)
      UnloadSpawnGroup                	= void UnloadSpawnGroup(string)
Unload a spawn group by name (userdata)
      GetListenServerHost             	= handle GetListenServerHost()
Get the local player on a listen server. (userdata)
      StopListeningToGameEvent        	= bool StopListeningToGameEvent(int)
Stop listening to a particular game event. (userdata)
      RotationDeltaAsAngularVelocity  	= Vector RotationDeltaAsAngularVelocity(QAngle, QAngle)
converts delta QAngle to an angular velocity Vector (userdata)
      FireEntityIOInputVec            	= void FireEntityIOInputVec(ehandle, string, Vector)
Fire Entity's Action Input with passed Vector - you own the memory (userdata)
      DoEntFire                       	= void DoEntFire(string, string, string, float, handle, handle)
#EntFire:Generate and entity i/o event (userdata)
      IsMarkedForDeletion             	= bool IsMarkedForDeletion(handle)
Returns true if the entity is valid and marked for deletion. (userdata)
      PrecacheEntityFromTable         	= void PrecacheEntityFromTable(string, handle, handle)
Precache an entity from KeyValues in table (userdata)
      VectorAngles                    	= QAngle VectorAngles(Vector)
 (userdata)
      GetPhysAngularVelocity          	= Vector GetPhysAngularVelocity(handle)
Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second. (userdata)
      GetAbilityKeyValuesByName       	= table GetAbilityKeyValuesByName(string)
Get ability data by ability name. (userdata)
      LocalTime                       	= table LocalTime()
Get the current local time (userdata)
      RotatePosition                  	= Vector RotatePosition(Vector, QAngle, Vector)
Rotate a Vector around a point. (userdata)
      UnloadSpawnGroupByHandle        	= void UnloadSpawnGroupByHandle(int)
Unload a spawn group by handle (userdata)
      PrintLinkedConsoleMessage       	= void PrintLinkedConsoleMessage(string, string)
Print a console message with a linked console command (userdata)
      MakeStringToken                 	= int MakeStringToken(string)
Checks to see if the given hScript is a valid entity (userdata)
      IsServer                        	= bool IsServer()
Returns true if this is lua running from the server.dll. (userdata)
      EmitAnnouncerSound              	= void EmitAnnouncerSound(string)
Emit an announcer sound for all players. (userdata)
      GetAbilityTextureNameForAbility 	= string GetAbilityTextureNameForAbility(string)
Gets the ability texture name for an ability (userdata)
      CreateHTTPRequest               	= handle CreateHTTPRequest(string, string)
Create an HTTP request. (userdata)
      EmitSoundOnLocationForAllies    	= void EmitSoundOnLocationForAllies(Vector, string, handle)
Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster (userdata)
      UTIL_MessageTextAll_WithContext 	= void UTIL_MessageTextAll_WithContext(string, int, int, int, int, handle)
Sends colored text to all clients. (Valid context keys: player_id, value, team_id) (userdata)
      CreateHTTPRequestScriptVM       	= handle CreateHTTPRequestScriptVM(string, string)
Create an HTTP request. (userdata)
      DebugDrawText                   	= void DebugDrawText(Vector, string, bool, float)
Draw text in 3d (origin, text, bViewCheck, duration) (userdata)
      ResolveNPCPositions             	= void ResolveNPCPositions(Vector, float)
Check and fix units that have been assigned a position inside collision radius of other NPCs. (userdata)
      LinkLuaModifier                 	= void LinkLuaModifier(string, string, int)
Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType). (userdata)
      RemapValClamped                 	= float RemapValClamped(float, float, float, float, float)
 (userdata)
      SpawnEntityListFromTableSynchronous	= handle SpawnEntityListFromTableSynchronous(handle)
Synchronously spawn an entity group from a list of spawn tables. (userdata)
      ReloadMOTD                      	= void ReloadMOTD()
Reloads the MotD file (userdata)
      SpawnEffigyOfUnitOrModel        	= handle SpawnEffigyOfUnitOrModel(string, int, Vector, Vector, float, float, int)
Spawn an effigy of the target unit. (userdata)
      GetPotentialNeutralItemDrop     	= string GetPotentialNeutralItemDrop(int, int)
Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables. (userdata)
      FindSpawnEntityForTeam          	= handle FindSpawnEntityForTeam(int)
Find a spawn point for the given team. (userdata)
      TraceCollideable                	= bool TraceCollideable(handle)
Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal (userdata)
      IsInToolsMode                   	= bool IsInToolsMode()
Returns true if this is lua running within tools mode. (userdata)
      SendOverheadEventMessage        	= void SendOverheadEventMessage(handle, int, handle, int, handle)
( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_* (userdata)
      ShowCustomHeaderMessage         	= void ShowCustomHeaderMessage(string, int, int, float)
( const char *pszMessage, PlayerID_t nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName (userdata)
      SetOpvarFloatPlayer             	= void SetOpvarFloatPlayer(string, string, string, float, handle)
Sets an opvar value for a single player (userdata)
      GetItemDefOwnedCount            	= int GetItemDefOwnedCount(int, int)
 (userdata)
      UTIL_RemoveImmediate            	= void UTIL_RemoveImmediate(handle)
Immediately removes the specified entity (userdata)
      ShowGenericPopupToPlayer        	= void ShowGenericPopupToPlayer(handle, string, string, string, string, int)
Show a generic popup dialog to a specific player. (userdata)
      SetQuestPhase                   	= void SetQuestPhase(int)
Set the current quest phase. (userdata)
      ShowGenericPopup                	= void ShowGenericPopup(string, string, string, string, int)
Show a generic popup dialog for all players. (userdata)
      DebugDrawBox                    	= void DebugDrawBox(Vector, Vector, Vector, int, int, int, int, float)
Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration ) (userdata)
      RandomVector                    	= Vector RandomVector(float)
Get a random 2D vector of the given length. (userdata)
      FireEntityIOInputString         	= void FireEntityIOInputString(ehandle, string, string)
Fire Entity's Action Input with passed String - you own the memory (userdata)
      CancelEntityIOEvents            	= void CancelEntityIOEvents(ehandle)
Create all I/O events for a particular entity (userdata)
      CalcDistanceBetweenEntityOBB    	= float CalcDistanceBetweenEntityOBB(handle, handle)
Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping. (userdata)
      FindUnitsInLine                 	= table FindUnitsInLine(int, Vector, Vector, handle, float, int, int, int)
Find units that intersect the given line with the given flags. (userdata)
      IsMangoTree                     	= bool IsMangoTree(handle)
Is this entity a mango tree? (hEntity). (userdata)
      CreateTempTreeWithModel         	= handle CreateTempTreeWithModel(Vector, float, string)
Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName). (userdata)
      GetWorldMaxX                    	= float GetWorldMaxX()
Gets the world's maximum X position. (userdata)
      CalcClosestPointOnEntityOBB     	= Vector CalcClosestPointOnEntityOBB(handle, Vector)
Compute the closest point on the OBB of an entity. (userdata)
      UTIL_MessageTextAll             	= void UTIL_MessageTextAll(string, int, int, int, int)
Sends colored text to all clients. (userdata)
      IsClient                        	= bool IsClient()
Returns true if this is lua running from the client.dll. (userdata)
      CreateTempTree                  	= handle CreateTempTree(Vector, float)
Create a temporary tree, uses a default tree model. (vLocation, flDuration). (userdata)
      CreateTriggerRadiusApproximate  	= handle CreateTriggerRadiusApproximate(Vector, float)
CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided (userdata)
      CreateRune                      	= handle CreateRune(Vector, int)
Create a rune of the specified type (vLocation, iRuneType). (userdata)
      GetPhysVelocity                 	= Vector GetPhysVelocity(handle)
Get Velocity for VPHYS or normal object (userdata)
      ApplyDamage                     	= float ApplyDamage(handle)
Damage an npc. (userdata)
      CreateEffect                    	= bool CreateEffect(handle)
Pass table - Inputs: entity, effect (userdata)
      ManuallyTriggerSpawnGroupCompletion	= void ManuallyTriggerSpawnGroupCompletion(int)
Triggers the creation of entities in a manually-completed spawn group (userdata)
      LerpVectors                     	= Vector LerpVectors(Vector, Vector, float)
(vector,vector,float) lerp between two vectors by a float factor returning new vector (userdata)
      GetUnitKeyValuesByName          	= table GetUnitKeyValuesByName(string)
Get unit data by ability name. (userdata)
      CalcDistanceToLineSegment2D     	= float CalcDistanceToLineSegment2D(Vector, Vector, Vector)
 (userdata)
      CenterCameraOnUnit              	= void CenterCameraOnUnit(int, handle)
CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit. (userdata)
      PrecacheItemByNameSync          	= void PrecacheItemByNameSync(string, handle)
Precaches a DOTA item by its dota_npc_items.txt name (userdata)
      RegisterCustomAnimationScriptForModel	= void RegisterCustomAnimationScriptForModel(string, string)
Register a custom animation script to run when a model loads (userdata)
      StopListeningToAllGameEvents    	= void StopListeningToAllGameEvents(handle)
Stop listening to all game events within a specific context. (userdata)
      RotationDelta                   	= QAngle RotationDelta(QAngle, QAngle)
Find the delta between two QAngles. (userdata)
      LimitPathingSearchDepth         	= void LimitPathingSearchDepth(float)
Set the limit on the pathfinding search space. (userdata)
      GetTeamHeroKills                	= int GetTeamHeroKills(int)
( int teamID ) (userdata)
      SpawnDOTAShopTriggerRadiusApproximate	= handle SpawnDOTAShopTriggerRadiusApproximate(Vector, float)
(Vector vOrigin, float flRadius ) (userdata)
      FindClearRandomPositionAroundUnit	= bool FindClearRandomPositionAroundUnit(handle, handle, int)
Finds a clear random position around a given target unit, using the target unit's padded collision radius. (userdata)
      GetTeamName                     	= string GetTeamName(int)
( int teamID ) (userdata)
      InitLogFile                     	= void InitLogFile(string, string)
InitLogFile is deprecated. Print to the console for logging instead. (userdata)
      GetLobbyEventGameDetails        	= table GetLobbyEventGameDetails()
( ) (userdata)
      IsValidEntity                   	= bool IsValidEntity(handle)
Checks to see if the given hScript is a valid entity (userdata)
      GetDedicatedServerKeyV2         	= string GetDedicatedServerKeyV2(string)
( version ) (userdata)
      GetDedicatedServerKey           	= string GetDedicatedServerKey(string)
( version ) (userdata)
      PrecacheUnitFromTableAsync      	= void PrecacheUnitFromTableAsync(handle, handle)
Precaches a DOTA unit from a table of entity key values. (userdata)
      TraceHull                       	= bool TraceHull(handle)
Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid (userdata)
      UpdateEventPoints               	= void UpdateEventPoints(handle)
( hEventPointData ) (userdata)
      SetOpvarFloatAll                	= void SetOpvarFloatAll(string, string, string, float)
Sets an opvar value for all players (userdata)
      EmitAnnouncerSoundForTeamOnLocation	= void EmitAnnouncerSoundForTeamOnLocation(string, int, Vector)
Emit an announcer sound for a team at a specific location. (userdata)
      ListenToGameEvent               	= int ListenToGameEvent(string, handle, handle)
Register as a listener for a game event from script. (userdata)
      DropNeutralItemAtPositionForHero	= handle DropNeutralItemAtPositionForHero(string, Vector, handle, int, bool)
Drop a neutral item for the team of the hero at the given tier. (userdata)
      RollPseudoRandomPercentage      	= bool RollPseudoRandomPercentage(unsigned, int, handle)
( chance, pseudo random id, unit. (userdata)
      AxisAngleToQuaternion           	= Quaternion AxisAngleToQuaternion(Vector, float)
(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis (userdata)
      CreateUniformRandomStream       	= handle CreateUniformRandomStream(int)
( iSeed ) - Creates a separate random number stream. (userdata)
      UTIL_ResetMessageTextAll        	= void UTIL_ResetMessageTextAll()
Clear all message text from all clients. (userdata)
      DebugCreateUnit                 	= int DebugCreateUnit(handle, string, int, bool, handle)
Creates a test unit controllable by the specified player. (userdata)
      DebugDrawSphere                 	= void DebugDrawSphere(Vector, Vector, float, float, bool, float)
Draw a debug sphere (center, vRgb, a, rad, ztest, duration) (userdata)
      GetTargetAOELocation            	= Vector GetTargetAOELocation(int, int, int, Vector, int, int, int)
 (userdata)
      DotProduct                      	= float DotProduct(Vector, Vector)
 (userdata)
      DisconnectClient                	= void DisconnectClient(int, bool)
Kick a specific player from the game (userdata)
      CreateModifierThinker           	= handle CreateModifierThinker(handle, handle, string, handle, Vector, int, bool)
Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker ) (userdata)
      Warning                         	= void Warning(string)
Print a warning (userdata)
      CreateItem                      	= handle CreateItem(string, handle, handle)
Create a DOTA item (userdata)
      DebugDrawClear                  	= void DebugDrawClear()
Try to clear all the debug overlay info (userdata)
      cvar_getf                       	= float cvar_getf(string)
Gets the value of the given cvar, as a float. (userdata)
      MinimapEvent                    	= void MinimapEvent(int, handle, int, int, int, int)
Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration). (userdata)
      GetTreeIdForEntityIndex         	= int GetTreeIdForEntityIndex(int)
Given and entity index of a tree, get the tree id for use for use with with unit orders. (userdata)
      cvar_setf                       	= bool cvar_setf(string, float)
Sets the value of the given cvar, as a float. (userdata)
      GetGroundHeight                 	= float GetGroundHeight(Vector, handle)
 (userdata)
      EmitSoundOnEntityForPlayer      	= void EmitSoundOnEntityForPlayer(string, handle, int)
Emit a sound on an entity for only a specific player (userdata)
      EmitSoundOn                     	= void EmitSoundOn(string, handle)
Play named sound on Entity (userdata)
      HeroMaxLevel                    	= void HeroMaxLevel(handle)
Max out a hero's level and give them all appropriate abilities and talents. (userdata)
      SpawnEntityListFromTableAsynchronous	= int SpawnEntityListFromTableAsynchronous(handle, handle)
Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete (userdata)
      CreateUnitFromTable             	= handle CreateUnitFromTable(handle, Vector)
Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at. (userdata)
      DebugDrawLine_vCol              	= void DebugDrawLine_vCol(Vector, Vector, Vector, bool, float)
Draw a debug line using color vec (start, end, vRgb, a, ztest, duration) (userdata)
      EmitGlobalSound                 	= void EmitGlobalSound(string)
Play named sound for all players (userdata)
      EmitSoundOnLocationWithCaster   	= void EmitSoundOnLocationWithCaster(Vector, string, handle)
Emit a sound on a location from a unit. (vLocation, soundName, hCaster). (userdata)
      UnitFilter                      	= int UnitFilter(handle, int, int, int, int)
Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam (userdata)
      rr_CommitAIResponse             	= bool rr_CommitAIResponse(handle, handle)
Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse) (userdata)
      AddFOWViewer                    	= int AddFOWViewer(int, Vector, float, float, bool)
Add temporary vision for a given team, returns a ViewerID ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision) (userdata)
      AngleDiff                       	= float AngleDiff(float, float)
Returns the number of degrees difference between two yaw angles (userdata)
      GetSystemDate                   	= string GetSystemDate()
Get the current real world date (userdata)
      StartSoundEventFromPositionUnreliable	= void StartSoundEventFromPositionUnreliable(string, Vector)
Start a sound event from position with optional delivery (userdata)
      DebugBreak                      	= void DebugBreak()
Breaks in the debugger (userdata)
      CreateSceneEntity               	= handle CreateSceneEntity(string)
Create a scene entity to play the specified scene. (userdata)
      EmitSoundOnClient               	= void EmitSoundOnClient(string, handle)
Play named sound only on the client for the passed in player (userdata)
      GetGroundPosition               	= Vector GetGroundPosition(Vector, handle)
Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset. (userdata)
      PrecacheResource                	= void PrecacheResource(string, string, handle)
Manually precache a single resource (userdata)
      UTIL_ResetMessageText           	= void UTIL_ResetMessageText(int)
Clear all message text on one client. (userdata)
      SpawnEntityFromTableSynchronous 	= handle SpawnEntityFromTableSynchronous(string, handle)
Synchronously spawns a single entity from a table (userdata)
      DoIncludeScript                 	= bool DoIncludeScript(string, handle)
Execute a script (internal) (userdata)
      SendToServerConsole             	= void SendToServerConsole(string)
Send a string to the console as a server command (userdata)
      FindUnitsInRadius               	= table FindUnitsInRadius(int, Vector, handle, float, int, int, int, int, bool)
Finds the units in a given radius with the given flags. (userdata)
      UTIL_MessageText_WithContext    	= void UTIL_MessageText_WithContext(int, string, int, int, int, int, handle)
Sends colored text to one client. (Valid context keys: player_id, value, team_id) (userdata)
      SetQuestName                    	= void SetQuestName(string)
Set the current quest name. (userdata)
      GetItemCost                     	= int GetItemCost(string)
Get the cost of an item by name. (userdata)
      GetEntityIndexForTreeId         	= int GetEntityIndexForTreeId(unsigned)
Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE. (userdata)
      CreateIllusions                 	= table CreateIllusions(handle, handle, handle, int, int, bool, bool)
Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) 
Supported keys: 
outgoing_damage
incoming_damage
bounty_base
bounty_growth
outgoing_damage_structure
outgoing_damage_roshan (userdata)
      UTIL_MessageText                	= void UTIL_MessageText(int, string, int, int, int, int)
Sends colored text to one client. (userdata)
      CreateHeroForPlayer             	= handle CreateHeroForPlayer(string, handle)
Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero (userdata)
      CreateUnitByName                	= handle CreateUnitByName(string, Vector, bool, handle, handle, int)
Creates a DOTA unit by its dota_npc_units.txt name (userdata)
      GetWorldMaxY                    	= float GetWorldMaxY()
Gets the world's maximum Y position. (userdata)
      SetPhysAngularVelocity          	= void SetPhysAngularVelocity(handle, Vector)
Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second. (userdata)
      PrecacheEntityListFromTable     	= void PrecacheEntityListFromTable(handle, handle)
Precache a list of entity KeyValues tables (userdata)
      PrecacheUnitByNameSync          	= void PrecacheUnitByNameSync(string, handle, int)
Precaches a DOTA unit by its dota_npc_units.txt name (userdata)
      CreateTrigger                   	= handle CreateTrigger(Vector, Vector, Vector)
CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger (userdata)
      GetFrameCount                   	= int GetFrameCount()
Returns the engines current frame count (userdata)
      DoEntFireByInstanceHandle       	= void DoEntFireByInstanceHandle(handle, string, string, float, handle, handle)
#EntFireByHandle:Generate and entity i/o event (userdata)
      DoUniqueString                  	= string DoUniqueString(string)
#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table. (userdata)
      CreateUnitByNameAsync           	= int CreateUnitByNameAsync(string, Vector, bool, handle, handle, int, handle)
Creates a DOTA unit by its dota_npc_units.txt name (userdata)
      SetRenderingEnabled             	= void SetRenderingEnabled(ehandle, bool)
Set rendering on/off for an ehandle (userdata)
      PlayerInstanceFromIndex         	= handle PlayerInstanceFromIndex(int)
Get a script instance of a player by index. (userdata)
      StopGlobalSound                 	= void StopGlobalSound(string)
Stop named sound for all players (userdata)
      PauseGame                       	= void PauseGame(bool)
Pause or unpause the game. (userdata)
      StartSoundEvent                 	= void StartSoundEvent(string, handle)
Start a sound event (userdata)
      CreateDamageInfo                	= handle CreateDamageInfo(handle, handle, Vector, Vector, float, int)
(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object. (userdata)
      GetSystemTime                   	= string GetSystemTime()
Get the current real world time (userdata)
      GetWorldMinX                    	= float GetWorldMinX()
Gets the world's minimum X position. (userdata)
      GetMaxOutputDelay               	= float GetMaxOutputDelay(ehandle, string)
Get the longest delay for all events attached to an output (userdata)
      CrossVectors                    	= Vector CrossVectors(Vector, Vector)
(vector,vector) cross product between two vectors (userdata)
      EmitSoundOnLocationForPlayer    	= void EmitSoundOnLocationForPlayer(string, Vector, int)
Emit a sound on a location for only a specific player (userdata)
      GetActiveSpawnGroupHandle       	= int GetActiveSpawnGroupHandle()
Returns the currently active spawn group handle (userdata)
      DoCleaveAttack                  	= int DoCleaveAttack(handle, handle, handle, float, float, float, float, string)
(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName) (userdata)
      DebugDrawLine                   	= void DebugDrawLine(Vector, Vector, int, int, int, bool, float)
Draw a debug overlay line (origin, target, r, g, b, ztest, duration) (userdata)
      RotateOrientation               	= QAngle RotateOrientation(QAngle, QAngle)
Rotate a QAngle by another QAngle. (userdata)
      FireGameEventLocal              	= void FireGameEventLocal(string, handle)
Fire a game event without broadcasting to the client. (userdata)
      rr_GetResponseTargets           	= handle rr_GetResponseTargets()
Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }. (userdata)
      RandomFloat                     	= float RandomFloat(float, float)
Get a random float within a range (userdata)
      AppendToLogFile                 	= void AppendToLogFile(string, string)
AppendToLogFile is deprecated. Print to the console for logging instead. (userdata)
      IsUnitInValidPosition           	= bool IsUnitInValidPosition(handle)
Returns true if the unit is in a valid position in the gridnav. (userdata)
      ScreenShake                     	= void ScreenShake(Vector, float, float, float, float, int, bool)
Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake (userdata)
      RotateQuaternionByAxisAngle     	= Quaternion RotateQuaternionByAxisAngle(Quaternion, Vector, float)
(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis (userdata)
      SpawnEntityFromTableAsynchronous	= void SpawnEntityFromTableAsynchronous(string, handle, handle, handle)
Asynchronously spawns a single entity from a table (userdata)
      StopSoundOn                     	= void StopSoundOn(string, handle)
Stop named sound on Entity (userdata)
      FireGameEvent                   	= void FireGameEvent(string, handle)
Fire a game event. (userdata)
      FrameTime                       	= float FrameTime()
Get the time spent on the server in the last frame (userdata)
      FireEntityIOInputNameOnly       	= void FireEntityIOInputNameOnly(ehandle, string)
Fire Entity's Action Input w/no data (userdata)
      SplineQuaternions               	= Quaternion SplineQuaternions(Quaternion, Quaternion, float)
(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1] (userdata)
      Time                            	= float Time()
Get the current server time (userdata)
      PrecacheModel                   	= void PrecacheModel(string, handle)
( modelName, context ) - Manually precache a single model (userdata)
      ClearTeamCustomHealthbarColor   	= void ClearTeamCustomHealthbarColor(int)
( teamNumber ) (userdata)
      GetSystemTimeMS                 	= double GetSystemTimeMS()
Get system time in milliseconds (userdata)
      DoScriptAssert                  	= void DoScriptAssert(bool, string)
#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog. (userdata)
      StopSoundEvent                  	= void StopSoundEvent(string, handle)
Stops a sound event with optional delivery (userdata)
      DebugDrawScreenTextLine         	= void DebugDrawScreenTextLine(float, float, int, string, int, int, int, int, float)
Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration) (userdata)
      RemoveSpawnGroupFilterProxy     	= void RemoveSpawnGroupFilterProxy(string)
Remove the C proxy for a script-based spawn group filter (userdata)
      DestroyDamageInfo               	= void DestroyDamageInfo(handle)
Free a damageinfo object that was created with CreateDamageInfo(). (userdata)
      SpawnMangoTree                  	= handle SpawnMangoTree(Vector, int, float, float, int)
Spawn a mango tree ( vPos, nTeam, flDuration, flMangoInterval, nInitialMangoes ) (userdata)
      StartSoundEventFromPosition     	= void StartSoundEventFromPosition(string, Vector)
Start a sound event from position (userdata)
      SetTeamCustomHealthbarColor     	= void SetTeamCustomHealthbarColor(int, int, int, int)
( teamNumber, r, g, b ) (userdata)
      PrecacheUnitByNameAsync         	= void PrecacheUnitByNameAsync(string, handle, int)
Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished. (userdata)
      DebugScreenTextPretty           	= void DebugScreenTextPretty(float, float, int, string, int, int, int, int, float, string, int, bool)
Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold) (userdata)
      RegisterSpawnGroupFilterProxy   	= void RegisterSpawnGroupFilterProxy(string)
Create a C proxy for a script-based spawn group filter (userdata)
      ExecuteOrderFromTable           	= void ExecuteOrderFromTable(handle)
Issue an order from a script table (userdata)
      DebugDrawCircle                 	= void DebugDrawCircle(Vector, Vector, float, float, bool, float)
Draw a debug circle (center, vRgb, a, rad, ztest, duration) (userdata)
      EmitAnnouncerSoundForTeam       	= void EmitAnnouncerSoundForTeam(string, int)
Emit an announcer sound for a team. (userdata)
      UserIDToControllerHScript       	= handle UserIDToControllerHScript(int)
Turn a userid integer (typically, fields named 'userid' in game events) to an HScript representing the associated player controller's script instance. (userdata)
      DebugDrawBoxDirection           	= void DebugDrawBoxDirection(Vector, Vector, Vector, Vector, Vector, float, float)
Draw a debug forward box (cent, min, max, forward, vRgb, a, duration) (userdata)
      UTIL_Remove                     	= void UTIL_Remove(handle)
Removes the specified entity (userdata)
      rr_QueryBestResponse            	= bool rr_QueryBestResponse(handle, handle, handle)
Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found). (userdata)
      RemoveFOWViewer                 	= void RemoveFOWViewer(int, int)
Remove temporary vision for a given team ( nTeamID, nViewerID ) (userdata)
      IsLocationVisible               	= bool IsLocationVisible(int, Vector)
Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation). (userdata)
      GetMapName                      	= string GetMapName()
Get the name of the map. (userdata)
      StartSoundEventFromPositionReliable	= void StartSoundEventFromPositionReliable(string, Vector)
Start a sound event from position with reliable delivery (userdata)
      ExponentialDecay                	= float ExponentialDecay(float, float, float)
Smooth curve decreasing slower as it approaches zero (userdata)
   }
   ExtendInstance                  	= function: 0x011f8e68 (function)
   DOTA_HUD_VISIBILITY_INVENTORY_GOLD	= 11 (number)
   ACT_MP_RUN_PRIMARY              	= 557 (number)
   g_reloadState                   	= table: 0x011f8848 (table)
   {
      coroutine                       	= table: 0x01113708 (table, already seen)
      core.coreinit                   	= true (boolean)
      game.entities.entmixin_enabledisable	= true (boolean)
      package                         	= table: 0x01113aa0 (table)
      {
         preload                         	= table: 0x01114068 (table)
         {
         }
         path                            	= ".\?.lua;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\lua\?.lua;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\lua\?\init.lua;" (string)
         loaded                          	= table: 0x01112b10 (table)
         {
            coroutine                       	= table: 0x01113708 (table, already seen)
            core.coreinit                   	= true (boolean)
            game.entities.entmixin_enabledisable	= true (boolean)
            package                         	= table: 0x01113aa0 (table, already seen)
            game.gameinit                   	= true (boolean)
            game/dkjson                     	= table: 0x01201690 (table)
            {
               use_lpeg                        	= function: 0x011f7f00 (function)
               decode                          	= function: 0x011f7eb8 (function)
               version                         	= "dkjson 2.5" (string)
               addnewline                      	= function: 0x011f7768 (function)
               quotestring                     	= function: 0x01201be8 (function)
               encode                          	= function: 0x011f7a50 (function)
               encodeexception                 	= function: 0x011f7878 (function)
               null                            	= table: 0x011f2b28 (table)
               {
               }
            }
            framework.entities.entitiesinit 	= true (boolean)
            utils.deepprint                 	= true (boolean)
            TableHelper                     	= table: 0x0135b3e0 (table)
            {
               showEntityAllAPI                	= function: 0x0135b9f0 (function)
               t0                              	= table: 0x0135b370 (table)
               {
                  CustomNetTables                 	= table: 0x0120bd88 (table, already seen)
                  EntityUtils                     	= table: 0x011dc940 (table, already seen)
                  CDesc                           	= table: 0x01117588 (table)
                  {
                     CDOTA_Ability_Nian_Roar         	= table: 0x011b1ad8 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011b1b60 (table)
                        {
                           GetCastCount                    	= int GetCastCount()
Number of times Nian has used the roar (userdata)
                        }
                        IsNull                          	= function: 0x011b1b00 (function)
                        GetCastCount                    	= function: 0x011b1b88 (function)
                     }
                     CDOTA_BaseNPC_Watch_Tower       	= table: 0x011b3848 (table)
                     {
                        metatable = table: 0x01190a18
                        {
                           FDesc                           	= table: 0x01190aa0 (table)
                           {
                              SetInvulnCount                  	= void SetInvulnCount(int nInvulnCount)
Set the invulnerability counter of this building. (userdata)
                              GetInvulnCount                  	= int GetInvulnCount()
Get the invulnerability count for a building. (userdata)
                           }
                           IsNull                          	= function: 0x01190a40 (function)
                           SetInvulnCount                  	= function: 0x01190bb0 (function)
                           GetInvulnCount                  	= function: 0x01190ac8 (function)
                           ForceKill                       	= function: 0x01193688 (function)
                           InterruptMotionControllers      	= function: 0x0118e7b0 (function)
                           GetBaseDayTimeVisionRange       	= function: 0x0118d228 (function)
                           PassivesDisabled                	= function: 0x011926f0 (function)
                           IsNull                          	= function: 0x01188440 (function)
                           PlayVCD                         	= function: 0x0118c798 (function)
                           ShouldIdleAcquire               	= function: 0x0118eba0 (function)
                           GetCastRangeBonus               	= function: 0x0118c048 (function)
                           RemoveModifierByName            	= function: 0x0118ee38 (function)
                           DropItemAtPositionImmediate     	= function: 0x0118f398 (function)
                           IsClone                         	= function: 0x01189950 (function)
                           GetPaddedCollisionRadius        	= function: 0x01189058 (function)
                           SetAbilityByIndex               	= function: 0x01191118 (function)
                           GetManaRegen                    	= function: 0x0118b818 (function)
                           MoveToTargetToAttack            	= function: 0x01189490 (function)
                           GetCurrentVisionRange           	= function: 0x0118d4e0 (function)
                           SetMana                         	= function: 0x01189cb8 (function)
                           IsBossCreature                  	= function: 0x01189770 (function)
                           IsCommandRestricted             	= function: 0x011923d8 (function)
                           GetRangeToUnit                  	= function: 0x0118ea98 (function)
                           GetDisplayAttackSpeed           	= function: 0x0118bf38 (function)
                           SetNightTimeVisionRange         	= function: 0x0118d458 (function)
                           IsAncient                       	= function: 0x011896f0 (function)
                           SetStolenScepter                	= function: 0x01192d90 (function)
                           IsPhantom                       	= function: 0x0118cf38 (function)
                           GetAttackDamage                 	= function: 0x0118a3e8 (function)
                           GetLastAttackTime               	= function: 0x0118def0 (function)
                           Stop                            	= function: 0x01191630 (function)
                           GetAbilityByIndex               	= function: 0x01191010 (function)
                           SetOriginalModel                	= function: 0x0118f8f0 (function)
                           RemoveItem                      	= function: 0x0118aa30 (function)
                           GetNightTimeVisionRange         	= function: 0x0118d340 (function)
                           InterruptChannel                	= function: 0x0118e728 (function)
                           StopFacing                      	= function: 0x011886e8 (function)
                           IsHexed                         	= function: 0x01191d50 (function)
                           IsInvulnerable                  	= function: 0x01191e48 (function)
                           GetAttackRangeBuffer            	= function: 0x0118a2d8 (function)
                           IsMovementImpaired              	= function: 0x01192b78 (function)
                           RemoveAbilityByHandle           	= function: 0x0118af08 (function)
                           IsOther                         	= function: 0x0118ca60 (function)
                           RemoveNoDraw                    	= function: 0x0118ff00 (function)
                           GetManaPercent                  	= function: 0x01189e68 (function)
                           GetDayTimeVisionRange           	= function: 0x0118d1a0 (function)
                           MoveToNPC                       	= function: 0x01189410 (function)
                           TakeItem                        	= function: 0x0118aab0 (function)
                           RemoveModifierByNameAndCaster   	= function: 0x0118ef50 (function)
                           GetProjectileSpeed              	= function: 0x01193370 (function)
                           AddSpeechBubble                 	= function: 0x0118f978 (function)
                           IsOpposingTeam                  	= function: 0x0118f428 (function)
                           IsUntargetable                  	= function: 0x011928f0 (function)
                           FindAllModifiersByName          	= function: 0x0118f180 (function)
                           NoHealthBar                     	= function: 0x011925f0 (function)
                           SetBaseMagicalResistanceValue   	= function: 0x0118b5e8 (function)
                           HasScepter                      	= function: 0x01192d10 (function)
                           HasItemInInventory              	= function: 0x01192c00 (function)
                           SetHasInventory                 	= function: 0x01191978 (function)
                           GetBaseHealthRegen              	= function: 0x0118b920 (function)
                           Script_GetAttackRange           	= function: 0x0118a250 (function)
                           GetPhysicalArmorValue           	= function: 0x0118b3b8 (function)
                           IsHardDisarmed                  	= function: 0x011f85e0 (function)
                           GetMana                         	= function: 0x01189d90 (function)
                           SetInitialGoalPosition          	= function: 0x01188a70 (function)
                           SpendMana                       	= function: 0x01189fe8 (function)
                           IsChanneling                    	= function: 0x0118e650 (function)
                           HasGroundMovementCapability     	= function: 0x01192fb0 (function)
                           GetMagicalArmorValue            	= function: 0x0118b440 (function)
                           SetUnitName                     	= function: 0x01193508 (function)
                           IsAttackImmune                  	= function: 0x01191b78 (function)
                           SetBaseHealthRegen              	= function: 0x0118b898 (function)
                           MakeVisibleDueToAttack          	= function: 0x0118f648 (function)
                           SetMaximumGoldBounty            	= function: 0x0118d778 (function)
                           GetBaseDamageMax                	= function: 0x0118b120 (function)
                           GetTotalPurchasedUpgradeGoldCost	= function: 0x0118d908 (function)
                           RemoveAllModifiersOfName        	= function: 0x0118eec0 (function)
                           GetMustReachEachGoalEntity      	= function: 0x011889e0 (function)
                           GetMaximumGoldBounty            	= function: 0x0118d800 (function)
                           IsStunned                       	= function: 0x01191cd0 (function)
                           FindModifierByName              	= function: 0x0118efe0 (function)
                           AddActivityModifier             	= function: 0x0118c3e0 (function)
                           Script_IsDeniable               	= function: 0x01192af0 (function)
                           IsInvisible                     	= function: 0x01191dc8 (function)
                           IsBlind                         	= function: 0x011927f8 (function)
                           IsDominated                     	= function: 0x01192778 (function)
                           AddItem                         	= function: 0x0118acb0 (function)
                           GetEvasion                      	= function: 0x0118b018 (function)
                           StartGesture                    	= function: 0x0118c468 (function)
                           GetHasteFactor                  	= function: 0x0118bde0 (function)
                           GetCastPoint                    	= function: 0x0118be60 (function)
                           SetCursorTargetingNothing       	= function: 0x01191730 (function)
                           TimeUntilNextAttack             	= function: 0x0118de68 (function)
                           IsLowAttackPriority             	= function: 0x01192568 (function)
                           IsRooted                        	= function: 0x01191a78 (function)
                           IsZombie                        	= function: 0x0118cfb8 (function)
                           GetSecondsPerAttack             	= function: 0x0118bd58 (function)
                           ClearActivityModifiers          	= function: 0x0118c358 (function)
                           GetBaseHealthBarOffset          	= function: 0x011885d0 (function)
                           IsUnselectable                  	= function: 0x011921c8 (function)
                           WasKilledPassively              	= function: 0x0118fb00 (function)
                           GetIncreasedAttackSpeed         	= function: 0x0118bc48 (function)
                           RemoveHorizontalMotionController	= function: 0x0118e840 (function)
                           IsNeutralUnitType               	= function: 0x011897f0 (function)
                           GetBaseMagicalResistanceValue   	= function: 0x0118b678 (function)
                           GetInitialGoalPosition          	= function: 0x01188af8 (function)
                           GetBaseMoveSpeed                	= function: 0x0118bab0 (function)
                           NoTeamSelect                    	= function: 0x01192670 (function)
                           NoTeamMoveTo                    	= function: 0x011929f0 (function)
                           SetAdditionalBattleMusicWeight  	= function: 0x0118e420 (function)
                           FindItemInInventory             	= function: 0x01192c88 (function)
                           SetMoveCapability               	= function: 0x01192f28 (function)
                           IsBlockDisabled                 	= function: 0x011920c8 (function)
                           StartGestureWithFade            	= function: 0x0118c4e8 (function)
                           GetModifierStackCount           	= function: 0x0118f288 (function)
                           IsTempestDouble                 	= function: 0x0118c258 (function)
                           CanEntityBeSeenByMyTeam         	= function: 0x0118d118 (function)
                           GetAbilityCount                 	= function: 0x01191098 (function)
                           IsIllusion                      	= function: 0x0118c158 (function)
                           GetPlayerOwnerID                	= function: 0x0118dbd0 (function)
                           EjectItemFromStash              	= function: 0x0118a9a8 (function)
                           SetRangedProjectileName         	= function: 0x011933f8 (function)
                           RemoveAbilityFromIndexByName    	= function: 0x011911a0 (function)
                           FDesc                           	= table: 0x011884a0 (table, already seen)
                           IsAttackingEntity               	= function: 0x0118e000 (function)
                           SetHealthBarOffsetOverride      	= function: 0x011884c8 (function)
                           FaceTowards                     	= function: 0x01188960 (function)
                           SetDayTimeVisionRange           	= function: 0x0118d2b8 (function)
                           RemoveGesture                   	= function: 0x0118c698 (function)
                           GetAverageTrueAttackDamage      	= function: 0x0118a468 (function)
                           DestroyAllSpeechBubbles         	= function: 0x0118f9f8 (function)
                           FindAllModifiers                	= function: 0x0118f0f8 (function)
                           IsBaseNPC                       	= function: 0x011f8620 (function)
                           SpeakConcept                    	= function: 0x01188b40 (function)
                           GetRangedProjectileName         	= function: 0x01193480 (function)
                           NotOnMinimap                    	= function: 0x01192460 (function)
                           GetHealthDeficit                	= function: 0x011891f0 (function)
                           GetInitialGoalEntity            	= function: 0x01188eb8 (function)
                           GetUnitName                     	= function: 0x01193588 (function)
                           QueueTeamConcept                	= function: 0x011888f0 (function)
                           IsConsideredHero                	= function: 0x0118c958 (function)
                           CanSellItems                    	= function: 0x0118abb0 (function)
                           HasMovementCapability           	= function: 0x011930d0 (function)
                           GetLastDamageTime               	= function: 0x01189278 (function)
                           RemoveAbility                   	= function: 0x0118ae08 (function)
                           HealWithParams                  	= function: 0x0118a0c0 (function)
                           SetForceAttackTargetAlly        	= function: 0x0118e5c0 (function)
                           SetModifierStackCount           	= function: 0x0118f310 (function)
                           SetInitialGoalEntity            	= function: 0x01188e30 (function)
                           IsOutOfGame                     	= function: 0x01192870 (function)
                           NotOnMinimapForEnemies          	= function: 0x011924e0 (function)
                           DisassembleItem                 	= function: 0x0118a928 (function)
                           GetSpellAmplification           	= function: 0x0118b098 (function)
                           SetAttacking                    	= function: 0x0118e108 (function)
                           SetCustomHealthLabel            	= function: 0x01190298 (function)
                           GetLastIdleChangeTime           	= function: 0x01188788 (function)
                           SetShouldDoFlyHeightVisual      	= function: 0x01190208 (function)
                           SetCursorCastTarget             	= function: 0x01190180 (function)
                           IsTower                         	= function: 0x0118cad8 (function)
                           GetCloneSource                  	= function: 0x011898f8 (function)
                           IsFrozen                        	= function: 0x01192970 (function)
                           ModifyHealth                    	= function: 0x01189c38 (function)
                           DropItemAtPosition              	= function: 0x0118a690 (function)
                           RemoveAllModifiers              	= function: 0x0118fff8 (function)
                           BoundingRadius2D                	= function: 0x0118f6d0 (function)
                           GetModifierCount                	= function: 0x0118ed28 (function)
                           SetCursorPosition               	= function: 0x011916a8 (function)
                           GetHullRadius                   	= function: 0x01189a28 (function)
                           AddNoDraw                       	= function: 0x0118fe80 (function)
                           GetCreationTime                 	= function: 0x0118fe28 (function)
                           CalculateGenericBonuses         	= function: 0x01188c18 (function)
                           AngerNearbyUnits                	= function: 0x0118fda0 (function)
                           RespawnUnit                     	= function: 0x0118fd20 (function)
                           SetControllableByPlayer         	= function: 0x0118db48 (function)
                           SetAttackCapability             	= function: 0x01192ea0 (function)
                           UnitCanRespawn                  	= function: 0x0118fc18 (function)
                           SetBaseManaRegen                	= function: 0x0118b708 (function)
                           NotifyWearablesOfModelChange    	= function: 0x0118fb88 (function)
                           GetCursorPosition               	= function: 0x01191848 (function)
                           GetBaseAttackTime               	= function: 0x0118bbc0 (function)
                           GetModelRadius                  	= function: 0x0118fa80 (function)
                           ManageModelChanges              	= function: 0x0118f868 (function)
                           IsUnableToMiss                  	= function: 0x01192248 (function)
                           IsPhantomBlocker                	= function: 0x0118f7e0 (function)
                           MakePhantomBlocker              	= function: 0x0118f758 (function)
                           HasAttackCapability             	= function: 0x01193158 (function)
                           GetAttacksPerSecond             	= function: 0x0118bcd0 (function)
                           GetBaseDamageMin                	= function: 0x0118dcd8 (function)
                           Purge                           	= function: 0x0118ff80 (function)
                           MakeVisibleToTeam               	= function: 0x0118f5c0 (function)
                           IsCreature                      	= function: 0x0118ce38 (function)
                           IsCourier                       	= function: 0x0118cd40 (function)
                           PerformAttack                   	= function: 0x0118a4f8 (function)
                           GetDeathXP                      	= function: 0x0118d5e8 (function)
                           GetOpposingTeamNumber           	= function: 0x0118f538 (function)
                           SetOrigin                       	= function: 0x01191560 (function)
                           CanBeSeenByAnyOpposingTeam      	= function: 0x0118f4a8 (function)
                           NoUnitCollision                 	= function: 0x01191f48 (function)
                           HasModifier                     	= function: 0x0118f208 (function)
                           SetCanSellItems                 	= function: 0x0118ab30 (function)
                           ForcePlayActivityOnce           	= function: 0x0118c810 (function)
                           SetIdleAcquire                  	= function: 0x0118ec28 (function)
                           Heal                            	= function: 0x0118a068 (function)
                           FindModifierByNameAndCaster     	= function: 0x0118f068 (function)
                           SetUnitCanRespawn               	= function: 0x0118fc98 (function)
                           SetDeathXP                      	= function: 0x0118d568 (function)
                           GetMaxMana                      	= function: 0x01189de8 (function)
                           RemoveVerticalMotionController  	= function: 0x0118e8d8 (function)
                           IsBarracks                      	= function: 0x0118cc48 (function)
                           IsPositionInRange               	= function: 0x0118eb18 (function)
                           IsCurrentlyHorizontalMotionControlled	= function: 0x0118ea00 (function)
                           GetMoveSpeedModifier            	= function: 0x0118bfc0 (function)
                           GetForceAttackTarget            	= function: 0x0118e4b0 (function)
                           AddNewModifier                  	= function: 0x0118eca8 (function)
                           SwapAbilities                   	= function: 0x01190e80 (function)
                           Interrupt                       	= function: 0x0118e6a8 (function)
                           IsPhased                        	= function: 0x01192a70 (function)
                           SetForceAttackTarget            	= function: 0x0118e538 (function)
                           IsCurrentlyVerticalMotionControlled	= function: 0x0118e968 (function)
                           GetAdditionalBattleMusicWeight  	= function: 0x0118e390 (function)
                           IsShrine                        	= function: 0x0118ceb8 (function)
                           AlertNearbyUnits                	= function: 0x0118e308 (function)
                           SetAggroTarget                  	= function: 0x0118e288 (function)
                           GetGoldBounty                   	= function: 0x0118d888 (function)
                           SetMinimumGoldBounty            	= function: 0x0118d668 (function)
                           SellItem                        	= function: 0x0118a8a8 (function)
                           IsSoftDisarmed                  	= function: 0x011f8600 (function)
                           GetMainControllingPlayer        	= function: 0x0118dab8 (function)
                           IsOwnedByAnyPlayer              	= function: 0x0118da30 (function)
                           GetAttackAnimationPoint         	= function: 0x0118df78 (function)
                           AttackNoEarlierThan             	= function: 0x0118dde0 (function)
                           GetDamageMax                    	= function: 0x0118b338 (function)
                           AttackReady                     	= function: 0x0118dd60 (function)
                           IsRangedAttacker                	= function: 0x011932e8 (function)
                           GetUnitLabel                    	= function: 0x01193608 (function)
                           SetBaseMoveSpeed                	= function: 0x0118ba28 (function)
                           SetAcquisitionRange             	= function: 0x0118a1c8 (function)
                           FindAbilityByName               	= function: 0x01190f88 (function)
                           GetItemInSlot                   	= function: 0x011919f8 (function)
                           SetMustReachEachGoalEntity      	= function: 0x01188f40 (function)
                           PickupDroppedItem               	= function: 0x0118a7a0 (function)
                           IsControllableByAnyPlayer       	= function: 0x0118d9a0 (function)
                           GetCurrentActiveAbility         	= function: 0x01191230 (function)
                           GiveMana                        	= function: 0x01189f68 (function)
                           IsSpeciallyDeniable             	= function: 0x011922c8 (function)
                           GetAttackCapability             	= function: 0x01192e18 (function)
                           GetHealthPercent                	= function: 0x01189168 (function)
                           PickupRune                      	= function: 0x0118a828 (function)
                           IsNightmared                    	= function: 0x01192048 (function)
                           IsRealHero                      	= function: 0x0118a648 (function)
                           HasInventory                    	= function: 0x011918f8 (function)
                           MoveToNPCToGiveItem             	= function: 0x0118a718 (function)
                           TriggerSpellAbsorb              	= function: 0x0118c898 (function)
                           Kill                            	= function: 0x0118a578 (function)
                           IsCreep                         	= function: 0x0118ccc8 (function)
                           GetCursorCastTarget             	= function: 0x011917c0 (function)
                           IsMagicImmune                   	= function: 0x01191ec8 (function)
                           HasFlyMovementCapability        	= function: 0x01193040 (function)
                           GetStatusResistance             	= function: 0x0118af90 (function)
                           IsMuted                         	= function: 0x01191c78 (function)
                           GetPlayerOwner                  	= function: 0x0118dc58 (function)
                           GetNeutralSpawnerName           	= function: 0x0118d038 (function)
                           IsSummoned                      	= function: 0x01189878 (function)
                           SetBaseAttackTime               	= function: 0x0118bb38 (function)
                           GetCursorTargetingNothing       	= function: 0x011918a0 (function)
                           QueueTeamConceptNoSpectators    	= function: 0x01188da0 (function)
                           SetBaseDamageMax                	= function: 0x0118b230 (function)
                           SetRevealRadius                 	= function: 0x01190100 (function)
                           GetAttackTarget                 	= function: 0x0118e188 (function)
                           IsInRangeOfShop                 	= function: 0x01189aa8 (function)
                           ChangeTeam                      	= function: 0x01188ca0 (function)
                           IsFort                          	= function: 0x0118cbd0 (function)
                           HasAnyActiveAbilities           	= function: 0x011931e0 (function)
                           Hold                            	= function: 0x011915b8 (function)
                           GetLevel                        	= function: 0x01189698 (function)
                           CastAbilityOnTarget             	= function: 0x01191340 (function)
                           IsHero                          	= function: 0x0118a5d0 (function)
                           GetModifierNameByIndex          	= function: 0x0118edb0 (function)
                           SetHullRadius                   	= function: 0x011890e8 (function)
                           HasAbility                      	= function: 0x0118ae88 (function)
                           GetCollisionPadding             	= function: 0x01188fd0 (function)
                           IsAttacking                     	= function: 0x0118e088 (function)
                           MoveToPosition                  	= function: 0x01189300 (function)
                           ProvidesVision                  	= function: 0x01191fc8 (function)
                           MoveToPositionAggressive        	= function: 0x01189380 (function)
                           GetCooldownReduction            	= function: 0x0118c0d0 (function)
                           MakeIllusion                    	= function: 0x0118c1d8 (function)
                           GetAttackSpeed                  	= function: 0x0118beb8 (function)
                           IsCreepHero                     	= function: 0x0118c9e0 (function)
                           GetBaseAttackRange              	= function: 0x0118a360 (function)
                           GetIdealSpeed                   	= function: 0x011895b8 (function)
                           SetPhysicalArmorBaseValue       	= function: 0x0118b4c8 (function)
                           GetDamageMin                    	= function: 0x0118b2b8 (function)
                           PatrolToPosition                	= function: 0x01189518 (function)
                           SwapItems                       	= function: 0x0118ad88 (function)
                           ReduceMana                      	= function: 0x01189ee8 (function)
                           GetHealthRegen                  	= function: 0x0118b9a8 (function)
                           IsEvadeDisabled                 	= function: 0x01192148 (function)
                           GetNeverMoveToClearSpace        	= function: 0x01188558 (function)
                           QueueConcept                    	= function: 0x01188870 (function)
                           HasFlyingVision                 	= function: 0x01193268 (function)
                           IsReincarnating                 	= function: 0x0118c2d8 (function)
                           GetAggroTarget                  	= function: 0x0118e208 (function)
                           UnHideAbilityToSlot             	= function: 0x01190f00 (function)
                           FadeGesture                     	= function: 0x0118c718 (function)
                           SetMaxMana                      	= function: 0x01189d10 (function)
                           TriggerModifierDodge            	= function: 0x01190d70 (function)
                           IsDisarmed                      	= function: 0x01191af8 (function)
                           TriggerSpellReflect             	= function: 0x01190df8 (function)
                           GetBaseNightTimeVisionRange     	= function: 0x0118d3c8 (function)
                           GetMinimumGoldBounty            	= function: 0x0118d6f0 (function)
                           IsAlive                         	= function: 0x0118d0c0 (function)
                           IsIdle                          	= function: 0x01188818 (function)
                           StartGestureWithPlaybackRate    	= function: 0x0118c608 (function)
                           CastAbilityOnPosition           	= function: 0x011912b8 (function)
                           CastAbilityNoTarget             	= function: 0x011913c8 (function)
                           AddItemByName                   	= function: 0x0118ac30 (function)
                           CastAbilityImmediately          	= function: 0x011914d8 (function)
                           SetNeverMoveToClearSpace        	= function: 0x01188658 (function)
                           IsSilenced                      	= function: 0x01191bf8 (function)
                           GetBaseMaxHealth                	= function: 0x01189bb0 (function)
                           IsBoss                          	= function: 0x0118cdc0 (function)
                           GetAcquisitionRange             	= function: 0x0118a140 (function)
                           IsBuilding                      	= function: 0x0118cb50 (function)
                           SetBaseMaxHealth                	= function: 0x01189b28 (function)
                           IsMoving                        	= function: 0x01190080 (function)
                           SetFollowRange                  	= function: 0x011899a8 (function)
                           GetBonusManaRegen               	= function: 0x0118b790 (function)
                           CastAbilityToggle               	= function: 0x01191450 (function)
                           SetBaseDamageMin                	= function: 0x0118b1a8 (function)
                           GetPhysicalArmorBaseValue       	= function: 0x0118b558 (function)
                           IsSpeciallyUndeniable           	= function: 0x01192350 (function)
                           StartGestureFadeWithSequenceSettings	= function: 0x0118c570 (function)
                           AddAbility                      	= function: 0x0118ad08 (function)
                           GetIdealSpeedNoSlows            	= function: 0x01189610 (function)
                           ScriptPlayScene                 	= function: 0x0112ce30 (function)
                           FDesc                           	= table: 0x0112ce08 (table, already seen)
                           IsNull                          	= function: 0x0112cda8 (function)
                           GetCurrentScene                 	= function: 0x0112cf18 (function)
                           GetSceneByIndex                 	= function: 0x0112cf98 (function)
                           SetGraphLookTarget              	= function: 0x01187338 (function)
                           SetGraphParameterEnum           	= function: 0x011877e0 (function)
                           SetGraphParameterInt            	= function: 0x01187758 (function)
                           IsSequenceFinished              	= function: 0x011870e0 (function)
                           ResetSequence                   	= function: 0x01186fb0 (function)
                           SetSequence                     	= function: 0x01187230 (function)
                           FDesc                           	= table: 0x01186d88 (table, already seen)
                           SetGraphParameter               	= function: 0x011871c0 (function)
                           SetGraphParameterVector         	= function: 0x011872b0 (function)
                           GetSequence                     	= function: 0x01187050 (function)
                           StopAnimation                   	= function: 0x01186eb0 (function)
                           SequenceDuration                	= function: 0x01187168 (function)
                           SetGraphParameterFloat          	= function: 0x011876d0 (function)
                           GetGraphParameter               	= function: 0x011873c0 (function)
                           IsNull                          	= function: 0x01186d28 (function)
                           SetPoseParameter                	= function: 0x01186db0 (function)
                           SetCycle                        	= function: 0x01186f30 (function)
                           SetGraphParameterBool           	= function: 0x01187648 (function)
                           ActiveSequenceDuration          	= function: 0x01187410 (function)
                           GetCycle                        	= function: 0x01186e38 (function)
                           SetMaterialGroupHash            	= function: 0x01185f40 (function)
                           GetModelScale                   	= function: 0x01185a20 (function)
                           GetMaterialGroupHash            	= function: 0x01185fc8 (function)
                           SetRenderMode                   	= function: 0x011862f8 (function)
                           ScriptLookupAttachment          	= function: 0x01185b98 (function)
                           FDesc                           	= table: 0x011859f8 (table, already seen)
                           SetModelScale                   	= function: 0x01185b18 (function)
                           SetMaterialGroupMask            	= function: 0x01186178 (function)
                           SetSkin                         	= function: 0x01186bc0 (function)
                           SetBodygroupByName              	= function: 0x01186b38 (function)
                           SetBodygroup                    	= function: 0x01186ab8 (function)
                           GetMaterialGroupMask            	= function: 0x01186200 (function)
                           SetModel                        	= function: 0x01185c20 (function)
                           SetRenderAlpha                  	= function: 0x01185dd8 (function)
                           SetSingleMeshGroup              	= function: 0x01186050 (function)
                           GetAttachmentAngles             	= function: 0x01185d50 (function)
                           SetMaterialGroup                	= function: 0x01186478 (function)
                           SetLightGroup                   	= function: 0x01185e58 (function)
                           GetAttachmentForward            	= function: 0x01185cc0 (function)
                           IsNull                          	= function: 0x01185998 (function)
                           SetRenderColor                  	= function: 0x01186378 (function)
                           SetSize                         	= function: 0x01185ec8 (function)
                           GetRenderAlpha                  	= function: 0x011860a0 (function)
                           GetAttachmentOrigin             	= function: 0x01185aa0 (function)
                           GetRenderColor                  	= function: 0x011863f8 (function)
                           GetTeamNumber                   	= function: 0x01139f78 (function)
                           GetChildren                     	= function: 0x01137bf0 (function)
                           IsNPC                           	= function: 0x01139068 (function)
                           SetTeam                         	= function: 0x0113a070 (function)
                           FDesc                           	= table: 0x011371c0 (table, already seen)
                           IsNull                          	= function: 0x01137160 (function)
                           Kill                            	= function: 0x01137820 (function)
                           SetLocalScale                   	= function: 0x01139df8 (function)
                           DeleteAttribute                 	= function: 0x01138640 (function)
                           GetLocalScale                   	= function: 0x01139d78 (function)
                           GetSpawnGroupHandle             	= function: 0x01139af0 (function)
                           SetLocalOrigin                  	= function: 0x011388b0 (function)
                           TransformPointWorldToEntity     	= function: 0x01138a40 (function)
                           SetContextThink                 	= function: 0x0113a1e0 (function)
                           Attribute_SetIntValue           	= function: 0x011384b0 (function)
                           HasAttribute                    	= function: 0x011385c0 (function)
                           Attribute_GetIntValue           	= function: 0x01138538 (function)
                           GetBoundingMaxs                 	= function: 0x01138bd8 (function)
                           GetCenter                       	= function: 0x01139ef8 (function)
                           GetOwner                        	= function: 0x01138750 (function)
                           SetConstraint                   	= function: 0x01138120 (function)
                           GetContext                      	= function: 0x0113a360 (function)
                           SetMass                         	= function: 0x01139a78 (function)
                           SetAbsScale                     	= function: 0x01139cf8 (function)
                           OverrideFriction                	= function: 0x01139810 (function)
                           SetEntityName                   	= function: 0x01138850 (function)
                           GetUpVector                     	= function: 0x01137188 (function)
                           GetVelocity                     	= function: 0x01139568 (function)
                           RemoveEffects                   	= function: 0x01138320 (function)
                           SetLocalAngles                  	= function: 0x01137f70 (function)
                           IsBaseNPC                       	= function: 0x011f85c0 (function)
                           Attribute_SetFloatValue         	= function: 0x011383a0 (function)
                           GetBoundingMins                 	= function: 0x01138b58 (function)
                           GetOwnerEntity                  	= function: 0x01137b70 (function)
                           SetMaxHealth                    	= function: 0x011391e0 (function)
                           GetBaseVelocity                 	= function: 0x01139790 (function)
                           GetOrigin                       	= function: 0x0113bda8 (function)
                           IsPlayer                        	= function: 0x0113bd28 (function)
                           GatherCriteria                  	= function: 0x01138de8 (function)
                           Trigger                         	= function: 0x0113a168 (function)
                           IsDOTANPC                       	= function: 0x011390e0 (function)
                           GetAbsScale                     	= function: 0x01139c78 (function)
                           SetHealth                       	= function: 0x01139260 (function)
                           ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
                           SetAbsOrigin                    	= function: 0x01139e78 (function)
                           GetMass                         	= function: 0x01139a20 (function)
                           Attribute_GetFloatValue         	= function: 0x01138428 (function)
                           EmitSoundParams                 	= function: 0x01139918 (function)
                           TakeDamage                      	= function: 0x01138e68 (function)
                           TransformPointEntityToWorld     	= function: 0x011389b0 (function)
                           EmitSound                       	= function: 0x01139898 (function)
                           SetForwardVector                	= function: 0x01138ad0 (function)
                           SetContextNum                   	= function: 0x0113a2e0 (function)
                           GetAbsOrigin                    	= function: 0x01139b78 (function)
                           GetLocalAngularVelocity         	= function: 0x01139708 (function)
                           NextMovePeer                    	= function: 0x01137e48 (function)
                           ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
                           GetMaxHealth                    	= function: 0x01139160 (function)
                           PrecacheScriptSound             	= function: 0x0113bca0 (function)
                           GetLocalVelocity                	= function: 0x011394e0 (function)
                           SetVelocity                     	= function: 0x01139460 (function)
                           FirstMoveChild                  	= function: 0x011379c0 (function)
                           GetHealth                       	= function: 0x011392e0 (function)
                           EyeAngles                       	= function: 0x01137df0 (function)
                           SetAbsAngles                    	= function: 0x01137ce8 (function)
                           GetModelName                    	= function: 0x01137af0 (function)
                           SetContext                      	= function: 0x0113a260 (function)
                           GetRightVector                  	= function: 0x01137940 (function)
                           GetAnglesAsVector               	= function: 0x01137d68 (function)
                           SetThink                        	= function: 0x011b4068 (function)
                           IsPlayerController              	= function: 0x01138fe0 (function)
                           GetAngles                       	= function: 0x01139bf8 (function)
                           IsPlayerPawn                    	= function: 0x01138f60 (function)
                           IsAlive                         	= function: 0x01138ee8 (function)
                           SetParent                       	= function: 0x011380a0 (function)
                           GetBounds                       	= function: 0x01138c58 (function)
                           AddEffects                      	= function: 0x011382a0 (function)
                           IsInstance                      	= function: 0x011b4508 (function)
                           EyePosition                     	= function: 0x011381a0 (function)
                           GetForwardVector                	= function: 0x011378b8 (function)
                           SetGravity                      	= function: 0x01139360 (function)
                           StopThink                       	= function: 0x011b44e8 (function)
                           GetMoveParent                   	= function: 0x01137a60 (function)
                           SetFriction                     	= function: 0x011393e0 (function)
                           GetLocalOrigin                  	= function: 0x01138930 (function)
                           SetOrigin                       	= function: 0x01137ef0 (function)
                           SetAngles                       	= function: 0x01138220 (function)
                           GetRootMoveParent               	= function: 0x01137c60 (function)
                           StopSound                       	= function: 0x01139998 (function)
                           SetOwner                        	= function: 0x011387d0 (function)
                           GetAngularVelocity              	= function: 0x01138cd8 (function)
                           ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
                           GetSoundDuration                	= function: 0x0113bc18 (function)
                           GetTeam                         	= function: 0x01139ff8 (function)
                           SetAngularVelocity              	= function: 0x01138d60 (function)
                           GetLocalAngles                  	= function: 0x01137ff0 (function)
                           FollowEntity                    	= function: 0x0113a0e8 (function)
                           GetEntityIndex                  	= function: 0x011265d0 (function)
                           DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
                           GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
                           FDesc                           	= table: 0x01125fb0 (table, already seen)
                           IsNull                          	= function: 0x01125f30 (function)
                           GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
                           GetPrivateScriptScope           	= function: 0x01126448 (function)
                           entindex                        	= function: 0x01126600 (function)
                           GetIntAttr                      	= function: 0x01126178 (function)
                           FireOutput                      	= function: 0x01126010 (function)
                           Destroy                         	= function: 0x011262c8 (function)
                           GetDebugName                    	= function: 0x01126340 (function)
                           SetIntAttr                      	= function: 0x01125f78 (function)
                           GetClassname                    	= function: 0x01126068 (function)
                           GetName                         	= function: 0x01126630 (function)
                           ConnectOutput                   	= function: 0x01113ac8 (function)
                           RedirectOutput                  	= function: 0x01113668 (function)
                           GetEntityHandle                 	= function: 0x01113cb0 (function)
                           DisconnectOutput                	= function: 0x01113ef0 (function)
                           RemoveSelf                      	= function: 0x011260f8 (function)
                           GetPublicScriptScope            	= function: 0x011178d8 (function)
                        }
                        FDesc                           	= table: 0x011b38d0 (table)
                        {
                           GetInteractAbilityName          	= string GetInteractAbilityName()
The name of the ability used when triggering interaction on the outpost. (userdata)
                           SetInteractAbilityName          	= void SetInteractAbilityName(string pszInteractAbilityName)
The name of the ability used when triggering interaction on the outpost. (userdata)
                        }
                        IsNull                          	= function: 0x011b3870 (function)
                        GetInteractAbilityName          	= function: 0x011b39f8 (function)
                        SetInteractAbilityName          	= function: 0x011b38f8 (function)
                     }
                     CDOTATutorial                   	= table: 0x01205c08 (table, already seen)
                     CEntityInstance                 	= table: 0x01125f08 (table, already seen)
                     CDOTA_Item                      	= table: 0x0117ebf0 (table, already seen)
                     CBaseAnimating                  	= table: 0x01186d00 (table, already seen)
                     CBaseModelEntity                	= table: 0x01185970 (table, already seen)
                     CInfoPlayerStartDota            	= table: 0x011b3578 (table)
                     {
                        metatable                       	= table: 0x011b2518 (table, already seen)
                        FDesc                           	= table: 0x011b3600 (table)
                        {
                           SetEnabled                      	= void SetEnabled(bool bEnabled)
Enable or disable the obstruction (userdata)
                           IsEnabled                       	= bool IsEnabled()
Returns whether the object is currently active (userdata)
                        }
                        IsNull                          	= function: 0x011b35a0 (function)
                        SetEnabled                      	= function: 0x011b36f8 (function)
                        IsEnabled                       	= function: 0x011b3628 (function)
                     }
                     CScriptPrecacheContext          	= table: 0x011c3f38 (table)
                     {
                        FDesc                           	= table: 0x011c3fc0 (table)
                        {
                           GetValue                        	= table GetValue(string)
Reads a spawn key (userdata)
                           AddResource                     	= void AddResource(string)
Precaches a specific resource (userdata)
                        }
                        IsNull                          	= function: 0x011c3f60 (function)
                        AddResource                     	= function: 0x011c40b8 (function)
                        GetValue                        	= function: 0x011c3fe8 (function)
                     }
                     ProjectileManager               	= table: 0x0112d0d8 (table)
                     {
                        ChangeTrackingProjectileSpeed   	= function: 0x0112d958 (function)
                        ProjectileDodge                 	= function: 0x0112d128 (function)
                        GetLinearProjectileLocation     	= function: 0x0112d498 (function)
                        IsValidProjectile               	= function: 0x0112da78 (function)
                        DestroyTrackingProjectile       	= function: 0x0112d9e8 (function)
                        CreateTrackingProjectile        	= function: 0x0112d188 (function)
                        UpdateLinearProjectileDirection 	= function: 0x0112d740 (function)
                        GetLinearProjectileVelocity     	= function: 0x0112d378 (function)
                        DestroyLinearProjectile         	= function: 0x0112d2a0 (function)
                        GetTrackingProjectileLocation   	= function: 0x0112d6b0 (function)
                        GetLinearProjectileRadius       	= function: 0x0112d408 (function)
                        IsNull                          	= function: 0x0112d100 (function)
                        CreateLinearProjectile          	= function: 0x0112d218 (function)
                        FDesc                           	= table: 0x0112d160 (table)
                        {
                           ChangeTrackingProjectileSpeed   	= void ChangeTrackingProjectileSpeed(handle, int)
Update speed (userdata)
                           ProjectileDodge                 	= void ProjectileDodge(handle)
Makes the specified unit dodge projectiles (userdata)
                           GetLinearProjectileLocation     	= Vector GetLinearProjectileLocation(int)
Returns current location of projectile (userdata)
                           DestroyTrackingProjectile       	= void DestroyTrackingProjectile(int)
Destroy a tracking projectile early (userdata)
                           GetTrackingProjectileLocation   	= Vector GetTrackingProjectileLocation(int)
Returns current location of projectile (userdata)
                           GetLinearProjectileVelocity     	= Vector GetLinearProjectileVelocity(int)
Returns a vector representing the current velocity of the projectile. (userdata)
                           DestroyLinearProjectile         	= void DestroyLinearProjectile(int)
Destroys the linear projectile matching the argument ID (userdata)
                           IsValidProjectile               	= bool IsValidProjectile(int)
Is this a valid projectile? (userdata)
                           GetLinearProjectileRadius       	= float GetLinearProjectileRadius(int)
Returns current radius of projectile (userdata)
                           CreateLinearProjectile          	= int CreateLinearProjectile(handle)
Creates a linear projectile and returns the projectile ID (userdata)
                           UpdateLinearProjectileDirection 	= void UpdateLinearProjectileDirection(int, Vector, float)
Update velocity (userdata)
                           CreateTrackingProjectile        	= int CreateTrackingProjectile(handle)
Creates a tracking projectile (userdata)
                        }
                     }
                     CPointWorldText                 	= table: 0x011c0970 (table)
                     {
                        metatable                       	= table: 0x01185970 (table, already seen)
                        FDesc                           	= table: 0x011c09f8 (table)
                        {
                           SetMessage                      	= void SetMessage(string pMessage)
Set the message on this entity. (userdata)
                        }
                        IsNull                          	= function: 0x011c0998 (function)
                        SetMessage                      	= function: 0x011c0a20 (function)
                     }
                     CDOTA_Modifier_Lua_Vertical_Motion	= table: 0x011335e0 (table, already seen)
                     CDOTA_BaseNPC_Creature          	= table: 0x011b0230 (table, already seen)
                     CDOTA_Ability_DataDriven        	= table: 0x011aaf20 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011aafa8 (table)
                        {
                           ApplyDataDrivenModifier         	= handle ApplyDataDrivenModifier(handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable)
Applies a data driven modifier to the target (userdata)
                           ApplyDataDrivenThinker          	= handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)
Applies a data driven thinker at the location (userdata)
                        }
                        IsNull                          	= function: 0x011aaf48 (function)
                        ApplyDataDrivenModifier         	= function: 0x011aafd0 (function)
                        ApplyDataDrivenThinker          	= function: 0x011ab090 (function)
                     }
                     CDOTA_Unit_Nian                 	= table: 0x011b1660 (table)
                     {
                        metatable                       	= table: 0x011b0230 (table, already seen)
                        GetTail                         	= function: 0x011b1790 (function)
                        GetHorn                         	= function: 0x011b1888 (function)
                        FDesc                           	= table: 0x011b16e8 (table)
                        {
                           GetTail                         	= handle GetTail()
Is the Nian's tail broken? (userdata)
                           IsTailAlive                     	= bool IsTailAlive()
Is the Nian's tail broken? (userdata)
                           IsHornAlive                     	= bool IsHornAlive()
Is the Nian's horn broken? (userdata)
                           GetHorn                         	= handle GetHorn()
Is the Nian horn? (userdata)
                        }
                        IsNull                          	= function: 0x011b1688 (function)
                        IsHornAlive                     	= function: 0x011b1710 (function)
                        IsTailAlive                     	= function: 0x011b1808 (function)
                     }
                     CDOTA_CustomUIManager           	= table: 0x0120c5c8 (table, already seen)
                     CDOTAGameManager                	= table: 0x0112dc90 (table, already seen)
                     CDOTA_MapTree                   	= table: 0x011b4110 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        CutDownRegrowAfter              	= function: 0x011b4330 (function)
                        IsStanding                      	= function: 0x011b4240 (function)
                        FDesc                           	= table: 0x011b4198 (table)
                        {
                           CutDown                         	= void CutDown(int nTeamNumberKnownTo)
Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team) (userdata)
                           GrowBack                        	= void GrowBack()
Grows back the tree if it was cut down. (userdata)
                           IsStanding                      	= bool IsStanding()
Returns true if the tree is standing, false if it has been cut down (userdata)
                           CutDownRegrowAfter              	= void CutDownRegrowAfter(float flRegrowAfter, int nTeamNumberKnownTo)
Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team) (userdata)
                        }
                        IsNull                          	= function: 0x011b4138 (function)
                        GrowBack                        	= function: 0x011b41c0 (function)
                        CutDown                         	= function: 0x011b42b8 (function)
                     }
                     CEnvProjectedTexture            	= table: 0x011c25d8 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        SetVolumetrics                  	= function: 0x011c29c0 (function)
                        SetLinearAttenuation            	= function: 0x011c2688 (function)
                        SetQuadraticAttenuation         	= function: 0x011c2788 (function)
                        FDesc                           	= table: 0x011c2660 (table)
                        {
                           SetVolumetrics                  	= void SetVolumetrics(bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset)
Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset (userdata)
                           SetFarRange                     	= void SetFarRange(float flRange)
Set light maximum range (userdata)
                           SetQuadraticAttenuation         	= void SetQuadraticAttenuation(float flAtten)
Set light quadratic attenuation value (userdata)
                           SetNearRange                    	= void SetNearRange(float flRange)
Set light minimum range (userdata)
                           SetLinearAttenuation            	= void SetLinearAttenuation(float flAtten)
Set light linear attenuation value (userdata)
                        }
                        IsNull                          	= function: 0x011c2600 (function)
                        SetNearRange                    	= function: 0x011c2810 (function)
                        SetFarRange                     	= function: 0x011c2710 (function)
                     }
                     CDOTA_BaseNPC_NeutralItemStash  	= table: 0x011b33d8 (table)
                     {
                        metatable                       	= table: 0x01190a18 (table, already seen)
                        FDesc                           	= table: 0x011b3460 (table)
                        {
                        }
                        IsNull                          	= function: 0x011b3400 (function)
                     }
                     CDOTA_Ability_Animation_TailSpin	= table: 0x011affc0 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011b0048 (table)
                        {
                           SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
                        }
                        IsNull                          	= function: 0x011affe8 (function)
                        SetPlaybackRate                 	= function: 0x011b0070 (function)
                     }
                     CDOTA_Item_DataDriven           	= table: 0x011be038 (table)
                     {
                        metatable                       	= table: 0x0117ebf0 (table, already seen)
                        FDesc                           	= table: 0x011be0c0 (table)
                        {
                           ApplyDataDrivenModifier         	= void ApplyDataDrivenModifier(handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable)
Applies a data driven modifier to the target (userdata)
                           ApplyDataDrivenThinker          	= handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)
Applies a data driven thinker at the location (userdata)
                        }
                        IsNull                          	= function: 0x011be060 (function)
                        ApplyDataDrivenModifier         	= function: 0x011be0e8 (function)
                        ApplyDataDrivenThinker          	= function: 0x011be1e8 (function)
                     }
                     CDOTA_Modifier_Lua_Motion_Both  	= table: 0x01133aa8 (table, already seen)
                     CDOTA_ItemSpawner               	= table: 0x011be360 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011be3e8 (table)
                        {
                           GetItemName                     	= string GetItemName()
Returns the item name (userdata)
                        }
                        IsNull                          	= function: 0x011be388 (function)
                        GetItemName                     	= function: 0x011be410 (function)
                     }
                     CDOTA_SimpleObstruction         	= table: 0x01148090 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x01148118 (table)
                        {
                           SetEnabled                      	= void SetEnabled(bool bEnabled, bool bForce)
Enable or disable the obstruction (userdata)
                           IsEnabled                       	= bool IsEnabled()
Returns whether the obstruction is currently active (userdata)
                        }
                        IsNull                          	= function: 0x011480b8 (function)
                        SetEnabled                      	= function: 0x01148228 (function)
                        IsEnabled                       	= function: 0x01148140 (function)
                     }
                     CDOTA_Unit_Diretide_Portal      	= table: 0x011be930 (table)
                     {
                        metatable                       	= table: 0x01190a18 (table, already seen)
                        SetPartnerPortal                	= function: 0x011be9e0 (function)
                        ResetPortal                     	= function: 0x011bed20 (function)
                        SetInvasionRuneType             	= function: 0x011beb68 (function)
                        FDesc                           	= table: 0x011be9b8 (table)
                        {
                           SetPartnerPortal                	= void SetPartnerPortal(handle hPortal)
 (userdata)
                           ResetPortal                     	= void ResetPortal()
 (userdata)
                           SetInvasionRuneType             	= void SetInvasionRuneType(int nRuneType)
 (userdata)
                           SetPortalActive                 	= void SetPortalActive(bool bActive)
 (userdata)
                           GetPartnerPortal                	= handle GetPartnerPortal()
 (userdata)
                        }
                        IsNull                          	= function: 0x011be958 (function)
                        SetPortalActive                 	= function: 0x011bea68 (function)
                        GetPartnerPortal                	= function: 0x011beae0 (function)
                     }
                     CLogicRelay                     	= table: 0x011c1d38 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011c1dc0 (table)
                        {
                           Trigger                         	= void Trigger(handle hActivator, handle hCaller)
Trigger( hActivator, hCaller ) : Triggers the logic_relay (userdata)
                        }
                        IsNull                          	= function: 0x011c1d60 (function)
                        Trigger                         	= function: 0x011c1de8 (function)
                     }
                     CDebugOverlayScriptHelper       	= table: 0x01361538 (table, already seen)
                     CDOTA_Ability_Aghanim_Spear     	= table: 0x011bf198 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011bf220 (table)
                        {
                           LaunchSpear                     	= void LaunchSpear(Vector vTarget, Vector vStart)
Launch Spear to a target position from a source position (userdata)
                        }
                        IsNull                          	= function: 0x011bf1c0 (function)
                        LaunchSpear                     	= function: 0x011bf248 (function)
                     }
                     CDOTA_Unit_Courier              	= table: 0x011b2288 (table)
                     {
                        metatable                       	= table: 0x01188418 (table, already seen)
                        FDesc                           	= table: 0x011b2310 (table)
                        {
                           UpgradeCourier                  	= void UpgradeCourier(int iLevel)
Upgrade the courier ( int param ) times. (userdata)
                        }
                        IsNull                          	= function: 0x011b22b0 (function)
                        UpgradeCourier                  	= function: 0x011b2338 (function)
                     }
                     CDOTA_Item_BagOfGold            	= table: 0x011beef8 (table)
                     {
                        metatable                       	= table: 0x0117ebf0 (table, already seen)
                        FDesc                           	= table: 0x011bef80 (table)
                        {
                           SetLifeTime                     	= void SetLifeTime(float flTime)
Set the life time of this item (userdata)
                        }
                        IsNull                          	= function: 0x011bef20 (function)
                        SetLifeTime                     	= function: 0x011befa8 (function)
                     }
                     CDotaTutorialNPCBlocker         	= table: 0x011b3e28 (table)
                     {
                        metatable = table: 0x01150a50
                        {
                           ScriptPlayScene                 	= function: 0x0112ce30 (function)
                           FDesc                           	= table: 0x0112ce08 (table, already seen)
                           IsNull                          	= function: 0x0112cda8 (function)
                           GetCurrentScene                 	= function: 0x0112cf18 (function)
                           GetSceneByIndex                 	= function: 0x0112cf98 (function)
                           SetGraphLookTarget              	= function: 0x01187338 (function)
                           SetGraphParameterEnum           	= function: 0x011877e0 (function)
                           SetGraphParameterInt            	= function: 0x01187758 (function)
                           IsSequenceFinished              	= function: 0x011870e0 (function)
                           ResetSequence                   	= function: 0x01186fb0 (function)
                           SetSequence                     	= function: 0x01187230 (function)
                           FDesc                           	= table: 0x01186d88 (table, already seen)
                           SetGraphParameter               	= function: 0x011871c0 (function)
                           SetGraphParameterVector         	= function: 0x011872b0 (function)
                           GetSequence                     	= function: 0x01187050 (function)
                           StopAnimation                   	= function: 0x01186eb0 (function)
                           SequenceDuration                	= function: 0x01187168 (function)
                           SetGraphParameterFloat          	= function: 0x011876d0 (function)
                           GetGraphParameter               	= function: 0x011873c0 (function)
                           IsNull                          	= function: 0x01186d28 (function)
                           SetPoseParameter                	= function: 0x01186db0 (function)
                           SetCycle                        	= function: 0x01186f30 (function)
                           SetGraphParameterBool           	= function: 0x01187648 (function)
                           ActiveSequenceDuration          	= function: 0x01187410 (function)
                           GetCycle                        	= function: 0x01186e38 (function)
                           SetMaterialGroupHash            	= function: 0x01185f40 (function)
                           GetModelScale                   	= function: 0x01185a20 (function)
                           GetMaterialGroupHash            	= function: 0x01185fc8 (function)
                           SetRenderMode                   	= function: 0x011862f8 (function)
                           ScriptLookupAttachment          	= function: 0x01185b98 (function)
                           FDesc                           	= table: 0x011859f8 (table, already seen)
                           SetModelScale                   	= function: 0x01185b18 (function)
                           SetMaterialGroupMask            	= function: 0x01186178 (function)
                           SetSkin                         	= function: 0x01186bc0 (function)
                           SetBodygroupByName              	= function: 0x01186b38 (function)
                           SetBodygroup                    	= function: 0x01186ab8 (function)
                           GetMaterialGroupMask            	= function: 0x01186200 (function)
                           SetModel                        	= function: 0x01185c20 (function)
                           SetRenderAlpha                  	= function: 0x01185dd8 (function)
                           SetSingleMeshGroup              	= function: 0x01186050 (function)
                           GetAttachmentAngles             	= function: 0x01185d50 (function)
                           SetMaterialGroup                	= function: 0x01186478 (function)
                           SetLightGroup                   	= function: 0x01185e58 (function)
                           GetAttachmentForward            	= function: 0x01185cc0 (function)
                           IsNull                          	= function: 0x01185998 (function)
                           SetRenderColor                  	= function: 0x01186378 (function)
                           SetSize                         	= function: 0x01185ec8 (function)
                           GetRenderAlpha                  	= function: 0x011860a0 (function)
                           GetAttachmentOrigin             	= function: 0x01185aa0 (function)
                           GetRenderColor                  	= function: 0x011863f8 (function)
                           GetTeamNumber                   	= function: 0x01139f78 (function)
                           GetChildren                     	= function: 0x01137bf0 (function)
                           IsNPC                           	= function: 0x01139068 (function)
                           SetTeam                         	= function: 0x0113a070 (function)
                           FDesc                           	= table: 0x011371c0 (table, already seen)
                           IsNull                          	= function: 0x01137160 (function)
                           Kill                            	= function: 0x01137820 (function)
                           SetLocalScale                   	= function: 0x01139df8 (function)
                           DeleteAttribute                 	= function: 0x01138640 (function)
                           GetLocalScale                   	= function: 0x01139d78 (function)
                           GetSpawnGroupHandle             	= function: 0x01139af0 (function)
                           SetLocalOrigin                  	= function: 0x011388b0 (function)
                           TransformPointWorldToEntity     	= function: 0x01138a40 (function)
                           SetContextThink                 	= function: 0x0113a1e0 (function)
                           Attribute_SetIntValue           	= function: 0x011384b0 (function)
                           HasAttribute                    	= function: 0x011385c0 (function)
                           Attribute_GetIntValue           	= function: 0x01138538 (function)
                           GetBoundingMaxs                 	= function: 0x01138bd8 (function)
                           GetCenter                       	= function: 0x01139ef8 (function)
                           GetOwner                        	= function: 0x01138750 (function)
                           SetConstraint                   	= function: 0x01138120 (function)
                           GetContext                      	= function: 0x0113a360 (function)
                           SetMass                         	= function: 0x01139a78 (function)
                           SetAbsScale                     	= function: 0x01139cf8 (function)
                           OverrideFriction                	= function: 0x01139810 (function)
                           SetEntityName                   	= function: 0x01138850 (function)
                           GetUpVector                     	= function: 0x01137188 (function)
                           GetVelocity                     	= function: 0x01139568 (function)
                           RemoveEffects                   	= function: 0x01138320 (function)
                           SetLocalAngles                  	= function: 0x01137f70 (function)
                           IsBaseNPC                       	= function: 0x011f85c0 (function)
                           Attribute_SetFloatValue         	= function: 0x011383a0 (function)
                           GetBoundingMins                 	= function: 0x01138b58 (function)
                           GetOwnerEntity                  	= function: 0x01137b70 (function)
                           SetMaxHealth                    	= function: 0x011391e0 (function)
                           GetBaseVelocity                 	= function: 0x01139790 (function)
                           GetOrigin                       	= function: 0x0113bda8 (function)
                           IsPlayer                        	= function: 0x0113bd28 (function)
                           GatherCriteria                  	= function: 0x01138de8 (function)
                           Trigger                         	= function: 0x0113a168 (function)
                           IsDOTANPC                       	= function: 0x011390e0 (function)
                           GetAbsScale                     	= function: 0x01139c78 (function)
                           SetHealth                       	= function: 0x01139260 (function)
                           ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
                           SetAbsOrigin                    	= function: 0x01139e78 (function)
                           GetMass                         	= function: 0x01139a20 (function)
                           Attribute_GetFloatValue         	= function: 0x01138428 (function)
                           EmitSoundParams                 	= function: 0x01139918 (function)
                           TakeDamage                      	= function: 0x01138e68 (function)
                           TransformPointEntityToWorld     	= function: 0x011389b0 (function)
                           EmitSound                       	= function: 0x01139898 (function)
                           SetForwardVector                	= function: 0x01138ad0 (function)
                           SetContextNum                   	= function: 0x0113a2e0 (function)
                           GetAbsOrigin                    	= function: 0x01139b78 (function)
                           GetLocalAngularVelocity         	= function: 0x01139708 (function)
                           NextMovePeer                    	= function: 0x01137e48 (function)
                           ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
                           GetMaxHealth                    	= function: 0x01139160 (function)
                           PrecacheScriptSound             	= function: 0x0113bca0 (function)
                           GetLocalVelocity                	= function: 0x011394e0 (function)
                           SetVelocity                     	= function: 0x01139460 (function)
                           FirstMoveChild                  	= function: 0x011379c0 (function)
                           GetHealth                       	= function: 0x011392e0 (function)
                           EyeAngles                       	= function: 0x01137df0 (function)
                           SetAbsAngles                    	= function: 0x01137ce8 (function)
                           GetModelName                    	= function: 0x01137af0 (function)
                           SetContext                      	= function: 0x0113a260 (function)
                           GetRightVector                  	= function: 0x01137940 (function)
                           GetAnglesAsVector               	= function: 0x01137d68 (function)
                           SetThink                        	= function: 0x011b4068 (function)
                           IsPlayerController              	= function: 0x01138fe0 (function)
                           GetAngles                       	= function: 0x01139bf8 (function)
                           IsPlayerPawn                    	= function: 0x01138f60 (function)
                           IsAlive                         	= function: 0x01138ee8 (function)
                           SetParent                       	= function: 0x011380a0 (function)
                           GetBounds                       	= function: 0x01138c58 (function)
                           AddEffects                      	= function: 0x011382a0 (function)
                           IsInstance                      	= function: 0x011b4508 (function)
                           EyePosition                     	= function: 0x011381a0 (function)
                           GetForwardVector                	= function: 0x011378b8 (function)
                           SetGravity                      	= function: 0x01139360 (function)
                           StopThink                       	= function: 0x011b44e8 (function)
                           GetMoveParent                   	= function: 0x01137a60 (function)
                           SetFriction                     	= function: 0x011393e0 (function)
                           GetLocalOrigin                  	= function: 0x01138930 (function)
                           SetOrigin                       	= function: 0x01137ef0 (function)
                           SetAngles                       	= function: 0x01138220 (function)
                           GetRootMoveParent               	= function: 0x01137c60 (function)
                           StopSound                       	= function: 0x01139998 (function)
                           SetOwner                        	= function: 0x011387d0 (function)
                           GetAngularVelocity              	= function: 0x01138cd8 (function)
                           ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
                           GetSoundDuration                	= function: 0x0113bc18 (function)
                           GetTeam                         	= function: 0x01139ff8 (function)
                           SetAngularVelocity              	= function: 0x01138d60 (function)
                           GetLocalAngles                  	= function: 0x01137ff0 (function)
                           FollowEntity                    	= function: 0x0113a0e8 (function)
                           GetEntityIndex                  	= function: 0x011265d0 (function)
                           DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
                           GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
                           FDesc                           	= table: 0x01125fb0 (table, already seen)
                           IsNull                          	= function: 0x01125f30 (function)
                           GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
                           GetPrivateScriptScope           	= function: 0x01126448 (function)
                           entindex                        	= function: 0x01126600 (function)
                           GetIntAttr                      	= function: 0x01126178 (function)
                           FireOutput                      	= function: 0x01126010 (function)
                           Destroy                         	= function: 0x011262c8 (function)
                           GetDebugName                    	= function: 0x01126340 (function)
                           SetIntAttr                      	= function: 0x01125f78 (function)
                           GetClassname                    	= function: 0x01126068 (function)
                           GetName                         	= function: 0x01126630 (function)
                           ConnectOutput                   	= function: 0x01113ac8 (function)
                           RedirectOutput                  	= function: 0x01113668 (function)
                           GetEntityHandle                 	= function: 0x01113cb0 (function)
                           DisconnectOutput                	= function: 0x01113ef0 (function)
                           RemoveSelf                      	= function: 0x011260f8 (function)
                           GetPublicScriptScope            	= function: 0x011178d8 (function)
                        }
                        FDesc                           	= table: 0x011b3eb0 (table)
                        {
                           SetEnabled                      	= void SetEnabled(bool bEnabled)
 (userdata)
                           SetOtherBlocker                 	= void SetOtherBlocker(handle hBlocker)
 (userdata)
                        }
                        IsNull                          	= function: 0x011b3e50 (function)
                        SetEnabled                      	= function: 0x011b3fd0 (function)
                        SetOtherBlocker                 	= function: 0x011b3ed8 (function)
                     }
                     CDOTA_BaseNPC_Trap_Ward         	= table: 0x011b26b8 (table)
                     {
                        metatable                       	= table: 0x011b0230 (table, already seen)
                        FDesc                           	= table: 0x011b2740 (table)
                        {
                           SetAnimation                    	= void SetAnimation(string pAnimation)
Set the animation sequence for this entity. (userdata)
                           GetTrapTarget                   	= Vector GetTrapTarget()
Get the trap target for this entity. (userdata)
                        }
                        IsNull                          	= function: 0x011b26e0 (function)
                        SetAnimation                    	= function: 0x011b2860 (function)
                        GetTrapTarget                   	= function: 0x011b2768 (function)
                     }
                     CDOTA_Ability_Nian_Dive         	= table: 0x011b1d70 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011b1df8 (table)
                        {
                           SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
                        }
                        IsNull                          	= function: 0x011b1d98 (function)
                        SetPlaybackRate                 	= function: 0x011b1e20 (function)
                     }
                     CFoWBlockerRegion               	= table: 0x011be5f8 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011be680 (table)
                        {
                           AddRectangularBlocker           	= void AddRectangularBlocker(Vector vMins, Vector vMaxs, bool bClearRegion)
AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle (userdata)
                           AddRectangularOutlineBlocker    	= void AddRectangularOutlineBlocker(Vector vMins, Vector vMaxs, bool bClearRegion)
AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline (userdata)
                        }
                        IsNull                          	= function: 0x011be620 (function)
                        AddRectangularBlocker           	= function: 0x011be6a8 (function)
                        AddRectangularOutlineBlocker    	= function: 0x011be7a8 (function)
                     }
                     CEntityScriptFramework          	= table: 0x011c41f0 (table)
                     {
                        FDesc                           	= table: 0x011c4278 (table)
                        {
                        }
                        IsNull                          	= function: 0x011c4218 (function)
                     }
                     CMarkupVolumeTagged             	= table: 0x011c0c08 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011c0c90 (table)
                        {
                           HasTag                          	= bool HasTag(string pszTagName)
Does this volume have the given tag. (userdata)
                        }
                        IsNull                          	= function: 0x011c0c30 (function)
                        HasTag                          	= function: 0x011c0cb8 (function)
                     }
                     GlobalSys                       	= table: 0x01143ab8 (table, already seen)
                     CBasePlayerPawn                 	= table: 0x011b94a8 (table)
                     {
                        metatable = table: 0x01188280
                        {
                           FDesc                           	= table: 0x01188308 (table)
                           {
                           }
                           IsNull                          	= function: 0x011882a8 (function)
                           ScriptPlayScene                 	= function: 0x0112ce30 (function)
                           FDesc                           	= table: 0x0112ce08 (table, already seen)
                           IsNull                          	= function: 0x0112cda8 (function)
                           GetCurrentScene                 	= function: 0x0112cf18 (function)
                           GetSceneByIndex                 	= function: 0x0112cf98 (function)
                           SetGraphLookTarget              	= function: 0x01187338 (function)
                           SetGraphParameterEnum           	= function: 0x011877e0 (function)
                           SetGraphParameterInt            	= function: 0x01187758 (function)
                           IsSequenceFinished              	= function: 0x011870e0 (function)
                           ResetSequence                   	= function: 0x01186fb0 (function)
                           SetSequence                     	= function: 0x01187230 (function)
                           FDesc                           	= table: 0x01186d88 (table, already seen)
                           SetGraphParameter               	= function: 0x011871c0 (function)
                           SetGraphParameterVector         	= function: 0x011872b0 (function)
                           GetSequence                     	= function: 0x01187050 (function)
                           StopAnimation                   	= function: 0x01186eb0 (function)
                           SequenceDuration                	= function: 0x01187168 (function)
                           SetGraphParameterFloat          	= function: 0x011876d0 (function)
                           GetGraphParameter               	= function: 0x011873c0 (function)
                           IsNull                          	= function: 0x01186d28 (function)
                           SetPoseParameter                	= function: 0x01186db0 (function)
                           SetCycle                        	= function: 0x01186f30 (function)
                           SetGraphParameterBool           	= function: 0x01187648 (function)
                           ActiveSequenceDuration          	= function: 0x01187410 (function)
                           GetCycle                        	= function: 0x01186e38 (function)
                           SetMaterialGroupHash            	= function: 0x01185f40 (function)
                           GetModelScale                   	= function: 0x01185a20 (function)
                           GetMaterialGroupHash            	= function: 0x01185fc8 (function)
                           SetRenderMode                   	= function: 0x011862f8 (function)
                           ScriptLookupAttachment          	= function: 0x01185b98 (function)
                           FDesc                           	= table: 0x011859f8 (table, already seen)
                           SetModelScale                   	= function: 0x01185b18 (function)
                           SetMaterialGroupMask            	= function: 0x01186178 (function)
                           SetSkin                         	= function: 0x01186bc0 (function)
                           SetBodygroupByName              	= function: 0x01186b38 (function)
                           SetBodygroup                    	= function: 0x01186ab8 (function)
                           GetMaterialGroupMask            	= function: 0x01186200 (function)
                           SetModel                        	= function: 0x01185c20 (function)
                           SetRenderAlpha                  	= function: 0x01185dd8 (function)
                           SetSingleMeshGroup              	= function: 0x01186050 (function)
                           GetAttachmentAngles             	= function: 0x01185d50 (function)
                           SetMaterialGroup                	= function: 0x01186478 (function)
                           SetLightGroup                   	= function: 0x01185e58 (function)
                           GetAttachmentForward            	= function: 0x01185cc0 (function)
                           IsNull                          	= function: 0x01185998 (function)
                           SetRenderColor                  	= function: 0x01186378 (function)
                           SetSize                         	= function: 0x01185ec8 (function)
                           GetRenderAlpha                  	= function: 0x011860a0 (function)
                           GetAttachmentOrigin             	= function: 0x01185aa0 (function)
                           GetRenderColor                  	= function: 0x011863f8 (function)
                           GetTeamNumber                   	= function: 0x01139f78 (function)
                           GetChildren                     	= function: 0x01137bf0 (function)
                           IsNPC                           	= function: 0x01139068 (function)
                           SetTeam                         	= function: 0x0113a070 (function)
                           FDesc                           	= table: 0x011371c0 (table, already seen)
                           IsNull                          	= function: 0x01137160 (function)
                           Kill                            	= function: 0x01137820 (function)
                           SetLocalScale                   	= function: 0x01139df8 (function)
                           DeleteAttribute                 	= function: 0x01138640 (function)
                           GetLocalScale                   	= function: 0x01139d78 (function)
                           GetSpawnGroupHandle             	= function: 0x01139af0 (function)
                           SetLocalOrigin                  	= function: 0x011388b0 (function)
                           TransformPointWorldToEntity     	= function: 0x01138a40 (function)
                           SetContextThink                 	= function: 0x0113a1e0 (function)
                           Attribute_SetIntValue           	= function: 0x011384b0 (function)
                           HasAttribute                    	= function: 0x011385c0 (function)
                           Attribute_GetIntValue           	= function: 0x01138538 (function)
                           GetBoundingMaxs                 	= function: 0x01138bd8 (function)
                           GetCenter                       	= function: 0x01139ef8 (function)
                           GetOwner                        	= function: 0x01138750 (function)
                           SetConstraint                   	= function: 0x01138120 (function)
                           GetContext                      	= function: 0x0113a360 (function)
                           SetMass                         	= function: 0x01139a78 (function)
                           SetAbsScale                     	= function: 0x01139cf8 (function)
                           OverrideFriction                	= function: 0x01139810 (function)
                           SetEntityName                   	= function: 0x01138850 (function)
                           GetUpVector                     	= function: 0x01137188 (function)
                           GetVelocity                     	= function: 0x01139568 (function)
                           RemoveEffects                   	= function: 0x01138320 (function)
                           SetLocalAngles                  	= function: 0x01137f70 (function)
                           IsBaseNPC                       	= function: 0x011f85c0 (function)
                           Attribute_SetFloatValue         	= function: 0x011383a0 (function)
                           GetBoundingMins                 	= function: 0x01138b58 (function)
                           GetOwnerEntity                  	= function: 0x01137b70 (function)
                           SetMaxHealth                    	= function: 0x011391e0 (function)
                           GetBaseVelocity                 	= function: 0x01139790 (function)
                           GetOrigin                       	= function: 0x0113bda8 (function)
                           IsPlayer                        	= function: 0x0113bd28 (function)
                           GatherCriteria                  	= function: 0x01138de8 (function)
                           Trigger                         	= function: 0x0113a168 (function)
                           IsDOTANPC                       	= function: 0x011390e0 (function)
                           GetAbsScale                     	= function: 0x01139c78 (function)
                           SetHealth                       	= function: 0x01139260 (function)
                           ApplyAbsVelocityImpulse         	= function: 0x011395e8 (function)
                           SetAbsOrigin                    	= function: 0x01139e78 (function)
                           GetMass                         	= function: 0x01139a20 (function)
                           Attribute_GetFloatValue         	= function: 0x01138428 (function)
                           EmitSoundParams                 	= function: 0x01139918 (function)
                           TakeDamage                      	= function: 0x01138e68 (function)
                           TransformPointEntityToWorld     	= function: 0x011389b0 (function)
                           EmitSound                       	= function: 0x01139898 (function)
                           SetForwardVector                	= function: 0x01138ad0 (function)
                           SetContextNum                   	= function: 0x0113a2e0 (function)
                           GetAbsOrigin                    	= function: 0x01139b78 (function)
                           GetLocalAngularVelocity         	= function: 0x01139708 (function)
                           NextMovePeer                    	= function: 0x01137e48 (function)
                           ApplyLocalAngularVelocityImpulse	= function: 0x01139670 (function)
                           GetMaxHealth                    	= function: 0x01139160 (function)
                           PrecacheScriptSound             	= function: 0x0113bca0 (function)
                           GetLocalVelocity                	= function: 0x011394e0 (function)
                           SetVelocity                     	= function: 0x01139460 (function)
                           FirstMoveChild                  	= function: 0x011379c0 (function)
                           GetHealth                       	= function: 0x011392e0 (function)
                           EyeAngles                       	= function: 0x01137df0 (function)
                           SetAbsAngles                    	= function: 0x01137ce8 (function)
                           GetModelName                    	= function: 0x01137af0 (function)
                           SetContext                      	= function: 0x0113a260 (function)
                           GetRightVector                  	= function: 0x01137940 (function)
                           GetAnglesAsVector               	= function: 0x01137d68 (function)
                           SetThink                        	= function: 0x011b4068 (function)
                           IsPlayerController              	= function: 0x01138fe0 (function)
                           GetAngles                       	= function: 0x01139bf8 (function)
                           IsPlayerPawn                    	= function: 0x01138f60 (function)
                           IsAlive                         	= function: 0x01138ee8 (function)
                           SetParent                       	= function: 0x011380a0 (function)
                           GetBounds                       	= function: 0x01138c58 (function)
                           AddEffects                      	= function: 0x011382a0 (function)
                           IsInstance                      	= function: 0x011b4508 (function)
                           EyePosition                     	= function: 0x011381a0 (function)
                           GetForwardVector                	= function: 0x011378b8 (function)
                           SetGravity                      	= function: 0x01139360 (function)
                           StopThink                       	= function: 0x011b44e8 (function)
                           GetMoveParent                   	= function: 0x01137a60 (function)
                           SetFriction                     	= function: 0x011393e0 (function)
                           GetLocalOrigin                  	= function: 0x01138930 (function)
                           SetOrigin                       	= function: 0x01137ef0 (function)
                           SetAngles                       	= function: 0x01138220 (function)
                           GetRootMoveParent               	= function: 0x01137c60 (function)
                           StopSound                       	= function: 0x01139998 (function)
                           SetOwner                        	= function: 0x011387d0 (function)
                           GetAngularVelocity              	= function: 0x01138cd8 (function)
                           ValidatePrivateScriptScope      	= function: 0x011386c0 (function)
                           GetSoundDuration                	= function: 0x0113bc18 (function)
                           GetTeam                         	= function: 0x01139ff8 (function)
                           SetAngularVelocity              	= function: 0x01138d60 (function)
                           GetLocalAngles                  	= function: 0x01137ff0 (function)
                           FollowEntity                    	= function: 0x0113a0e8 (function)
                           GetEntityIndex                  	= function: 0x011265d0 (function)
                           DisconnectRedirectedOutput      	= function: 0x011265a0 (function)
                           GetOrCreatePublicScriptScope    	= function: 0x01117960 (function)
                           FDesc                           	= table: 0x01125fb0 (table, already seen)
                           IsNull                          	= function: 0x01125f30 (function)
                           GetOrCreatePrivateScriptScope   	= function: 0x011264d0 (function)
                           GetPrivateScriptScope           	= function: 0x01126448 (function)
                           entindex                        	= function: 0x01126600 (function)
                           GetIntAttr                      	= function: 0x01126178 (function)
                           FireOutput                      	= function: 0x01126010 (function)
                           Destroy                         	= function: 0x011262c8 (function)
                           GetDebugName                    	= function: 0x01126340 (function)
                           SetIntAttr                      	= function: 0x01125f78 (function)
                           GetClassname                    	= function: 0x01126068 (function)
                           GetName                         	= function: 0x01126630 (function)
                           ConnectOutput                   	= function: 0x01113ac8 (function)
                           RedirectOutput                  	= function: 0x01113668 (function)
                           GetEntityHandle                 	= function: 0x01113cb0 (function)
                           DisconnectOutput                	= function: 0x01113ef0 (function)
                           RemoveSelf                      	= function: 0x011260f8 (function)
                           GetPublicScriptScope            	= function: 0x011178d8 (function)
                        }
                        GetEquippedWeapons              	= function: 0x011905a0 (function)
                        IsNoclipping                    	= function: 0x01190438 (function)
                        FDesc                           	= table: 0x01190410 (table)
                        {
                           GetController                   	= handle GetController()
GetController() : Returns the controller for this pawn (userdata)
                           GetWeaponCount                  	= int GetWeaponCount()
GetWeaponCount() : Gets the number of weapons currently equipped (userdata)
                           GetEquippedWeapons              	= table GetEquippedWeapons()
GetEquippedWeapons() : Returns an array of all the equipped weapons (userdata)
                           IsNoclipping                    	= bool IsNoclipping()
Returns true if the player is in noclip mode. (userdata)
                        }
                        IsNull                          	= function: 0x011903b0 (function)
                        GetController                   	= function: 0x011903d8 (function)
                        GetWeaponCount                  	= function: 0x01190520 (function)
                     }
                     CPointTemplate                  	= table: 0x011c2b90 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        GetSpawnedEntities              	= function: 0x011c2c40 (function)
                        ForceSpawn                      	= function: 0x011c2dc8 (function)
                        FDesc                           	= table: 0x011c2c18 (table)
                        {
                           ForceSpawn                      	= void ForceSpawn()
ForceSpawn() : Spawns all of the entities the point_template is pointing at. (userdata)
                           GetSpawnedEntities              	= handle GetSpawnedEntities()
GetSpawnedEntities() : Get the list of the most recent spawned entities (userdata)
                           SetSpawnCallback                	= void SetSpawnCallback(handle hCallbackFunc, handle hCallbackScope)
SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array. (userdata)
                           DeleteCreatedSpawnGroups        	= void DeleteCreatedSpawnGroups()
DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this. (userdata)
                        }
                        IsNull                          	= function: 0x011c2bb8 (function)
                        SetSpawnCallback                	= function: 0x011c2d40 (function)
                        DeleteCreatedSpawnGroups        	= function: 0x011c2cc8 (function)
                     }
                     CDOTA_BaseNPC_Shop              	= table: 0x011b2df0 (table)
                     {
                        metatable                       	= table: 0x01190a18 (table, already seen)
                        FDesc                           	= table: 0x011b2e78 (table)
                        {
                           SetShopType                     	= void SetShopType(int eShopType)
Set the DOTA_SHOP_TYPE. (userdata)
                           GetShopType                     	= int GetShopType()
Get the DOTA_SHOP_TYPE (userdata)
                        }
                        IsNull                          	= function: 0x011b2e18 (function)
                        GetShopType                     	= function: 0x011b2f98 (function)
                        SetShopType                     	= function: 0x011b2ea0 (function)
                     }
                     CBodyComponent                  	= table: 0x0117b018 (table)
                     {
                        SetAnimation                    	= function: 0x0117b4c8 (function)
                        SetVelocity                     	= function: 0x0117b3d0 (function)
                        DetachFromParent                	= function: 0x0117b428 (function)
                        AddImpulseAtPosition            	= function: 0x0112bd70 (function)
                        LookupSequence                  	= function: 0x0117b638 (function)
                        SetMaterialGroup                	= function: 0x0117b530 (function)
                        SetAngularVelocity              	= function: 0x0117b068 (function)
                        AddVelocity                     	= function: 0x0112bc88 (function)
                        IsAttachedToParent              	= function: 0x0117b890 (function)
                        FDesc                           	= table: 0x0117b0a0 (table)
                        {
                           SetAnimation                    	= void SetAnimation(string)
Pass string for the animation to play on this model (userdata)
                           SetVelocity                     	= void SetVelocity(Vector)
 (userdata)
                           DetachFromParent                	= void DetachFromParent()
Detach from its parent (userdata)
                           AddImpulseAtPosition            	= void AddImpulseAtPosition(Vector, Vector)
Apply an impulse at a worldspace position to the physics (userdata)
                           SetMaterialGroup                	= void SetMaterialGroup(utlstringtoken)
 (userdata)
                           SetAngularVelocity              	= void SetAngularVelocity(Vector)
 (userdata)
                           LookupSequence                  	= int LookupSequence(string)
Returns a sequence id given a name
 (userdata)
                           AddVelocity                     	= void AddVelocity(Vector, Vector)
Add linear and angular velocity to the physics object (userdata)
                           SequenceDuration                	= float SequenceDuration(string)
Returns the duration in seconds of the specified sequence (userdata)
                           IsAttachedToParent              	= bool IsAttachedToParent()
Is attached to parent (userdata)
                           GetSequence                     	= int GetSequence()
Returns the active sequence
 (userdata)
                        }
                        IsNull                          	= function: 0x0117b040 (function)
                        SequenceDuration                	= function: 0x0117b6a8 (function)
                        GetSequence                     	= function: 0x0117b5b8 (function)
                     }
                     CCustomGameEventManager         	= table: 0x0120bf18 (table, already seen)
                     CCustomNetTableManager          	= table: 0x0120bb38 (table, already seen)
                     CDOTA_Buff                      	= table: 0x0112f2a0 (table)
                     {
                        StartIntervalThink              	= function: 0x01130498 (function)
                        GetRemainingTime                	= function: 0x0112ff08 (function)
                        GetLastAppliedTime              	= function: 0x01130728 (function)
                        AddParticle                     	= function: 0x011305a0 (function)
                        GetAuraDuration                 	= function: 0x011307b0 (function)
                        FDesc                           	= table: 0x0112f328 (table, already seen)
                        GetStackCount                   	= function: 0x0112fa00 (function)
                        GetDuration                     	= function: 0x0112fb80 (function)
                        IsDebuff                        	= function: 0x0112f5e8 (function)
                        CheckStateToTable               	= function: 0x0112f2f0 (function)
                        GetSerialNumber                 	= function: 0x01130830 (function)
                        SetDuration                     	= function: 0x01130520 (function)
                        GetAbility                      	= function: 0x011309b0 (function)
                        IsHexDebuff                     	= function: 0x0112f6e8 (function)
                        IncrementStackCount             	= function: 0x0112f8f0 (function)
                        HasFunction                     	= function: 0x0112f4d8 (function)
                        SendBuffRefreshToClients        	= function: 0x0112f558 (function)
                        SetStackCount                   	= function: 0x0112fa80 (function)
                        GetCreationTime                 	= function: 0x011306a8 (function)
                        GetElapsedTime                  	= function: 0x0112ff90 (function)
                        GetCaster                       	= function: 0x011308b0 (function)
                        GetDieTime                      	= function: 0x0112fb00 (function)
                        GetAuraOwner                    	= function: 0x01130398 (function)
                        ForceRefresh                    	= function: 0x01130318 (function)
                        Destroy                         	= function: 0x0112f428 (function)
                        IsNull                          	= function: 0x0112f2c8 (function)
                        DecrementStackCount             	= function: 0x0112f978 (function)
                        GetClass                        	= function: 0x0112f3a8 (function)
                        GetName                         	= function: 0x0112f350 (function)
                        SetOverheadEffectOffset         	= function: 0x01130620 (function)
                        GetParent                       	= function: 0x01130930 (function)
                        IsStunDebuff                    	= function: 0x0112f668 (function)
                        DestroyOnExpire                 	= function: 0x01130418 (function)
                     }
                     CBaseCombatCharacter            	= table: 0x01188280 (table, already seen)
                     CPointEntity                    	= table: 0x011b2518 (table, already seen)
                     CBaseTrigger                    	= table: 0x011aa438 (table, already seen)
                     CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble	= table: 0x011b3b90 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011b3c18 (table)
                        {
                           SetNumDoubles                   	= void SetNumDoubles(int nDoubles)
Sets the number of doubles to spawn. (userdata)
                        }
                        IsNull                          	= function: 0x011b3bb8 (function)
                        SetNumDoubles                   	= function: 0x011b3c40 (function)
                     }
                     CDOTAVoteSystem                 	= table: 0x01206520 (table, already seen)
                     CDOTAGameRules                  	= table: 0x011f9070 (table, already seen)
                     CDOTA_Item_Physical             	= table: 0x01148398 (table)
                     {
                        metatable                       	= table: 0x01186d00 (table, already seen)
                        GetContainedItem                	= function: 0x01148538 (function)
                        FDesc                           	= table: 0x01148420 (table)
                        {
                           GetCreationTime                 	= float GetCreationTime()
Returns the game time when this item was created in the world (userdata)
                           SetContainedItem                	= void SetContainedItem(handle hItem)
Set the contained item. (userdata)
                           GetContainedItem                	= handle GetContainedItem()
Returned the contained item. (userdata)
                        }
                        IsNull                          	= function: 0x011483c0 (function)
                        GetCreationTime                 	= function: 0x011485c0 (function)
                        SetContainedItem                	= function: 0x01148448 (function)
                     }
                     CScriptKeyValues                	= table: 0x011c3cd8 (table)
                     {
                        FDesc                           	= table: 0x011c3d60 (table)
                        {
                           GetValue                        	= table GetValue(string)
Reads a spawn key (userdata)
                        }
                        IsNull                          	= function: 0x011c3d00 (function)
                        GetValue                        	= function: 0x011c3d88 (function)
                     }
                     CDOTAPlayerController           	= table: 0x01190830 (table)
                     {
                        metatable                       	= table: 0x01186d00 (table, already seen)
                        CheckForCourierSpawning         	= function: 0x011bd8e0 (function)
                        SetKillCamUnit                  	= function: 0x011bddf8 (function)
                        SpawnCourierAtPosition          	= function: 0x01190880 (function)
                        MakeRandomHeroSelection         	= function: 0x011bda98 (function)
                        SetMusicStatus                  	= function: 0x011bd968 (function)
                        SetAssignedHeroEntity           	= function: 0x011bdc10 (function)
                        GetAssignedHero                 	= function: 0x011bd860 (function)
                        FDesc                           	= table: 0x011908b8 (table)
                        {
                           CheckForCourierSpawning         	= handle CheckForCourierSpawning(handle hHero)
Attempt to spawn the appropriate couriers for this mode. (userdata)
                           SetKillCamUnit                  	= void SetKillCamUnit(handle hEntity)
Set the kill cam unit for this hero. (userdata)
                           SetMusicStatus                  	= void SetMusicStatus(int nMusicStatus, float flIntensity)
(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off. (userdata)
                           MakeRandomHeroSelection         	= void MakeRandomHeroSelection()
Randoms this player's hero. (userdata)
                           GetAssignedHero                 	= handle GetAssignedHero()
Get the player's hero. (userdata)
                           GetPlayerID                     	= int GetPlayerID()
Get the player's official PlayerID; notably is -1 when the player isn't yet on a team. (userdata)
                           SetAssignedHeroEntity           	= void SetAssignedHeroEntity(handle hHero)
Sets this player's hero . (userdata)
                           SpawnCourierAtPosition          	= handle SpawnCourierAtPosition(Vector vLocation)
Spawn a courier for this player at the given position. (userdata)
                           SetSelectedHero                 	= void SetSelectedHero(string pszHeroName)
Sets this player's hero selection. (userdata)
                        }
                        IsNull                          	= function: 0x01190858 (function)
                        GetPlayerID                     	= function: 0x011908e0 (function)
                        SetSelectedHero                 	= function: 0x011bda08 (function)
                     }
                     CNativeOutputs                  	= table: 0x011c3930 (table)
                     {
                        FDesc                           	= table: 0x011c39b8 (table)
                        {
                           Init                            	= void Init(int)
Initialize with number of outputs (userdata)
                           AddOutput                       	= void AddOutput(string, string)
Add an output (userdata)
                        }
                        IsNull                          	= function: 0x011c3958 (function)
                        AddOutput                       	= function: 0x011c3ab0 (function)
                        Init                            	= function: 0x011c39e0 (function)
                     }
                     CEnvEntityMaker                 	= table: 0x011c1008 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        SpawnEntityAtNamedEntityOrigin  	= function: 0x011c1240 (function)
                        SpawnEntityAtLocation           	= function: 0x011c1138 (function)
                        FDesc                           	= table: 0x011c1090 (table)
                        {
                           SpawnEntityAtEntityOrigin       	= void SpawnEntityAtEntityOrigin(handle hEntity)
Create an entity at the location of a specified entity instance (userdata)
                           SpawnEntityAtNamedEntityOrigin  	= void SpawnEntityAtNamedEntityOrigin(string pszName)
Create an entity at the location of a named entity (userdata)
                           SpawnEntityAtLocation           	= void SpawnEntityAtLocation(Vector vecAlternateOrigin, Vector vecAlternateAngles)
Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll) (userdata)
                           SpawnEntity                     	= void SpawnEntity()
Create an entity at the location of the maker (userdata)
                        }
                        IsNull                          	= function: 0x011c1030 (function)
                        SpawnEntityAtEntityOrigin       	= function: 0x011c11b0 (function)
                        SpawnEntity                     	= function: 0x011c10b8 (function)
                     }
                     CInfoData                       	= table: 0x011c1fa0 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        QueryString                     	= function: 0x011c22e8 (function)
                        QueryInt                        	= function: 0x011c2148 (function)
                        QueryColor                      	= function: 0x011c20d0 (function)
                        QueryNumber                     	= function: 0x011c21c8 (function)
                        FDesc                           	= table: 0x011c2028 (table)
                        {
                           QueryString                     	= string QueryString(utlstringtoken tok, string pDefault)
Query string data for this key (userdata)
                           QueryNumber                     	= float QueryNumber(utlstringtoken tok, float flDefault)
Query number data for this key (userdata)
                           QueryInt                        	= int QueryInt(utlstringtoken tok, int nDefault)
Query int data for this key (userdata)
                           QueryColor                      	= Vector QueryColor(utlstringtoken tok, Vector vDefault)
Query color data for this key (userdata)
                           QueryVector                     	= Vector QueryVector(utlstringtoken tok, Vector vDefault)
Query vector data for this key (userdata)
                           QueryFloat                      	= float QueryFloat(utlstringtoken tok, float flDefault)
Query float data for this key (userdata)
                        }
                        IsNull                          	= function: 0x011c1fc8 (function)
                        QueryVector                     	= function: 0x011c2378 (function)
                        QueryFloat                      	= function: 0x011c2050 (function)
                     }
                     CInfoWorldLayer                 	= table: 0x011c3060 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011c30e8 (table)
                        {
                           ShowWorldLayer                  	= void ShowWorldLayer()
Shows this layer (userdata)
                           HideWorldLayer                  	= void HideWorldLayer()
Hides this layer (userdata)
                        }
                        IsNull                          	= function: 0x011c3088 (function)
                        HideWorldLayer                  	= function: 0x011c3208 (function)
                        ShowWorldLayer                  	= function: 0x011c3110 (function)
                     }
                     CBaseFlex                       	= table: 0x01150a50 (table, already seen)
                     CPhysicsProp                    	= table: 0x011c18f0 (table)
                     {
                        metatable                       	= table: 0x01186d00 (table, already seen)
                        SetDynamicVsDynamicContinuous   	= function: 0x011c1b18 (function)
                        EnableMotion                    	= function: 0x011c19a0 (function)
                        FDesc                           	= table: 0x011c1978 (table)
                        {
                           SetDynamicVsDynamicContinuous   	= void SetDynamicVsDynamicContinuous(bool bIsDynamicVsDynamicContinuousEnabled)
Enable/disable dynamic vs dynamic continuous collision traces (userdata)
                           EnableMotion                    	= void EnableMotion()
Enable motion for the prop (userdata)
                           DisableMotion                   	= void DisableMotion()
Disable motion for the prop (userdata)
                        }
                        IsNull                          	= function: 0x011c1918 (function)
                        DisableMotion                   	= function: 0x011c1a98 (function)
                     }
                     CDOTA_NeutralSpawner            	= table: 0x011b29a8 (table, already seen)
                     CPointClientUIWorldPanel        	= table: 0x011c3380 (table)
                     {
                        metatable                       	= table: 0x01185970 (table, already seen)
                        RemoveCSSClasses                	= function: 0x011c3758 (function)
                        IsGrabbable                     	= function: 0x011c3430 (function)
                        AddCSSClasses                   	= function: 0x011c34b0 (function)
                        FDesc                           	= table: 0x011c3408 (table)
                        {
                           IsGrabbable                     	= bool IsGrabbable()
Returns whether this entity is grabbable. (userdata)
                           RemoveCSSClasses                	= void RemoveCSSClasses(string pszClasses)
Remove CSS class(es) from the panel (userdata)
                           AcceptUserInput                 	= void AcceptUserInput()
Tells the panel to accept user input. (userdata)
                           AddCSSClasses                   	= void AddCSSClasses(string pszClasses)
Adds CSS class(es) to the panel (userdata)
                           IgnoreUserInput                 	= void IgnoreUserInput()
Tells the panel to ignore user input. (userdata)
                        }
                        IsNull                          	= function: 0x011c33a8 (function)
                        IgnoreUserInput                 	= function: 0x011c3528 (function)
                        AcceptUserInput                 	= function: 0x011c35a8 (function)
                     }
                     CParticleSystem                 	= table: 0x011c14e8 (table)
                     {
                        metatable                       	= table: 0x01185970 (table, already seen)
                        FDesc                           	= table: 0x011c1570 (table)
                        {
                        }
                        IsNull                          	= function: 0x011c1510 (function)
                     }
                     CDOTA_Modifier_Lua              	= table: 0x011310f0 (table, already seen)
                     CBasePlayerController           	= table: 0x011c1688 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        FDesc                           	= table: 0x011c1710 (table)
                        {
                           GetPawn                         	= handle GetPawn()
GetPawn() : Returns the pawn for this controller (userdata)
                        }
                        IsNull                          	= function: 0x011c16b0 (function)
                        GetPawn                         	= function: 0x011c1738 (function)
                     }
                     CDOTA_Ability_Animation_Attack  	= table: 0x011afd40 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        FDesc                           	= table: 0x011afdc8 (table)
                        {
                           SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
                        }
                        IsNull                          	= function: 0x011afd68 (function)
                        SetPlaybackRate                 	= function: 0x011afdf0 (function)
                     }
                     CDOTA_PlayerResource            	= table: 0x011b5160 (table, already seen)
                     CLogicScript                    	= table: 0x011c0e70 (table, already seen)
                     CDOTA_Modifier_Lua_Horizontal_Motion	= table: 0x01133258 (table, already seen)
                     CDOTA_BaseNPC_Building          	= table: 0x01190a18 (table, already seen)
                     CDOTA_Unit_CustomGameAnnouncer  	= table: 0x011b1fe8 (table)
                     {
                        metatable                       	= table: 0x01188418 (table, already seen)
                        FDesc                           	= table: 0x011b2070 (table)
                        {
                           SetServerAuthoritative          	= void SetServerAuthoritative(bool bIsServerAuthoritative)
Determines whether response criteria is matched on server or client (userdata)
                        }
                        IsNull                          	= function: 0x011b2010 (function)
                        SetServerAuthoritative          	= function: 0x011b2098 (function)
                     }
                     Convars                         	= table: 0x01142f90 (table)
                     {
                        GetFloat                        	= function: 0x01143130 (function)
                        GetStr                          	= function: 0x011430b8 (function)
                        SetStr                          	= function: 0x01143228 (function)
                        GetDOTACommandClient            	= function: 0x011438a8 (function)
                        GetCommandClient                	= function: 0x01143428 (function)
                        SetInt                          	= function: 0x01143330 (function)
                        RegisterCommand                 	= function: 0x01143670 (function)
                        RegisterConvar                  	= function: 0x011433a8 (function)
                        SetBool                         	= function: 0x01143498 (function)
                        GetInt                          	= function: 0x01143040 (function)
                        SetFloat                        	= function: 0x011432c8 (function)
                        IsNull                          	= function: 0x01142fb8 (function)
                        GetBool                         	= function: 0x011431b0 (function)
                        FDesc                           	= table: 0x01143018 (table)
                        {
                           GetFloat                        	= table GetFloat(string)
GetFloat(name) : returns the convar as a float. May return null if no such convar. (userdata)
                           GetStr                          	= table GetStr(string)
GetStr(name) : returns the convar as a string. May return null if no such convar. (userdata)
                           SetStr                          	= void SetStr(string, string)
SetStr(name, val) : sets the value of the convar to the string. (userdata)
                           SetInt                          	= void SetInt(string, int)
SetInt(name, val) : sets the value of the convar to the int. (userdata)
                           RegisterCommand                 	= void RegisterCommand(string, handle, string, int)
RegisterCommand(name, fn, helpString, flags) : register a console command. (userdata)
                           GetDOTACommandClient            	= handle GetDOTACommandClient()
GetDOTACommandClient() : returns the DOTA player who issued this console command. (userdata)
                           GetCommandClient                	= handle GetCommandClient()
GetCommandClient() : returns the player who issued this console command. (userdata)
                           GetInt                          	= table GetInt(string)
GetInt(name) : returns the convar as an int. May return null if no such convar. (userdata)
                           SetFloat                        	= void SetFloat(string, float)
SetFloat(name, val) : sets the value of the convar to the float. (userdata)
                           RegisterConvar                  	= void RegisterConvar(string, string, string, int)
RegisterConvar(name, defaultValue, helpString, flags): register a new console variable. (userdata)
                           GetBool                         	= table GetBool(string)
GetBool(name) : returns the convar as a boolean flag. (userdata)
                           SetBool                         	= void SetBool(string, bool)
SetBool(name, val) : sets the value of the convar to the bool. (userdata)
                        }
                     }
                     CDOTA_Unit_CustomGameAnnouncerAghanim	= table: 0x011bf440 (table, already seen)
                     CDOTA_Ability_Lua               	= table: 0x011a8148 (table)
                     {
                        metatable                       	= table: 0x0117bba8 (table, already seen)
                        CastFilterResult                	= function: 0x011f8740 (function)
                        GetCastPoint                    	= function: 0x011a8320 (function)
                        OnUpgrade                       	= function: 0x011a8ac0 (function)
                        OnProjectileThink_ExtraData     	= function: 0x011a92d0 (function)
                        IsHiddenAbilityCastable         	= function: 0x011a8a10 (function)
                        OnOwnerDied                     	= function: 0x011a8a68 (function)
                        GetBehavior                     	= function: 0x011a82c8 (function)
                        GetCustomCastError_Engine       	= function: 0x011a86a8 (function)
                        CastFilterResult_Engine         	= function: 0x011a89b8 (function)
                        OnChannelFinish                 	= function: 0x011a9050 (function)
                        IsNull                          	= function: 0x011a8170 (function)
                        GetCustomCastErrorTarget        	= function: 0x011a85f8 (function)
                        GetPlaybackRateOverride         	= function: 0x011aa2f8 (function)
                        GetChannelTime                  	= function: 0x011a8378 (function)
                        OnChannelThink                  	= function: 0x011a8888 (function)
                        OnOwnerSpawned                  	= function: 0x011a9360 (function)
                        GetCastRangeBonus               	= function: 0x011a8480 (function)
                        IsStealable                     	= function: 0x011a8ff0 (function)
                        SpeakTrigger                    	= function: 0x011aa2a0 (function)
                        GetAssociatedSecondaryAbilities 	= function: 0x011a8f40 (function)
                        RequiresFacing                  	= function: 0x011aa100 (function)
                        OnAbilityPhaseStart             	= function: 0x011a87d8 (function)
                        OnProjectileThinkHandle         	= function: 0x011a9248 (function)
                        IsRefreshable                   	= function: 0x011a9ff8 (function)
                        IsCosmetic                      	= function: 0x011aa158 (function)
                        GetAssociatedPrimaryAbilities   	= function: 0x011a8ee8 (function)
                        GetCastRange                    	= function: 0x011a8250 (function)
                        OtherAbilitiesAlwaysInterruptChanneling	= function: 0x011aa1b0 (function)
                        GetCustomCastErrorLocation      	= function: 0x011a8650 (function)
                        ResetToggleOnRespawn            	= function: 0x011aa0a8 (function)
                        ProcsMagicStick                 	= function: 0x011aa050 (function)
                        IsHiddenWhenStolen              	= function: 0x011a9fa0 (function)
                        OnUnStolen                      	= function: 0x011a8cd0 (function)
                        GetEffectiveCastRange           	= function: 0x011a8418 (function)
                        OnInventoryContentsChanged      	= function: 0x011a8b70 (function)
                        GetConceptRecipientType         	= function: 0x011aa248 (function)
                        GetChannelAnimation             	= function: 0x011a8e60 (function)
                        GetCastAnimation                	= function: 0x011a8dd8 (function)
                        CastFilterResultLocation        	= function: 0x011a8960 (function)
                        OnHeroCalculateStatBonus        	= function: 0x011a8c20 (function)
                        OnHeroDiedNearby                	= function: 0x011a8d28 (function)
                        OnStolen                        	= function: 0x011a8c78 (function)
                        OnAbilityPinged                 	= function: 0x011a8d80 (function)
                        GetManaCost                     	= function: 0x011a85a0 (function)
                        GetCooldown                     	= function: 0x011a8530 (function)
                        OnProjectileHitHandle           	= function: 0x011a9168 (function)
                        OnItemEquipped                  	= function: 0x011a8bc8 (function)
                        OnSpellStart                    	= function: 0x011a8780 (function)
                        OnProjectileThink               	= function: 0x011a91f0 (function)
                        GetChannelledManaCostPerSecond  	= function: 0x011a83d0 (function)
                        CastFilterResultTarget          	= function: 0x011a8908 (function)
                        OnHeroLevelUp                   	= function: 0x011a8b18 (function)
                        GetGoldCost                     	= function: 0x011a84d8 (function)
                        OnAbilityPhaseInterrupted       	= function: 0x011a8830 (function)
                        GetCustomCastError              	= function: 0x011f8760 (function)
                        OnToggle                        	= function: 0x011a8700 (function)
                        GetIntrinsicModifierName        	= function: 0x011a8f98 (function)
                        GetAOERadius                    	= function: 0x011a81f8 (function)
                        FDesc                           	= table: 0x011a81d0 (table)
                        {
                           CastFilterResult                	= int CastFilterResult()
Determine whether an issued command with no target is valid. (userdata)
                           GetCastPoint                    	= float GetCastPoint()
Return cast point of this ability. (userdata)
                           OnUpgrade                       	= void OnUpgrade()
Ability gained a level. (userdata)
                           OnProjectileThink_ExtraData     	= void OnProjectileThink_ExtraData(Vector vLocation, handle table)
(Vector vLocation, table kv ) Projectile is actively moving. (userdata)
                           IsHiddenAbilityCastable         	= bool IsHiddenAbilityCastable()
Returns true if this ability can be used when not on the action panel. (userdata)
                           OnOwnerDied                     	= void OnOwnerDied()
Caster died. (userdata)
                           GetBehavior                     	= uint64 GetBehavior()
Return cast behavior type of this ability. (userdata)
                           OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
(bool bInterrupted) Channel finished. (userdata)
                           GetCastAnimation                	= int GetCastAnimation()
Return casting animation of this ability. (userdata)
                           GetCustomCastErrorTarget        	= string GetCustomCastErrorTarget(handle hTarget)
(HSCRIPT hTarget) Return the error string of a failed command on a target. (userdata)
                           GetChannelTime                  	= float GetChannelTime()
Return the channel time of this ability. (userdata)
                           OnChannelThink                  	= void OnChannelThink(float flInterval)
(float flInterval) Channeling is taking place. (userdata)
                           OnOwnerSpawned                  	= void OnOwnerSpawned()
Caster respawned or spawned for the first time. (userdata)
                           GetCastRangeBonus               	= int GetCastRangeBonus(handle hTarget, int iPseudoCastRange)
 (userdata)
                           IsStealable                     	= bool IsStealable()
Returns true if this ability can be stolen by Spell Steal. (userdata)
                           GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
Return the animation rate of the cast animation. (userdata)
                           SpeakTrigger                    	= int SpeakTrigger()
Return the type of speech used. (userdata)
                           OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
Cast time begins (return true for successful cast). (userdata)
                           OnProjectileThinkHandle         	= void OnProjectileThinkHandle(int iProjectileHandle)
(int nProjectileHandle) Projectile is actively moving. (userdata)
                           IsRefreshable                   	= bool IsRefreshable()
Returns true if this ability is refreshed by Refresher Orb. (userdata)
                           IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
Returns true if this ability is hidden when stolen by Spell Steal. (userdata)
                           GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
Returns abilities that are stolen simultaneously, or otherwise related in functionality. (userdata)
                           GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability. (userdata)
                           OtherAbilitiesAlwaysInterruptChanneling	= bool OtherAbilitiesAlwaysInterruptChanneling()
 (userdata)
                           GetCustomCastErrorLocation      	= string GetCustomCastErrorLocation(Vector vLocation)
(Vector vLocation) Return the error string of a failed command on a location. (userdata)
                           IsCosmetic                      	= bool IsCosmetic(handle hEntity)
Is this a cosmetic only ability? (userdata)
                           RequiresFacing                  	= bool RequiresFacing()
Does this ability need the caster to face the target before executing? (userdata)
                           ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
Returns true if this ability should return to the default toggle state when its parent respawns. (userdata)
                           OnUnStolen                      	= void OnUnStolen()
Special behavior when lost by Spell Steal. (userdata)
                           ProcsMagicStick                 	= bool ProcsMagicStick()
Returns true if this ability will generate magic stick charges for nearby enemies. (userdata)
                           OnInventoryContentsChanged      	= void OnInventoryContentsChanged()
Caster inventory changed. (userdata)
                           GetConceptRecipientType         	= int GetConceptRecipientType()
Return who hears speech when this spell is cast. (userdata)
                           GetCustomCastError              	= string GetCustomCastError()
Return the error string of a failed command with no target. (userdata)
                           GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities. (userdata)
                           CastFilterResultLocation        	= int CastFilterResultLocation(Vector vLocation)
(Vector vLocation) Determine whether an issued command on a location is valid. (userdata)
                           GetChannelAnimation             	= int GetChannelAnimation()
Return channel animation of this ability. (userdata)
                           OnStolen                        	= void OnStolen(handle hSourceAbility)
( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal. (userdata)
                           OnHeroDiedNearby                	= void OnHeroDiedNearby(handle unit, handle attacker, handle table)
A hero has died in the vicinity (ie Urn), takes table of params. (userdata)
                           OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
The ability was pinged (nPlayerID, bCtrlHeld). (userdata)
                           GetManaCost                     	= int GetManaCost(int iLevel)
Return mana cost at the given level (-1 is current). (userdata)
                           GetCooldown                     	= float GetCooldown(int iLevel)
Return cooldown of this ability. (userdata)
                           OnProjectileHitHandle           	= bool OnProjectileHitHandle(handle hTarget, Vector vLocation, int iProjectileHandle)
(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
                           OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
Caster (hero only) gained a level, skilled an ability, or received a new stat bonus. (userdata)
                           OnSpellStart                    	= void OnSpellStart()
Cast time finished, spell effects begin. (userdata)
                           OnProjectileThink               	= void OnProjectileThink(Vector vLocation)
(Vector vLocation) Projectile is actively moving. (userdata)
                           GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
Return mana cost at the given level per second while channeling (-1 is current). (userdata)
                           CastFilterResultTarget          	= int CastFilterResultTarget(handle hTarget)
(HSCRIPT hTarget) Determine whether an issued command on a target is valid. (userdata)
                           OnItemEquipped                  	= void OnItemEquipped(handle hItem)
( HSCRIPT hItem ) Caster equipped item. (userdata)
                           OnHeroLevelUp                   	= void OnHeroLevelUp()
Caster gained a level. (userdata)
                           GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability, accounting for modifiers. (userdata)
                           GetGoldCost                     	= int GetGoldCost(int iLevel)
Return gold cost at the given level (-1 is current). (userdata)
                           OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
Cast time did not complete successfully. (userdata)
                           GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
Returns the name of the modifier applied passively by this ability. (userdata)
                           OnToggle                        	= void OnToggle()
Ability is toggled on/off. (userdata)
                           GetAOERadius                    	= float GetAOERadius()
Controls the size of the AOE casting cursor. (userdata)
                           OnProjectileHit_ExtraData       	= bool OnProjectileHit_ExtraData(handle hTarget, Vector vLocation, handle table)
(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
                           OnProjectileHit                 	= bool OnProjectileHit(handle hTarget, Vector vLocation)
(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
                        }
                        OnProjectileHit_ExtraData       	= function: 0x011a90d8 (function)
                        OnProjectileHit                 	= function: 0x011a9080 (function)
                     }
                     CDOTABaseAbility                	= table: 0x0117bba8 (table, already seen)
                     CDOTA_ShopTrigger               	= table: 0x011b3108 (table, already seen)
                     GridNav                         	= table: 0x0112c098 (table)
                     {
                        FindPathLength                  	= function: 0x0112c828 (function)
                        CanFindPath                     	= function: 0x0112c620 (function)
                        GridPosToWorldCenterX           	= function: 0x0112c2b0 (function)
                        WorldToGridPosY                 	= function: 0x0112c230 (function)
                        DestroyTreesAroundPoint         	= function: 0x0112cb30 (function)
                        IsBlocked                       	= function: 0x0112c458 (function)
                        IsNearbyTree                    	= function: 0x0112c8a8 (function)
                        GetAllTreesAroundPoint          	= function: 0x0112cbb8 (function)
                        IsTraversable                   	= function: 0x0112c5a0 (function)
                        WorldToGridPosX                 	= function: 0x0112c148 (function)
                        FDesc                           	= table: 0x0112c120 (table)
                        {
                           FindPathLength                  	= float FindPathLength(Vector, Vector)
Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd ) (userdata)
                           GridPosToWorldCenterX           	= float GridPosToWorldCenterX(int)
Get the X position of the center of a given X index (userdata)
                           WorldToGridPosY                 	= int WorldToGridPosY(float)
Get the Y index of a given world Y position (userdata)
                           IsTraversable                   	= bool IsTraversable(Vector)
Checks whether the given position is traversable (userdata)
                           DestroyTreesAroundPoint         	= void DestroyTreesAroundPoint(Vector, float, bool)
Destroy all trees in the area(vPosition, flRadius, bFullCollision (userdata)
                           GetAllTreesAroundPoint          	= table GetAllTreesAroundPoint(Vector, float, bool)
Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision). (userdata)
                           IsBlocked                       	= bool IsBlocked(Vector)
Checks whether the given position is blocked (userdata)
                           WorldToGridPosX                 	= int WorldToGridPosX(float)
Get the X index of a given world X position (userdata)
                           IsNearbyTree                    	= bool IsNearbyTree(Vector, float, bool)
(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point (userdata)
                           CanFindPath                     	= bool CanFindPath(Vector, Vector)
Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd) (userdata)
                           GridPosToWorldCenterY           	= float GridPosToWorldCenterY(int)
Get the Y position of the center of a given Y index (userdata)
                           RegrowAllTrees                  	= void RegrowAllTrees()
Causes all trees in the map to regrow (userdata)
                        }
                        IsNull                          	= function: 0x0112c0c0 (function)
                        GridPosToWorldCenterY           	= function: 0x0112c0e8 (function)
                        RegrowAllTrees                  	= function: 0x0112cab0 (function)
                     }
                     CDOTA_BaseNPC_Hero              	= table: 0x011aac60 (table)
                     {
                        metatable                       	= table: 0x01188418 (table, already seen)
                        GetDenies                       	= function: 0x011adaf0 (function)
                        GetIntellect                    	= function: 0x011abab0 (function)
                        GetRespawnsDisabled             	= function: 0x011acdd0 (function)
                        ShouldDoFlyHeightVisual         	= function: 0x0117b1b8 (function)
                        GetPlayerID                     	= function: 0x011ab318 (function)
                        GetLastHits                     	= function: 0x011ada70 (function)
                        GetBaseAgility                  	= function: 0x011abbb0 (function)
                        IsReincarnating                 	= function: 0x011af5b8 (function)
                        FDesc                           	= table: 0x011aace8 (table)
                        {
                           GetDenies                       	= int GetDenies()
Value is stored in PlayerResource. (userdata)
                           GetIntellect                    	= float GetIntellect()
 (userdata)
                           GetRespawnsDisabled             	= bool GetRespawnsDisabled()
Is this hero prevented from respawning? (userdata)
                           ShouldDoFlyHeightVisual         	= bool ShouldDoFlyHeightVisual()
 (userdata)
                           GetPlayerID                     	= int GetPlayerID()
Returns player ID of the player owning this hero (userdata)
                           GetLastHits                     	= int GetLastHits()
Value is stored in PlayerResource. (userdata)
                           GetBaseAgility                  	= float GetBaseAgility()
 (userdata)
                           IsReincarnating                 	= bool IsReincarnating()
 (userdata)
                           GetHeroID                       	= int GetHeroID()
 (userdata)
                           SetBotDifficulty                	= void SetBotDifficulty(int nDifficulty)
 (userdata)
                           IncrementLastHitMultikill       	= void IncrementLastHitMultikill()
Value is stored in PlayerResource. (userdata)
                           RespawnHero                     	= void RespawnHero(bool bBuyBack, bool bRespawnPenalty)
Respawn this hero. (userdata)
                           GetBaseStrength                 	= float GetBaseStrength()
 (userdata)
                           GetDeathGoldCost                	= int GetDeathGoldCost()
 (userdata)
                           GetNumItemsInStash              	= int GetNumItemsInStash()
 (userdata)
                           ClearLastHitMultikill           	= void ClearLastHitMultikill()
Value is stored in PlayerResource. (userdata)
                           ModifyGold                      	= int ModifyGold(int iGoldChange, bool bReliable, int iReason)
Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason (userdata)
                           GetPrimaryStatValue             	= float GetPrimaryStatValue()
 (userdata)
                           ClearStreak                     	= void ClearStreak()
Value is stored in PlayerResource. (userdata)
                           SetStashEnabled                 	= void SetStashEnabled(bool bEnabled)
 (userdata)
                           GetAgility                      	= float GetAgility()
 (userdata)
                           SetBuybackGoldLimitTime         	= void SetBuybackGoldLimitTime(float flTime)
Set the amount of time gold gain is limited after buying back. (userdata)
                           CalculateStatBonus              	= void CalculateStatBonus(bool bForce)
Recalculate all stats after the hero gains stats. (userdata)
                           GetBuybackCooldownTime          	= float GetBuybackCooldownTime()
Return float value for the amount of time left on cooldown for this hero's buyback. (userdata)
                           GetGoldBounty                   	= int GetGoldBounty()
 (userdata)
                           IncrementStreak                 	= void IncrementStreak()
Value is stored in PlayerResource. (userdata)
                           IsStashEnabled                  	= bool IsStashEnabled()
 (userdata)
                           IsBuybackDisabledByReapersScythe	= bool IsBuybackDisabledByReapersScythe()
 (userdata)
                           SetRespawnPosition              	= void SetRespawnPosition(Vector vOrigin)
 (userdata)
                           GetReplicatingOtherHero         	= handle GetReplicatingOtherHero()
 (userdata)
                           Buyback                         	= void Buyback()
Spend the gold and buyback with this hero. (userdata)
                           GetBaseManaRegen                	= float GetBaseManaRegen()
Returns the base mana regen. (userdata)
                           GetBuybackCost                  	= int GetBuybackCost(bool bReturnOldValues)
Return integer value for the gold cost of a buyback. (userdata)
                           GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed()
Hero attack speed is also affected by agility. (userdata)
                           CanEarnGold                     	= bool CanEarnGold()
Returns boolean value result of buyback gold limit time less than game time. (userdata)
                           GetStrength                     	= float GetStrength()
 (userdata)
                           GetAgilityGain                  	= float GetAgilityGain()
 (userdata)
                           GetNumAttackers                 	= int GetNumAttackers()
 (userdata)
                           GetCurrentXP                    	= int GetCurrentXP()
Returns the amount of XP  (userdata)
                           PerformTaunt                    	= void PerformTaunt()
 (userdata)
                           SetPrimaryAttribute             	= void SetPrimaryAttribute(int nPrimaryAttribute)
Set this hero's primary attribute value. (userdata)
                           SpendGold                       	= void SpendGold(int iCost, int iReason)
Args: int nGold, int nReason (userdata)
                           SetAbilityPoints                	= void SetAbilityPoints(int iPoints)
Sets the current unspent ability points. (userdata)
                           GetNumItemsInInventory          	= int GetNumItemsInInventory()
 (userdata)
                           ModifyIntellect                 	= void ModifyIntellect(float flNewIntellect)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
                           HasAnyAvailableInventorySpace   	= bool HasAnyAvailableInventorySpace()
 (userdata)
                           HasRoomForItem                  	= int HasRoomForItem(string pItemName, bool bIncludeStashCombines, bool bAllowSelling)
Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling (userdata)
                           SetBaseAgility                  	= void SetBaseAgility(float flAgility)
 (userdata)
                           SetTimeUntilRespawn             	= void SetTimeUntilRespawn(float time)
 (userdata)
                           GetTimeUntilRespawn             	= float GetTimeUntilRespawn()
 (userdata)
                           SetGold                         	= void SetGold(int iGold, bool bReliable)
Sets the gold amount for the player owning this hero (userdata)
                           GetBaseDamageMin                	= int GetBaseDamageMin()
Hero damage is also affected by attributes. (userdata)
                           KilledHero                      	= void KilledHero(handle hHero, handle hInflictor)
Args: Hero, Inflictor (userdata)
                           GetAbilityPoints                	= int GetAbilityPoints()
Gets the current unspent ability points. (userdata)
                           GetAttacker                     	= int GetAttacker(int nIndex)
 (userdata)
                           GetAssists                      	= int GetAssists()
Value is stored in PlayerResource. (userdata)
                           SetBuybackCooldownTime          	= void SetBuybackCooldownTime(float flTime)
Sets the buyback cooldown time. (userdata)
                           GetDeaths                       	= int GetDeaths()
Value is stored in PlayerResource. (userdata)
                           GetGold                         	= int GetGold()
Returns gold amount for the player owning this hero (userdata)
                           UpgradeAbility                  	= void UpgradeAbility(handle hAbility)
This upgrades the passed ability if it exists and the hero has enough ability points. (userdata)
                           IncrementKills                  	= void IncrementKills(int iVictimID)
Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource. (userdata)
                           GetPrimaryAttribute             	= int GetPrimaryAttribute()
0 = strength, 1 = agility, 2 = intelligence. (userdata)
                           IncrementAssists                	= void IncrementAssists(int iKillerID)
Value is stored in PlayerResource. (userdata)
                           HasFlyingVision                 	= bool HasFlyingVision()
 (userdata)
                           ModifyGoldFiltered              	= int ModifyGoldFiltered(int iGoldChange, bool bReliabe, int iReason)
Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason (userdata)
                           GetKills                        	= int GetKills()
Value is stored in PlayerResource. (userdata)
                           IncrementNearbyCreepDeaths      	= void IncrementNearbyCreepDeaths()
Value is stored in PlayerResource. (userdata)
                           GetMultipleKillCount            	= int GetMultipleKillCount()
 (userdata)
                           HasOwnerAbandoned               	= bool HasOwnerAbandoned()
 (userdata)
                           WillReincarnate                 	= bool WillReincarnate()
 (userdata)
                           AddExperience                   	= bool AddExperience(float flXP, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal)
Params: Float XP, Bool applyBotDifficultyScaling (userdata)
                           GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
Hero armor is affected by attributes. (userdata)
                           RecordLastHit                   	= void RecordLastHit()
 (userdata)
                           IncrementLastHits               	= void IncrementLastHits()
Value is stored in PlayerResource. (userdata)
                           HeroLevelUp                     	= void HeroLevelUp(bool bPlayEffects)
Levels up the hero, true or false to play effects. (userdata)
                           SetCustomDeathXP                	= void SetCustomDeathXP(int iValue)
Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work! (userdata)
                           SetBuyBackDisabledByReapersScythe	= void SetBuyBackDisabledByReapersScythe(bool bBuybackDisabled)
 (userdata)
                           GetBuybackGoldLimitTime         	= float GetBuybackGoldLimitTime()
Returns the amount of time gold gain is limited after buying back. (userdata)
                           GetAdditionalOwnedUnits         	= table GetAdditionalOwnedUnits()
 (userdata)
                           GetStreak                       	= int GetStreak()
Value is stored in PlayerResource. (userdata)
                           GetMostRecentDamageTime         	= float GetMostRecentDamageTime()
 (userdata)
                           SetBaseStrength                 	= void SetBaseStrength(float flStrength)
 (userdata)
                           SetRespawnsDisabled             	= void SetRespawnsDisabled(bool bDisableRespawns)
Prevent this hero from respawning. (userdata)
                           GetTogglableWearable            	= handle GetTogglableWearable(int nSlotType)
Get wearable entity in slot (slot) (userdata)
                           SetBaseIntellect                	= void SetBaseIntellect(float flIntellect)
 (userdata)
                           GetStrengthGain                 	= float GetStrengthGain()
 (userdata)
                           IncrementDeaths                 	= void IncrementDeaths(int iKillerID)
Value is stored in PlayerResource. (userdata)
                           ModifyAgility                   	= void ModifyAgility(float flNewAgility)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
                           ModifyStrength                  	= void ModifyStrength(float flNewStrength)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
                           GetIntellectGain                	= float GetIntellectGain()
 (userdata)
                           GetRespawnTime                  	= float GetRespawnTime()
 (userdata)
                           GetBaseDamageMax                	= int GetBaseDamageMax()
Hero damage is also affected by attributes. (userdata)
                           GetBaseIntellect                	= float GetBaseIntellect()
 (userdata)
                           SetPlayerID                     	= void SetPlayerID(int iPlayerID)
 (userdata)
                           ClearLastHitStreak              	= void ClearLastHitStreak()
Value is stored in PlayerResource. (userdata)
                           GetBonusDamageFromPrimaryStat   	= int GetBonusDamageFromPrimaryStat()
 (userdata)
                           IncrementDenies                 	= void IncrementDenies()
Value is stored in PlayerResource. (userdata)
                           IncrementLastHitStreak          	= void IncrementLastHitStreak()
Value is stored in PlayerResource. (userdata)
                        }
                        GetHeroID                       	= function: 0x0117b128 (function)
                        SetBotDifficulty                	= function: 0x011af7a0 (function)
                        IncrementLastHitMultikill       	= function: 0x011ad7d8 (function)
                        RespawnHero                     	= function: 0x011ab9d8 (function)
                        GetBaseStrength                 	= function: 0x011abb30 (function)
                        GetDeathGoldCost                	= function: 0x0117b298 (function)
                        GetNumItemsInStash              	= function: 0x011acff0 (function)
                        ClearLastHitMultikill           	= function: 0x011ad868 (function)
                        ModifyGold                      	= function: 0x011ac770 (function)
                        GetPrimaryStatValue             	= function: 0x011aca58 (function)
                        ClearStreak                     	= function: 0x011ac568 (function)
                        SetStashEnabled                 	= function: 0x011af8b0 (function)
                        GetAgility                      	= function: 0x011ac4e8 (function)
                        SetBuybackGoldLimitTime         	= function: 0x011ac230 (function)
                        CalculateStatBonus              	= function: 0x0117b0c8 (function)
                        GetBuybackCooldownTime          	= function: 0x011ac098 (function)
                        IncrementDeaths_Engine          	= function: 0x011ad3a8 (function)
                        GetGoldBounty                   	= function: 0x011acae0 (function)
                        AddExperience_Engine            	= function: 0x011ab398 (function)
                        IncrementStreak                 	= function: 0x011adb70 (function)
                        IsStashEnabled                  	= function: 0x011af930 (function)
                        SetRespawnPosition              	= function: 0x011af828 (function)
                        IsBuybackDisabledByReapersScythe	= function: 0x011ac3d0 (function)
                        GetReplicatingOtherHero         	= function: 0x011af718 (function)
                        GetBuybackGoldLimitTime         	= function: 0x011ac1a8 (function)
                        GetIncreasedAttackSpeed         	= function: 0x011ab6e8 (function)
                        GetBaseManaRegen                	= function: 0x011ab5b8 (function)
                        GetBuybackCost                  	= function: 0x011ab7e8 (function)
                        PerformTaunt                    	= function: 0x011af4b8 (function)
                        CanEarnGold                     	= function: 0x011ac2b8 (function)
                        GetStrength                     	= function: 0x011ac468 (function)
                        GetAgilityGain                  	= function: 0x011abec0 (function)
                        GetNumAttackers                 	= function: 0x011acb38 (function)
                        GetCurrentXP                    	= function: 0x011af538 (function)
                        SetPrimaryAttribute             	= function: 0x011af430 (function)
                        ModifyGoldFiltered              	= function: 0x011ac7f0 (function)
                        GetNumItemsInInventory          	= function: 0x011ad078 (function)
                        SetAbilityPoints                	= function: 0x011ab8c8 (function)
                        HasAnyAvailableInventorySpace   	= function: 0x011acf60 (function)
                        ModifyIntellect                 	= function: 0x011ad1a0 (function)
                        HasRoomForItem                  	= function: 0x011acee0 (function)
                        IsNull                          	= function: 0x011aac88 (function)
                        SetTimeUntilRespawn             	= function: 0x011acd48 (function)
                        GetTimeUntilRespawn             	= function: 0x011accc0 (function)
                        Buyback                         	= function: 0x011ab770 (function)
                        SetGold                         	= function: 0x011ac878 (function)
                        GetAttacker                     	= function: 0x011acbb8 (function)
                        KilledHero                      	= function: 0x011ac6f0 (function)
                        GetAbilityPoints                	= function: 0x011ab418 (function)
                        ClearLastHitStreak              	= function: 0x011ad750 (function)
                        GetAssists                      	= function: 0x011ad9f0 (function)
                        GetGold                         	= function: 0x011ac950 (function)
                        GetDeaths                       	= function: 0x011ad970 (function)
                        SpendGold                       	= function: 0x011ac8d0 (function)
                        UpgradeAbility                  	= function: 0x011ab718 (function)
                        IncrementKills                  	= function: 0x011ad328 (function)
                        GetPrimaryAttribute             	= function: 0x011ad100 (function)
                        IncrementAssists                	= function: 0x011ad428 (function)
                        IncrementLastHitStreak          	= function: 0x011ad6c8 (function)
                        GetMultipleKillCount            	= function: 0x011ac668 (function)
                        GetKills                        	= function: 0x011ad8f0 (function)
                        IncrementNearbyCreepDeaths      	= function: 0x011ad5b8 (function)
                        HasFlyingVision                 	= function: 0x0117b240 (function)
                        HasOwnerAbandoned               	= function: 0x011af690 (function)
                        WillReincarnate                 	= function: 0x011af610 (function)
                        AddExperience                   	= function: 0x011f8640 (function)
                        GetPhysicalArmorBaseValue       	= function: 0x011ab560 (function)
                        RecordLastHit                   	= function: 0x011ad648 (function)
                        IncrementLastHits               	= function: 0x011ad4b0 (function)
                        SetCustomDeathXP                	= function: 0x011ab950 (function)
                        GetBaseDamageMin                	= function: 0x011aba58 (function)
                        SetBuyBackDisabledByReapersScythe	= function: 0x011ac338 (function)
                        ModifyAgility                   	= function: 0x011ac048 (function)
                        GetAdditionalOwnedUnits         	= function: 0x011ad2a0 (function)
                        GetStreak                       	= function: 0x011ac5e8 (function)
                        GetMostRecentDamageTime         	= function: 0x011acc38 (function)
                        SetBaseAgility                  	= function: 0x011abd38 (function)
                        SetRespawnsDisabled             	= function: 0x011ace58 (function)
                        GetTogglableWearable            	= function: 0x011aacb0 (function)
                        SetBaseStrength                 	= function: 0x011abcb8 (function)
                        GetStrengthGain                 	= function: 0x011abe40 (function)
                        IncrementDeaths                 	= function: 0x011f8660 (function)
                        SetBaseIntellect                	= function: 0x011abdb8 (function)
                        ModifyStrength                  	= function: 0x011abfc8 (function)
                        GetIntellectGain                	= function: 0x011abf40 (function)
                        GetBaseDamageMax                	= function: 0x011ab508 (function)
                        HeroLevelUp                     	= function: 0x011ab668 (function)
                        GetBaseIntellect                	= function: 0x011abc30 (function)
                        SetPlayerID                     	= function: 0x011ab488 (function)
                        SetBuybackCooldownTime          	= function: 0x011ac120 (function)
                        GetBonusDamageFromPrimaryStat   	= function: 0x011ac9c8 (function)
                        IncrementDenies                 	= function: 0x011ad538 (function)
                        GetRespawnTime                  	= function: 0x011ad220 (function)
                     }
                     CDOTA_Item_Lua                  	= table: 0x01148790 (table)
                     {
                        metatable                       	= table: 0x0117ebf0 (table, already seen)
                        CastFilterResult                	= function: 0x01149240 (function)
                        OnUpgrade                       	= function: 0x01148dc0 (function)
                        IsHiddenAbilityCastable         	= function: 0x011a71d0 (function)
                        OnItemEquipped                  	= function: 0x01149028 (function)
                        OnHeroLevelUp                   	= function: 0x01148e18 (function)
                        OnChannelFinish                 	= function: 0x01149680 (function)
                        IsNull                          	= function: 0x011487b8 (function)
                        GetCustomCastErrorTarget        	= function: 0x011492c8 (function)
                        GetChannelTime                  	= function: 0x01148bf0 (function)
                        OnChannelThink                  	= function: 0x01149628 (function)
                        OnOwnerSpawned                  	= function: 0x01148b00 (function)
                        GetGoldCost                     	= function: 0x01148d68 (function)
                        IsStealable                     	= function: 0x011a70c8 (function)
                        CanUnitPickUp                   	= function: 0x011a72b0 (function)
                        OnAbilityPhaseStart             	= function: 0x01149578 (function)
                        OnAbilityPhaseInterrupted       	= function: 0x011495d0 (function)
                        IsRefreshable                   	= function: 0x011a7178 (function)
                        GetAssociatedPrimaryAbilities   	= function: 0x011a6fc0 (function)
                        GetCastRange                    	= function: 0x01148900 (function)
                        GetCustomCastErrorLocation      	= function: 0x01149358 (function)
                        OnUnStolen                      	= function: 0x01149180 (function)
                        OnInventoryContentsChanged      	= function: 0x01148e70 (function)
                        GetConceptRecipientType         	= function: 0x011a7330 (function)
                        GetPlaybackRateOverride         	= function: 0x011a73e0 (function)
                        SpeakTrigger                    	= function: 0x011a7388 (function)
                        CastFilterResultLocation        	= function: 0x011491b0 (function)
                        ProcsMagicStick                 	= function: 0x011a7258 (function)
                        IsHiddenWhenStolen              	= function: 0x011a7120 (function)
                        OnToggle                        	= function: 0x011494c8 (function)
                        GetAssociatedSecondaryAbilities 	= function: 0x011a7018 (function)
                        GetManaCost                     	= function: 0x011487e0 (function)
                        GetCooldown                     	= function: 0x01148f48 (function)
                        OnHeroCalculateStatBonus        	= function: 0x011490a8 (function)
                        OnChargeCountChanged            	= function: 0x011a6f38 (function)
                        OnSpellStart                    	= function: 0x01149520 (function)
                        OnProjectileThink               	= function: 0x01148c98 (function)
                        GetChannelledManaCostPerSecond  	= function: 0x01148d10 (function)
                        CastFilterResultTarget          	= function: 0x01148fa0 (function)
                        OnHeroDiedNearby                	= function: 0x011a6eb0 (function)
                        OnStolen                        	= function: 0x01149100 (function)
                        GetBehavior                     	= function: 0x01148840 (function)
                        IsMuted                         	= function: 0x01149470 (function)
                        GetCustomCastError              	= function: 0x011493e8 (function)
                        GetIntrinsicModifierName        	= function: 0x011a7070 (function)
                        GetEffectiveCastRange           	= function: 0x01148aa8 (function)
                        FDesc                           	= table: 0x01148818 (table)
                        {
                           CastFilterResult                	= int CastFilterResult()
Determine whether an issued command with no target is valid. (userdata)
                           OnUpgrade                       	= void OnUpgrade()
Ability gained a level. (userdata)
                           IsHiddenAbilityCastable         	= bool IsHiddenAbilityCastable()
Returns true if this ability can be used when not on the action panel. (userdata)
                           OnItemEquipped                  	= void OnItemEquipped(handle hItem)
( HSCRIPT hItem ) Caster equipped item. (userdata)
                           OnHeroLevelUp                   	= void OnHeroLevelUp()
Caster gained a level. (userdata)
                           IsMuted                         	= bool IsMuted()
Returns whether this item is muted or not. (userdata)
                           GetCustomCastErrorTarget        	= string GetCustomCastErrorTarget(handle hTarget)
(HSCRIPT hTarget) Return the error string of a failed command on a target. (userdata)
                           GetChannelTime                  	= float GetChannelTime()
Return the channel time of this ability. (userdata)
                           OnChannelThink                  	= void OnChannelThink(float flInterval)
(float flInterval) Channeling is taking place. (userdata)
                           OnOwnerSpawned                  	= void OnOwnerSpawned()
Caster respawned or spawned for the first time. (userdata)
                           GetGoldCost                     	= int GetGoldCost(int iLevel)
Return gold cost at the given level (-1 is current). (userdata)
                           IsStealable                     	= bool IsStealable()
Returns true if this ability can be stolen by Spell Steal. (userdata)
                           CanUnitPickUp                   	= bool CanUnitPickUp(handle hUnit)
Returns true if this item can be picked up by the target unit. (userdata)
                           OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
Cast time begins (return true for successful cast). (userdata)
                           OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
Cast time did not complete successfully. (userdata)
                           IsRefreshable                   	= bool IsRefreshable()
Returns true if this ability is refreshed by Refresher Orb. (userdata)
                           GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
Returns abilities that are stolen simultaneously, or otherwise related in functionality. (userdata)
                           GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability. (userdata)
                           GetCustomCastErrorLocation      	= string GetCustomCastErrorLocation(Vector vLocation)
(Vector vLocation) Return the error string of a failed command on a location. (userdata)
                           OnUnStolen                      	= void OnUnStolen()
Special behavior when lost by Spell Steal. (userdata)
                           OnInventoryContentsChanged      	= void OnInventoryContentsChanged()
Caster inventory changed. (userdata)
                           GetConceptRecipientType         	= int GetConceptRecipientType()
Return who hears speech when this spell is cast. (userdata)
                           GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
Return the animation rate of the cast animation. (userdata)
                           CastFilterResultLocation        	= int CastFilterResultLocation(Vector vLocation)
(Vector vLocation) Determine whether an issued command on a location is valid. (userdata)
                           SpeakTrigger                    	= int SpeakTrigger()
Return the type of speech used. (userdata)
                           ProcsMagicStick                 	= bool ProcsMagicStick()
Returns true if this ability will generate magic stick charges for nearby enemies. (userdata)
                           IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
Returns true if this ability is hidden when stolen by Spell Steal. (userdata)
                           GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability, taking modifiers into account. (userdata)
                           GetManaCost                     	= int GetManaCost(int iLevel)
Return mana cost at the given level (-1 is current). (userdata)
                           GetCooldown                     	= float GetCooldown(int iLevel)
Return cooldown of this ability. (userdata)
                           OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
Caster (hero only) gained a level, skilled an ability, or received a new stat bonus. (userdata)
                           GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities. (userdata)
                           OnSpellStart                    	= void OnSpellStart()
Cast time finished, spell effects begin. (userdata)
                           OnStolen                        	= void OnStolen(handle hSourceAbility)
( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal. (userdata)
                           GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
Return mana cost at the given level per second while channeling (-1 is current). (userdata)
                           CastFilterResultTarget          	= int CastFilterResultTarget(handle hTarget)
(HSCRIPT hTarget) Determine whether an issued command on a target is valid. (userdata)
                           OnChargeCountChanged            	= void OnChargeCountChanged()
Runs when item's charge count changes. (userdata)
                           OnHeroDiedNearby                	= void OnHeroDiedNearby(handle unit, handle attacker, handle table)
A hero has died in the vicinity (ie Urn), takes table of params. (userdata)
                           OnToggle                        	= void OnToggle()
Ability is toggled on/off. (userdata)
                           GetCustomCastError              	= string GetCustomCastError()
Return the error string of a failed command with no target. (userdata)
                           OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
(bool bInterrupted) Channel finished. (userdata)
                           GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
Returns the name of the modifier applied passively by this ability. (userdata)
                           OnOwnerDied                     	= void OnOwnerDied()
Caster died. (userdata)
                           OnProjectileThink               	= void OnProjectileThink(Vector vLocation)
(Vector vLocation) Projectile is actively moving. (userdata)
                           GetBehavior                     	= int GetBehavior()
Return cast behavior type of this ability. (userdata)
                           OnProjectileHit                 	= bool OnProjectileHit(handle hTarget, Vector vLocation)
(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
                        }
                        OnOwnerDied                     	= function: 0x01148b58 (function)
                        OnProjectileHit                 	= function: 0x01148898 (function)
                     }
                     CSceneEntity                    	= table: 0x011ab1d0 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        IsPaused                        	= function: 0x011c01e0 (function)
                        IsPlayingBack                   	= function: 0x011c0160 (function)
                        RemoveBroadcastTeamTarget       	= function: 0x011c04b0 (function)
                        LoadSceneFromString             	= function: 0x011c06a0 (function)
                        FindNamedEntity                 	= function: 0x011c0260 (function)
                        Start                           	= function: 0x011ab220 (function)
                        FindCamera                      	= function: 0x011c03c0 (function)
                        Cancel                          	= function: 0x011c0368 (function)
                        FDesc                           	= table: 0x011ab258 (table)
                        {
                           IsPaused                        	= bool IsPaused()
If this scene is currently paused. (userdata)
                           EstimateLength                  	= float EstimateLength()
Returns length of this scene in seconds. (userdata)
                           LoadSceneFromString             	= bool LoadSceneFromString(string, string)
given a dummy scene name and a vcd string, load the scene (userdata)
                           Start                           	= void Start(handle)
Start scene playback, takes activatorEntity as param (userdata)
                           FindCamera                      	= handle FindCamera()
Get the camera (userdata)
                           Cancel                          	= void Cancel()
Cancel scene playback (userdata)
                           IsPlayingBack                   	= bool IsPlayingBack()
If this scene is currently playing. (userdata)
                           AddBroadcastTeamTarget          	= void AddBroadcastTeamTarget(int)
Adds a team (by index) to the broadcast list (userdata)
                           RemoveBroadcastTeamTarget       	= void RemoveBroadcastTeamTarget(int)
Removes a team (by index) from the broadcast list (userdata)
                           FindNamedEntity                 	= handle FindNamedEntity(string)
given an entity reference, such as !target, get actual entity from scene object (userdata)
                        }
                        AddBroadcastTeamTarget          	= function: 0x011c0300 (function)
                        EstimateLength                  	= function: 0x011ab280 (function)
                        IsNull                          	= function: 0x011ab1f8 (function)
                     }
                     CScriptParticleManager          	= table: 0x0112e168 (table)
                     {
                        GetParticleReplacement          	= function: 0x0112e880 (function)
                        CreateParticle                  	= function: 0x0112e218 (function)
                        SetParticleControlFallback      	= function: 0x0112e7f0 (function)
                        ReleaseParticleIndex            	= function: 0x0112e400 (function)
                        FDesc                           	= table: 0x0112e1f0 (table)
                        {
                           SetParticleAlwaysSimulate       	= void SetParticleAlwaysSimulate(int)
 (userdata)
                           SetParticleControl              	= void SetParticleControl(int, int, Vector)
Set the control point data for a control on a particle effect (userdata)
                           CreateParticleForPlayer         	= int CreateParticleForPlayer(string, int, handle, handle)
Creates a new particle effect that only plays for the specified player (userdata)
                           GetParticleReplacement          	= string GetParticleReplacement(string, handle)
 (userdata)
                           SetParticleShouldCheckFoW       	= bool SetParticleShouldCheckFoW(int, bool)
int nfxindex, bool bCheckFoW (userdata)
                           SetParticleControlForward       	= void SetParticleControlForward(int, int, Vector)
(int nFXIndex, int nPoint, vForward) (userdata)
                           SetParticleFoWProperties        	= void SetParticleFoWProperties(int, int, int, float)
int nfxindex, int nPoint, int nPoint2, float flRadius (userdata)
                           DestroyParticle                 	= void DestroyParticle(int, bool)
(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps. (userdata)
                           CreateParticle                  	= int CreateParticle(string, int, handle)
Creates a new particle effect (userdata)
                           SetParticleControlFallback      	= void SetParticleControlFallback(int, int, Vector)
(int iIndex, int iPoint, Vector vecPosition) (userdata)
                           ReleaseParticleIndex            	= void ReleaseParticleIndex(int)
Frees the specified particle index (userdata)
                           SetParticleControlOrientationFLU	= void SetParticleControlOrientationFLU(int, int, Vector, Vector, Vector)
(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect (userdata)
                           SetParticleControlOrientation   	= void SetParticleControlOrientation(int, int, Vector, Vector, Vector)
(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!) (userdata)
                           SetParticleControlEnt           	= void SetParticleControlEnt(int, int, handle, int, string, Vector, bool)
 (userdata)
                           CreateParticleForTeam           	= int CreateParticleForTeam(string, int, handle, int)
Creates a new particle effect that only plays for the specified team (userdata)
                        }
                        SetParticleControlOrientation   	= function: 0x0112ea90 (function)
                        SetParticleShouldCheckFoW       	= function: 0x0112ecd8 (function)
                        SetParticleAlwaysSimulate       	= function: 0x0112e550 (function)
                        SetParticleControl              	= function: 0x0112e1b8 (function)
                        CreateParticleForPlayer         	= function: 0x0112e298 (function)
                        SetParticleControlForward       	= function: 0x0112ebb8 (function)
                        SetParticleFoWProperties        	= function: 0x0112ec48 (function)
                        DestroyParticle                 	= function: 0x0112ed68 (function)
                        SetParticleControlEnt           	= function: 0x0112e5e0 (function)
                        IsNull                          	= function: 0x0112e190 (function)
                        CreateParticleForTeam           	= function: 0x0112e320 (function)
                        SetParticleControlOrientationFLU	= function: 0x0112eb20 (function)
                     }
                     CDOTA_BaseNPC                   	= table: 0x01188418 (table, already seen)
                     CEntities                       	= table: 0x0113e640 (table)
                     {
                        First                           	= function: 0x01125fd8 (function)
                        FindAllByModel                  	= function: 0x0113eb28 (function)
                        GetLocalPlayerPawn              	= function: 0x011425c8 (function)
                        FindByName                      	= function: 0x0113eb70 (function)
                        FindInSphere                    	= function: 0x0113edf8 (function)
                        FDesc                           	= table: 0x0113e6c8 (table)
                        {
                           First                           	= handle First()
Begin an iteration over the list of entities (userdata)
                           FindAllByModel                  	= table FindAllByModel(string)
Find entities by model name. (userdata)
                           GetLocalPlayerPawn              	= handle GetLocalPlayerPawn()
Get the local player pawn. (userdata)
                           FindByName                      	= handle FindByName(handle, string)
Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           GetLocalPlayerController        	= handle GetLocalPlayerController()
Get the local player controller. (userdata)
                           FindAllByTarget                 	= table FindAllByTarget(string)
Find entities by targetname. (userdata)
                           FindAllByClassnameWithin        	= table FindAllByClassnameWithin(string, Vector, float)
Find entities by class name within a radius. (userdata)
                           FindByClassname                 	= handle FindByClassname(handle, string)
Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           FindAllByName                   	= table FindAllByName(string)
Find all entities by name. Returns an array containing all the found entities in it. (userdata)
                           FindByNameWithin                	= handle FindByNameWithin(handle, string, Vector, float)
Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           FindByClassnameNearest          	= handle FindByClassnameNearest(string, Vector, float)
Find entities by class name nearest to a point. (userdata)
                           FindByModel                     	= handle FindByModel(handle, string)
Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           FindAllByNameWithin             	= table FindAllByNameWithin(string, Vector, float)
Find entities by name within a radius. (userdata)
                           FindByClassnameWithin           	= handle FindByClassnameWithin(handle, string, Vector, float)
Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           FindByNameNearest               	= handle FindByNameNearest(string, Vector, float)
Find entities by name nearest to a point. (userdata)
                           FindInSphere                    	= handle FindInSphere(handle, Vector, float)
Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           FindAllByClassname              	= table FindAllByClassname(string)
Finds all entities by class name. Returns an array containing all the found entities. (userdata)
                           FindByTarget                    	= handle FindByTarget(handle, string)
Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                           CreateByClassname               	= handle CreateByClassname(string)
Creates an entity by classname (userdata)
                           GetLocalPlayer                  	= handle GetLocalPlayer()
Get the local player controller (backcompat). (userdata)
                           Next                            	= handle Next(handle)
Continue an iteration over the list of entities, providing reference to a previously found entity (userdata)
                           FindAllInSphere                 	= table FindAllInSphere(Vector, float)
Find entities within a radius. (userdata)
                           FindByModelWithin               	= handle FindByModelWithin(handle, string, Vector, float)
Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
                        }
                        FindAllByTarget                 	= function: 0x0113f100 (function)
                        FindAllByClassnameWithin        	= function: 0x01142d48 (function)
                        FindByNameNearest               	= function: 0x0113ed88 (function)
                        FindByClassname                 	= function: 0x0113e690 (function)
                        FindAllByName                   	= function: 0x0113ebf0 (function)
                        FindByClassnameNearest          	= function: 0x01142c38 (function)
                        FindByNameWithin                	= function: 0x0113ef50 (function)
                        FindByModel                     	= function: 0x0113eaa8 (function)
                        FindAllByNameWithin             	= function: 0x0113efd8 (function)
                        FindByClassnameWithin           	= function: 0x01142cc0 (function)
                        FindAllInSphere                 	= function: 0x0113ee78 (function)
                        GetLocalPlayerController        	= function: 0x0113ec70 (function)
                        FindAllByClassname              	= function: 0x0113ea20 (function)
                        FindByTarget                    	= function: 0x0113f080 (function)
                        IsNull                          	= function: 0x0113e668 (function)
                        GetLocalPlayer                  	= function: 0x0113e930 (function)
                        Next                            	= function: 0x0113e808 (function)
                        CreateByClassname               	= function: 0x0113e880 (function)
                        FindByModelWithin               	= function: 0x0113ed00 (function)
                     }
                     CDOTA_Item_EmptyBottle          	= table: 0x011aa828 (table, already seen)
                     SteamInfo                       	= table: 0x01144090 (table)
                     {
                        FDesc                           	= table: 0x01144118 (table)
                        {
                           IsPublicUniverse                	= bool IsPublicUniverse()
Is the script connected to the public Steam universe (userdata)
                        }
                        IsNull                          	= function: 0x011440b8 (function)
                        IsPublicUniverse                	= function: 0x01144140 (function)
                     }
                     CScriptHeroList                 	= table: 0x01150ab0 (table)
                     {
                        GetHero                         	= function: 0x01125d20 (function)
                        GetAllHeroes                    	= function: 0x01125e60 (function)
                        FDesc                           	= table: 0x01150b38 (table)
                        {
                           GetHero                         	= handle GetHero(int)
Get the Nth hero in the Hero List (userdata)
                           GetAllHeroes                    	= table GetAllHeroes()
Returns all the heroes in the world (userdata)
                           GetHeroCount                    	= int GetHeroCount()
Returns the number of heroes in the world (userdata)
                        }
                        IsNull                          	= function: 0x01150ad8 (function)
                        GetHeroCount                    	= function: 0x01125de0 (function)
                     }
                     CDOTABaseGameMode               	= table: 0x01190d20 (table, already seen)
                     CDOTA_Ability_Nian_Leap         	= table: 0x011afaa0 (table, already seen)
                     CDotaSubquestBase               	= table: 0x011b45d8 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        SetTextReplaceString            	= function: 0x011b4810 (function)
                        FDesc                           	= table: 0x011b4660 (table)
                        {
                           SetTextReplaceString            	= void SetTextReplaceString(string pszString)
Set the text replace string for this subquest (userdata)
                           CompleteSubquest                	= void CompleteSubquest()
Mark this subquest complete (userdata)
                           SetTextReplaceValue             	= void SetTextReplaceValue(int valueSlot, int value)
Set a subquest value (userdata)
                        }
                        IsNull                          	= function: 0x011b4600 (function)
                        CompleteSubquest                	= function: 0x011b4688 (function)
                        SetTextReplaceValue             	= function: 0x011b4788 (function)
                     }
                     CBaseEntity                     	= table: 0x01137138 (table, already seen)
                     CDotaQuest                      	= table: 0x011b4a28 (table)
                     {
                        metatable                       	= table: 0x01137138 (table, already seen)
                        RemoveSubquest                  	= function: 0x011b4c50 (function)
                        SetTextReplaceValue             	= function: 0x011b4d70 (function)
                        SetTextReplaceString            	= function: 0x011b4f48 (function)
                        AddSubquest                     	= function: 0x011b4bd0 (function)
                        IsNull                          	= function: 0x011b4a50 (function)
                        FDesc                           	= table: 0x011b4ab0 (table)
                        {
                           SetTextReplaceString            	= void SetTextReplaceString(string pszString)
Set the text replace string for this quest (userdata)
                           SetTextReplaceValue             	= void SetTextReplaceValue(int valueSlot, int value)
Set a quest value (userdata)
                           RemoveSubquest                  	= void RemoveSubquest(handle hSubquest)
Remove a subquest from this quest (userdata)
                           AddSubquest                     	= void AddSubquest(handle hSubquest)
Add a subquest to this quest (userdata)
                           GetSubquest                     	= handle GetSubquest(int nIndex)
Finds a subquest from this quest by index (userdata)
                           GetSubquestByName               	= handle GetSubquestByName(string pszName)
Finds a subquest from this quest by name (userdata)
                           CompleteQuest                   	= void CompleteQuest()
Mark this quest complete (userdata)
                        }
                        GetSubquest                     	= function: 0x011b4e00 (function)
                        GetSubquestByName               	= function: 0x011b4b58 (function)
                        CompleteQuest                   	= function: 0x011b4ad8 (function)
                     }
                  }
                  CDOTA_Item                      	= table: 0x0117ebf0 (table, already seen)
                  FDesc                           	= table: 0x01117560 (table, already seen)
                  CCustomGameEventManager         	= table: 0x0120bf18 (table, already seen)
                  CBaseModelEntity                	= table: 0x01185970 (table, already seen)
                  CScriptPrecacheContext          	= table: 0x011c3f38 (table, already seen)
                  CDOTA_ShopTrigger               	= table: 0x011b3108 (table, already seen)
                  NativeFunctions                 	= table: 0x011c42c8 (table)
                  {
                     metatable                       	= table: 0x011c41f0 (table, already seen)
                     __self                          	= userdata: 0x011c4308 (userdata)
                  }
                  CDOTA_Modifier_Lua_Vertical_Motion	= table: 0x011335e0 (table, already seen)
                  json                            	= table: 0x01201690 (table, already seen)
                  CDOTA_Unit_Nian                 	= table: 0x011b1660 (table, already seen)
                  CDOTA_Unit_CustomGameAnnouncerAghanim	= table: 0x011bf440 (table, already seen)
                  CDOTA_BaseNPC_NeutralItemStash  	= table: 0x011b33d8 (table, already seen)
                  CDOTA_Modifier_Lua_Motion_Both  	= table: 0x01133aa8 (table, already seen)
                  CDOTA_ItemSpawner               	= table: 0x011be360 (table, already seen)
                  CDOTAGameRules                  	= table: 0x011f9070 (table, already seen)
                  CDOTA_Ability_Aghanim_Spear     	= table: 0x011bf198 (table, already seen)
                  CDOTA_Item_Lua                  	= table: 0x01148790 (table, already seen)
                  CDOTA_BaseNPC_Building          	= table: 0x01190a18 (table, already seen)
                  CFoWBlockerRegion               	= table: 0x011be5f8 (table, already seen)
                  g_reloadState                   	= table: 0x011f8848 (table, already seen)
                  ScriptDebugTraces               	= table: 0x011b2198 (table)
                  {
                  }
                  VoteSystem                      	= table: 0x0120b9a8 (table, already seen)
                  c                               	= table: 0x011eb000 (table, already seen)
                  EntityDesignerNameToClassname   	= table: 0x011dc8f0 (table)
                  {
                  }
                  CDOTA_Buff                      	= table: 0x0112f2a0 (table, already seen)
                  CBaseCombatCharacter            	= table: 0x01188280 (table, already seen)
                  CBaseTrigger                    	= table: 0x011aa438 (table, already seen)
                  EDesc                           	= table: 0x011175d0 (table)
                  {
                     subquest_text_replace_values_t  	= table: 0x011474b8 (table)
                     {
                        SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= "" (string)
                        SUBQUEST_NUM_TEXT_REPLACE_VALUES	= "" (string)
                        SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= "" (string)
                     }
                     DAMAGE_TYPES                    	= table: 0x0114bff0 (table)
                     {
                        DAMAGE_TYPE_ALL                 	= "" (string)
                        DAMAGE_TYPE_NONE                	= "" (string)
                        DAMAGE_TYPE_MAGICAL             	= "" (string)
                        DAMAGE_TYPE_PHYSICAL            	= "" (string)
                        DAMAGE_TYPE_HP_REMOVAL          	= "" (string)
                        DAMAGE_TYPE_PURE                	= "" (string)
                        DAMAGE_TYPE_ABILITY_DEFINED     	= "" (string)
                     }
                     DOTA_HeroPickState              	= table: 0x01134008 (table)
                     {
                        DOTA_HEROPICK_STATE_CM_BAN7     	= "" (string)
                        DOTA_HEROPICK_STATE_MO_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN4     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN6     	= "" (string)
                        DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN10    	= "" (string)
                        DOTA_HEROPICK_STATE_SELECT_PENALTY	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT9  	= "" (string)
                        DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES	= "" (string)
                        DOTA_HEROPICK_STATE_NONE        	= "" (string)
                        DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN2     	= "" (string)
                        DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT	= "" (string)
                        DOTA_HEROPICK_STATE_BD_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN6     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_PICK     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT10 	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN3     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT9  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT7  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT8  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT8  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT7  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_INTRO    	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT6  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN12    	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT10 	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN11    	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN14    	= "" (string)
                        DOTA_HEROPICK_STATE_CM_CAPTAINPICK	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT5  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN2     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT4  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT6  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT3  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT2  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_SELECT1  	= "" (string)
                        DOTA_HEROPICK_STATE_SCENARIO_PICK	= "" (string)
                        DOTA_HEROPICK_STATE_RD_SELECT_UNUSED	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN5     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN4     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN3     	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN8     	= "" (string)
                        DOTA_HERO_PICK_STATE_ARDM_SELECT	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT3  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT4  	= "" (string)
                        DOTA_HEROPICK_STATE_CD_BAN1     	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN13    	= "" (string)
                        DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED	= "" (string)
                        DOTA_HEROPICK_STATE_CD_CAPTAINPICK	= "" (string)
                        DOTA_HEROPICK_STATE_CM_PICK     	= "" (string)
                        DOTA_HEROPICK_STATE_CD_INTRO    	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN5     	= "" (string)
                        DOTA_HEROPICK_STATE_SD_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_FH_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_COUNT       	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT1  	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT2  	= "" (string)
                        DOTA_HEROPICK_STATE_AR_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_AP_SELECT   	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN9     	= "" (string)
                        DOTA_HEROPICK_STATE_CM_BAN1     	= "" (string)
                        DOTA_HEROPICK_STATE_CM_SELECT5  	= "" (string)
                     }
                     LuaModifierType                 	= table: 0x01179548 (table)
                     {
                        LUA_MODIFIER_MOTION_NONE        	= "" (string)
                        LUA_MODIFIER_MOTION_VERTICAL    	= "" (string)
                        LUA_MODIFIER_MOTION_HORIZONTAL  	= "" (string)
                        LUA_MODIFIER_INVALID            	= "" (string)
                        LUA_MODIFIER_MOTION_BOTH        	= "" (string)
                     }
                     DOTAAbilitySpeakTrigger_t       	= table: 0x0117a158 (table)
                     {
                        DOTA_ABILITY_SPEAK_START_ACTION_PHASE	= "" (string)
                        DOTA_ABILITY_SPEAK_CAST         	= "" (string)
                     }
                     DOTA_RUNES                      	= table: 0x01135800 (table)
                     {
                        DOTA_RUNE_HASTE                 	= "" (string)
                        DOTA_RUNE_ARCANE                	= "" (string)
                        DOTA_RUNE_ILLUSION              	= "" (string)
                        DOTA_RUNE_BOUNTY                	= "" (string)
                        DOTA_RUNE_DOUBLEDAMAGE          	= "" (string)
                        DOTA_RUNE_WATER                 	= "" (string)
                        DOTA_RUNE_REGENERATION          	= "" (string)
                        DOTA_RUNE_INVALID               	= "" (string)
                        DOTA_RUNE_COUNT                 	= "" (string)
                        DOTA_RUNE_INVISIBILITY          	= "" (string)
                     }
                     EDOTA_ModifyGold_Reason         	= table: 0x01128ce0 (table)
                     {
                        DOTA_ModifyGold_Unspecified     	= "" (string)
                        DOTA_ModifyGold_Death           	= "" (string)
                        DOTA_ModifyGold_CreepKill       	= "" (string)
                        DOTA_ModifyGold_SellItem        	= "" (string)
                        DOTA_ModifyGold_AbilityGold     	= "" (string)
                        DOTA_ModifyGold_NeutralKill     	= "" (string)
                        DOTA_ModifyGold_RoshanKill      	= "" (string)
                        DOTA_ModifyGold_CourierKilledByThisPlayer	= "" (string)
                        DOTA_ModifyGold_WardKill        	= "" (string)
                        DOTA_ModifyGold_SharedGold      	= "" (string)
                        DOTA_ModifyGold_AbilityCost     	= "" (string)
                        DOTA_ModifyGold_BountyRune      	= "" (string)
                        DOTA_ModifyGold_CourierKill     	= "" (string)
                        DOTA_ModifyGold_Buyback         	= "" (string)
                        DOTA_ModifyGold_GameTick        	= "" (string)
                        DOTA_ModifyGold_PurchaseItem    	= "" (string)
                        DOTA_ModifyGold_SelectionPenalty	= "" (string)
                        DOTA_ModifyGold_PurchaseConsumable	= "" (string)
                        DOTA_ModifyGold_CheatCommand    	= "" (string)
                        DOTA_ModifyGold_Building        	= "" (string)
                        DOTA_ModifyGold_AbandonedRedistribute	= "" (string)
                        DOTA_ModifyGold_HeroKill        	= "" (string)
                     }
                     UnitFilterResult                	= table: 0x0117a258 (table)
                     {
                        UF_FAIL_IN_FOW                  	= "" (string)
                        UF_FAIL_CREEP                   	= "" (string)
                        UF_FAIL_OBSTRUCTED              	= "" (string)
                        UF_FAIL_RANGED                  	= "" (string)
                        UF_FAIL_NIGHTMARED              	= "" (string)
                        UF_FAIL_MAGIC_IMMUNE_ALLY       	= "" (string)
                        UF_FAIL_OUT_OF_WORLD            	= "" (string)
                        UF_FAIL_DISABLE_HELP            	= "" (string)
                        UF_FAIL_SUMMONED                	= "" (string)
                        UF_FAIL_MELEE                   	= "" (string)
                        UF_FAIL_ANCIENT                 	= "" (string)
                        UF_FAIL_CUSTOM                  	= "" (string)
                        UF_FAIL_DEAD                    	= "" (string)
                        UF_FAIL_ATTACK_IMMUNE           	= "" (string)
                        UF_FAIL_INVISIBLE               	= "" (string)
                        UF_FAIL_CONSIDERED_HERO         	= "" (string)
                        UF_SUCCESS                      	= "" (string)
                        UF_FAIL_ENEMY                   	= "" (string)
                        UF_FAIL_DOMINATED               	= "" (string)
                        UF_FAIL_NOT_PLAYER_CONTROLLED   	= "" (string)
                        UF_FAIL_HERO                    	= "" (string)
                        UF_FAIL_OTHER                   	= "" (string)
                        UF_FAIL_INVULNERABLE            	= "" (string)
                        UF_FAIL_MAGIC_IMMUNE_ENEMY      	= "" (string)
                        UF_FAIL_COURIER                 	= "" (string)
                        UF_FAIL_BUILDING                	= "" (string)
                        UF_FAIL_FRIENDLY                	= "" (string)
                        UF_FAIL_ILLUSION                	= "" (string)
                        UF_FAIL_INVALID_LOCATION        	= "" (string)
                     }
                     DOTA_UNIT_TARGET_FLAGS          	= table: 0x01135ea8 (table)
                     {
                        DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_RANGED_ONLY	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NO_INVIS  	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_MANA_ONLY 	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_DEAD      	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NONE      	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_MELEE_ONLY	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_INVULNERABLE	= "" (string)
                        DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS	= "" (string)
                     }
                     DOTA_SHOP_TYPE                  	= table: 0x0116dbe8 (table)
                     {
                        DOTA_SHOP_NEUTRALS              	= "" (string)
                        DOTA_SHOP_SECRET2               	= "" (string)
                        DOTA_SHOP_SIDE                  	= "" (string)
                        DOTA_SHOP_SECRET                	= "" (string)
                        DOTA_SHOP_CUSTOM                	= "" (string)
                        DOTA_SHOP_HOME                  	= "" (string)
                        DOTA_SHOP_NONE                  	= "" (string)
                        DOTA_SHOP_SIDE2                 	= "" (string)
                        DOTA_SHOP_GROUND                	= "" (string)
                     }
                     DOTAScriptInventorySlot_t       	= table: 0x011519c0 (table)
                     {
                        DOTA_ITEM_SLOT_4                	= "" (string)
                        DOTA_STASH_SLOT_6               	= "" (string)
                        DOTA_ITEM_SLOT_1                	= "" (string)
                        DOTA_STASH_SLOT_5               	= "" (string)
                        DOTA_ITEM_SLOT_2                	= "" (string)
                        DOTA_STASH_SLOT_4               	= "" (string)
                        DOTA_ITEM_SLOT_7                	= "" (string)
                        DOTA_STASH_SLOT_3               	= "" (string)
                        DOTA_ITEM_SLOT_8                	= "" (string)
                        DOTA_STASH_SLOT_2               	= "" (string)
                        DOTA_ITEM_SLOT_5                	= "" (string)
                        DOTA_STASH_SLOT_1               	= "" (string)
                        DOTA_ITEM_SLOT_6                	= "" (string)
                        DOTA_ITEM_SLOT_9                	= "" (string)
                        DOTA_ITEM_SLOT_3                	= "" (string)
                     }
                     DOTA_UNIT_TARGET_TEAM           	= table: 0x01135a28 (table)
                     {
                        DOTA_UNIT_TARGET_TEAM_BOTH      	= "" (string)
                        DOTA_UNIT_TARGET_TEAM_CUSTOM    	= "" (string)
                        DOTA_UNIT_TARGET_TEAM_ENEMY     	= "" (string)
                        DOTA_UNIT_TARGET_TEAM_FRIENDLY  	= "" (string)
                        DOTA_UNIT_TARGET_TEAM_NONE      	= "" (string)
                     }
                     ABILITY_TYPES                   	= table: 0x0116d898 (table)
                     {
                        ABILITY_TYPE_ULTIMATE           	= "" (string)
                        ABILITY_TYPE_BASIC              	= "" (string)
                        ABILITY_TYPE_ATTRIBUTES         	= "" (string)
                        ABILITY_TYPE_HIDDEN             	= "" (string)
                     }
                     DOTADamageFlag_t                	= table: 0x0114c410 (table)
                     {
                        DOTA_DAMAGE_FLAG_NONE           	= "" (string)
                        DOTA_DAMAGE_FLAG_NON_LETHAL     	= "" (string)
                        DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR	= "" (string)
                        DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT	= "" (string)
                        DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS	= "" (string)
                        DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR	= "" (string)
                        DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR	= "" (string)
                        DOTA_DAMAGE_FLAG_REFLECTION     	= "" (string)
                        DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION	= "" (string)
                        DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK	= "" (string)
                        DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK	= "" (string)
                        DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION	= "" (string)
                        DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY	= "" (string)
                        DOTA_DAMAGE_FLAG_HPLOSS         	= "" (string)
                        DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL	= "" (string)
                        DOTA_DAMAGE_FLAG_BYPASSES_BLOCK 	= "" (string)
                        DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY	= "" (string)
                        DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN	= "" (string)
                        DOTA_DAMAGE_FLAG_PROPERTY_FIRE  	= "" (string)
                     }
                     DOTAHUDVisibility_t             	= table: 0x0114d1c8 (table)
                     {
                        DOTA_HUD_VISIBILITY_QUICK_STATS 	= "" (string)
                        DOTA_HUD_VISIBILITY_INVALID     	= "" (string)
                        DOTA_HUD_VISIBILITY_COUNT       	= "" (string)
                        DOTA_HUD_VISIBILITY_AGHANIMS_STATUS	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_PROTECT	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_BAR     	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS	= "" (string)
                        DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_SCOREBOARD	= "" (string)
                        DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI	= "" (string)
                        DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_GOLD	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_ITEMS	= "" (string)
                        DOTA_HUD_VISIBILITY_ENDGAME     	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_PANEL	= "" (string)
                        DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS	= "" (string)
                        DOTA_HUD_VISIBILITY_ENDGAME_CHAT	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_BAR_SCORE	= "" (string)
                        DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK	= "" (string)
                        DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_HEROES  	= "" (string)
                        DOTA_HUD_VISIBILITY_ACTION_PANEL	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_COURIER	= "" (string)
                        DOTA_HUD_VISIBILITY_INVENTORY_SHOP	= "" (string)
                        DOTA_HUD_VISIBILITY_ACTION_MINIMAP	= "" (string)
                        DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS	= "" (string)
                        DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY	= "" (string)
                        DOTA_HUD_VISIBILITY_KILLCAM     	= "" (string)
                     }
                     DOTALimits_t                    	= table: 0x0113be60 (table)
                     {
                        DOTA_MAX_PLAYER_TEAMS           	= "Max number of player teams supported." (string)
                        DOTA_MAX_TEAM_PLAYERS           	= "Max number of non-spectator players supported." (string)
                        DOTA_DEFAULT_MAX_TEAM_PLAYERS   	= "Default number of non-spectator players supported." (string)
                        DOTA_MAX_SPECTATOR_TEAM_SIZE    	= "How many spectators can watch." (string)
                        DOTA_MAX_PLAYERS                	= "Max number of players connected to the server including spectators." (string)
                        DOTA_MAX_SPECTATOR_LOBBY_SIZE   	= "Max number of viewers in a spectator lobby." (string)
                        DOTA_MAX_TEAM                   	= "Max number of players per team." (string)
                        DOTA_DEFAULT_MAX_TEAM           	= "Default number of players per team." (string)
                     }
                     DamageCategory_t                	= table: 0x0114cf68 (table)
                     {
                        DOTA_DAMAGE_CATEGORY_SPELL      	= "" (string)
                        DOTA_DAMAGE_CATEGORY_ATTACK     	= "" (string)
                     }
                     DOTAInventoryFlags_t            	= table: 0x01128130 (table)
                     {
                        DOTA_INVENTORY_LIMIT_DROP_ON_GROUND	= "" (string)
                        DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN	= "" (string)
                        DOTA_INVENTORY_ALL_ACCESS       	= "" (string)
                        DOTA_INVENTORY_ALLOW_STASH      	= "" (string)
                        DOTA_INVENTORY_ALLOW_NONE       	= "" (string)
                        DOTA_INVENTORY_ALLOW_MAIN       	= "" (string)
                        DOTA_INVENTORY_ALLOW_DROP_ON_GROUND	= "" (string)
                     }
                     DOTAProjectileAttachment_t      	= table: 0x0114d070 (table)
                     {
                        DOTA_PROJECTILE_ATTACHMENT_ATTACK_2	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_LAST 	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_NONE 	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_HITLOCATION	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_ATTACK_4	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_ATTACK_1	= "" (string)
                        DOTA_PROJECTILE_ATTACHMENT_ATTACK_3	= "" (string)
                     }
                     quest_text_replace_values_t     	= table: 0x01147330 (table)
                     {
                        QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= "" (string)
                        QUEST_TEXT_REPLACE_VALUE_REWARD 	= "" (string)
                        QUEST_TEXT_REPLACE_VALUE_ROUND  	= "" (string)
                        QUEST_NUM_TEXT_REPLACE_VALUES   	= "" (string)
                        QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= "" (string)
                     }
                     modifierremove                  	= table: 0x011788a8 (table)
                     {
                        DOTA_BUFF_REMOVE_ENEMY          	= "" (string)
                        DOTA_BUFF_REMOVE_ALL            	= "" (string)
                        DOTA_BUFF_REMOVE_ALLY           	= "" (string)
                     }
                     AttributeDerivedStats           	= table: 0x01178ec0 (table)
                     {
                        DOTA_ATTRIBUTE_STRENGTH_HP      	= "" (string)
                        DOTA_ATTRIBUTE_AGILITY_ARMOR    	= "" (string)
                        DOTA_ATTRIBUTE_AGILITY_DAMAGE   	= "" (string)
                        DOTA_ATTRIBUTE_STRENGTH_HP_REGEN	= "" (string)
                        DOTA_ATTRIBUTE_INTELLIGENCE_MANA	= "" (string)
                        DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE	= "" (string)
                        DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN	= "" (string)
                        DOTA_ATTRIBUTE_STRENGTH_DAMAGE  	= "" (string)
                        DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED	= "" (string)
                     }
                     DOTA_UNIT_TARGET_TYPE           	= table: 0x01135b98 (table)
                     {
                        DOTA_UNIT_TARGET_NONE           	= "" (string)
                        DOTA_UNIT_TARGET_BASIC          	= "" (string)
                        DOTA_UNIT_TARGET_HERO           	= "" (string)
                        DOTA_UNIT_TARGET_COURIER        	= "" (string)
                        DOTA_UNIT_TARGET_TREE           	= "" (string)
                        DOTA_UNIT_TARGET_OTHER          	= "" (string)
                        DOTA_UNIT_TARGET_ALL            	= "" (string)
                        DOTA_UNIT_TARGET_CREEP          	= "" (string)
                        DOTA_UNIT_TARGET_BUILDING       	= "" (string)
                        DOTA_UNIT_TARGET_CUSTOM         	= "" (string)
                     }
                     DOTASpeechType_t                	= table: 0x01179bc8 (table)
                     {
                        DOTA_SPEECH_USER_TEAM           	= "" (string)
                        DOTA_SPEECH_SPECTATOR           	= "" (string)
                        DOTA_SPEECH_USER_SINGLE         	= "" (string)
                        DOTA_SPEECH_USER_ALL            	= "" (string)
                        DOTA_SPEECH_BAD_TEAM            	= "" (string)
                        DOTA_SPEECH_USER_TEAM_NOSPECTATOR	= "" (string)
                        DOTA_SPEECH_RECIPIENT_TYPE_MAX  	= "" (string)
                        DOTA_SPEECH_USER_TEAM_NEARBY    	= "" (string)
                        DOTA_SPEECH_GOOD_TEAM           	= "" (string)
                        DOTA_SPEECH_USER_INVALID        	= "" (string)
                        DOTA_SPEECH_USER_NEARBY         	= "" (string)
                     }
                     DOTA_MOTION_CONTROLLER_PRIORITY 	= table: 0x01179650 (table)
                     {
                        DOTA_MOTION_CONTROLLER_PRIORITY_HIGH	= "" (string)
                        DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST	= "" (string)
                        DOTA_MOTION_CONTROLLER_PRIORITY_LOW	= "" (string)
                        DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST	= "" (string)
                        DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM	= "" (string)
                     }
                     DOTAMusicStatus_t               	= table: 0x0114bdd8 (table)
                     {
                        DOTA_MUSIC_STATUS_DEAD          	= "" (string)
                        DOTA_MUSIC_STATUS_BATTLE        	= "" (string)
                        DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION	= "" (string)
                        DOTA_MUSIC_STATUS_NONE          	= "" (string)
                        DOTA_MUSIC_STATUS_LAST          	= "" (string)
                        DOTA_MUSIC_STATUS_EXPLORATION   	= "" (string)
                     }
                     DOTATeam_t                      	= table: 0x01135488 (table)
                     {
                        DOTA_TEAM_CUSTOM_1              	= "" (string)
                        DOTA_TEAM_CUSTOM_2              	= "" (string)
                        DOTA_TEAM_CUSTOM_8              	= "" (string)
                        DOTA_TEAM_CUSTOM_5              	= "" (string)
                        DOTA_TEAM_CUSTOM_MIN            	= "" (string)
                        DOTA_TEAM_CUSTOM_6              	= "" (string)
                        DOTA_TEAM_CUSTOM_3              	= "" (string)
                        DOTA_TEAM_GOODGUYS              	= "" (string)
                        DOTA_TEAM_CUSTOM_7              	= "" (string)
                        DOTA_TEAM_CUSTOM_MAX            	= "" (string)
                        DOTA_TEAM_NEUTRALS              	= "" (string)
                        DOTA_TEAM_NOTEAM                	= "" (string)
                        DOTA_TEAM_BADGUYS               	= "" (string)
                        DOTA_TEAM_CUSTOM_COUNT          	= "" (string)
                        DOTA_TEAM_COUNT                 	= "" (string)
                        DOTA_TEAM_FIRST                 	= "" (string)
                        DOTA_TEAM_CUSTOM_4              	= "" (string)
                     }
                     DOTAMinimapEvent_t              	= table: 0x0114f308 (table)
                     {
                        DOTA_MINIMAP_EVENT_MOVE_TO_TARGET	= "" (string)
                        DOTA_MINIMAP_EVENT_BASE_GLYPHED 	= "" (string)
                        DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK	= "" (string)
                        DOTA_MINIMAP_EVENT_HINT_LOCATION	= "" (string)
                        DOTA_MINIMAP_EVENT_TEAMMATE_DIED	= "" (string)
                        DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE	= "" (string)
                        DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING	= "" (string)
                        DOTA_MINIMAP_EVENT_RADAR        	= "" (string)
                        DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED	= "" (string)
                        DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK	= "" (string)
                        DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING	= "" (string)
                        DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK	= "" (string)
                        DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING	= "" (string)
                        DOTA_MINIMAP_EVENT_RADAR_TARGET 	= "" (string)
                     }
                     Attributes                      	= table: 0x01178c38 (table)
                     {
                        DOTA_ATTRIBUTE_INTELLECT        	= "" (string)
                        DOTA_ATTRIBUTE_STRENGTH         	= "" (string)
                        DOTA_ATTRIBUTE_AGILITY          	= "" (string)
                        DOTA_ATTRIBUTE_INVALID          	= "" (string)
                        DOTA_ATTRIBUTE_MAX              	= "" (string)
                     }
                     DOTAModifierAttribute_t         	= table: 0x01178b10 (table)
                     {
                        MODIFIER_ATTRIBUTE_MULTIPLE     	= "" (string)
                        MODIFIER_ATTRIBUTE_PERMANENT    	= "" (string)
                        MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE	= "" (string)
                        MODIFIER_ATTRIBUTE_IGNORE_DODGE 	= "" (string)
                        MODIFIER_ATTRIBUTE_AURA_PRIORITY	= "" (string)
                        MODIFIER_ATTRIBUTE_NONE         	= "" (string)
                     }
                     DOTA_ABILITY_BEHAVIOR           	= table: 0x01136910 (table)
                     {
                        DOTA_ABILITY_BEHAVIOR_AOE       	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_IMMEDIATE 	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_NO_TARGET 	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_CHANNELLED	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_OVERSHOOT 	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_AURA      	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_ITEM      	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_ATTACK    	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_UNIT_TARGET	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_PASSIVE   	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_TOGGLE    	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DIRECTIONAL	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_UNRESTRICTED	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_NONE      	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_HIDDEN    	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_POINT     	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_AUTOCAST  	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE	= "" (string)
                        DOTA_ABILITY_BEHAVIOR_RUNE_TARGET	= "" (string)
                     }
                     modifierpriority                	= table: 0x01177998 (table)
                     {
                        MODIFIER_PRIORITY_LOW           	= "" (string)
                        MODIFIER_PRIORITY_ULTRA         	= "" (string)
                        MODIFIER_PRIORITY_HIGH          	= "" (string)
                        MODIFIER_PRIORITY_SUPER_ULTRA   	= "" (string)
                        MODIFIER_PRIORITY_NORMAL        	= "" (string)
                     }
                     DOTA_GameState                  	= table: 0x01128480 (table)
                     {
                        DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD	= "" (string)
                        DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP	= "" (string)
                        DOTA_GAMERULES_STATE_PRE_GAME   	= "" (string)
                        DOTA_GAMERULES_STATE_STRATEGY_TIME	= "" (string)
                        DOTA_GAMERULES_STATE_DISCONNECT 	= "" (string)
                        DOTA_GAMERULES_STATE_GAME_IN_PROGRESS	= "" (string)
                        DOTA_GAMERULES_STATE_HERO_SELECTION	= "" (string)
                        DOTA_GAMERULES_STATE_SCENARIO_SETUP	= "" (string)
                        DOTA_GAMERULES_STATE_POST_GAME  	= "" (string)
                        DOTA_GAMERULES_STATE_TEAM_SHOWCASE	= "" (string)
                        DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD	= "" (string)
                        DOTA_GAMERULES_STATE_INIT       	= "" (string)
                     }
                     modifierstate                   	= table: 0x01177570 (table)
                     {
                        MODIFIER_STATE_NO_TEAM_SELECT   	= "" (string)
                        MODIFIER_STATE_EVADE_DISABLED   	= "" (string)
                        MODIFIER_STATE_INVISIBLE        	= "" (string)
                        MODIFIER_STATE_PASSIVES_DISABLED	= "" (string)
                        MODIFIER_STATE_LOW_ATTACK_PRIORITY	= "" (string)
                        MODIFIER_STATE_ROOTED           	= "" (string)
                        MODIFIER_STATE_SILENCED         	= "" (string)
                        MODIFIER_STATE_SPECIALLY_DENIABLE	= "" (string)
                        MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE	= "" (string)
                        MODIFIER_STATE_DOMINATED        	= "" (string)
                        MODIFIER_STATE_CANNOT_TARGET_ENEMIES	= "" (string)
                        MODIFIER_STATE_HEXED            	= "" (string)
                        MODIFIER_STATE_MAGIC_IMMUNE     	= "" (string)
                        MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES	= "" (string)
                        MODIFIER_STATE_LAST             	= "" (string)
                        MODIFIER_STATE_MUTED            	= "" (string)
                        MODIFIER_STATE_SPECIALLY_UNDENIABLE	= "" (string)
                        MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS	= "" (string)
                        MODIFIER_STATE_NO_UNIT_COLLISION	= "" (string)
                        MODIFIER_STATE_FAKE_ALLY        	= "" (string)
                        MODIFIER_STATE_PROVIDES_VISION  	= "" (string)
                        MODIFIER_STATE_NOT_ON_MINIMAP   	= "" (string)
                        MODIFIER_STATE_BLOCK_DISABLED   	= "" (string)
                        MODIFIER_STATE_NO_HEALTH_BAR    	= "" (string)
                        MODIFIER_STATE_NIGHTMARED       	= "" (string)
                        MODIFIER_STATE_TRUESIGHT_IMMUNE 	= "" (string)
                        MODIFIER_STATE_OUT_OF_GAME      	= "" (string)
                        MODIFIER_STATE_TAUNTED          	= "" (string)
                        MODIFIER_STATE_ATTACK_ALLIES    	= "" (string)
                        MODIFIER_STATE_IGNORING_STOP_ORDERS	= "" (string)
                        MODIFIER_STATE_FEARED           	= "" (string)
                        MODIFIER_STATE_DISARMED         	= "" (string)
                        MODIFIER_STATE_UNSLOWABLE       	= "" (string)
                        MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES	= "" (string)
                        MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS	= "" (string)
                        MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES	= "" (string)
                        MODIFIER_STATE_UNTARGETABLE     	= "" (string)
                        MODIFIER_STATE_UNSELECTABLE     	= "" (string)
                        MODIFIER_STATE_ATTACK_IMMUNE    	= "" (string)
                        MODIFIER_STATE_BLIND            	= "" (string)
                        MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY	= "" (string)
                        MODIFIER_STATE_NO_TEAM_MOVE_TO  	= "" (string)
                        MODIFIER_STATE_TETHERED         	= "" (string)
                        MODIFIER_STATE_COMMAND_RESTRICTED	= "" (string)
                        MODIFIER_STATE_INVULNERABLE     	= "" (string)
                        MODIFIER_STATE_FLYING           	= "" (string)
                        MODIFIER_STATE_FORCED_FLYING_VISION	= "" (string)
                        MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED	= "" (string)
                        MODIFIER_STATE_CANNOT_MISS      	= "" (string)
                        MODIFIER_STATE_STUNNED          	= "" (string)
                        MODIFIER_STATE_FROZEN           	= "" (string)
                     }
                     DOTASlotType_t                  	= table: 0x0114f988 (table)
                     {
                        DOTA_LOADOUT_TYPE_RADIANT_CREEPS	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE	= "" (string)
                        DOTA_LOADOUT_TYPE_OFFHAND_WEAPON	= "" (string)
                        DOTA_LOADOUT_TYPE_EMBLEM        	= "" (string)
                        DOTA_LOADOUT_TYPE_HEROIC_STATUE 	= "" (string)
                        DOTA_LOADOUT_TYPE_HEAD          	= "" (string)
                        DOTA_LOADOUT_TYPE_WEAPON        	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY2      	= "" (string)
                        DOTA_LOADOUT_TYPE_GLOVES        	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_NECK          	= "" (string)
                        DOTA_LOADOUT_TYPE_PERSONA_SELECTOR	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_BACK          	= "" (string)
                        DOTA_LOADOUT_TYPE_MULTIKILL_BANNER	= "" (string)
                        DOTA_LOADOUT_TYPE_ARMS          	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY4      	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY1      	= "" (string)
                        DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_MOUNT         	= "" (string)
                        DOTA_LOADOUT_TYPE_ARMOR         	= "" (string)
                        DOTA_LOADOUT_TYPE_LEGS          	= "" (string)
                        DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS	= "" (string)
                        DOTA_LOADOUT_TYPE_VOICE_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_MISC_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_COUNT         	= "" (string)
                        DOTA_LOADOUT_TYPE_TAIL          	= "" (string)
                        DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_VERSUS_SCREEN 	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY_ATTACK	= "" (string)
                        DOTA_LOADOUT_TYPE_BELT          	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS	= "" (string)
                        DOTA_LOADOUT_TYPE_MEGA_KILLS    	= "" (string)
                        DOTA_LOADOUT_TYPE_BLINK_EFFECT  	= "" (string)
                        DOTA_LOADOUT_TYPE_LOADING_SCREEN	= "" (string)
                        DOTA_LOADOUT_TYPE_COURIER_EFFECT	= "" (string)
                        DOTA_LOADOUT_TYPE_MAP_EFFECT    	= "" (string)
                        DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_HEAD_EFFECT   	= "" (string)
                        DOTA_LOADOUT_TYPE_DEATH_EFFECT  	= "" (string)
                        DOTA_LOADOUT_TYPE_TAUNT         	= "" (string)
                        DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_WARD          	= "" (string)
                        DOTA_LOADOUT_TYPE_KILL_EFFECT   	= "" (string)
                        DOTA_LOADOUT_TYPE_STREAK_EFFECT 	= "" (string)
                        DOTA_PLAYER_LOADOUT_END         	= "" (string)
                        DOTA_LOADOUT_TYPE_DIRE_TOWER    	= "" (string)
                        DOTA_LOADOUT_TYPE_RADIANT_TOWER 	= "" (string)
                        DOTA_LOADOUT_TYPE_DIRE_CREEPS   	= "" (string)
                        DOTA_LOADOUT_TYPE_COSTUME       	= "" (string)
                        DOTA_LOADOUT_TYPE_TERRAIN       	= "" (string)
                        DOTA_LOADOUT_TYPE_TELEPORT_EFFECT	= "" (string)
                        DOTA_LOADOUT_TYPE_CURSOR_PACK   	= "" (string)
                        DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_COURIER       	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY3      	= "" (string)
                        DOTA_LOADOUT_TYPE_MUSIC         	= "" (string)
                        DOTA_LOADOUT_PERSONA_1_START    	= "" (string)
                        DOTA_LOADOUT_PERSONA_1_END      	= "" (string)
                        DOTA_LOADOUT_TYPE_HUD_SKIN      	= "" (string)
                        DOTA_LOADOUT_TYPE_NONE          	= "" (string)
                        DOTA_LOADOUT_TYPE_SHOULDER      	= "" (string)
                        DOTA_LOADOUT_TYPE_SUMMON        	= "" (string)
                        DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2	= "" (string)
                        DOTA_LOADOUT_TYPE_BODY_HEAD     	= "" (string)
                        DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_SHAPESHIFT    	= "" (string)
                        DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_HEAD_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS	= "" (string)
                        DOTA_LOADOUT_TYPE_ARMS_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_WEAPON2       	= "" (string)
                        DOTA_LOADOUT_TYPE_BELT_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_NECK_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_BACK_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_MISC          	= "" (string)
                        DOTA_LOADOUT_TYPE_LEGS_PERSONA_1	= "" (string)
                        DOTA_PLAYER_LOADOUT_START       	= "" (string)
                        DOTA_LOADOUT_TYPE_TAIL_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_VOICE         	= "" (string)
                        DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_WEATHER       	= "" (string)
                        DOTA_LOADOUT_TYPE_ANNOUNCER     	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1	= "" (string)
                        DOTA_LOADOUT_TYPE_INVALID       	= "" (string)
                     }
                     EShareAbility                   	= table: 0x0114bc78 (table)
                     {
                        ITEM_PARTIALLY_SHAREABLE        	= "" (string)
                        ITEM_NOT_SHAREABLE              	= "" (string)
                        ITEM_FULLY_SHAREABLE            	= "" (string)
                     }
                     AbilityLearnResult_t            	= table: 0x0116d758 (table)
                     {
                        ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE	= "" (string)
                        ABILITY_NOT_LEARNABLE           	= "" (string)
                        ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL	= "" (string)
                        ABILITY_CAN_BE_UPGRADED         	= "" (string)
                        ABILITY_CANNOT_BE_UPGRADED_AT_MAX	= "" (string)
                     }
                     modifierfunction                	= table: 0x0116dd88 (table)
                     {
                        MODIFIER_FUNCTION_INVALID       	= "" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE	= "GetModifierMoveSpeedOverride" (string)
                        MODIFIER_PROPERTY_FIXED_NIGHT_VISION	= "GetFixedNightVision" (string)
                        MODIFIER_FUNCTION_LAST          	= "" (string)
                        MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING	= "GetModifierPercentageCooldownStacking" (string)
                        MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS	= "GetModifierMagicalResistanceBonus" (string)
                        MODIFIER_PROPERTY_EXP_RATE_BOOST	= "GetModifierPercentageExpRateBoost" (string)
                        MODIFIER_EVENT_ON_PREDEBUFF_APPLIED	= "OnPreDebuffApplied" (string)
                        MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE	= "GetModifierCastRangeBonusPercentage" (string)
                        MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE	= "OnAttemptProjectileDodge" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE	= "GetModifierMoveSpeedBonus_Percentage_Unique" (string)
                        MODIFIER_PROPERTY_DEATHGOLDCOST 	= "GetModifierConstantDeathGoldCost" (string)
                        MODIFIER_EVENT_ON_ATTACK_FAIL   	= "OnAttackFail" (string)
                        MODIFIER_PROPERTY_VISUAL_Z_DELTA	= "GetVisualZDelta" (string)
                        MODIFIER_PROPERTY_MISS_PERCENTAGE	= "GetModifierMiss_Percentage" (string)
                        MODIFIER_PROPERTY_MOVESPEED_LIMIT	= "GetModifierMoveSpeed_Limit" (string)
                        MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE	= "GetModifierAttackSpeedBaseOverride" (string)
                        MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE	= "GetModifierAttackRangeBonusUnique" (string)
                        MODIFIER_PROPERTY_DISABLE_AUTOATTACK	= "GetDisableAutoAttack" (string)
                        MODIFIER_PROPERTY_STATS_AGILITY_BONUS	= "GetModifierBonusStats_Agility" (string)
                        MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE	= "GetModifierDamageOutgoing_Percentage" (string)
                        MODIFIER_EVENT_ON_MANA_GAINED   	= "OnManaGained" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT	= "GetModifierMoveSpeedBonus_Constant" (string)
                        MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET	= "GetModifierProcAttack_BonusDamage_Magical_Target" (string)
                        MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX	= "GetModifierMoveSpeed_AbsoluteMax" (string)
                        MODIFIER_PROPERTY_RESPAWNTIME   	= "GetModifierConstantRespawnTime" (string)
                        MODIFIER_EVENT_ON_ATTACK_FINISHED	= "OnAttackFinished" (string)
                        MODIFIER_EVENT_ON_SPELL_TARGET_READY	= "OnSpellTargetReady" (string)
                        MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE	= "GetModifierPreAttack_CriticalStrike" (string)
                        MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION	= "GetModifierInvisibilityAttackBehaviorException" (string)
                        MODIFIER_EVENT_ON_MODIFIER_ADDED	= "OnModifierAdded" (string)
                        MODIFIER_EVENT_ON_TAKEDAMAGE    	= "OnTakeDamage" (string)
                        MODIFIER_PROPERTY_FIXED_ATTACK_RATE	= "GetModifierFixedAttackRate" (string)
                        MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS	= "BotAttackScoreBonus" (string)
                        MODIFIER_PROPERTY_SUPPRESS_CLEAVE	= "GetSuppressCleave" (string)
                        MODIFIER_EVENT_ON_ATTACK_CANCELLED	= "OnAttackCancelled" (string)
                        MODIFIER_EVENT_ON_HEAL_RECEIVED 	= "OnHealReceived" (string)
                        MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE	= "GetModifierManaDrainAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING	= "GetModifierStatusResistanceStacking" (string)
                        MODIFIER_PROPERTY_MANACOST_PERCENTAGE	= "GetModifierPercentageManacost" (string)
                        MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE	= "GetBonusNightVisionUnique" (string)
                        MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING	= "GetModifierPercentageCooldownOngoing" (string)
                        MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT	= "GetModifierManacostReduction_Constant" (string)
                        MODIFIER_PROPERTY_SUPPRESS_TELEPORT	= "GetSuppressTeleport" (string)
                        MODIFIER_EVENT_ON_TELEPORTING   	= "OnTeleporting" (string)
                        MODIFIER_PROPERTY_GOLD_RATE_BOOST	= "GetModifierPercentageGoldRateBoost" (string)
                        MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR	= "GetModifierPhysical_ConstantBlockUnavoidablePreArmor" (string)
                        MODIFIER_EVENT_ON_ATTACKED      	= "OnAttacked" (string)
                        MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY	= "OnAttackRecordDestroy" (string)
                        MODIFIER_PROPERTY_TOOLTIP2      	= "OnTooltip2" (string)
                        MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE	= "GetModifierHPRegen_CanBeNegative" (string)
                        MODIFIER_PROPERTY_REFLECT_SPELL 	= "GetReflectSpell" (string)
                        MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND	= "GetAttackSound" (string)
                        MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER	= "GetModifierNoVisionOfAttacker" (string)
                        MODIFIER_PROPERTY_HEALTH_BONUS  	= "GetModifierHealthBonus" (string)
                        MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION	= "" (string)
                        MODIFIER_EVENT_ON_ORB_EFFECT    	= "Unused" (string)
                        MODIFIER_PROPERTY_CAN_ATTACK_TREES	= "GetModifierCanAttackTrees" (string)
                        MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER	= "GetPrimaryStatDamageMultiplier" (string)
                        MODIFIER_PROPERTY_FIXED_DAY_VISION	= "GetFixedDayVision" (string)
                        MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT	= "GetModifierPreAttack_BonusDamagePostCrit" (string)
                        MODIFIER_PROPERTY_IGNORE_COOLDOWN	= "GetModifierIgnoreCooldown" (string)
                        MODIFIER_PROPERTY_INVISIBILITY_LEVEL	= "GetModifierInvisibilityLevel" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE	= "GetModifierPhysicalArmorTotal_Percentage" (string)
                        MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE	= "GetModifierAttackSpeedPercentage" (string)
                        MODIFIER_PROPERTY_REINCARNATION 	= "ReincarnateTime" (string)
                        MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE	= "GetAbsoluteNoDamagePure" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE	= "GetModifierPhysicalArmorBonusUnique" (string)
                        MODIFIER_EVENT_ON_DAMAGE_CALCULATED	= "OnDamageCalculated" (string)
                        MODIFIER_EVENT_ON_MODEL_CHANGED 	= "OnModelChanged" (string)
                        MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE	= "GetModifierTotalDamageOutgoing_Percentage" (string)
                        MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE	= "PreserveParticlesOnModelChanged" (string)
                        MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE	= "GetModifierIncomingDamage_Percentage" (string)
                        MODIFIER_EVENT_ON_ABILITY_EXECUTED	= "OnAbilityExecuted" (string)
                        MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE	= "GetModifierConstantManaRegenUnique" (string)
                        MODIFIER_PROPERTY_ABILITY_LAYOUT	= "GetModifierAbilityLayout" (string)
                        MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL	= "GetModifierProcAttack_BonusDamage_Physical" (string)
                        MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT	= "GetModifierAttackSpeed_Limit" (string)
                        MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE	= "GetModifierLifestealRegenAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION	= "GetModifierRadarCooldownReduction" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE	= "GetModifierOverrideAbilitySpecialValue" (string)
                        MODIFIER_PROPERTY_CASTTIME_PERCENTAGE	= "GetModifierPercentageCasttime" (string)
                        MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL	= "GetAbsoluteNoDamagePhysical" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL	= "GetModifierOverrideAbilitySpecial" (string)
                        MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK	= "GetModifierPhysical_ConstantBlock" (string)
                        MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE	= "GetModifierChangeAbilityValue" (string)
                        MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE	= "GetModifierBaseAttack_BonusDamage" (string)
                        MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE	= "GetModifierPercentageAttackAnimTime" (string)
                        MODIFIER_PROPERTY_XP_DURING_DEATH	= "GetModifierXPDuringDeath" (string)
                        MODIFIER_PROPERTY_BONUS_DAY_VISION	= "GetBonusDayVision" (string)
                        MODIFIER_EVENT_ON_ATTACK_START  	= "OnAttackStart" (string)
                        MODIFIER_PROPERTY_DISABLE_TURNING	= "GetModifierDisableTurning" (string)
                        MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP	= "GetForceDrawOnMinimap" (string)
                        MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT	= "GetModifierAttackSpeedBonus_Constant" (string)
                        MODIFIER_PROPERTY_AVOID_SPELL   	= "GetModifierAvoidSpell" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE	= "GetModifierPhysicalArmorBase_Percentage" (string)
                        MODIFIER_PROPERTY_MANA_BONUS    	= "GetModifierManaBonus" (string)
                        MODIFIER_PROPERTY_MODEL_CHANGE  	= "GetModifierModelChange" (string)
                        MODIFIER_EVENT_ON_ATTACK_ALLIED 	= "OnAttackAllied" (string)
                        MODIFIER_PROPERTY_PROVIDES_FOW_POSITION	= "GetModifierProvidesFOWVision" (string)
                        MODIFIER_PROPERTY_LIFETIME_FRACTION	= "GetUnitLifetimeFraction" (string)
                        MODIFIER_EVENT_ON_TELEPORTED    	= "OnTeleported" (string)
                        MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET	= "GetModifierPreAttack_BonusDamage_Target" (string)
                        MODIFIER_PROPERTY_IS_SHARD      	= "GetModifierShard" (string)
                        MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY	= "GetModifierDamageOutgoing_Percentage_Illusion_Amplify" (string)
                        MODIFIER_PROPERTY_IS_SCEPTER    	= "GetModifierScepter" (string)
                        MODIFIER_PROPERTY_MODEL_SCALE   	= "GetModifierModelScale" (string)
                        MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE	= "GetModifierMoveSpeed_Absolute" (string)
                        MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE	= "GetModifierProjectileSpeedBonusPercentage" (string)
                        MODIFIER_PROPERTY_SPELLS_REQUIRE_HP	= "GetModifierSpellsRequireHP" (string)
                        MODIFIER_PROPERTY_TOOLTIP       	= "OnTooltip" (string)
                        MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE	= "GetModifierMoveSpeedReductionPercentage" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE	= "GetModifierMoveSpeedBonus_Special_Boots" (string)
                        MODIFIER_PROPERTY_MANA_REGEN_CONSTANT	= "GetModifierConstantManaRegen" (string)
                        MODIFIER_PROPERTY_EXTRA_MANA_BONUS	= "GetModifierExtraManaBonus" (string)
                        MODIFIER_PROPERTY_TEMPEST_DOUBLE	= "GetModifierTempestDouble" (string)
                        MODIFIER_PROPERTY_STATS_INTELLECT_BONUS	= "GetModifierBonusStats_Intellect" (string)
                        MODIFIER_EVENT_ON_BUILDING_KILLED	= "OnBuildingKilled" (string)
                        MODIFIER_EVENT_ON_HERO_KILLED   	= "OnHeroKilled" (string)
                        MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW	= "GetModifierPreAttack_DeadlyBlow" (string)
                        MODIFIER_EVENT_ON_HEALTH_GAINED 	= "OnHealthGained" (string)
                        MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT	= "GetModifierIncomingSpellDamageConstant" (string)
                        MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL	= "GetAbsoluteNoDamageMagical" (string)
                        MODIFIER_EVENT_ON_SET_LOCATION  	= "OnSetLocation" (string)
                        MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE	= "GetModifierHPRegenAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE	= "GetModifierBonusStats_Strength_Percentage" (string)
                        MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS	= "GetActivityTranslationModifiers" (string)
                        MODIFIER_EVENT_ON_RESPAWN       	= "OnRespawn" (string)
                        MODIFIER_EVENT_ON_SPENT_MANA    	= "OnSpentMana" (string)
                        MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION	= "GetModifierMagicalResistanceDirectModification" (string)
                        MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT	= "OnProjectileObstructionHit" (string)
                        MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE	= "GetModifierBonusDamageOutgoing_Percentage" (string)
                        MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE	= "GetModifierSpellAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT	= "GetOverrideAnimationWeight" (string)
                        MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED	= "OnMagicDamageCalculated" (string)
                        MODIFIER_EVENT_ON_PROCESS_UPGRADE	= "Unused" (string)
                        MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS	= "GetModifierProjectileSpeedBonus" (string)
                        MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT	= "GetModifierIncomingPhysicalDamageConstant" (string)
                        MODIFIER_EVENT_ON_STATE_CHANGED 	= "OnStateChanged" (string)
                        MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK	= "GetAlwaysAllowAttack" (string)
                        MODIFIER_EVENT_ON_DEATH_PREVENTED	= "OnDamagePrevented" (string)
                        MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE	= "GetModifierAttackSpeedReductionPercentage" (string)
                        MODIFIER_PROPERTY_PROCATTACK_FEEDBACK	= "GetModifierProcAttack_Feedback" (string)
                        MODIFIER_EVENT_ON_REFRESH       	= "Unused" (string)
                        MODIFIER_EVENT_ON_PROCESS_CLEAVE	= "OnProcessCleave" (string)
                        MODIFIER_EVENT_ON_ABILITY_END_CHANNEL	= "OnAbilityEndChannel" (string)
                        MODIFIER_EVENT_ON_BREAK_INVISIBILITY	= "OnBreakInvisibility" (string)
                        MODIFIER_EVENT_ON_ABILITY_FULLY_CAST	= "OnAbilityFullyCast" (string)
                        MODIFIER_EVENT_ON_DOMINATED     	= "OnDominated" (string)
                        MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING	= "GetModifierPercentageManacostStacking" (string)
                        MODIFIER_PROPERTY_PROJECTILE_NAME	= "GetModifierProjectileName" (string)
                        MODIFIER_PROPERTY_ATTACK_RANGE_BONUS	= "GetModifierAttackRangeBonus" (string)
                        MODIFIER_PROPERTY_MIN_HEALTH    	= "GetMinHealth" (string)
                        MODIFIER_EVENT_ON_ABILITY_START 	= "OnAbilityStart" (string)
                        MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK	= "GetModifierMagical_ConstantBlock" (string)
                        MODIFIER_EVENT_ON_ORDER         	= "OnOrder" (string)
                        MODIFIER_EVENT_ON_PROJECTILE_DODGE	= "OnProjectileDodge" (string)
                        MODIFIER_EVENT_ON_ATTACK_LANDED 	= "OnAttackLanded" (string)
                        MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH	= "GetModifierUnitStatsNeedsRefresh" (string)
                        MODIFIER_PROPERTY_BASE_MANA_REGEN	= "GetModifierBaseRegen" (string)
                        MODIFIER_EVENT_ON_ATTACK_RECORD 	= "OnAttackRecord" (string)
                        MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE	= "GetModifierProcAttack_BonusDamage_Pure" (string)
                        MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET	= "" (string)
                        MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION	= "GetAlwaysAutoAttackWhileHoldPosition" (string)
                        MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT	= "OnTakeDamageKillCredit" (string)
                        MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE	= "GetModifierIncomingPhysicalDamage_Percentage" (string)
                        MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE	= "GetModifierExtraHealthPercentage" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE	= "GetModifierMoveSpeedBonus_Constant_Unique" (string)
                        MODIFIER_PROPERTY_STATS_STRENGTH_BONUS	= "GetModifierBonusStats_Strength" (string)
                        MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC	= "GetModifierPreAttack_BonusDamage_Proc" (string)
                        MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK	= "GetTriggerCosmeticAndEndAttack" (string)
                        MODIFIER_PROPERTY_DODGE_PROJECTILE	= "GetModifierDodgeProjectile" (string)
                        MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING	= "GetModifierUnitDisllowUpgrading" (string)
                        MODIFIER_PROPERTY_EVASION_CONSTANT	= "GetModifierEvasion_Constant" (string)
                        MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT	= "GetModifierAttackPointConstant" (string)
                        MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER	= "Unused" (string)
                        MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE	= "GetModifierSpellAmplify_PercentageUnique" (string)
                        MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE	= "GetModifierBaseAttackTimePercentage" (string)
                        MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE	= "GetModifierBonusStats_Agility_Percentage" (string)
                        MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER	= "Unused" (string)
                        MODIFIER_PROPERTY_CAST_RANGE_BONUS	= "GetModifierCastRangeBonus" (string)
                        MODIFIER_EVENT_ON_ATTACK        	= "OnAttack" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL	= "GetOverrideAttackMagical" (string)
                        MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR	= "GetModifierIgnorePhysicalArmor" (string)
                        MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY	= "GetModifierPersistentInvisibility" (string)
                        MODIFIER_PROPERTY_DISABLE_HEALING	= "GetDisableHealing" (string)
                        MODIFIER_PROPERTY_TURN_RATE_OVERRIDE	= "GetModifierTurnRate_Override" (string)
                        MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET	= "GetModifierCastRangeBonusTarget" (string)
                        MODIFIER_PROPERTY_MAX_ATTACK_RANGE	= "GetModifierMaxAttackRange" (string)
                        MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN	= "GetModifierMoveSpeed_AbsoluteMin" (string)
                        MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE	= "GetModifierTotalPercentageManaRegen" (string)
                        MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST	= "GetModifierBaseAttackTimeConstant_Adjust" (string)
                        MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE	= "GetModifierTurnRate_Percentage" (string)
                        MODIFIER_PROPERTY_IGNORE_CAST_ANGLE	= "GetModifierIgnoreCastAngle" (string)
                        MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE	= "GetModifierSuperIllusionWithUltimate" (string)
                        MODIFIER_PROPERTY_SUPER_ILLUSION	= "GetModifierSuperIllusion" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2	= "GetModifierMoveSpeedBonus_Constant_Unique_2" (string)
                        MODIFIER_PROPERTY_STRONG_ILLUSION	= "GetModifierStrongIllusion" (string)
                        MODIFIER_PROPERTY_ILLUSION_LABEL	= "GetModifierIllusionLabel" (string)
                        MODIFIER_PROPERTY_IS_ILLUSION   	= "GetIsIllusion" (string)
                        MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER	= "GetModifierStatusResistanceCaster" (string)
                        MODIFIER_EVENT_ON_KILL          	= "OnKill" (string)
                        MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE	= "GetBonusVisionPercentage" (string)
                        MODIFIER_PROPERTY_BONUS_NIGHT_VISION	= "GetBonusNightVision" (string)
                        MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT	= "GetModifierNegativeEvasion_Constant" (string)
                        MODIFIER_PROPERTY_ABSORB_SPELL  	= "GetAbsorbSpell" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE	= "GetOverrideAnimationRate" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ANIMATION	= "GetOverrideAnimation" (string)
                        MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK	= "GetModifierTotal_ConstantBlock" (string)
                        MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT	= "GetModifierConstantHealthRegen" (string)
                        MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL	= "GetModifierPhysical_ConstantBlockSpecial" (string)
                        MODIFIER_EVENT_ON_UNIT_MOVED    	= "OnUnitMoved" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST	= "GetModifierPhysicalArmorBonusPost" (string)
                        MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE	= "GetModifierPreAttack_Target_CriticalStrike" (string)
                        MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE	= "GetModifierBaseDamageOutgoing_Percentage" (string)
                        MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS	= "GetModifierMagicalResistanceBonusIllusions" (string)
                        MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE	= "GetModifierAttackRangeOverride" (string)
                        MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE	= "GetModifierMPRegenAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT	= "GetModifierBaseAttackTimeConstant" (string)
                        MODIFIER_PROPERTY_AVOID_DAMAGE  	= "GetModifierAvoidDamage" (string)
                        MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE	= "GetModifierMPRestoreAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_MAX_DEBUFF_DURATION	= "GetModifierMaxDebuffDuration" (string)
                        MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE	= "GetModifierHealthRegenPercentageUnique" (string)
                        MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE	= "GetModifierExtraManaPercentage" (string)
                        MODIFIER_PROPERTY_PRE_ATTACK    	= "GetModifierPreAttack" (string)
                        MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT	= "GetModifierCooldownReduction_Constant" (string)
                        MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL	= "GetModifierProcAttack_BonusDamage_Magical" (string)
                        MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE	= "GetModifierSpellLifestealRegenAmplify_Percentage" (string)
                        MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION	= "GetModifierMagicalResistanceBaseReduction" (string)
                        MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP	= "GetModifierSpellAmplify_PercentageCreep" (string)
                        MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS	= "GetModifierExtraHealthBonus" (string)
                        MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE	= "GetModifierMagicalResistanceDecrepifyUnique" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2	= "GetModifierMoveSpeedBonus_Special_Boots_2" (string)
                        MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION	= "GetModifierDamageOutgoing_Percentage_Illusion" (string)
                        MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE	= "GetModifierPercentageRespawnTime" (string)
                        MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE	= "GetModifierPreAttack_BonusDamage" (string)
                        MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK	= "GetAllowEtherealAttack" (string)
                        MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE	= "GetModifierHealAmplify_PercentageSource" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS	= "GetModifierPhysicalArmorBonus" (string)
                        MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE	= "GetModifierBaseDamageOutgoing_PercentageUnique" (string)
                        MODIFIER_PROPERTY_STATUS_RESISTANCE	= "GetModifierStatusResistance" (string)
                        MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING	= "GetModifierCastRangeBonusStacking" (string)
                        MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE	= "GetModifierAttackRangeBonusPercentage" (string)
                        MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE	= "GetModifierPhysicalArmorBonusUniqueActive" (string)
                        MODIFIER_EVENT_ON_DEATH         	= "OnDeath" (string)
                        MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL	= "GetModifierProcAttack_ConvertPhysicalToMagical" (string)
                        MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE	= "GetModifierMoveSpeedBonus_Percentage" (string)
                        MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS	= "GetModifierExtraStrengthBonus" (string)
                        MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE	= "GetModifierHealthRegenPercentage" (string)
                        MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE	= "GetModifierOverrideAttackDamage" (string)
                        MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT	= "GetModifierIgnoreMovespeedLimit" (string)
                        MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE	= "GetModifierBonusStats_Intellect_Percentage" (string)
                        MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET	= "GetModifierHealAmplify_PercentageTarget" (string)
                        MODIFIER_EVENT_ON_ASSIST        	= "OnAssist" (string)
                        MODIFIER_PROPERTY_RESPAWNTIME_STACKING	= "GetModifierStackingRespawnTime" (string)
                        MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE	= "GetModifierPercentageCooldown" (string)
                     }
                     EDOTA_ModifyXP_Reason           	= table: 0x0114e970 (table)
                     {
                        DOTA_ModifyXP_TomeOfKnowledge   	= "" (string)
                        DOTA_ModifyXP_Unspecified       	= "" (string)
                        DOTA_ModifyXP_MAX               	= "" (string)
                        DOTA_ModifyXP_HeroKill          	= "" (string)
                        DOTA_ModifyXP_RoshanKill        	= "" (string)
                        DOTA_ModifyXP_CreepKill         	= "" (string)
                        DOTA_ModifyXP_Outpost           	= "" (string)
                     }
                     DOTAUnitAttackCapability_t      	= table: 0x011282a8 (table)
                     {
                        DOTA_UNIT_CAP_MELEE_ATTACK      	= "" (string)
                        DOTA_UNIT_CAP_NO_ATTACK         	= "" (string)
                        DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL	= "" (string)
                        DOTA_UNIT_CAP_RANGED_ATTACK     	= "" (string)
                        DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT	= "" (string)
                     }
                     GameActivity_t                  	= table: 0x0114ed90 (table)
                     {
                        ACT_DOTA_SPIRIT_BREAKER_CHARGE_END	= "" (string)
                        ACT_DOTA_CAST_ABILITY_7         	= "" (string)
                        ACT_DOTA_INTRO                  	= "" (string)
                        ACT_DOTA_NIAN_PIN_START         	= "" (string)
                        ACT_DOTA_VICTORY                	= "" (string)
                        ACT_DOTA_LIFESTEALER_ASSIMILATE 	= "" (string)
                        ACT_DOTA_ECHO_SLAM              	= "" (string)
                        ACT_DOTA_LASSO_LOOP             	= "" (string)
                        ACT_DOTA_NIAN_PIN_LOOP          	= "" (string)
                        ACT_DOTA_CAST_ABILITY_5         	= "" (string)
                        ACT_DOTA_UNDYING_DECAY          	= "" (string)
                        ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END	= "" (string)
                        ACT_DOTA_POOF_END               	= "" (string)
                        ACT_DOTA_LIFESTEALER_EJECT      	= "" (string)
                        ACT_DOTA_SHALLOW_GRAVE          	= "" (string)
                        ACT_DOTA_CAST_ABILITY_1         	= "" (string)
                        ACT_DOTA_CAST_TORNADO_ORB       	= "" (string)
                        ACT_DOTA_ROQUELAIRE_LAND_IDLE   	= "" (string)
                        ACT_DOTA_RATTLETRAP_POWERCOGS   	= "" (string)
                        ACT_DOTA_ARCTIC_BURN_END        	= "" (string)
                        ACT_TINY_GROWL                  	= "" (string)
                        ACT_DOTA_SLARK_POUNCE           	= "" (string)
                        ACT_DOTA_SWIM                   	= "" (string)
                        ACT_DOTA_SHAKE                  	= "" (string)
                        ACT_DOTA_LIFESTEALER_INFEST_END 	= "" (string)
                        ACT_DOTA_MK_SPRING_CAST         	= "" (string)
                        ACT_DOTA_IDLE_SLEEPING          	= "" (string)
                        ACT_DOTA_LIFESTEALER_RAGE       	= "" (string)
                        ACT_DOTA_ALCHEMIST_CONCOCTION   	= "" (string)
                        ACT_DOTA_CAPTURE_RARE           	= "" (string)
                        ACT_DOTA_TELEPORT               	= "" (string)
                        ACT_DOTA_ROQUELAIRE_LAND        	= "" (string)
                        ACT_DOTA_KINETIC_FIELD          	= "" (string)
                        ACT_DOTA_DISABLED               	= "" (string)
                        ACT_DOTA_ICE_VORTEX             	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_5  	= "" (string)
                        ACT_DOTA_RELAX_LOOP             	= "" (string)
                        ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE	= "" (string)
                        ACT_DOTA_FRUSTRATION            	= "" (string)
                        ACT_DOTA_BELLYACHE_LOOP         	= "" (string)
                        ACT_DOTA_DIE                    	= "" (string)
                        ACT_DOTA_CAPTURE_PET            	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2_ALLY    	= "" (string)
                        ACT_DOTA_RATTLETRAP_HOOKSHOT_START	= "" (string)
                        ACT_DOTA_GREEVIL_HOOK_START     	= "" (string)
                        ACT_TINY_TOSS                   	= "" (string)
                        ACT_DOTA_CENTAUR_STAMPEDE       	= "" (string)
                        ACT_WAVEFORM_START              	= "" (string)
                        ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK	= "" (string)
                        ACT_DOTA_MAGNUS_SKEWER_END      	= "" (string)
                        ACT_DOTA_OVERRIDE_ARCANA        	= "" (string)
                        ACT_DOTA_FLINCH                 	= "" (string)
                        ACT_DOTA_SHRUG                  	= "" (string)
                        ACT_DOTA_PET_WARD_OBSERVER      	= "" (string)
                        ACT_DOTA_SAND_KING_BURROW_OUT   	= "" (string)
                        ACT_DOTA_CAST_GHOST_WALK        	= "" (string)
                        ACT_DOTA_MAGNUS_SKEWER_START    	= "" (string)
                        ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP	= "" (string)
                        ACT_DOTA_TRANSITION_IDLE        	= "" (string)
                        ACT_DOTA_CAGED_CREEP_SMASH      	= "" (string)
                        ACT_DOTA_DEFEAT_START           	= "" (string)
                        ACT_DOTA_AMBUSH                 	= "" (string)
                        ACT_DOTA_ANCESTRAL_SPIRIT       	= "" (string)
                        ACT_DOTA_TINKER_REARM2          	= "" (string)
                        ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP	= "" (string)
                        ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE	= "" (string)
                        ACT_DOTA_GS_INK_CREATURE        	= "" (string)
                        ACT_DOTA_GREEVIL_CAST           	= "" (string)
                        ACT_DOTA_MINI_TAUNT             	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_7      	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2_ES_ROLL 	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_IDLE_RARE 	= "" (string)
                        ACT_DOTA_CAST_GHOST_SHIP        	= "" (string)
                        ACT_DOTA_ITEM_PICKUP            	= "" (string)
                        ACT_DOTA_TELEPORT_COOP_WAIT     	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_5      	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_DIE       	= "" (string)
                        ACT_DOTA_ALCHEMIST_CONCOCTION_THROW	= "" (string)
                        ACT_DOTA_WAIT_IDLE              	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_2      	= "" (string)
                        ACT_DOTA_BRIDGE_THREAT          	= "" (string)
                        ACT_DOTA_CAST_TORNADO           	= "" (string)
                        ACT_DOTA_BLINK_DAGGER           	= "" (string)
                        ACT_DOTA_OVERRIDE_LOADOUT       	= "" (string)
                        ACT_DOTA_CAST_ALACRITY          	= "" (string)
                        ACT_DOTA_RUN                    	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END	= "" (string)
                        ACT_DOTA_FXANIM                 	= "" (string)
                        ACT_DOTA_TAUNT                  	= "" (string)
                        ACT_DOTA_STATIC_STORM           	= "" (string)
                        ACT_DOTA_GREET                  	= "" (string)
                        ACT_DOTA_IDLE_IMPATIENT         	= "" (string)
                        ACT_DOTA_CAST_ABILITY_6         	= "" (string)
                        ACT_DOTA_TELEPORT_COOP_END      	= "" (string)
                        ACT_DOTA_RELAX_END              	= "" (string)
                        ACT_DOTA_CAST_LIFE_BREAK_START  	= "" (string)
                        ACT_DOTA_CONSTANT_LAYER         	= "" (string)
                        ACT_DOTA_GESTURE_POINT          	= "" (string)
                        ACT_DOTA_BRIDGE_DESTROY         	= "" (string)
                        ACT_DOTA_RELAX_START            	= "" (string)
                        ACT_DOTA_RATTLETRAP_BATTERYASSAULT	= "" (string)
                        ACT_DOTA_ES_STONE_CALLER        	= "" (string)
                        ACT_DOTA_MK_SPRING_SOAR         	= "" (string)
                        ACT_MIRANA_LEAP_END             	= "" (string)
                        ACT_DOTA_MIDNIGHT_PULSE         	= "" (string)
                        ACT_DOTA_CAST_ABILITY_4         	= "" (string)
                        ACT_DOTA_GREEVIL_BLINK_BONE     	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2         	= "" (string)
                        ACT_DOTA_DIE_SPECIAL            	= "" (string)
                        ACT_DOTA_CAST_WILD_AXES_END     	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_IDLE      	= "" (string)
                        ACT_DOTA_CAST_ABILITY_3         	= "" (string)
                        ACT_DOTA_CAST_COLD_SNAP_ORB     	= "" (string)
                        ACT_DOTA_CAST_ALACRITY_ORB      	= "" (string)
                        ACT_WAVEFORM_END                	= "" (string)
                        ACT_DOTA_SLIDE                  	= "" (string)
                        ACT_DOTA_SLIDE_LOOP             	= "" (string)
                        ACT_DOTA_TRANSITION             	= "" (string)
                        ACT_TINY_AVALANCHE              	= "" (string)
                        ACT_DOTA_LIFESTEALER_INFEST     	= "" (string)
                        ACT_DOTA_SHUFFLE_R              	= "" (string)
                        ACT_DOTA_OVERRIDE_ABILITY_2     	= "" (string)
                        ACT_DOTA_SLEEPING_END           	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START	= "" (string)
                        ACT_DOTA_LOOK_AROUND            	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_2  	= "" (string)
                        ACT_DOTA_TELEPORT_COOP_EXIT     	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_ATTACK    	= "" (string)
                        ACT_DOTA_NOTICE                 	= "" (string)
                        ACT_DOTA_PET_WARD_SENTRY        	= "" (string)
                        ACT_DOTA_THIRST                 	= "" (string)
                        ACT_DOTA_NIAN_PIN_END           	= "" (string)
                        ACT_DOTA_CAST_ICE_WALL          	= "" (string)
                        ACT_DOTA_PIERCE_THE_VEIL        	= "" (string)
                        ACT_DOTA_CHILLING_TOUCH         	= "" (string)
                        ACT_DOTA_GREEVIL_HOOK_END       	= "" (string)
                        ACT_DOTA_MK_TREE_END            	= "" (string)
                        ACT_DOTA_IDLE_RARE              	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_6  	= "" (string)
                        ACT_DOTA_FORCESTAFF_END         	= "" (string)
                        ACT_DOTA_SHOPKEEPER_PET_INTERACT	= "" (string)
                        ACT_DOTA_TRICKS_END             	= "" (string)
                        ACT_DOTA_LEAP_STUN              	= "" (string)
                        ACT_DOTA_GESTURE_ACCENT         	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_4  	= "" (string)
                        ACT_DOTA_NIGHTSTALKER_TRANSITION	= "" (string)
                        ACT_DOTA_DEATH_BY_SNIPER        	= "" (string)
                        ACT_DOTA_CAST_ABILITY_1_END     	= "" (string)
                        ACT_DOTA_DEFEAT                 	= "" (string)
                        ACT_DOTA_LIFESTEALER_OPEN_WOUNDS	= "" (string)
                        ACT_DOTA_FLAIL                  	= "" (string)
                        ACT_DOTA_CAST_FORGE_SPIRIT      	= "" (string)
                        ACT_DOTA_CAST_CHAOS_METEOR_ORB  	= "" (string)
                        ACT_DOTA_KILLTAUNT              	= "" (string)
                        ACT_DOTA_GS_SOUL_CHAIN          	= "" (string)
                        ACT_DOTA_SHUFFLE_L              	= "" (string)
                        ACT_DOTA_NECRO_GHOST_SHROUD     	= "" (string)
                        ACT_DOTA_TINKER_REARM1          	= "" (string)
                        ACT_DOTA_CAST_FORGE_SPIRIT_ORB  	= "" (string)
                        ACT_DOTA_VICTORY_START          	= "" (string)
                        ACT_DOTA_MK_FUR_ARMY            	= "" (string)
                        ACT_DOTA_AW_MAGNETIC_FIELD      	= "" (string)
                        ACT_DOTA_UNDYING_TOMBSTONE      	= "" (string)
                        ACT_DOTA_SPAWN                  	= "" (string)
                        ACT_DOTA_ATTACK_EVENT           	= "" (string)
                        ACT_DOTA_WEAVERBUG_ATTACH       	= "" (string)
                        ACT_DOTA_JAKIRO_LIQUIDFIRE_START	= "" (string)
                        ACT_DOTA_CAST_DEAFENING_BLAST   	= "" (string)
                        ACT_DOTA_SAND_KING_BURROW_IN    	= "" (string)
                        ACT_DOTA_TELEPORT_REACT         	= "" (string)
                        ACT_DOTA_ATTACK_SPECIAL         	= "" (string)
                        ACT_DOTA_PET_LEVEL              	= "" (string)
                        ACT_DOTA_FLEE                   	= "" (string)
                        ACT_DOTA_GENERIC_CHANNEL_1      	= "" (string)
                        ACT_DOTA_BELLYACHE_END          	= "" (string)
                        ACT_DOTA_IDLE_SLEEPING_END      	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE 	= "" (string)
                        ACT_DOTA_CUSTOM_TOWER_TAUNT     	= "" (string)
                        ACT_DOTA_CAST_REFRACTION        	= "" (string)
                        ACT_DOTA_ITEM_DROP              	= "" (string)
                        ACT_DOTA_CAST_EMP               	= "" (string)
                        ACT_DOTA_RAZE_3                 	= "" (string)
                        ACT_DOTA_CAST_SUN_STRIKE_ORB    	= "" (string)
                        ACT_DOTA_CAST_DEAFENING_BLAST_ORB	= "" (string)
                        ACT_DOTA_BLINK_DAGGER_END       	= "" (string)
                        ACT_DOTA_MEDUSA_STONE_GAZE      	= "" (string)
                        ACT_DOTA_LOADOUT                	= "" (string)
                        ACT_DOTA_CAGED_CREEP_RAGE       	= "" (string)
                        ACT_DOTA_DP_SPIRIT_SIPHON       	= "" (string)
                        ACT_DOTA_NIAN_INTRO_LEAP        	= "" (string)
                        ACT_DOTA_CAST_ABILITY_2_END     	= "" (string)
                        ACT_DOTA_AREA_DENY              	= "" (string)
                        ACT_DOTA_ATTACK_EVENT_BASH      	= "" (string)
                        ACT_DOTA_CAST_EMP_ORB           	= "" (string)
                        ACT_DOTA_CANCEL_SIREN_SONG      	= "" (string)
                        ACT_DOTA_UNDYING_SOUL_RIP       	= "" (string)
                        ACT_DOTA_ENFEEBLE               	= "" (string)
                        ACT_DOTA_IDLE                   	= "" (string)
                        ACT_DOTA_SHARPEN_WEAPON_OUT     	= "" (string)
                        ACT_DOTA_RATTLETRAP_HOOKSHOT_END	= "" (string)
                        ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START	= "" (string)
                        ACT_DOTA_CAST_ABILITY_4_END     	= "" (string)
                        ACT_DOTA_RAZE_2                 	= "" (string)
                        ACT_DOTA_NIAN_PIN_TO_STUN       	= "" (string)
                        ACT_DOTA_CAST_ABILITY_3_END     	= "" (string)
                        ACT_DOTA_CAST_ABILITY_ROT       	= "" (string)
                        ACT_DOTA_MK_STRIKE              	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_1  	= "" (string)
                        ACT_DOTA_CHANNEL_END_ABILITY_3  	= "" (string)
                        ACT_DOTA_OVERRIDE_ABILITY_1     	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_3      	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_4      	= "" (string)
                        ACT_DOTA_OVERRIDE_ABILITY_4     	= "" (string)
                        ACT_DOTA_STARTLE                	= "" (string)
                        ACT_DOTA_RELAX_LOOP_END         	= "" (string)
                        ACT_DOTA_BELLYACHE_START        	= "" (string)
                        ACT_DOTA_TELEPORT_END           	= "" (string)
                        ACT_DOTA_TELEPORT_START         	= "" (string)
                        ACT_DOTA_TELEPORT_END_REACT     	= "" (string)
                        ACT_DOTA_PRESENT_ITEM           	= "" (string)
                        ACT_DOTA_TAUNT_SNIPER           	= "" (string)
                        ACT_DOTA_CAST_CHAOS_METEOR      	= "" (string)
                        ACT_DOTA_CAGED_CREEP_RAGE_OUT   	= "" (string)
                        ACT_DOTA_CAGED_CREEP_SMASH_OUT  	= "" (string)
                        ACT_DOTA_INTRO_LOOP             	= "" (string)
                        ACT_DOTA_DAGON                  	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_6      	= "" (string)
                        ACT_DOTA_GENERIC_CHANNEL_1_START	= "" (string)
                        ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP 	= "" (string)
                        ACT_DOTA_MK_SPRING_END          	= "" (string)
                        ACT_DOTA_CHANNEL_ABILITY_1      	= "" (string)
                        ACT_DOTA_RAZE_1                 	= "" (string)
                        ACT_DOTA_FATAL_BONDS            	= "" (string)
                        ACT_DOTA_WHIRLING_AXES_RANGED   	= "" (string)
                        ACT_DOTA_THUNDER_STRIKE         	= "" (string)
                        ACT_DOTA_TINKER_REARM3          	= "" (string)
                        ACT_DOTA_LOADOUT_RARE           	= "" (string)
                        ACT_DOTA_ATTACK2                	= "" (string)
                        ACT_DOTA_CAST_DRAGONBREATH      	= "" (string)
                        ACT_DOTA_SWIM_IDLE              	= "" (string)
                        ACT_DOTA_CAPTURE                	= "" (string)
                        ACT_DOTA_VERSUS                 	= "" (string)
                        ACT_DOTA_CAST_COLD_SNAP         	= "" (string)
                        ACT_DOTA_WHEEL_LAYER            	= "" (string)
                        ACT_DOTA_CAST_BURROW_END        	= "" (string)
                        ACT_DOTA_LEAP_SWIPE             	= "" (string)
                        ACT_DOTA_GREEVIL_OVERRIDE_ABILITY	= "" (string)
                        ACT_DOTA_COLD_FEET              	= "" (string)
                        ACT_DOTA_CAST_LIFE_BREAK_END    	= "" (string)
                        ACT_DOTA_CAPTURE_CARD           	= "" (string)
                        ACT_DOTA_MK_TREE_SOAR           	= "" (string)
                        ACT_DOTA_ITEM_LOOK              	= "" (string)
                        ACT_DOTA_SHARPEN_WEAPON         	= "" (string)
                        ACT_DOTA_ATTACK                 	= "" (string)
                        ACT_DOTA_TAUNT_SPECIAL          	= "" (string)
                        ACT_DOTA_TELEPORT_COOP_START    	= "" (string)
                        ACT_DOTA_OVERRIDE_ABILITY_3     	= "" (string)
                        ACT_DOTA_TROT                   	= "" (string)
                        ACT_DOTA_CAST_SUN_STRIKE        	= "" (string)
                        ACT_DOTA_CAST_ICE_WALL_ORB      	= "" (string)
                        ACT_DOTA_CAST_GHOST_WALK_ORB    	= "" (string)
                     }
                     DOTAUnitMoveCapability_t        	= table: 0x0114b9c0 (table)
                     {
                        DOTA_UNIT_CAP_MOVE_GROUND       	= "" (string)
                        DOTA_UNIT_CAP_MOVE_FLY          	= "" (string)
                        DOTA_UNIT_CAP_MOVE_NONE         	= "" (string)
                     }
                     attackfail                      	= table: 0x0114c7c0 (table)
                     {
                        DOTA_ATTACK_RECORD_CANNOT_FAIL  	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_NO      	= "" (string)
                        DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS	= "" (string)
                     }
                     DotaDefaultUIElement_t          	= table: 0x0114d490 (table)
                     {
                        DOTA_DEFAULT_UI_ELEMENT_COUNT   	= "" (string)
                        DOTA_DEFAULT_UI_TOP_HEROES      	= "" (string)
                        DOTA_DEFAULT_UI_AGHANIMS_STATUS 	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_QUICKBUY	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_COURIER	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_GOLD  	= "" (string)
                        DOTA_DEFAULT_UI_TOP_BAR         	= "" (string)
                        DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD	= "" (string)
                        DOTA_DEFAULT_UI_QUICK_STATS     	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_PANEL 	= "" (string)
                        DOTA_DEFAULT_UI_ACTION_MINIMAP  	= "" (string)
                        DOTA_DEFAULT_UI_INVALID         	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_ITEMS 	= "" (string)
                        DOTA_DEFAULT_UI_TOP_MENU_BUTTONS	= "" (string)
                        DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK	= "" (string)
                        DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND	= "" (string)
                        DOTA_DEFAULT_UI_ACTION_PANEL    	= "" (string)
                        DOTA_DEFAULT_UI_KILLCAM         	= "" (string)
                        DOTA_DEFAULT_UI_ENDGAME_CHAT    	= "" (string)
                        DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS	= "" (string)
                        DOTA_DEFAULT_UI_TOP_BAR_SCORE   	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_SHOP  	= "" (string)
                        DOTA_DEFAULT_UI_TOP_TIMEOFDAY   	= "" (string)
                        DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM	= "" (string)
                        DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS	= "" (string)
                        DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM	= "" (string)
                        DOTA_DEFAULT_UI_PREGAME_STRATEGYUI	= "" (string)
                        DOTA_DEFAULT_UI_INVENTORY_PROTECT	= "" (string)
                        DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME	= "" (string)
                        DOTA_DEFAULT_UI_SHOP_COMMONITEMS	= "" (string)
                        DOTA_DEFAULT_UI_ENDGAME         	= "" (string)
                        DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS	= "" (string)
                     }
                     ParticleAttachment_t            	= table: 0x01179118 (table)
                     {
                        PATTACH_ABSORIGIN_FOLLOW        	= "" (string)
                        PATTACH_HEALTHBAR               	= "" (string)
                        PATTACH_EYES_FOLLOW             	= "" (string)
                        PATTACH_MAIN_VIEW               	= "" (string)
                        PATTACH_CUSTOMORIGIN_FOLLOW     	= "" (string)
                        PATTACH_OVERHEAD_FOLLOW         	= "" (string)
                        MAX_PATTACH_TYPES               	= "" (string)
                        PATTACH_ABSORIGIN               	= "" (string)
                        PATTACH_CENTER_FOLLOW           	= "" (string)
                        PATTACH_RENDERORIGIN_FOLLOW     	= "" (string)
                        PATTACH_ROOTBONE_FOLLOW         	= "" (string)
                        PATTACH_CUSTOMORIGIN            	= "" (string)
                        PATTACH_INVALID                 	= "" (string)
                        PATTACH_CUSTOM_GAME_STATE_1     	= "" (string)
                        PATTACH_POINT                   	= "" (string)
                        PATTACH_POINT_FOLLOW            	= "" (string)
                        PATTACH_WORLDORIGIN             	= "" (string)
                        PATTACH_WATERWAKE               	= "" (string)
                     }
                  }
                  CDOTAPlayerController           	= table: 0x01190830 (table, already seen)
                  EntityLinkClasses               	= table: 0x011dc8a0 (table)
                  {
                  }
                  CustomGameEventManager          	= table: 0x0120c2a0 (table, already seen)
                  CDOTA_Ability_Lua               	= table: 0x011a8148 (table, already seen)
                  CDOTA_Modifier_Lua              	= table: 0x011310f0 (table, already seen)
                  CBasePlayerController           	= table: 0x011c1688 (table, already seen)
                  CDOTA_Ability_Animation_Attack  	= table: 0x011afd40 (table, already seen)
                  table                           	= table: 0x011142a0 (table)
                  {
                     foreach                         	= function: builtin#93 (function)
                     sort                            	= function: builtin#99 (function)
                     remove                          	= function: builtin#97 (function)
                     foreachi                        	= function: builtin#92 (function)
                     maxn                            	= function: builtin#95 (function)
                     getn                            	= function: builtin#94 (function)
                     concat                          	= function: builtin#98 (function)
                     insert                          	= function: builtin#96 (function)
                  }
                  CDOTA_Unit_CustomGameAnnouncer  	= table: 0x011b1fe8 (table, already seen)
                  CSceneEntity                    	= table: 0x011ab1d0 (table, already seen)
                  CScriptParticleManager          	= table: 0x0112e168 (table, already seen)
                  CDOTA_BaseNPC                   	= table: 0x01188418 (table, already seen)
                  CBaseEntity                     	= table: 0x01137138 (table, already seen)
                  CDOTA_Ability_Nian_Roar         	= table: 0x011b1ad8 (table, already seen)
                  CDOTA_BaseNPC_Watch_Tower       	= table: 0x011b3848 (table, already seen)
                  CDOTATutorial                   	= table: 0x01205c08 (table, already seen)
                  CEntityInstance                 	= table: 0x01125f08 (table, already seen)
                  CDOTABaseAbility                	= table: 0x0117bba8 (table, already seen)
                  GameRules                       	= table: 0x01205a80 (table, already seen)
                  ProjectileManager               	= table: 0x0112db28 (table)
                  {
                     metatable                       	= table: 0x0112d0d8 (table, already seen)
                     __self                          	= userdata: 0x0112db68 (userdata)
                  }
                  CPointWorldText                 	= table: 0x011c0970 (table, already seen)
                  CDOTA_BaseNPC_Creature          	= table: 0x011b0230 (table, already seen)
                  CDOTA_Ability_DataDriven        	= table: 0x011aaf20 (table, already seen)
                  CDOTA_CustomUIManager           	= table: 0x0120c5c8 (table, already seen)
                  CDOTAGameManager                	= table: 0x0112dc90 (table, already seen)
                  CDOTA_MapTree                   	= table: 0x011b4110 (table, already seen)
                  ScriptDebugDefaultWatchColor    	= table: 0x011b1c80 (array table)
                  [
                     1                               	= 0 (number)
                     2                               	= 192 (number)
                     3                               	= 0 (number)
                  ]
                  DOTAGameManager                 	= table: 0x0112dfd8 (table, already seen)
                  CDOTA_Ability_Animation_TailSpin	= table: 0x011affc0 (table, already seen)
                  ParticleManager                 	= table: 0x0112f118 (table)
                  {
                     metatable                       	= table: 0x0112e168 (table, already seen)
                     __self                          	= userdata: 0x0112f158 (userdata)
                  }
                  CDOTA_Item_DataDriven           	= table: 0x011be038 (table, already seen)
                  CPhysicsProp                    	= table: 0x011c18f0 (table, already seen)
                  EntityMixins                    	= table: 0x011dc850 (table)
                  {
                     EnableDisable                   	= table: 0x011ec0b8 (table)
                     {
                        Enable                          	= function: 0x011ec7c0 (function)
                        Spawn                           	= function: 0x011ec140 (function)
                        Disable                         	= function: 0x011ec8a8 (function)
                        enabled                         	= true (boolean)
                        InstallMixin                    	= function: 0x011ec420 (function)
                        Specification                   	= table: 0x011ec118 (table)
                        {
                           documentation                   	= "http://" (string)
                           meta                            	= table: 0x011ebb18 (table)
                           {
                              enabled                         	= table: 0x011ebb78 (table)
                              {
                                 tags                            	= "publish" (string)
                                 def                             	= true (boolean)
                                 name                            	= "Is enabled" (string)
                                 type                            	= "boolean" (string)
                              }
                           }
                           inputs                          	= table: 0x01112b38 (table)
                           {
                              Enable                          	= table: 0x01112b98 (table)
                              {
                                 tags                            	= "publish" (string)
                                 description                     	= "Enable the entity" (string)
                              }
                              Disable                         	= table: 0x01112bf8 (table)
                              {
                                 tags                            	= "publish" (string)
                                 description                     	= "Disable the entity" (string)
                              }
                           }
                           description                     	= "Standard implementation for entities that can be enabled & disabled (logically)" (string)
                        }
                     }
                  }
                  CDOTA_Unit_Diretide_Portal      	= table: 0x011be930 (table, already seen)
                  CLogicRelay                     	= table: 0x011c1d38 (table, already seen)
                  CDOTA_Unit_Courier              	= table: 0x011b2288 (table, already seen)
                  CDotaQuest                      	= table: 0x011b4a28 (table, already seen)
                  CDotaTutorialNPCBlocker         	= table: 0x011b3e28 (table, already seen)
                  CDOTA_BaseNPC_Trap_Ward         	= table: 0x011b26b8 (table, already seen)
                  CDOTA_Ability_Nian_Dive         	= table: 0x011b1d70 (table, already seen)
                  debug                           	= table: 0x01115890 (table, already seen)
                  Entities                        	= table: 0x01142e00 (table)
                  {
                     metatable                       	= table: 0x0113e640 (table, already seen)
                     __self                          	= userdata: 0x01142e40 (userdata)
                  }
                  vlua                            	= table: 0x011cd600 (table)
                  {
                     find                            	= function: 0x011cccb8 (function)
                     rawdelete                       	= function: 0x011c8008 (function)
                     delete                          	= function: 0x011ca0a8 (function)
                     resize                          	= function: 0x011ca040 (function)
                     extend                          	= function: 0x011ca060 (function)
                     split                           	= function: 0x011ccc10 (function)
                     contains                        	= function: 0x011d0038 (function)
                     clone                           	= function: 0x011c7fe8 (function)
                     tableadd                        	= function: 0x011ccbf0 (function)
                     reduce                          	= function: 0x011ccbd0 (function)
                     rawin                           	= function: 0x011ccc98 (function)
                     reverse                         	= function: 0x011d0078 (function)
                     select                          	= function: 0x011ccc30 (function)
                     compare                         	= function: 0x011cd628 (function)
                     slice                           	= function: 0x011d0058 (function)
                     clear                           	= function: 0x011c7e78 (function)
                     map                             	= function: 0x011ca080 (function)
                  }
                  coroutine                       	= table: 0x01113708 (table, already seen)
                  GlobalSys                       	= table: 0x01143f30 (table, already seen)
                  CustomUI                        	= table: 0x0120c9e8 (table, already seen)
                  TableHelper                     	= table: 0x0135b3e0 (table, already seen)
                  CPointTemplate                  	= table: 0x011c2b90 (table, already seen)
                  string                          	= table: 0x01114600 (table)
                  {
                     find                            	= function: builtin#86 (function)
                     lower                           	= function: builtin#83 (function)
                     format                          	= function: builtin#91 (function)
                     rep                             	= function: builtin#81 (function)
                     gsub                            	= function: builtin#90 (function)
                     len                             	= function: builtin#77 (function)
                     gmatch                          	= function: builtin#89 (function)
                     dump                            	= function: builtin#85 (function)
                     match                           	= function: builtin#87 (function)
                     reverse                         	= function: builtin#82 (function)
                     byte                            	= function: builtin#78 (function)
                     char                            	= function: builtin#79 (function)
                     upper                           	= function: builtin#84 (function)
                     gfind                           	= function: builtin#89 (function)
                     sub                             	= function: builtin#80 (function)
                  }
                  CDOTA_BaseNPC_Shop              	= table: 0x011b2df0 (table, already seen)
                  SteamInfo                       	= table: 0x01144268 (table)
                  {
                     metatable                       	= table: 0x01144090 (table, already seen)
                     __self                          	= userdata: 0x011442a8 (userdata)
                  }
                  CBodyComponent                  	= table: 0x0117b018 (table, already seen)
                  CEntities                       	= table: 0x0113e640 (table, already seen)
                  ScriptDebugTextFilters          	= table: 0x011b1ef0 (table)
                  {
                  }
                  g_SpawnGroupEntityFilters       	= table: 0x011b3a80 (table)
                  {
                  }
                  _PublishedHelp                  	= table: 0x011f8800 (table, already seen)
                  package                         	= table: 0x01113aa0 (table, already seen)
                  CDOTA_BaseNPC_Hero              	= table: 0x011aac60 (table, already seen)
                  CPointEntity                    	= table: 0x011b2518 (table, already seen)
                  HeroList                        	= table: 0x0112bf50 (table)
                  {
                     metatable                       	= table: 0x01150ab0 (table, already seen)
                     __self                          	= userdata: 0x0112bf90 (userdata)
                  }
                  CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble	= table: 0x011b3b90 (table, already seen)
                  CCustomNetTableManager          	= table: 0x0120bb38 (table, already seen)
                  _deepprint_alreadyseen          	= table: 0x011de180 (table)
                  {
                  }
                  CDOTA_Item_Physical             	= table: 0x01148398 (table, already seen)
                  CEntityScriptFramework          	= table: 0x011c41f0 (table, already seen)
                  CEnvProjectedTexture            	= table: 0x011c25d8 (table, already seen)
                  CDOTA_SimpleObstruction         	= table: 0x01148090 (table, already seen)
                  g_rr                            	= table: 0x011f8f40 (table, already seen)
                  GridNav                         	= table: 0x0112cc68 (table)
                  {
                     metatable                       	= table: 0x0112c098 (table, already seen)
                     __self                          	= userdata: 0x0112cca8 (userdata)
                  }
                  CBasePlayerPawn                 	= table: 0x011b94a8 (table, already seen)
                  CScriptHeroList                 	= table: 0x01150ab0 (table, already seen)
                  EntityClasses                   	= table: 0x011dc878 (table, already seen)
                  CParticleSystem                 	= table: 0x011c14e8 (table, already seen)
                  CPointClientUIWorldPanel        	= table: 0x011c3380 (table, already seen)
                  bit                             	= table: 0x01115ea8 (table, already seen)
                  CDOTA_Ability_Nian_Leap         	= table: 0x011afaa0 (table, already seen)
                  CEnvEntityMaker                 	= table: 0x011c1008 (table, already seen)
                  Tutorial                        	= table: 0x01206250 (table, already seen)
                  ScriptDebugText                 	= table: 0x011b1a08 (table, already seen)
                  CDOTA_PlayerResource            	= table: 0x011b5160 (table, already seen)
                  CDOTA_Modifier_Lua_Horizontal_Motion	= table: 0x01133258 (table, already seen)
                  CDOTA_Item_BagOfGold            	= table: 0x011beef8 (table, already seen)
                  CMarkupVolumeTagged             	= table: 0x011c0c08 (table, already seen)
                  Convars                         	= table: 0x01143958 (table)
                  {
                     metatable                       	= table: 0x01142f90 (table, already seen)
                     __self                          	= userdata: 0x01143998 (userdata)
                  }
                  ParticleEffectControlPoints     	= table: 0x011d9c80 (table)
                  {
                     __class__                       	= table: 0x011d9c80 (table, already seen)
                     __getbase__                     	= function: 0x011d9430 (function)
                     __getclass__                    	= function: 0x011d9410 (function)
                     __initprops__                   	= table: 0x011d9360 (table)
                     {
                     }
                     __instanceof__                  	= function: 0x011d9388 (function)
                  }
                  CLogicScript                    	= table: 0x011c0e70 (table, already seen)
                  CDOTA_NeutralSpawner            	= table: 0x011b29a8 (table, already seen)
                  CBaseFlex                       	= table: 0x01150a50 (table, already seen)
                  CInfoWorldLayer                 	= table: 0x011c3060 (table, already seen)
                  EntityClassNameOverrides        	= table: 0x011dc8c8 (table, already seen)
                  CNativeOutputs                  	= table: 0x011c3930 (table, already seen)
                  CInfoData                       	= table: 0x011c1fa0 (table, already seen)
                  CScriptKeyValues                	= table: 0x011c3cd8 (table, already seen)
                  math                            	= table: 0x01114cb0 (table, already seen)
                  CDOTAVoteSystem                 	= table: 0x01206520 (table, already seen)
                  CDOTA_Item_EmptyBottle          	= table: 0x011aa828 (table, already seen)
                  _G                              	= table: 0x01111960 (table, already seen)
                  ScriptDebugWatches              	= table: 0x011b1f18 (table)
                  {
                  }
                  CDOTABaseGameMode               	= table: 0x01190d20 (table, already seen)
                  CInfoPlayerStartDota            	= table: 0x011b3578 (table, already seen)
                  CDotaSubquestBase               	= table: 0x011b45d8 (table, already seen)
                  EntityFramework                 	= table: 0x011dc918 (table)
                  {
                     PrecacheResource                	= function: 0x011eb4f0 (function)
                     DispatchPrecache                	= function: 0x011eb430 (function)
                     DispatchSpawn                   	= function: 0x011eb450 (function)
                     GetNativeOutputsForClass        	= function: 0x011e1f28 (function)
                     IsKeyValueUsed                  	= function: 0x011eb238 (function)
                     GetNativeClassForDesignerName   	= function: 0x011e1f08 (function)
                     AddClassToGameData              	= function: 0x011e2258 (function)
                     GetDesignerNameForScriptClass   	= function: 0x011e1ea8 (function)
                     UnserializeForPrecache          	= function: 0x011eb3f0 (function)
                     GetEntityHandle                 	= function: 0x011eb4d0 (function)
                     CreateEntity                    	= function: 0x011e22d8 (function)
                     CreateCppClassProxy             	= function: 0x011e22b8 (function)
                     InstallClass_BuildCompleteSpecification	= function: 0x011e2070 (function)
                     InstallClassMixinKeysToIgnore   	= table: 0x011dc9f8 (array table)
                     [
                        1                               	= "Specification" (string)
                     ]
                     InstallClassVisits              	= table: 0x011dca68 (table)
                     {
                        CEntityInstance                 	= true (boolean)
                        CBaseEntity                     	= true (boolean)
                     }
                     InstallClasses                  	= function: 0x011e1f48 (function)
                     CreateScriptProxyClass          	= function: 0x011e2298 (function)
                     InstallClass_Publish            	= function: 0x011e2238 (function)
                     LoadEntityClasses               	= function: 0x011e2278 (function)
                     DispatchUpdateOnRemove          	= function: 0x011eb490 (function)
                     DispatchInput                   	= function: 0x011eb4b0 (function)
                     InstallClass                    	= function: 0x011e2030 (function)
                     InputValueConverters            	= table: 0x011dca90 (table)
                     {
                        number                          	= function: 0x011dcb20 (function)
                        integer                         	= function: 0x011dcb40 (function)
                        float                           	= function: 0x011e1e68 (function)
                        string                          	= function: 0x011e1e88 (function)
                     }
                     InstallClass_HandleEntityIO     	= function: 0x011e2090 (function)
                     InstallClassMixinKeysToMakeUnique	= table: 0x011dca30 (array table)
                     [
                        1                               	= "Spawn" (string)
                     ]
                     GetScriptClassForDesignerName   	= function: 0x011e2640 (function)
                     GetNativeClassForScriptClass    	= function: 0x011e1ee8 (function)
                     GetInputsForScriptClass         	= function: 0x011e1ec8 (function)
                     InstallClass_MergeSpecifications	= function: 0x011e2050 (function)
                     UnserializeForSpawn             	= function: 0x011eb410 (function)
                     DispatchActivate                	= function: 0x011eb470 (function)
                     CreateCppLinkClassProxyInstance 	= function: 0x011e22f8 (function)
                     GetClassNameOverride            	= function: 0x011e2318 (function)
                  }
                  CBaseAnimating                  	= table: 0x01186d00 (table, already seen)
               }
               isInit                          	= true (boolean)
               t1                              	= table: 0x0135d2f8 (table)
               {
                  table: 0x01205a80               	= "GameRules" (string)
                  table: 0x011dc850               	= "EntityMixins" (string)
                  table: 0x0112dc90               	= "CDOTAGameManager" (string)
                  table: 0x011cd600               	= "vlua" (string)
                  table: 0x011dc8f0               	= "EntityDesignerNameToClassname" (string)
                  table: 0x01188280               	= "CBaseCombatCharacter" (string)
                  table: 0x0120bd88               	= "CustomNetTables" (string)
                  table: 0x01143f30               	= "GlobalSys" (string)
                  table: 0x011b2288               	= "CDOTA_Unit_Courier" (string)
                  table: 0x011b26b8               	= "CDOTA_BaseNPC_Trap_Ward" (string)
                  table: 0x01133aa8               	= "CDOTA_Modifier_Lua_Motion_Both" (string)
                  table: 0x0112cc68               	= "GridNav" (string)
                  table: 0x011c0970               	= "CPointWorldText" (string)
                  table: 0x01148090               	= "CDOTA_SimpleObstruction" (string)
                  table: 0x011c3930               	= "CNativeOutputs" (string)
                  table: 0x011d9c80               	= "ParticleEffectControlPoints" (string)
                  table: 0x011b3a80               	= "g_SpawnGroupEntityFilters" (string)
                  table: 0x011c14e8               	= "CParticleSystem" (string)
                  table: 0x011f8f40               	= "g_rr" (string)
                  table: 0x01115ea8               	= "bit" (string)
                  table: 0x011b2198               	= "ScriptDebugTraces" (string)
                  table: 0x01137138               	= "CBaseEntity" (string)
                  table: 0x011310f0               	= "CDOTA_Modifier_Lua" (string)
                  table: 0x011f9070               	= "CDOTAGameRules" (string)
                  table: 0x01125f08               	= "CEntityInstance" (string)
                  table: 0x011142a0               	= "table" (string)
                  table: 0x01190830               	= "CDOTAPlayerController" (string)
                  table: 0x0117bba8               	= "CDOTABaseAbility" (string)
                  table: 0x011dc918               	= "EntityFramework" (string)
                  table: 0x011aa828               	= "CDOTA_Item_EmptyBottle" (string)
                  table: 0x011afaa0               	= "CDOTA_Ability_Nian_Leap" (string)
                  table: 0x011b2df0               	= "CDOTA_BaseNPC_Shop" (string)
                  table: 0x011335e0               	= "CDOTA_Modifier_Lua_Vertical_Motion" (string)
                  table: 0x011b3848               	= "CDOTA_BaseNPC_Watch_Tower" (string)
                  table: 0x011c0e70               	= "CLogicScript" (string)
                  table: 0x011b2518               	= "CPointEntity" (string)
                  table: 0x0120c2a0               	= "CustomGameEventManager" (string)
                  table: 0x011b1c80               	= "ScriptDebugDefaultWatchColor" (string)
                  table: 0x011de180               	= "_deepprint_alreadyseen" (string)
                  table: 0x011aac60               	= "CDOTA_BaseNPC_Hero" (string)
                  table: 0x01117560               	= "FDesc" (string)
                  table: 0x011b4a28               	= "CDotaQuest" (string)
                  table: 0x01114600               	= "string" (string)
                  table: 0x011175d0               	= "EDesc" (string)
                  table: 0x011c1fa0               	= "CInfoData" (string)
                  table: 0x01148790               	= "CDOTA_Item_Lua" (string)
                  table: 0x011b4110               	= "CDOTA_MapTree" (string)
                  table: 0x011beef8               	= "CDOTA_Item_BagOfGold" (string)
                  table: 0x011b5160               	= "CDOTA_PlayerResource" (string)
                  table: 0x01190d20               	= "CDOTABaseGameMode" (string)
                  table: 0x011c0c08               	= "CMarkupVolumeTagged" (string)
                  table: 0x01186d00               	= "CBaseAnimating" (string)
                  table: 0x01188418               	= "CDOTA_BaseNPC" (string)
                  table: 0x011f8800               	= "_PublishedHelp" (string)
                  table: 0x011b1ad8               	= "CDOTA_Ability_Nian_Roar" (string)
                  table: 0x01133258               	= "CDOTA_Modifier_Lua_Horizontal_Motion" (string)
                  table: 0x011ab1d0               	= "CSceneEntity" (string)
                  table: 0x011b1fe8               	= "CDOTA_Unit_CustomGameAnnouncer" (string)
                  table: 0x011c1008               	= "CEnvEntityMaker" (string)
                  table: 0x01114cb0               	= "math" (string)
                  table: 0x01148398               	= "CDOTA_Item_Physical" (string)
                  table: 0x011b3108               	= "CDOTA_ShopTrigger" (string)
                  table: 0x011dc8a0               	= "EntityLinkClasses" (string)
                  table: 0x011b3578               	= "CInfoPlayerStartDota" (string)
                  table: 0x011c3cd8               	= "CScriptKeyValues" (string)
                  table: 0x011c18f0               	= "CPhysicsProp" (string)
                  table: 0x011b1660               	= "CDOTA_Unit_Nian" (string)
                  table: 0x011c42c8               	= "NativeFunctions" (string)
                  table: 0x0120bb38               	= "CCustomNetTableManager" (string)
                  table: 0x0112bf50               	= "HeroList" (string)
                  table: 0x011b94a8               	= "CBasePlayerPawn" (string)
                  table: 0x011bf198               	= "CDOTA_Ability_Aghanim_Spear" (string)
                  table: 0x011c2b90               	= "CPointTemplate" (string)
                  table: 0x01143958               	= "Convars" (string)
                  table: 0x0112f2a0               	= "CDOTA_Buff" (string)
                  table: 0x0117b018               	= "CBodyComponent" (string)
                  table: 0x01206250               	= "Tutorial" (string)
                  table: 0x0113e640               	= "CEntities" (string)
                  table: 0x0112e168               	= "CScriptParticleManager" (string)
                  table: 0x011b1ef0               	= "ScriptDebugTextFilters" (string)
                  table: 0x011b1a08               	= "ScriptDebugText" (string)
                  table: 0x011eb000               	= "c" (string)
                  table: 0x011b45d8               	= "CDotaSubquestBase" (string)
                  table: 0x0117ebf0               	= "CDOTA_Item" (string)
                  table: 0x01115890               	= "debug" (string)
                  table: 0x011dc940               	= "EntityUtils" (string)
                  table: 0x0120c5c8               	= "CDOTA_CustomUIManager" (string)
                  table: 0x011afd40               	= "CDOTA_Ability_Animation_Attack" (string)
                  table: 0x011b1d70               	= "CDOTA_Ability_Nian_Dive" (string)
                  table: 0x0135b3e0               	= "TableHelper" (string)
                  table: 0x0112dfd8               	= "DOTAGameManager" (string)
                  table: 0x011a8148               	= "CDOTA_Ability_Lua" (string)
                  table: 0x011b1f18               	= "ScriptDebugWatches" (string)
                  table: 0x011aa438               	= "CBaseTrigger" (string)
                  table: 0x011dc8c8               	= "EntityClassNameOverrides" (string)
                  table: 0x01144268               	= "SteamInfo" (string)
                  table: 0x011b0230               	= "CDOTA_BaseNPC_Creature" (string)
                  table: 0x0120c9e8               	= "CustomUI" (string)
                  table: 0x01201690               	= "json" (string)
                  table: 0x011dc878               	= "EntityClasses" (string)
                  table: 0x0112f118               	= "ParticleManager" (string)
                  table: 0x01206520               	= "CDOTAVoteSystem" (string)
                  table: 0x011bf440               	= "CDOTA_Unit_CustomGameAnnouncerAghanim" (string)
                  table: 0x011be038               	= "CDOTA_Item_DataDriven" (string)
                  table: 0x011aaf20               	= "CDOTA_Ability_DataDriven" (string)
                  table: 0x011c41f0               	= "CEntityScriptFramework" (string)
                  table: 0x011affc0               	= "CDOTA_Ability_Animation_TailSpin" (string)
                  table: 0x011b33d8               	= "CDOTA_BaseNPC_NeutralItemStash" (string)
                  table: 0x01150a50               	= "CBaseFlex" (string)
                  table: 0x0120b9a8               	= "VoteSystem" (string)
                  table: 0x01113708               	= "coroutine" (string)
                  table: 0x01150ab0               	= "CScriptHeroList" (string)
                  table: 0x011c1d38               	= "CLogicRelay" (string)
                  table: 0x011be360               	= "CDOTA_ItemSpawner" (string)
                  table: 0x011c1688               	= "CBasePlayerController" (string)
                  table: 0x011be930               	= "CDOTA_Unit_Diretide_Portal" (string)
                  table: 0x011b3e28               	= "CDotaTutorialNPCBlocker" (string)
                  table: 0x011c25d8               	= "CEnvProjectedTexture" (string)
                  table: 0x011f8848               	= "g_reloadState" (string)
                  table: 0x011c3380               	= "CPointClientUIWorldPanel" (string)
                  table: 0x011c3060               	= "CInfoWorldLayer" (string)
                  table: 0x011be5f8               	= "CFoWBlockerRegion" (string)
                  table: 0x0112db28               	= "ProjectileManager" (string)
                  table: 0x01113aa0               	= "package" (string)
                  table: 0x01190a18               	= "CDOTA_BaseNPC_Building" (string)
                  table: 0x011b29a8               	= "CDOTA_NeutralSpawner" (string)
                  table: 0x01185970               	= "CBaseModelEntity" (string)
                  table: 0x01117588               	= "CDesc" (string)
                  table: 0x011b3b90               	= "CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble" (string)
                  table: 0x0120bf18               	= "CCustomGameEventManager" (string)
                  table: 0x01111960               	= "_G" (string)
                  table: 0x011c3f38               	= "CScriptPrecacheContext" (string)
                  table: 0x01205c08               	= "CDOTATutorial" (string)
                  table: 0x01142e00               	= "Entities" (string)
               }
               getClassName                    	= function: 0x0135b398 (function)
               showAllGlobalFunctions          	= function: 0x0135bbf8 (function)
               getClass                        	= function: 0x0135bbb8 (function)
               getClassAPI                     	= function: 0x0135ba10 (function)
               t2                              	= table: 0x0135beb8 (table)
               {
                  Dynamic_Wrap                    	= function: 0x011b15b8 (function)
                  SpawnEntityGroupFromTable       	= function: 0x0113df48 (function)
                  PrecacheUnitFromTableSync       	= function: 0x01145188 (function)
                  ClearSpawnGroupEntityFilters    	= function: 0x011b3d78 (function)
                  rawget                          	= function: builtin#12 (function)
                  HasBaseClass                    	= function: 0x01201c70 (function)
                  Plat_FloatTime                  	= function: 0x0113d090 (function)
                  Say                             	= function: 0x0113f580 (function)
                  __RegisterGameEventListeners    	= function: 0x011b19e8 (function)
                  newproxy                        	= function: builtin#28 (function)
                  print                           	= function: 0x01117410 (function)
                  printstack                      	= function: 0x01117490 (function)
                  DeepPrintTable                  	= function: 0x011dde20 (function)
                  ScriptDebugTextTrace            	= function: 0x011b32e0 (function)
                  ShowGenericPopupToPlayer        	= function: 0x01150180 (function)
                  SendToConsole                   	= function: 0x0113cd00 (function)
                  CreateItemOnPositionForLaunch   	= function: 0x01145900 (function)
                  ConnectOutputs                  	= function: 0x011b1578 (function)
                  EmitAnnouncerSoundForPlayer     	= function: 0x01146498 (function)
                  FindClearSpaceForUnit           	= function: 0x01145990 (function)
                  TraceLine                       	= function: 0x011400b0 (function)
                  ListenToGameEvent               	= function: 0x0113d8c8 (function)
                  GetDedicatedServerKeyV2         	= function: 0x01146d38 (function)
                  load                            	= function: builtin#23 (function)
                  StopListeningToGameEvent        	= function: 0x0113d950 (function)
                  ScriptDebugHook                 	= function: 0x011b34c8 (function)
                  DoEntFire                       	= function: 0x0113c8d8 (function)
                  StopGlobalSound                 	= function: 0x01145080 (function)
                  SetPhysAngularVelocity          	= function: 0x0113f4f8 (function)
                  GetMapName                      	= function: 0x0113cb80 (function)
                  ScriptDebugRemoveWatchPattern   	= function: 0x011b28b8 (function)
                  RotateQuaternionByAxisAngle     	= function: 0x0113c420 (function)
                  EmitAnnouncerSound              	= function: 0x011462e8 (function)
                  ScriptDebugRemoveWatch          	= function: 0x011b25c8 (function)
                  UTIL_MessageTextAll_WithContext 	= function: 0x01140838 (function)
                  StopSoundOn                     	= function: 0x0113d218 (function)
                  ScriptDebugAddTextFilter        	= function: 0x011b3488 (function)
                  DebugDrawLine_vCol              	= function: 0x0113fa70 (function)
                  IsMangoTree                     	= function: 0x0114fee0 (function)
                  PrecacheEntityFromTable         	= function: 0x0113e108 (function)
                  _DeepPrintTable                 	= function: 0x011dde00 (function)
                  DeepToString                    	= function: 0x011de1a8 (function)
                  DebugDrawBox                    	= function: 0x0113f870 (function)
                  SendOverheadEventMessage        	= function: 0x01150758 (function)
                  FireEntityIOInputString         	= function: 0x0113c6c8 (function)
                  RegisterSpawnGroupEntityFilter  	= function: 0x011b3aa8 (function)
                  GetWorldMaxX                    	= function: 0x01144d00 (function)
                  CreateHTTPRequest               	= function: 0x0117ac50 (function)
                  IsClient                        	= function: 0x01140b78 (function)
                  EmitAnnouncerSoundForTeamOnLocation	= function: 0x01146400 (function)
                  GetPhysVelocity                 	= function: 0x0113f3f0 (function)
                  CreateEffect                    	= function: 0x0113ffb0 (function)
                  ManuallyTriggerSpawnGroupCompletion	= function: 0x01140580 (function)
                  RotationDelta                   	= function: 0x0113e4a8 (function)
                  FindClearRandomPositionAroundUnit	= function: 0x01145aa0 (function)
                  InitLogFile                     	= function: 0x0113ce98 (function)
                  Clamp                           	= function: 0x011c1848 (function)
                  DeepPrint                       	= function: 0x011de1c8 (function)
                  PrecacheUnitByNameSync          	= function: 0x01201c90 (function)
                  tonumber                        	= function: builtin#17 (function)
                  SetOpvarFloatAll                	= function: 0x0113d298 (function)
                  ScriptDebugAddWatch             	= function: 0x011b2450 (function)
                  RollPseudoRandomPercentage      	= function: 0x011456e0 (function)
                  CreateUniformRandomStream       	= function: 0x0113d3a8 (function)
                  UTIL_ResetMessageTextAll        	= function: 0x01140958 (function)
                  DebugCreateUnit                 	= function: 0x01145b38 (function)
                  DebugDrawSphere                 	= function: 0x0113f9f0 (function)
                  min                             	= function: 0x011d9b78 (function)
                  Warning                         	= function: 0x011169f8 (function)
                  DebugDrawClear                  	= function: 0x0113fb80 (function)
                  cvar_getf                       	= function: 0x0113c358 (function)
                  GetTreeIdForEntityIndex         	= function: 0x0114ffe8 (function)
                  CreateTempTree                  	= function: 0x0114f448 (function)
                  ScriptDebugDraw                 	= function: 0x011b21c0 (function)
                  DotProduct                      	= function: 0x011467d8 (function)
                  FindSpawnEntityForTeam          	= function: 0x011507e8 (function)
                  rawset                          	= function: builtin#13 (function)
                  UniqueString                    	= function: 0x011c94d8 (function)
                  CreateSceneEntity               	= function: 0x0113c958 (function)
                  GetGroundPosition               	= function: 0x01145c38 (function)
                  DropNeutralItemAtPositionForHero	= function: 0x01146968 (function)
                  SpawnEntityFromTableSynchronous 	= function: 0x0113de20 (function)
                  SendToServerConsole             	= function: 0x0113cd80 (function)
                  GetItemDefOwnedCount            	= function: 0x011505c0 (function)
                  DebugDrawScreenTextLine         	= function: 0x0113f6e0 (function)
                  GetItemCost                     	= function: 0x011457f0 (function)
                  GetEntityIndexForTreeId         	= function: 0x0114ff60 (function)
                  CreateUnitByName                	= function: 0x01145100 (function)
                  PrecacheEntityListFromTable     	= function: 0x0113e190 (function)
                  ScriptFunctionHelp              	= function: 0x011f87c0 (function)
                  CreateTrigger                   	= function: 0x01140618 (function)
                  ResolveNPCPositions             	= function: 0x01146140 (function)
                  GetSystemTime                   	= function: 0x01144e00 (function)
                  PlayerInstanceFromIndex         	= function: 0x0113dc90 (function)
                  DebugScreenTextPretty           	= function: 0x0113f768 (function)
                  CrossVectors                    	= function: 0x0113c530 (function)
                  LimitPathingSearchDepth         	= function: 0x01146ff0 (function)
                  GetActiveSpawnGroupHandle       	= function: 0x011404f0 (function)
                  rr_GetResponseTargets           	= function: 0x0113fd98 (function)
                  setfenv                         	= function: builtin#11 (function)
                  LinkLuaModifier                 	= function: 0x011f8780 (function)
                  ScriptDebugTextPrint            	= function: 0x011b3300 (function)
                  ScriptDebugAddWatches           	= function: 0x011b2470 (function)
                  ScriptDebugRemoveTrace          	= function: 0x011b3038 (function)
                  Time                            	= function: 0x0113d018 (function)
                  PrecacheModel                   	= function: 0x01145ea0 (function)
                  ClearTeamCustomHealthbarColor   	= function: 0x01145fb0 (function)
                  PauseGame                       	= function: 0x01144f80 (function)
                  RemoveSpawnGroupFilterProxy     	= function: 0x01140348 (function)
                  DestroyDamageInfo               	= function: 0x0113ff28 (function)
                  SpawnMangoTree                  	= function: 0x01150900 (function)
                  StartSoundEventFromPosition     	= function: 0x0113f230 (function)
                  QAngle                          	= function: 0x01116c80 (function)
                  RegisterSpawnGroupFilterProxy   	= function: 0x011402b8 (function)
                  EmitAnnouncerSoundForTeam       	= function: 0x01146370 (function)
                  ScriptDebugDrawWatches          	= function: 0x011b2430 (function)
                  AppendToLogFile                 	= function: 0x0113cf18 (function)
                  IsLocationVisible               	= function: 0x01150070 (function)
                  require                         	= function: 0x01113ea8 (function)
                  StartSoundEventFromPositionReliable	= function: 0x0113f2c0 (function)
                  __VScriptServerDebugHook        	= function: 0x011b3750 (function)
                  GetItemDefQuantity              	= function: 0x01150648 (function)
                  LoadKeyValuesFromString         	= function: 0x0113f658 (function)
                  DumpSpawnGroupEntityFilters     	= function: 0x011b4048 (function)
                  CreateRune                      	= function: 0x01151d68 (function)
                  StopEffect                      	= function: 0x01140030 (function)
                  QSlerp                          	= function: 0x0113d4b8 (function)
                  PrecacheItemByNameAsync         	= function: 0x01145550 (function)
                  pcall                           	= function: builtin#20 (function)
                  StartSoundEventUnreliable       	= function: 0x0113d638 (function)
                  RandomInt                       	= function: 0x01144a50 (function)
                  DOTA_SpawnMapAtPosition         	= function: 0x011471e8 (function)
                  VectorToAngles                  	= function: 0x0113e2a0 (function)
                  SplineVectors                   	= function: 0x0113c1c0 (function)
                  Msg                             	= function: 0x01117780 (function)
                  AnglesToVector                  	= function: 0x0113e220 (function)
                  GetTargetLinearLocation         	= function: 0x011468e0 (function)
                  CreateIllusions                 	= function: 0x01145770 (function)
                  RemoveSpawnGroupEntityFilter    	= function: 0x011b3d38 (function)
                  LinkLuaModifier_Engine          	= function: 0x0117ab50 (function)
                  LoadKeyValues                   	= function: 0x0113f5d8 (function)
                  ShowMessage                     	= function: 0x0113cb00 (function)
                  GetWorldMinY                    	= function: 0x01144c80 (function)
                  RemapVal                        	= function: 0x011d8a28 (function)
                  ExponentialDecay                	= function: 0x0113c138 (function)
                  GetListenServerHost             	= function: 0x0113dd18 (function)
                  RotationDeltaAsAngularVelocity  	= function: 0x0113c5b0 (function)
                  FireEntityIOInputVec            	= function: 0x0113c640 (function)
                  VectorAngles                    	= function: 0x01145d40 (function)
                  LocalTime                       	= function: 0x0113c750 (function)
                  RotatePosition                  	= function: 0x0113e320 (function)
                  EndScriptDebug                  	= function: 0x011b3790 (function)
                  VectorLerp                      	= function: 0x011d89e8 (function)
                  RandomVector                    	= function: 0x01144b00 (function)
                  IsServer                        	= function: 0x01140af8 (function)
                  GetAbilityTextureNameForAbility 	= function: 0x0117ad68 (function)
                  AngleDiff                       	= function: 0x01145dc0 (function)
                  SpawnEntityFromTableAsynchronous	= function: 0x0113deb0 (function)
                  ScriptDebugRemoveTextFilter     	= function: 0x011b34a8 (function)
                  UTIL_Remove                     	= function: 0x0113c7d0 (function)
                  CreateHTTPRequestScriptVM       	= function: 0x0117acd8 (function)
                  RandomFloat                     	= function: 0x01144aa8 (function)
                  GetTeamName                     	= function: 0x01146e50 (function)
                  GetLobbyEventGameDetails        	= function: 0x01146dc0 (function)
                  RotateOrientation               	= function: 0x0113e3a0 (function)
                  ShowGenericPopup                	= function: 0x011500f8 (function)
                  VectorIsZero                    	= function: 0x011d8a08 (function)
                  StartSoundEventReliable         	= function: 0x0113d5b0 (function)
                  GetPotentialNeutralItemDrop     	= function: 0x01146a00 (function)
                  CenterCameraOnUnit              	= function: 0x01147270 (function)
                  IsInToolsMode                   	= function: 0x01140bf8 (function)
                  UTIL_MessageText                	= function: 0x011407b0 (function)
                  GetAbilityKeyValuesByName       	= function: 0x0117adf8 (function)
                  CreateTriggerRadiusApproximate  	= function: 0x01140698 (function)
                  AddToScriptHelp                 	= function: 0x011f8828 (function)
                  loadstring                      	= function: builtin#24 (function)
                  UTIL_RemoveImmediate            	= function: 0x0113c850 (function)
                  TraceHull                       	= function: 0x01140130 (function)
                  RegisterCustomAnimationScriptForModel	= function: 0x01147150 (function)
                  EmitSoundOnLocationForPlayer    	= function: 0x011465b8 (function)
                  instanceof                      	= function: 0x011c7168 (function)
                  CreateTempTreeWithModel         	= function: 0x0114f560 (function)
                  DebugDrawText                   	= function: 0x0113f7f0 (function)
                  SplineQuaternions               	= function: 0x0113bf08 (function)
                  CreateDamageInfo                	= function: 0x0113fea0 (function)
                  FilterSpawnGroupEntities        	= function: 0x011b3d58 (function)
                  SetOpvarFloatPlayer             	= function: 0x0113d320 (function)
                  MinimapEvent                    	= function: 0x01146648 (function)
                  PrecacheUnitByNameSync_Engine   	= function: 0x011453b8 (function)
                  CalcClosestPointOnEntityOBB     	= function: 0x01140c78 (function)
                  UpdateEventPoints               	= function: 0x01146c28 (function)
                  CreateUnitByNameAsync           	= function: 0x01145330 (function)
                  GetMaxOutputDelay               	= function: 0x0113c0b0 (function)
                  ExtendInstance                  	= function: 0x011f8e68 (function)
                  rr_CommitAIResponse             	= function: 0x0113fd10 (function)
                  tostring                        	= function: builtin#18 (function)
                  MakeStringToken                 	= function: 0x011c43c8 (function)
                  GetDedicatedServerKey           	= function: 0x01146cb0 (function)
                  DoScriptAssert                  	= function: 0x0113cf98 (function)
                  LerpVectors                     	= function: 0x0113c4b0 (function)
                  GetUnitKeyValuesByName          	= function: 0x0117ae88 (function)
                  CalcDistanceToLineSegment2D     	= function: 0x0113e528 (function)
                  error                           	= function: builtin#19 (function)
                  PrecacheItemByNameSync          	= function: 0x011454c8 (function)
                  select                          	= function: builtin#16 (function)
                  ScriptDebugAddWatchPattern      	= function: 0x011b2608 (function)
                  unpack                          	= function: builtin#15 (function)
                  getfenv                         	= function: builtin#10 (function)
                  GetTeamHeroKills                	= function: 0x01146ed0 (function)
                  _DeepToString                   	= function: 0x011dde40 (function)
                  DumpScriptBindings              	= function: 0x011f87a0 (function)
                  SpawnEffigyOfUnitOrModel        	= function: 0x01150870 (function)
                  PrecacheResource                	= function: 0x01145e18 (function)
                  assert                          	= function: builtin#2 (function)
                  IsValidEntity                   	= function: 0x0113d740 (function)
                  GetFunctionSignature            	= function: 0x011f87e0 (function)
                  AddFOWViewer                    	= function: 0x01146040 (function)
                  PrecacheUnitFromTableAsync      	= function: 0x01145218 (function)
                  TraceCollideable                	= function: 0x011401b0 (function)
                  ReloadMOTD                      	= function: 0x0113fe20 (function)
                  GetTargetAOELocation            	= function: 0x01146858 (function)
                  loadfile                        	= function: 0x011174c0 (function)
                  UnloadSpawnGroupByHandle        	= function: 0x01140460 (function)
                  IsMarkedForDeletion             	= function: 0x0113d7c0 (function)
                  RollPercentage                  	= function: 0x011470f8 (function)
                  AxisAngleToQuaternion           	= function: 0x0113bf90 (function)
                  ipairs                          	= function: builtin#7 (function)
                  ScriptDebugClearWatches         	= function: 0x011b28d8 (function)
                  SetTeamCustomHealthbarColor     	= function: 0x01145f20 (function)
                  EmitSoundOnLocationWithCaster   	= function: 0x011461c8 (function)
                  SetRenderingEnabled             	= function: 0x0113c2d0 (function)
                  ScriptDebugTraceAll             	= function: 0x011b28f8 (function)
                  PrintLinkedConsoleMessage       	= function: 0x0113ce08 (function)
                  SetQuestPhase                   	= function: 0x0113cc80 (function)
                  StartSoundEventFromPositionUnreliable	= function: 0x0113f358 (function)
                  CreateItem                      	= function: 0x01145660 (function)
                  DebuggerBreak                   	= function: 0x01117538 (function)
                  EmitSoundOnClient               	= function: 0x0113d190 (function)
                  SetQuestName                    	= function: 0x0113cc00 (function)
                  DoIncludeScript                 	= function: 0x0117af10 (function)
                  cvar_setf                       	= function: 0x0113ca80 (function)
                  GetGroundHeight                 	= function: 0x01145cc0 (function)
                  UTIL_MessageTextAll             	= function: 0x01140728 (function)
                  EmitSoundOn                     	= function: 0x0113d110 (function)
                  HeroMaxLevel                    	= function: 0x01146ba8 (function)
                  SpawnEntityListFromTableAsynchronous	= function: 0x0113e070 (function)
                  CreateUnitFromTable             	= function: 0x011452a8 (function)
                  DebugDrawBoxDirection           	= function: 0x0113faf8 (function)
                  __DumpScope                     	= function: 0x011b1598 (function)
                  EmitGlobalSound                 	= function: 0x01145000 (function)
                  UnitFilter                      	= function: 0x0117abd0 (function)
                  ScriptDebugRemoveWatches        	= function: 0x011b25e8 (function)
                  FindUnitsInLine                 	= function: 0x01145bb8 (function)
                  InstallMixins                   	= function: 0x011ea308 (function)
                  GetSystemDate                   	= function: 0x01144f00 (function)
                  Rad2Deg                         	= function: 0x011c1828 (function)
                  DebugBreak                      	= function: 0x011c4420 (function)
                  GetPhysAngularVelocity          	= function: 0x0113f470 (function)
                  rr_QueryBestResponse            	= function: 0x0113fc88 (function)
                  UTIL_ResetMessageText           	= function: 0x011409e8 (function)
                  type                            	= function: builtin#3 (function)
                  ScriptDebugTextDraw             	= function: 0x011b3320 (function)
                  PrecacheUnitByNameAsync_Engine  	= function: 0x01145440 (function)
                  class                           	= function: 0x011c7148 (function)
                  UnloadSpawnGroup                	= function: 0x011403d8 (function)
                  ApplyDamage                     	= function: 0x01151ce8 (function)
                  DebugDrawCircle                 	= function: 0x0113f970 (function)
                  Merge                           	= function: 0x011d9bd8 (function)
                  ExecuteOrderFromTable           	= function: 0x01129748 (function)
                  CreateItemOnPositionSync        	= function: 0x01145870 (function)
                  GetXPNeededToReachNextLevel     	= function: 0x01146b18 (function)
                  FrameTime                       	= function: 0x0113be88 (function)
                  SpawnDOTAShopTriggerRadiusApproximate	= function: 0x01146f58 (function)
                  Lerp                            	= function: 0x011c54b0 (function)
                  GetWorldMaxY                    	= function: 0x01144d80 (function)
                  Vector                          	= function: 0x01116930 (function)
                  GetSpawnGroupEntityFilterFunc   	= function: 0x011b4028 (function)
                  EntFireByHandle                 	= function: 0x011c9538 (function)
                  EmitSoundOnLocationForAllies    	= function: 0x01146258 (function)
                  GetFrameCount                   	= function: 0x01140238 (function)
                  DoEntFireByInstanceHandle       	= function: 0x0113c9e0 (function)
                  DoUniqueString                  	= function: 0x0113d848 (function)
                  getclass                        	= function: 0x011c7188 (function)
                  module                          	= function: 0x01113e60 (function)
                  FireEntityIOInputNameOnly       	= function: 0x0113c240 (function)
                  next                            	= function: builtin#4 (function)
                  EntIndexToHScript               	= function: 0x0113db78 (function)
                  StartSoundEvent                 	= function: 0x0113d530 (function)
                  ScriptDebugClearTraces          	= function: 0x011b3058 (function)
                  EmitSoundOnEntityForPlayer      	= function: 0x01146528 (function)
                  DisconnectClient                	= function: 0x01146750 (function)
                  CreateHeroForPlayer             	= function: 0x011455d8 (function)
                  CalcDistanceBetweenEntityOBB    	= function: 0x01140d08 (function)
                  _DeepPrintMetaTable             	= function: 0x011ddde0 (function)
                  getbase                         	= function: 0x011c71a8 (function)
                  DoCleaveAttack                  	= function: 0x01147078 (function)
                  DebugDrawLine                   	= function: 0x0113f8f0 (function)
                  BeginScriptDebug                	= function: 0x011b3770 (function)
                  FireGameEventLocal              	= function: 0x0113daf0 (function)
                  UTIL_MessageText_WithContext    	= function: 0x011408c8 (function)
                  FindUnitsInRadius               	= function: 0x01145a18 (function)
                  ScriptDebugAddTrace             	= function: 0x011b3018 (function)
                  IsUnitInValidPosition           	= function: 0x01146a90 (function)
                  h                               	= function: 0x011eb140 (function)
                  __ReplaceClosures               	= function: 0x011b0170 (function)
                  GetWorldMinX                    	= function: 0x01144c00 (function)
                  ScriptAssert                    	= function: 0x011c94f8 (function)
                  FireGameEvent                   	= function: 0x0113da70 (function)
                  rawequal                        	= function: builtin#14 (function)
                  isclass                         	= function: 0x011c71c8 (function)
                  pairs                           	= function: builtin#5 (function)
                  SpawnEntityListFromTableSynchronous	= function: 0x0113dfd8 (function)
                  rr_AddDecisionRule              	= function: 0x0113fc00 (function)
                  collectgarbage                  	= function: builtin#27 (function)
                  GetSystemTimeMS                 	= function: 0x01144e80 (function)
                  IsDedicatedServer               	= function: 0x01140a70 (function)
                  StopSoundEvent                  	= function: 0x0113f1d8 (function)
                  dofile                          	= function: 0x011174e8 (function)
                  RemapValClamped                 	= function: 0x011d8a48 (function)
                  ScreenShake                     	= function: 0x0113dda0 (function)
                  xpcall                          	= function: builtin#21 (function)
                  VectorDistance                  	= function: 0x011c54f0 (function)
                  max                             	= function: 0x011d9b98 (function)
                  PrecacheUnitByNameAsync         	= function: 0x011f8560 (function)
                  _sourceline                     	= function: 0x011c6350 (function)
                  VectorDistanceSq                	= function: 0x011c54d0 (function)
                  Deg2Rad                         	= function: 0x011c1808 (function)
                  abs                             	= function: 0x011d9bb8 (function)
                  gcinfo                          	= function: builtin#26 (function)
                  UserIDToControllerHScript       	= function: 0x0113dc00 (function)
                  CreateModifierThinker           	= function: 0x011466c8 (function)
                  setmetatable                    	= function: builtin#9 (function)
                  CancelEntityIOEvents            	= function: 0x0113c028 (function)
                  RemoveFOWViewer                 	= function: 0x011460c0 (function)
                  ShowCustomHeaderMessage         	= function: 0x011506d0 (function)
                  getmetatable                    	= function: builtin#8 (function)
                  StopListeningToAllGameEvents    	= function: 0x0113d9e0 (function)
                  EntFire                         	= function: 0x011c9518 (function)
               }
               printTable                      	= function: 0x0135bbd8 (function)
               getInheritanceChian             	= function: 0x01359d48 (function)
               getEntityAPI                    	= function: 0x0135b9d0 (function)
            }
            core/Enum                       	= true (boolean)
            utils.vscriptinit               	= true (boolean)
            EventManager                    	= true (boolean)
            math                            	= table: 0x01114cb0 (table, already seen)
            utils.library                   	= true (boolean)
            table                           	= table: 0x011142a0 (table, already seen)
            _G                              	= table: 0x01111960 (table, already seen)
            bit                             	= table: 0x01115ea8 (table, already seen)
            string                          	= table: 0x01114600 (table, already seen)
            debug                           	= table: 0x01115890 (table, already seen)
            utils.class                     	= true (boolean)
            utils.utilsinit                 	= true (boolean)
            framework.frameworkinit         	= true (boolean)
         }
         seeall                          	= function: 0x01113bc8 (function)
         cpath                           	= ".\?.dll;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\?.dll;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\loadall.dll" (string)
         searchpath                      	= function: 0x01113b78 (function)
         loaders                         	= table: 0x01113c10 (array table)
         [
            1                               	= function: 0x01113c60 (function)
            2                               	= function: 0x011163b8 (function)
         ]
         config                          	= "\
;
?
!
-" (string)
      }
      game.gameinit                   	= true (boolean)
      game/dkjson                     	= table: 0x01201690 (table, already seen)
      framework.entities.entitiesinit 	= true (boolean)
      utils.deepprint                 	= true (boolean)
      utils.vscriptinit               	= true (boolean)
      math                            	= table: 0x01114cb0 (table, already seen)
      utils.library                   	= true (boolean)
      framework.frameworkinit         	= true (boolean)
      _G                              	= table: 0x01111960 (table, already seen)
      bit                             	= table: 0x01115ea8 (table, already seen)
      string                          	= table: 0x01114600 (table, already seen)
      debug                           	= table: 0x01115890 (table, already seen)
      utils.class                     	= true (boolean)
      utils.utilsinit                 	= true (boolean)
      table                           	= table: 0x011142a0 (table, already seen)
   }
   ACT_DOTA_BLINK_DAGGER_END       	= 1733 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY_END  	= 582 (number)
   ACT_DOTA_CAST_ABILITY_2         	= 1511 (number)
   ACT_DOTA_SWIM                   	= 1684 (number)
   ACT_WALK_RPG                    	= 347 (number)
   ACT_DOTA_DIE_SPECIAL            	= 1548 (number)
   ACT_DOTA_CAST_WILD_AXES_END     	= 1562 (number)
   ACT_CROUCHING_SHIELD_UP         	= 455 (number)
   ScriptFunctionHelp              	= function: 0x011f87c0 (function)
   MODIFIER_PRIORITY_ULTRA         	= 3 (number)
   ACT_MP_ATTACK_CROUCH_PREFIRE    	= 551 (number)
   EntFire                         	= function: 0x011c9518 (function)
   DOTA_DEFAULT_UI_SHOP_COMMONITEMS	= 13 (number)
   EntityMixins                    	= table: 0x011dc850 (table, already seen)
   ACT_SPECIAL_ATTACK2             	= 109 (number)
   PrecacheUnitByNameAsync_Engine  	= function: 0x01145440 (function)
   ACT_SLAM_STICKWALL_ND_IDLE      	= 225 (number)
   CDOTA_Item                      	= table: 0x0117ebf0 (table, already seen)
   LocalTime                       	= function: 0x0113c750 (function)
   VectorToAngles                  	= function: 0x0113e2a0 (function)
   ACT_DOTA_PET_WARD_OBSERVER      	= 1699 (number)
   DOTA_INVENTORY_ALLOW_NONE       	= 0 (number)
   AE_CLIENT_EFFECT_ATTACH         	= 7 (number)
   ACT_OBJ_PLACING                 	= 468 (number)
   EntityFramework                 	= table: 0x011dc918 (table, already seen)
   DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING	= 32 (number)
   DMG_CRUSH                       	= 1 (number)
   ACT_GESTURE_RANGE_ATTACK_AR2    	= 299 (number)
   EntityLinkClasses               	= table: 0x011dc8a0 (table, already seen)
   DOTA_ModifyXP_HeroKill          	= 1 (number)
   LinkLuaModifier_Engine          	= function: 0x0117ab50 (function)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY	= 42 (number)
   FCVAR_USERINFO                  	= 512 (number)
   DeepPrint                       	= function: 0x011de1c8 (function)
   ACT_MP_JUMP_LAND_PDA            	= 753 (number)
   scripthelp_DeepPrint            	= "Print out a class/array/instance/table to the console" (string)
   ACT_DOTA_LOOK_AROUND            	= 1643 (number)
   DeepToString                    	= function: 0x011de1a8 (function)
   UnloadSpawnGroup                	= function: 0x011403d8 (function)
   MODIFIER_EVENT_ON_ORB_EFFECT    	= 192 (number)
   scripthelp_DeepString           	= "Convert a class/array/instance/table to a string" (string)
   ACT_DOTA_CAST_FENCE             	= 1780 (number)
   RotationDeltaAsAngularVelocity  	= function: 0x0113c5b0 (function)
   ACT_MP_GESTURE_FLINCH_ITEM1     	= 680 (number)
   ACT_MELEE_VM_HOLSTER            	= 831 (number)
   SINGLE_SHOT                     	= 1 (number)
   DOTA_ITEM_TRANSIENT_RECIPE      	= 18 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE	= 149 (number)
   CMarkupVolumeTagged             	= table: 0x011c0c08 (table, already seen)
   OVERHEAD_ALERT_MISS             	= 5 (number)
   DeepPrintTable                  	= function: 0x011dde20 (function)
   RotatePosition                  	= function: 0x0113e320 (function)
   _DeepPrintMetaTable             	= function: 0x011ddde0 (function)
   ACT_DOTA_PET_WARD_SENTRY        	= 1700 (number)
   ACT_GESTURE_TURN_LEFT45         	= 167 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY_END	= 613 (number)
   ACT_GESTURE_FLINCH_CHEST        	= 159 (number)
   scripthelp_DeepPrintTable       	= "Print out a table (and subtables) to the console" (string)
   ParticleEffectControlPoints     	= table: 0x011d9c80 (table, already seen)
   Merge                           	= function: 0x011d9bd8 (function)
   ACT_RUN_RELAXED                 	= 87 (number)
   MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE	= 227 (number)
   ACT_DOTA_NIAN_PIN_END           	= 1657 (number)
   ACT_DOTA_CAST_ICE_WALL          	= 1589 (number)
   ACT_SPRAY                       	= 908 (number)
   GridNav                         	= table: 0x0112cc68 (table, already seen)
   CDOTA_BaseNPC_Trap_Ward         	= table: 0x011b26b8 (table, already seen)
   min                             	= function: 0x011d9b78 (function)
   RemapVal                        	= function: 0x011d8a28 (function)
   Lerp                            	= function: 0x011c54b0 (function)
   DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE	= 0 (number)
   ClearSpawnGroupEntityFilters    	= function: 0x011b3d78 (function)
   ACT_CSGO_FLINCH_HEAD            	= 1018 (number)
   ACT_DOTA_ROQUELAIRE_LAND        	= 1615 (number)
   ACT_SIGNAL_ADVANCE              	= 53 (number)
   DOTA_LOADOUT_TYPE_COURIER       	= 58 (number)
   ACT_DOTA_RELAX_IN               	= 1778 (number)
   DOTA_HEROPICK_STATE_CM_CAPTAINPICK	= 6 (number)
   AE_SV_PLAYSOUND                 	= 4 (number)
   RegisterCustomAnimationScriptForModel	= function: 0x01147150 (function)
   ACT_DOTA_CHANNEL_END_ABILITY_6  	= 1531 (number)
   DMG_VEHICLE                     	= 16 (number)
   RegisterSpawnGroupEntityFilter  	= function: 0x011b3aa8 (function)
   ACT_RELOAD_FAIL                 	= 875 (number)
   ACT_DOTA_LEAP_SWIPE             	= 1659 (number)
   DOTA_UNIT_ORDER_PICKUP_RUNE     	= 15 (number)
   ACT_DOTA_TRICKS_END             	= 1713 (number)
   DOTA_GAMERULES_STATE_GAME_IN_PROGRESS	= 9 (number)
   BeginScriptDebug                	= function: 0x011b3770 (function)
   ACT_SCRIPT_CUSTOM_30            	= 941 (number)
   DOTA_SPEECH_USER_TEAM           	= 2 (number)
   ScriptDebugTextPrint            	= function: 0x011b3300 (function)
   ScriptDebugTextTrace            	= function: 0x011b32e0 (function)
   ScriptDebugClearTraces          	= function: 0x011b3058 (function)
   ACT_MP_ATTACK_SWIM_GRENADE_BUILDING	= 742 (number)
   ScriptDebugRemoveTrace          	= function: 0x011b3038 (function)
   ACT_MELEE_VM_IDLE               	= 832 (number)
   ScriptDebugAddTrace             	= function: 0x011b3018 (function)
   ScriptDebugTraceAll             	= function: 0x011b28f8 (function)
   CParticleSystem                 	= table: 0x011c14e8 (table, already seen)
   ACT_DOTA_DEATH_BY_SNIPER        	= 1642 (number)
   ACT_DOTA_TAUNT_SNIPER           	= 1641 (number)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP	= 44 (number)
   ScriptDebugRemoveWatch          	= function: 0x011b25c8 (function)
   DOTA_ITEM_SLOT_2                	= 1 (number)
   DOTA_LOADOUT_TYPE_CURSOR_PACK   	= 68 (number)
   ACT_DOTA_OVERRIDE_ABILITY_3     	= 1518 (number)
   unpack                          	= function: builtin#15 (function)
   ACT_PHYSCANNON_UPGRADE          	= 272 (number)
   ACT_MP_CROUCH_PDA               	= 745 (number)
   DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH	= 38 (number)
   ACT_DOTA_CAST_FORGE_SPIRIT      	= 1588 (number)
   DOTA_DAMAGE_FLAG_NON_LETHAL     	= 128 (number)
   ScriptDebugTraces               	= table: 0x011b2198 (table, already seen)
   ScriptDebugWatches              	= table: 0x011b1f18 (table, already seen)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE	= 118 (number)
   ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK	= 983 (number)
   ScriptDebugDrawTextEnabled      	= true (boolean)
   ScriptDebugInDebugDraw          	= false (boolean)
   ACT_CSGO_DEFUSE                 	= 993 (number)
   MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE	= 56 (number)
   ACT_DOTA_STARTLE                	= 1629 (number)
   DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK	= 16 (number)
   ACT_MP_MELEE_GRENADE1_DRAW      	= 707 (number)
   ScriptDebugDefaultWatchColor    	= table: 0x011b1c80 (table, already seen)
   ACT_GESTURE_RANGE_ATTACK1       	= 145 (number)
   ACT_MP_ITEM1_GRENADE2_DRAW      	= 716 (number)
   ACT_DOTA_VICTORY_START          	= 1710 (number)
   DOTA_ModifyGold_NeutralKill     	= 14 (number)
   ACT_DOTA_MK_FUR_ARMY            	= 1722 (number)
   ProjectileManager               	= table: 0x0112db28 (table, already seen)
   ScriptDebugTextTime             	= 10 (number)
   AE_CL_PLAYSOUND                 	= 1 (number)
   UF_FAIL_OBSTRUCTED              	= 28 (number)
   ABILITY_CANNOT_BE_UPGRADED_AT_MAX	= 2 (number)
   DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING	= 2048 (number)
   LoadKeyValues                   	= function: 0x0113f5d8 (function)
   ACT_DIEFORWARD                  	= 22 (number)
   DOTA_LOADOUT_TYPE_VOICE         	= 28 (number)
   ACT_DOTA_SPAWN                  	= 1534 (number)
   ConnectOutputs                  	= function: 0x011b1578 (function)
   ACT_RANGE_ATTACK_AR2            	= 274 (number)
   MODIFIER_PROPERTY_BASE_MANA_REGEN	= 82 (number)
   __OutputsPattern                	= "^On.*Output$" (string)
   ACT_SIGNAL1                     	= 50 (number)
   SUBQUEST_NUM_TEXT_REPLACE_VALUES	= 2 (number)
   __ReplaceClosures               	= function: 0x011b0170 (function)
   EntFireByHandle                 	= function: 0x011c9538 (function)
   ScriptAssert                    	= function: 0x011c94f8 (function)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_END	= 1553 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY	= 770 (number)
   UniqueString                    	= function: 0x011c94d8 (function)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC	= 2 (number)
   vlua                            	= table: 0x011cd600 (table, already seen)
   rawequal                        	= function: builtin#14 (function)
   isclass                         	= function: 0x011c71c8 (function)
   CDOTA_Item_BagOfGold            	= table: 0x011beef8 (table, already seen)
   getclass                        	= function: 0x011c7188 (function)
   class                           	= function: 0x011c7148 (function)
   ACT_MP_CROUCHWALK_MELEE         	= 626 (number)
   ACT_FLINCH_CROUCH_BACK          	= 130 (number)
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT	= 35 (number)
   ACT_CROUCH_IDLE_AUTOGUN         	= 881 (number)
   CreateHTTPRequestScriptVM       	= function: 0x0117acd8 (function)
   PATTACH_CUSTOMORIGIN            	= 2 (number)
   CEntityScriptFramework          	= table: 0x011c41f0 (table, already seen)
   CDotaQuest                      	= table: 0x011b4a28 (table, already seen)
   DOTA_STASH_SLOT_6               	= 14 (number)
   CScriptKeyValues                	= table: 0x011c3cd8 (table, already seen)
   CDOTA_Ability_Aghanim_Spear     	= table: 0x011bf198 (table, already seen)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9	= 85 (number)
   CPointClientUIWorldPanel        	= table: 0x011c3380 (table, already seen)
   FrameTime                       	= function: 0x0113be88 (function)
   CInfoWorldLayer                 	= table: 0x011c3060 (table, already seen)
   DOTA_LOADOUT_TYPE_TAIL          	= 13 (number)
   AE_CL_MFOOTSTEP_RIGHT           	= 24 (number)
   CPointTemplate                  	= table: 0x011c2b90 (table, already seen)
   ACT_MP_SWIM_PRIMARY             	= 565 (number)
   DOTA_UNIT_ORDER_PURCHASE_ITEM   	= 16 (number)
   MODIFIER_EVENT_ON_ATTACK_LANDED 	= 176 (number)
   CEnvProjectedTexture            	= table: 0x011c25d8 (table, already seen)
   DOTA_HEROPICK_STATE_CM_BAN1     	= 7 (number)
   DoUniqueString                  	= function: 0x0113d848 (function)
   rr_AddDecisionRule              	= function: 0x0113fc00 (function)
   ACT_BUSY_SIT_CHAIR              	= 390 (number)
   CLogicRelay                     	= table: 0x011c1d38 (table, already seen)
   CPhysicsProp                    	= table: 0x011c18f0 (table, already seen)
   CBasePlayerController           	= table: 0x011c1688 (table, already seen)
   CEnvEntityMaker                 	= table: 0x011c1008 (table, already seen)
   CPointWorldText                 	= table: 0x011c0970 (table, already seen)
   collectgarbage                  	= function: builtin#27 (function)
   CDOTA_Ability_DataDriven        	= table: 0x011aaf20 (table, already seen)
   ACT_VM_RELOAD_SILENCED          	= 478 (number)
   CNativeOutputs                  	= table: 0x011c3930 (table, already seen)
   ACT_DOTA_TELEPORT_END           	= 1596 (number)
   getbase                         	= function: 0x011c71a8 (function)
   DOTA_UNIT_CAP_RANGED_ATTACK     	= 2 (number)
   CDOTA_Unit_Diretide_Portal      	= table: 0x011be930 (table, already seen)
   CFoWBlockerRegion               	= table: 0x011be5f8 (table, already seen)
   CDOTA_ItemSpawner               	= table: 0x011be360 (table, already seen)
   ACT_VM_DRAW_SILENCED            	= 481 (number)
   CDOTA_Item_DataDriven           	= table: 0x011be038 (table, already seen)
   DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES	= 32 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ATTACK	= 22 (number)
   DOTA_UNIT_ORDER_TAUNT           	= 22 (number)
   CDOTAPlayerController           	= table: 0x01190830 (table, already seen)
   CBasePlayerPawn                 	= table: 0x011b94a8 (table, already seen)
   ACT_DOTA_IDLE                   	= 1500 (number)
   DOTA_UNIT_TARGET_TEAM_CUSTOM    	= 4 (number)
   CDotaSubquestBase               	= table: 0x011b45d8 (table, already seen)
   ACT_MP_CROUCHWALK_SECONDARY     	= 595 (number)
   pairs                           	= function: builtin#5 (function)
   ACT_IDLE_AIM_RELAXED            	= 91 (number)
   ACT_DIE_FRONTSIDE               	= 402 (number)
   MODIFIER_PROPERTY_TOOLTIP2      	= 240 (number)
   CDOTA_BaseNPC_Watch_Tower       	= table: 0x011b3848 (table, already seen)
   ACT_MELEE_ATTACK_SWING_GESTURE  	= 151 (number)
   AE_IK_ALLOW_PLANE_TILT_NORMAL_UPDATES	= 39 (number)
   ACT_FLINCH_CROUCH_LEFT          	= 131 (number)
   RemapValClamped                 	= function: 0x011d8a48 (function)
   DOTA_HEROPICK_STATE_CD_SELECT1  	= 43 (number)
   CDOTA_BaseNPC_NeutralItemStash  	= table: 0x011b33d8 (table, already seen)
   MODIFIER_EVENT_ON_PREDEBUFF_APPLIED	= 252 (number)
   max                             	= function: 0x011d9b98 (function)
   CPointEntity                    	= table: 0x011b2518 (table, already seen)
   MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT	= 32 (number)
   ACT_MP_PRIMARY_GRENADE2_DRAW    	= 698 (number)
   CDOTA_Ability_Nian_Dive         	= table: 0x011b1d70 (table, already seen)
   MODIFIER_PROPERTY_MANA_BONUS    	= 90 (number)
   CDOTA_Unit_Nian                 	= table: 0x011b1660 (table, already seen)
   ACT_GESTURE_BIG_FLINCH          	= 153 (number)
   ACT_READINESS_AGITATED_TO_STIMULATED	= 421 (number)
   AE_CL_CREATE_PARTICLE_EFFECT_CFG	= 11 (number)
   ACT_MP_DEPLOYED_PRIMARY         	= 566 (number)
   CDOTA_Ability_Animation_TailSpin	= table: 0x011affc0 (table, already seen)
   ACT_FIRE_START                  	= 436 (number)
   CDOTA_BaseNPC_Hero              	= table: 0x011aac60 (table, already seen)
   CDOTA_Ability_Lua               	= table: 0x011a8148 (table, already seen)
   CDOTA_Item_Lua                  	= table: 0x01148790 (table, already seen)
   UF_FAIL_IN_FOW                  	= 19 (number)
   MODIFIER_PROPERTY_CAN_ATTACK_TREES	= 236 (number)
   CDOTA_SimpleObstruction         	= table: 0x01148090 (table, already seen)
   CDOTA_BaseNPC_Building          	= table: 0x01190a18 (table, already seen)
   DOTA_GC_TEAM_BROADCASTER        	= 2 (number)
   require                         	= function: 0x01113ea8 (function)
   CBaseCombatCharacter            	= table: 0x01188280 (table, already seen)
   CBaseFlex                       	= table: 0x01150a50 (table, already seen)
   CBaseModelEntity                	= table: 0x01185970 (table, already seen)
   GetXPNeededToReachNextLevel     	= function: 0x01146b18 (function)
   CDesc                           	= table: 0x01117588 (table, already seen)
   HasBaseClass                    	= function: 0x01201c70 (function)
   ACT_DOTA_LIFESTEALER_ASSIMILATE 	= 1703 (number)
   CBodyComponent                  	= table: 0x0117b018 (table, already seen)
   ACT_GESTURE_RANGE_ATTACK1_LOW   	= 149 (number)
   GetUnitKeyValuesByName          	= function: 0x0117ae88 (function)
   ACT_SCRIPT_CUSTOM_9             	= 920 (number)
   ACT_MP_MELEE_GRENADE1_IDLE      	= 708 (number)
   DMG_ACID                        	= 1048576 (number)
   GetAbilityTextureNameForAbility 	= function: 0x0117ad68 (function)
   NativeFunctions                 	= table: 0x011c42c8 (table, already seen)
   DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE	= 4 (number)
   LUA_MODIFIER_INVALID            	= 4 (number)
   CreateHTTPRequest               	= function: 0x0117ac50 (function)
   UnitFilter                      	= function: 0x0117abd0 (function)
   SPAWN_GROUP_HANDLE_INVALID      	= 0 (number)
   ACT_MP_RUN                      	= 508 (number)
   ScriptDebugTextLines            	= 20 (number)
   ACT_PRIMARY_VM_HOLSTER          	= 809 (number)
   DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS	= 13 (number)
   DOTA_SPEECH_USER_INVALID        	= 0 (number)
   UF_FAIL_NIGHTMARED              	= 27 (number)
   ACT_CSGO_FIRE_PRIMARY           	= 996 (number)
   UF_FAIL_DISABLE_HELP            	= 25 (number)
   UF_FAIL_NOT_PLAYER_CONTROLLED   	= 21 (number)
   UF_FAIL_INVISIBLE               	= 20 (number)
   OVERHEAD_ALERT_XP               	= 3 (number)
   IsDedicatedServer               	= function: 0x01140a70 (function)
   UF_FAIL_MAGIC_IMMUNE_ENEMY      	= 17 (number)
   ACT_RUN_RPG_RELAXED             	= 352 (number)
   ACT_WALK_CROUCH_AIM_RIFLE       	= 356 (number)
   MODIFIER_EVENT_ON_ATTACK_RECORD 	= 173 (number)
   ACT_MP_GESTURE_VC_NODNO_PDA     	= 804 (number)
   DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1	= 29 (number)
   MODIFIER_EVENT_ON_TELEPORTING   	= 200 (number)
   ACT_DOTA_CAST_ABILITY_1         	= 1510 (number)
   UF_FAIL_DOMINATED               	= 12 (number)
   UF_FAIL_ILLUSION                	= 10 (number)
   CDebugOverlayScriptHelper       	= table: 0x01361538 (table, already seen)
   ACT_SCRIPT_CUSTOM_23            	= 934 (number)
   UF_FAIL_BUILDING                	= 6 (number)
   ACT_CSGO_FIRE_SECONDARY_OPT_2   	= 1001 (number)
   UF_FAIL_CREEP                   	= 5 (number)
   UF_FAIL_HERO                    	= 3 (number)
   ACT_DOTA_ARCTIC_BURN_END        	= 1682 (number)
   AE_CL_CREATE_PARTICLE_EFFECT    	= 8 (number)
   ACT_ITEM1_VM_PULLBACK           	= 855 (number)
   UF_FAIL_FRIENDLY                	= 1 (number)
   StopListeningToGameEvent        	= function: 0x0113d950 (function)
   UF_SUCCESS                      	= 0 (number)
   DOTA_ABILITY_SPEAK_CAST         	= 1 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING	= 741 (number)
   StopGlobalSound                 	= function: 0x01145080 (function)
   DOTA_ITEM_TRANSIENT_ITEM        	= 17 (number)
   MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE	= 250 (number)
   DOTA_ABILITY_SPEAK_START_ACTION_PHASE	= 0 (number)
   ACT_ZOMBIE_TRIP                 	= 964 (number)
   SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= 1 (number)
   DOTA_SPEECH_USER_TEAM_NOSPECTATOR	= 9 (number)
   DOTA_SPEECH_SPECTATOR           	= 8 (number)
   ACT_MP_AIRWALK_BUILDING         	= 729 (number)
   DOTA_SPEECH_BAD_TEAM            	= 7 (number)
   ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN	= 157 (number)
   DOTA_SPEECH_GOOD_TEAM           	= 6 (number)
   MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE	= 84 (number)
   ACT_MP_ITEM2_GRENADE1_DRAW      	= 719 (number)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL	= 5 (number)
   ACT_ITEM2_VM_HOLSTER            	= 864 (number)
   DOTA_SPEECH_USER_ALL            	= 5 (number)
   ACT_DOTA_CAPTURE_RARE           	= 1706 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_MELEE	= 777 (number)
   DOTA_ModifyXP_TomeOfKnowledge   	= 4 (number)
   ACT_DOTA_KINETIC_FIELD          	= 1679 (number)
   DOTA_SPEECH_USER_TEAM_NEARBY    	= 3 (number)
   ScriptDebugAddTextFilter        	= function: 0x011b3488 (function)
   DOTA_MOTION_CONTROLLER_PRIORITY_HIGH	= 3 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_LOW	= 1 (number)
   ACT_MP_DOUBLEJUMP               	= 517 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST	= 0 (number)
   LUA_MODIFIER_MOTION_BOTH        	= 3 (number)
   LUA_MODIFIER_MOTION_VERTICAL    	= 2 (number)
   LUA_MODIFIER_MOTION_HORIZONTAL  	= 1 (number)
   PATTACH_HEALTHBAR               	= 15 (number)
   PATTACH_CUSTOM_GAME_STATE_1     	= 14 (number)
   PATTACH_CENTER_FOLLOW           	= 13 (number)
   DOTA_UNIT_ORDER_MOVE_TO_POSITION	= 1 (number)
   ACT_IDLE_SHOTGUN_STIMULATED     	= 335 (number)
   PATTACH_MAIN_VIEW               	= 11 (number)
   ACT_BUSY_SIT_CHAIR_ENTRY        	= 391 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN	= 8 (number)
   DOTA_LOADOUT_TYPE_BELT_PERSONA_1	= 37 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE	= 6 (number)
   ACT_DOTA_CAPTURE_PET            	= 1698 (number)
   DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED	= 5 (number)
   DOTA_UNIT_TARGET_TREE           	= 64 (number)
   DOTA_ModifyGold_SellItem        	= 6 (number)
   DOTA_ATTRIBUTE_AGILITY_DAMAGE   	= 3 (number)
   ACT_RANGE_ATTACK_SHOTGUN_LOW    	= 283 (number)
   MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE	= 128 (number)
   DOTA_ATTRIBUTE_STRENGTH_HP_REGEN	= 2 (number)
   DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH	= 25 (number)
   ACT_RIDE_MANNED_GUN             	= 432 (number)
   ACT_SLAM_TRIPMINE_ATTACH2       	= 253 (number)
   GetPhysVelocity                 	= function: 0x0113f3f0 (function)
   ACT_CSGO_FLINCH                 	= 1017 (number)
   DOTA_ATTRIBUTE_STRENGTH_DAMAGE  	= 0 (number)
   ACT_TINY_TOSS                   	= 1559 (number)
   DOTA_ATTRIBUTE_INVALID          	= -1 (number)
   ACT_GESTURE_SMALL_FLINCH        	= 152 (number)
   ACT_GRABBITYGLOVES_ACTIVE_IDLE  	= 959 (number)
   ACT_RUN_PROTECTED               	= 14 (number)
   MODIFIER_ATTRIBUTE_IGNORE_DODGE 	= 16 (number)
   ACT_MP_RELOAD_SWIM_END          	= 544 (number)
   ACT_VM_PRIMARYATTACK            	= 193 (number)
   DMG_GENERIC                     	= 0 (number)
   ACT_SECONDARY_VM_DRYFIRE        	= 826 (number)
   MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE	= 4 (number)
   DOTA_SPEECH_USER_NEARBY         	= 4 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY_END	= 585 (number)
   ACT_DOTA_MAGNUS_SKEWER_END      	= 1606 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE	= 48 (number)
   DOTA_MAX_SPECTATOR_TEAM_SIZE    	= 40 (number)
   ACT_MELEE_VM_IDLE_TO_LOWERED    	= 838 (number)
   ACT_MP_GESTURE_FLINCH_SECONDARY 	= 678 (number)
   MODIFIER_PRIORITY_HIGH          	= 2 (number)
   ACT_RANGE_ATTACK_SMG1_LOW       	= 280 (number)
   MODIFIER_PRIORITY_LOW           	= 0 (number)
   MODIFIER_STATE_LAST             	= 50 (number)
   SetOpvarFloatAll                	= function: 0x0113d298 (function)
   DOTA_BUFF_REMOVE_ALLY           	= 2 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS	= 47 (number)
   AE_CL_CLOTH_STIFFEN             	= 44 (number)
   MODIFIER_STATE_ATTACK_ALLIES    	= 46 (number)
   ACT_SMALL_FLINCH                	= 63 (number)
   MODIFIER_STATE_FORCED_FLYING_VISION	= 45 (number)
   MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED	= 44 (number)
   ACT_CSGO_FIRE_SECONDARY         	= 999 (number)
   DOTA_LOADOUT_TYPE_ABILITY2      	= 24 (number)
   ACT_DOTA_MAGNUS_SKEWER_START    	= 1605 (number)
   MODIFIER_STATE_TAUNTED          	= 43 (number)
   ACT_VM_HITRIGHT2                	= 200 (number)
   MODIFIER_EVENT_ON_TELEPORTED    	= 201 (number)
   StartSoundEventFromPositionUnreliable	= function: 0x0113f358 (function)
   ACT_MP_JUMP_LAND_BUILDING       	= 734 (number)
   MODIFIER_STATE_IGNORING_STOP_ORDERS	= 41 (number)
   MODIFIER_STATE_TETHERED         	= 40 (number)
   MODIFIER_STATE_UNSLOWABLE       	= 39 (number)
   DOTA_DAMAGE_CATEGORY_ATTACK     	= 1 (number)
   DOTA_ModifyGold_CourierKilledByThisPlayer	= 21 (number)
   DOTA_MINIMAP_EVENT_RADAR_TARGET 	= 8192 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES	= 37 (number)
   CDOTAGameManager                	= table: 0x0112dc90 (table, already seen)
   ACT_DOTA_DEFEAT_START           	= 1711 (number)
   ACT_POLICE_HARASS1              	= 338 (number)
   MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT	= 205 (number)
   ACT_GESTURE_RELOAD              	= 377 (number)
   MODIFIER_STATE_UNTARGETABLE     	= 35 (number)
   ACT_MP_AIRWALK_PRIMARY          	= 559 (number)
   MODIFIER_STATE_TRUESIGHT_IMMUNE 	= 34 (number)
   DOTA_ITEM_SLOT_8                	= 7 (number)
   ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP	= 1648 (number)
   MODIFIER_STATE_FAKE_ALLY        	= 32 (number)
   DOTA_LOADOUT_TYPE_HEAD_PERSONA_1	= 33 (number)
   MODIFIER_STATE_NO_TEAM_MOVE_TO  	= 26 (number)
   MODIFIER_STATE_NO_UNIT_COLLISION	= 25 (number)
   ACT_MP_GESTURE_VC_NODNO_MELEE   	= 780 (number)
   ACT_FLINCH_LEFTLEG              	= 123 (number)
   ACT_IDLETORUN                   	= 493 (number)
   ACT_GESTURE_TURN_LEFT90         	= 169 (number)
   MODIFIER_STATE_LOW_ATTACK_PRIORITY	= 21 (number)
   MODIFIER_STATE_FROZEN           	= 18 (number)
   ACT_MP_JUMP_FLOAT_ITEM2         	= 667 (number)
   ACT_DOTA_CUSTOM_TOWER_IDLE_RARE 	= 1755 (number)
   ACT_SHIELD_DOWN                 	= 451 (number)
   ACT_SECONDARY_VM_IDLE_LOWERED   	= 828 (number)
   MODIFIER_STATE_UNSELECTABLE     	= 14 (number)
   MODIFIER_STATE_EVADE_DISABLED   	= 13 (number)
   MODIFIER_STATE_NIGHTMARED       	= 11 (number)
   AE_MUZZLEFLASH                  	= 15 (number)
   MODIFIER_STATE_INVISIBLE        	= 7 (number)
   OVERHEAD_ALERT_DEADLY_BLOW      	= 24 (number)
   MODIFIER_STATE_HEXED            	= 6 (number)
   DOTA_ATTACK_RECORD_CANNOT_FAIL  	= 6 (number)
   MODIFIER_STATE_STUNNED          	= 5 (number)
   MODIFIER_STATE_MUTED            	= 4 (number)
   MODIFIER_STATE_ATTACK_IMMUNE    	= 2 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2	= 23 (number)
   MODIFIER_STATE_DISARMED         	= 1 (number)
   MODIFIER_STATE_ROOTED           	= 0 (number)
   DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE	= 128 (number)
   ACT_DOTA_CHANNEL_ABILITY_5      	= 1524 (number)
   UTIL_ResetMessageTextAll        	= function: 0x01140958 (function)
   CDOTA_BaseNPC_Shop              	= table: 0x011b2df0 (table, already seen)
   DOTA_ModifyGold_AbilityGold     	= 19 (number)
   ACT_ITEM1_VM_DRAW               	= 852 (number)
   MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET	= 249 (number)
   ACT_SLAM_THROW_THROW2           	= 240 (number)
   ACT_CSGO_FIRE_PRIMARY_OPT_1     	= 997 (number)
   DOTA_HEROPICK_STATE_CD_BAN2     	= 38 (number)
   MODIFIER_PROPERTY_SUPPRESS_CLEAVE	= 245 (number)
   ACT_DOTA_TROT                   	= 1686 (number)
   MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT	= 242 (number)
   ACT_DOTA_CAST1_STATUE           	= 1768 (number)
   CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble	= table: 0x011b3b90 (table, already seen)
   MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER	= 239 (number)
   MODIFIER_PROPERTY_VISUAL_Z_DELTA	= 237 (number)
   CDOTA_Item_Physical             	= table: 0x01148398 (table, already seen)
   MODIFIER_PROPERTY_IGNORE_COOLDOWN	= 235 (number)
   ACT_IDLE_ANGRY_RPG              	= 345 (number)
   MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE	= 233 (number)
   ACT_MP_GESTURE_FLINCH_HEAD      	= 682 (number)
   ScreenShake                     	= function: 0x0113dda0 (function)
   MODIFIER_PROPERTY_TEMPEST_DOUBLE	= 232 (number)
   ACT_VM_HITLEFT                  	= 197 (number)
   MODIFIER_EVENT_ON_ASSIST        	= 231 (number)
   ACT_DIE_INCAP                   	= 410 (number)
   MODIFIER_EVENT_ON_KILL          	= 230 (number)
   MODIFIER_PROPERTY_ABILITY_LAYOUT	= 228 (number)
   DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION	= 30 (number)
   Time                            	= function: 0x0113d018 (function)
   MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE	= 225 (number)
   ClearTeamCustomHealthbarColor   	= function: 0x01145fb0 (function)
   ACT_DOTA_CHANNEL_END_ABILITY_2  	= 1527 (number)
   MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH	= 162 (number)
   ACT_PRIMARY_VM_PRIMARYATTACK    	= 812 (number)
   MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP	= 222 (number)
   MODIFIER_PROPERTY_PROVIDES_FOW_POSITION	= 220 (number)
   MODIFIER_PROPERTY_LIFETIME_FRACTION	= 219 (number)
   ACT_FLICK_LEFT_MIDDLE           	= 901 (number)
   ACT_SLAM_DETONATOR_DETONATE     	= 258 (number)
   ACT_DOTA_IDLE_IMPATIENT         	= 1636 (number)
   ACT_MP_GESTURE_VC_THUMBSUP      	= 760 (number)
   DMG_RADIATION                   	= 262144 (number)
   MODIFIER_PROPERTY_IS_SHARD      	= 215 (number)
   MODIFIER_PROPERTY_IS_SCEPTER    	= 214 (number)
   MODIFIER_PROPERTY_MODEL_CHANGE  	= 212 (number)
   DOTA_DEFAULT_UI_TOP_TIMEOFDAY   	= 0 (number)
   MODIFIER_PROPERTY_TOOLTIP       	= 211 (number)
   ACT_FLICK_RIGHT                 	= 903 (number)
   _G                              	= table: 0x01111960 (table, already seen)
   MODIFIER_EVENT_ON_MODIFIER_ADDED	= 210 (number)
   ACT_MP_ATTACK_STAND_STARTFIRE   	= 550 (number)
   MODIFIER_EVENT_ON_MODEL_CHANGED 	= 209 (number)
   DOTA_UNIT_ORDER_MOVE_TO_TARGET  	= 2 (number)
   MODIFIER_EVENT_ON_BUILDING_KILLED	= 208 (number)
   AE_CL_PLAYSOUND_LOOPING         	= 6 (number)
   DOTA_CONNECTION_STATE_LOADING   	= 5 (number)
   DOTA_RUNE_WATER                 	= 7 (number)
   MODIFIER_EVENT_ON_BREAK_INVISIBILITY	= 185 (number)
   ACT_MP_SWIM_ITEM1               	= 652 (number)
   ACT_BUSY_SIT_GROUND             	= 387 (number)
   MODIFIER_EVENT_ON_SPENT_MANA    	= 199 (number)
   ACT_SECONDARY_VM_LOWERED_TO_IDLE	= 829 (number)
   ACT_SECONDARY_VM_PULLBACK       	= 822 (number)
   ACT_CSGO_PLANT_BOMB             	= 1013 (number)
   DOTA_SHOP_GROUND                	= 3 (number)
   ACT_GESTURE_FLINCH_BLAST        	= 154 (number)
   MODIFIER_EVENT_ON_DAMAGE_CALCULATED	= 194 (number)
   ACT_COWER                       	= 62 (number)
   MODIFIER_EVENT_ON_STATE_CHANGED 	= 191 (number)
   MODIFIER_EVENT_ON_DEATH_PREVENTED	= 190 (number)
   ACT_DOTA_CAST_ABILITY_4         	= 1513 (number)
   MODIFIER_EVENT_ON_SPELL_TARGET_READY	= 172 (number)
   ACT_DOTA_GREEVIL_BLINK_BONE     	= 1621 (number)
   ACT_PDA_VM_DRYFIRE              	= 848 (number)
   DOTA_UNIT_TARGET_TEAM_FRIENDLY  	= 1 (number)
   MODIFIER_EVENT_ON_PROCESS_UPGRADE	= 187 (number)
   MODIFIER_EVENT_ON_MANA_GAINED   	= 204 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE	= 88 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE	= 108 (number)
   MODIFIER_EVENT_ON_ABILITY_EXECUTED	= 183 (number)
   ACT_DIERAGDOLL                  	= 24 (number)
   MODIFIER_EVENT_ON_UNIT_MOVED    	= 181 (number)
   MODIFIER_EVENT_ON_ORDER         	= 180 (number)
   MODIFIER_EVENT_ON_PROJECTILE_DODGE	= 179 (number)
   DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES	= 0 (number)
   ACT_DOTA_CAPTURE_CARD           	= 1717 (number)
   MODIFIER_EVENT_ON_ATTACK_ALLIED 	= 178 (number)
   ACT_DOTA_SLIDE                  	= 1726 (number)
   MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT	= 33 (number)
   MODIFIER_EVENT_ON_ATTACK_START  	= 174 (number)
   UF_FAIL_RANGED                  	= 14 (number)
   ACT_DOTA_TRANSITION             	= 1731 (number)
   ACT_VM_IS_HOLSTER               	= 485 (number)
   MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING	= 65 (number)
   MODIFIER_EVENT_ON_TAKEDAMAGE    	= 189 (number)
   MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER	= 169 (number)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING	= 119 (number)
   ACT_CSGO_EXIT_LADDER_TOP        	= 1025 (number)
   MODIFIER_PROPERTY_MAX_DEBUFF_DURATION	= 168 (number)
   MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK	= 167 (number)
   ACT_DOTA_SHUFFLE_R              	= 1750 (number)
   ACT_DOTA_OVERRIDE_ABILITY_2     	= 1517 (number)
   MODIFIER_PROPERTY_DODGE_PROJECTILE	= 166 (number)
   MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER	= 164 (number)
   DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION	= 7 (number)
   MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER	= 163 (number)
   MODIFIER_PROPERTY_DISABLE_TURNING	= 223 (number)
   MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL	= 161 (number)
   DOTA_GAMERULES_STATE_POST_GAME  	= 10 (number)
   MODIFIER_PROPERTY_HEALTH_BONUS  	= 89 (number)
   ACT_MP_ATTACK_STAND_BUILDING    	= 736 (number)
   ACT_MP_ATTACK_CROUCH_BUILDING   	= 737 (number)
   DOTA_DEFAULT_MAX_TEAM           	= 5 (number)
   ACT_RELOAD_START                	= 68 (number)
   ACT_PREP_EXPLODE                	= 909 (number)
   MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK	= 159 (number)
   MODIFIER_PROPERTY_DISABLE_HEALING	= 158 (number)
   MODIFIER_PROPERTY_XP_DURING_DEATH	= 155 (number)
   DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS	= 28 (number)
   MODIFIER_PROPERTY_STRONG_ILLUSION	= 152 (number)
   ACT_STEP_LEFT                   	= 141 (number)
   _deepprint_alreadyseen          	= table: 0x01366b78 (array table)
   [
      1                               	= table: 0x01111960 (table, already seen)
      2                               	= table: 0x011bf440 (table, already seen)
      3                               	= table: 0x01188418 (table, already seen)
      4                               	= table: 0x011884a0 (table, already seen)
      5                               	= table: 0x0112ce08 (table, already seen)
      6                               	= table: 0x01186d88 (table, already seen)
      7                               	= table: 0x011859f8 (table, already seen)
      8                               	= table: 0x011371c0 (table, already seen)
      9                               	= table: 0x01125fb0 (table, already seen)
      10                              	= table: 0x011bf4c8 (table, already seen)
      11                              	= table: 0x011f8800 (table, already seen)
      12                              	= table: 0x011b29a8 (table, already seen)
      13                              	= table: 0x011b2518 (table, already seen)
      14                              	= table: 0x011b25a0 (table, already seen)
      15                              	= table: 0x011b2a30 (table, already seen)
      16                              	= table: 0x011f8f40 (table, already seen)
      17                              	= table: 0x011afaa0 (table, already seen)
      18                              	= table: 0x0117bba8 (table, already seen)
      19                              	= table: 0x0117bc30 (table, already seen)
      20                              	= table: 0x011afb28 (table, already seen)
      21                              	= table: 0x01114cb0 (table, already seen)
      22                              	= table: 0x01113708 (table, already seen)
      23                              	= table: 0x011aa828 (table, already seen)
      24                              	= table: 0x0117ebf0 (table, already seen)
      25                              	= table: 0x0117ec78 (table, already seen)
      26                              	= table: 0x011aa8b0 (table, already seen)
      27                              	= table: 0x011dc8c8 (table, already seen)
      28                              	= table: 0x011b3108 (table, already seen)
      29                              	= table: 0x011aa438 (table, already seen)
      30                              	= table: 0x011aa4c0 (table, already seen)
      31                              	= table: 0x011b3190 (table, already seen)
      32                              	= table: 0x01125f08 (table, already seen)
      33                              	= table: 0x011b0230 (table, already seen)
      34                              	= table: 0x011b02b8 (table, already seen)
      35                              	= table: 0x01186d00 (table, already seen)
      36                              	= table: 0x01185970 (table, already seen)
      37                              	= table: 0x01137138 (table, already seen)
      38                              	= table: 0x011b1a08 (table, already seen)
      39                              	= table: 0x01365240 (table, already seen)
      40                              	= table: 0x01361538 (table, already seen)
      41                              	= table: 0x013615c0 (table, already seen)
      42                              	= table: 0x011c0e70 (table, already seen)
      43                              	= table: 0x011c0ef8 (table, already seen)
      44                              	= table: 0x0120c5c8 (table, already seen)
      45                              	= table: 0x0120c650 (table, already seen)
      46                              	= table: 0x01143f30 (table, already seen)
      47                              	= table: 0x01143ab8 (table, already seen)
      48                              	= table: 0x01143b40 (table, already seen)
      49                              	= table: 0x011dc878 (table, already seen)
      50                              	= table: 0x011e21b0 (table, already seen)
      51                              	= table: 0x011e21d8 (table, already seen)
      52                              	= table: 0x011e2150 (table, already seen)
      53                              	= table: 0x011eb000 (table, already seen)
      54                              	= table: 0x011eb028 (table, already seen)
      55                              	= table: 0x011eafa0 (table, already seen)
      56                              	= table: 0x011335e0 (table, already seen)
      57                              	= table: 0x011310f0 (table, already seen)
      58                              	= table: 0x01131178 (table, already seen)
      59                              	= table: 0x0112f328 (table, already seen)
      60                              	= table: 0x01133668 (table, already seen)
      61                              	= table: 0x01133aa8 (table, already seen)
      62                              	= table: 0x01133b30 (table, already seen)
      63                              	= table: 0x01115ea8 (table, already seen)
      64                              	= table: 0x0112dfd8 (table, already seen)
      65                              	= table: 0x0112dc90 (table, already seen)
      66                              	= table: 0x0112dd18 (table, already seen)
      67                              	= table: 0x01115890 (table, already seen)
      68                              	= table: 0x01365340 (table, already seen)
      69                              	= table: 0x011b5160 (table, already seen)
      70                              	= table: 0x011b51e8 (table, already seen)
      71                              	= table: 0x01133258 (table, already seen)
      72                              	= table: 0x011332e0 (table, already seen)
      73                              	= table: 0x0135bc40 (table, already seen)
      74                              	= table: 0x0135b920 (table, already seen)
      75                              	= table: 0x0120c9e8 (table, already seen)
      76                              	= table: 0x0120c2a0 (table, already seen)
      77                              	= table: 0x0120bf18 (table, already seen)
      78                              	= table: 0x0120bfa0 (table, already seen)
      79                              	= table: 0x0120bd88 (table, already seen)
      80                              	= table: 0x0120bb38 (table, already seen)
      81                              	= table: 0x0120bbc0 (table, already seen)
      82                              	= table: 0x0120b9a8 (table, already seen)
      83                              	= table: 0x01206520 (table, already seen)
      84                              	= table: 0x012065a8 (table, already seen)
      85                              	= table: 0x01206250 (table, already seen)
      86                              	= table: 0x01205c08 (table, already seen)
      87                              	= table: 0x01205c90 (table, already seen)
      88                              	= table: 0x01190d20 (table, already seen)
      89                              	= table: 0x01187eb0 (table, already seen)
      90                              	= table: 0x01205a80 (table, already seen)
      91                              	= table: 0x011f9070 (table, already seen)
      92                              	= table: 0x011f90f8 (table, already seen)
      93                              	= table: 0x01365598 (table, already seen)
      94                              	= table: 0x01360f78 (table, already seen)
      95                              	= table: 0x01361078 (table, already seen)
      96                              	= table: 0x011dc940 (table, already seen)
      97                              	= table: 0x01117560 (table, already seen)
      98                              	= table: 0x011f8848 (table, already seen)
      99                              	= table: 0x01113aa0 (table, already seen)
      100                             	= table: 0x01114068 (table, already seen)
      101                             	= table: 0x01112b10 (table, already seen)
      102                             	= table: 0x01201690 (table, already seen)
      103                             	= table: 0x011f2b28 (table, already seen)
      104                             	= table: 0x0135b3e0 (table, already seen)
      105                             	= table: 0x0135b370 (table, already seen)
      106                             	= table: 0x01117588 (table, already seen)
      107                             	= table: 0x011b1ad8 (table, already seen)
      108                             	= table: 0x011b1b60 (table, already seen)
      109                             	= table: 0x011b3848 (table, already seen)
      110                             	= table: 0x01190a18 (table, already seen)
      111                             	= table: 0x01190aa0 (table, already seen)
      112                             	= table: 0x011b38d0 (table, already seen)
      113                             	= table: 0x011b3578 (table, already seen)
      114                             	= table: 0x011b3600 (table, already seen)
      115                             	= table: 0x011c3f38 (table, already seen)
      116                             	= table: 0x011c3fc0 (table, already seen)
      117                             	= table: 0x0112d0d8 (table, already seen)
      118                             	= table: 0x0112d160 (table, already seen)
      119                             	= table: 0x011c0970 (table, already seen)
      120                             	= table: 0x011c09f8 (table, already seen)
      121                             	= table: 0x011aaf20 (table, already seen)
      122                             	= table: 0x011aafa8 (table, already seen)
      123                             	= table: 0x011b1660 (table, already seen)
      124                             	= table: 0x011b16e8 (table, already seen)
      125                             	= table: 0x011b4110 (table, already seen)
      126                             	= table: 0x011b4198 (table, already seen)
      127                             	= table: 0x011c25d8 (table, already seen)
      128                             	= table: 0x011c2660 (table, already seen)
      129                             	= table: 0x011b33d8 (table, already seen)
      130                             	= table: 0x011b3460 (table, already seen)
      131                             	= table: 0x011affc0 (table, already seen)
      132                             	= table: 0x011b0048 (table, already seen)
      133                             	= table: 0x011be038 (table, already seen)
      134                             	= table: 0x011be0c0 (table, already seen)
      135                             	= table: 0x011be360 (table, already seen)
      136                             	= table: 0x011be3e8 (table, already seen)
      137                             	= table: 0x01148090 (table, already seen)
      138                             	= table: 0x01148118 (table, already seen)
      139                             	= table: 0x011be930 (table, already seen)
      140                             	= table: 0x011be9b8 (table, already seen)
      141                             	= table: 0x011c1d38 (table, already seen)
      142                             	= table: 0x011c1dc0 (table, already seen)
      143                             	= table: 0x011bf198 (table, already seen)
      144                             	= table: 0x011bf220 (table, already seen)
      145                             	= table: 0x011b2288 (table, already seen)
      146                             	= table: 0x011b2310 (table, already seen)
      147                             	= table: 0x011beef8 (table, already seen)
      148                             	= table: 0x011bef80 (table, already seen)
      149                             	= table: 0x011b3e28 (table, already seen)
      150                             	= table: 0x01150a50 (table, already seen)
      151                             	= table: 0x011b3eb0 (table, already seen)
      152                             	= table: 0x011b26b8 (table, already seen)
      153                             	= table: 0x011b2740 (table, already seen)
      154                             	= table: 0x011b1d70 (table, already seen)
      155                             	= table: 0x011b1df8 (table, already seen)
      156                             	= table: 0x011be5f8 (table, already seen)
      157                             	= table: 0x011be680 (table, already seen)
      158                             	= table: 0x011c41f0 (table, already seen)
      159                             	= table: 0x011c4278 (table, already seen)
      160                             	= table: 0x011c0c08 (table, already seen)
      161                             	= table: 0x011c0c90 (table, already seen)
      162                             	= table: 0x011b94a8 (table, already seen)
      163                             	= table: 0x01188280 (table, already seen)
      164                             	= table: 0x01188308 (table, already seen)
      165                             	= table: 0x01190410 (table, already seen)
      166                             	= table: 0x011c2b90 (table, already seen)
      167                             	= table: 0x011c2c18 (table, already seen)
      168                             	= table: 0x011b2df0 (table, already seen)
      169                             	= table: 0x011b2e78 (table, already seen)
      170                             	= table: 0x0117b018 (table, already seen)
      171                             	= table: 0x0117b0a0 (table, already seen)
      172                             	= table: 0x0112f2a0 (table, already seen)
      173                             	= table: 0x011b3b90 (table, already seen)
      174                             	= table: 0x011b3c18 (table, already seen)
      175                             	= table: 0x01148398 (table, already seen)
      176                             	= table: 0x01148420 (table, already seen)
      177                             	= table: 0x011c3cd8 (table, already seen)
      178                             	= table: 0x011c3d60 (table, already seen)
      179                             	= table: 0x01190830 (table, already seen)
      180                             	= table: 0x011908b8 (table, already seen)
      181                             	= table: 0x011c3930 (table, already seen)
      182                             	= table: 0x011c39b8 (table, already seen)
      183                             	= table: 0x011c1008 (table, already seen)
      184                             	= table: 0x011c1090 (table, already seen)
      185                             	= table: 0x011c1fa0 (table, already seen)
      186                             	= table: 0x011c2028 (table, already seen)
      187                             	= table: 0x011c3060 (table, already seen)
      188                             	= table: 0x011c30e8 (table, already seen)
      189                             	= table: 0x011c18f0 (table, already seen)
      190                             	= table: 0x011c1978 (table, already seen)
      191                             	= table: 0x011c3380 (table, already seen)
      192                             	= table: 0x011c3408 (table, already seen)
      193                             	= table: 0x011c14e8 (table, already seen)
      194                             	= table: 0x011c1570 (table, already seen)
      195                             	= table: 0x011c1688 (table, already seen)
      196                             	= table: 0x011c1710 (table, already seen)
      197                             	= table: 0x011afd40 (table, already seen)
      198                             	= table: 0x011afdc8 (table, already seen)
      199                             	= table: 0x011b1fe8 (table, already seen)
      200                             	= table: 0x011b2070 (table, already seen)
      201                             	= table: 0x01142f90 (table, already seen)
      202                             	= table: 0x01143018 (table, already seen)
      203                             	= table: 0x011a8148 (table, already seen)
      204                             	= table: 0x011a81d0 (table, already seen)
      205                             	= table: 0x0112c098 (table, already seen)
      206                             	= table: 0x0112c120 (table, already seen)
      207                             	= table: 0x011aac60 (table, already seen)
      208                             	= table: 0x011aace8 (table, already seen)
      209                             	= table: 0x01148790 (table, already seen)
      210                             	= table: 0x01148818 (table, already seen)
      211                             	= table: 0x011ab1d0 (table, already seen)
      212                             	= table: 0x011ab258 (table, already seen)
      213                             	= table: 0x0112e168 (table, already seen)
      214                             	= table: 0x0112e1f0 (table, already seen)
      215                             	= table: 0x0113e640 (table, already seen)
      216                             	= table: 0x0113e6c8 (table, already seen)
      217                             	= table: 0x01144090 (table, already seen)
      218                             	= table: 0x01144118 (table, already seen)
      219                             	= table: 0x01150ab0 (table, already seen)
      220                             	= table: 0x01150b38 (table, already seen)
      221                             	= table: 0x011b45d8 (table, already seen)
      222                             	= table: 0x011b4660 (table, already seen)
      223                             	= table: 0x011b4a28 (table, already seen)
      224                             	= table: 0x011b4ab0 (table, already seen)
      225                             	= table: 0x011c42c8 (table, already seen)
      226                             	= table: 0x011b2198 (table, already seen)
      227                             	= table: 0x011dc8f0 (table, already seen)
      228                             	= table: 0x011175d0 (table, already seen)
      229                             	= table: 0x011474b8 (table, already seen)
      230                             	= table: 0x0114bff0 (table, already seen)
      231                             	= table: 0x01134008 (table, already seen)
      232                             	= table: 0x01179548 (table, already seen)
      233                             	= table: 0x0117a158 (table, already seen)
      234                             	= table: 0x01135800 (table, already seen)
      235                             	= table: 0x01128ce0 (table, already seen)
      236                             	= table: 0x0117a258 (table, already seen)
      237                             	= table: 0x01135ea8 (table, already seen)
      238                             	= table: 0x0116dbe8 (table, already seen)
      239                             	= table: 0x011519c0 (table, already seen)
      240                             	= table: 0x01135a28 (table, already seen)
      241                             	= table: 0x0116d898 (table, already seen)
      242                             	= table: 0x0114c410 (table, already seen)
      243                             	= table: 0x0114d1c8 (table, already seen)
      244                             	= table: 0x0113be60 (table, already seen)
      245                             	= table: 0x0114cf68 (table, already seen)
      246                             	= table: 0x01128130 (table, already seen)
      247                             	= table: 0x0114d070 (table, already seen)
      248                             	= table: 0x01147330 (table, already seen)
      249                             	= table: 0x011788a8 (table, already seen)
      250                             	= table: 0x01178ec0 (table, already seen)
      251                             	= table: 0x01135b98 (table, already seen)
      252                             	= table: 0x01179bc8 (table, already seen)
      253                             	= table: 0x01179650 (table, already seen)
      254                             	= table: 0x0114bdd8 (table, already seen)
      255                             	= table: 0x01135488 (table, already seen)
      256                             	= table: 0x0114f308 (table, already seen)
      257                             	= table: 0x01178c38 (table, already seen)
      258                             	= table: 0x01178b10 (table, already seen)
      259                             	= table: 0x01136910 (table, already seen)
      260                             	= table: 0x01177998 (table, already seen)
      261                             	= table: 0x01128480 (table, already seen)
      262                             	= table: 0x01177570 (table, already seen)
      263                             	= table: 0x0114f988 (table, already seen)
      264                             	= table: 0x0114bc78 (table, already seen)
      265                             	= table: 0x0116d758 (table, already seen)
      266                             	= table: 0x0116dd88 (table, already seen)
      267                             	= table: 0x0114e970 (table, already seen)
      268                             	= table: 0x011282a8 (table, already seen)
      269                             	= table: 0x0114ed90 (table, already seen)
      270                             	= table: 0x0114b9c0 (table, already seen)
      271                             	= table: 0x0114c7c0 (table, already seen)
      272                             	= table: 0x0114d490 (table, already seen)
      273                             	= table: 0x01179118 (table, already seen)
      274                             	= table: 0x011dc8a0 (table, already seen)
      275                             	= table: 0x011142a0 (table, already seen)
      276                             	= table: 0x0112db28 (table, already seen)
      277                             	= table: 0x011b1c80 (table, already seen)
      278                             	= table: 0x0112f118 (table, already seen)
      279                             	= table: 0x011dc850 (table, already seen)
      280                             	= table: 0x011ec0b8 (table, already seen)
      281                             	= table: 0x011ec118 (table, already seen)
      282                             	= table: 0x011ebb18 (table, already seen)
      283                             	= table: 0x011ebb78 (table, already seen)
      284                             	= table: 0x01112b38 (table, already seen)
      285                             	= table: 0x01112b98 (table, already seen)
      286                             	= table: 0x01112bf8 (table, already seen)
      287                             	= table: 0x01142e00 (table, already seen)
      288                             	= table: 0x011cd600 (table, already seen)
      289                             	= table: 0x01114600 (table, already seen)
      290                             	= table: 0x01144268 (table, already seen)
      291                             	= table: 0x011b1ef0 (table, already seen)
      292                             	= table: 0x011b3a80 (table, already seen)
      293                             	= table: 0x0112bf50 (table, already seen)
      294                             	= table: 0x011de180 (table, already seen)
      295                             	= table: 0x0112cc68 (table, already seen)
      296                             	= table: 0x01143958 (table, already seen)
      297                             	= table: 0x011d9c80 (table, already seen)
      298                             	= table: 0x011d9360 (table, already seen)
      299                             	= table: 0x011b1f18 (table, already seen)
      300                             	= table: 0x011dc918 (table, already seen)
      301                             	= table: 0x011dc9f8 (table, already seen)
      302                             	= table: 0x011dca68 (table, already seen)
      303                             	= table: 0x011dca90 (table, already seen)
      304                             	= table: 0x011dca30 (table, already seen)
      305                             	= table: 0x0135d2f8 (table, already seen)
      306                             	= table: 0x0135beb8 (table, already seen)
      307                             	= table: 0x01113c10 (table, already seen)
      308                             	= table: 0x01366b78 (table, already seen)
   ]
   FCVAR_NEVER_AS_STRING           	= 4096 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL	= 148 (number)
   ACT_MP_SWIM_BUILDING            	= 735 (number)
   MODIFIER_PROPERTY_MIN_HEALTH    	= 146 (number)
   ACT_CROUCHIDLE_STIMULATED       	= 103 (number)
   DOTA_ITEM_TRANSIENT_CAST_ITEM   	= 20 (number)
   MODIFIER_PROPERTY_BONUS_DAY_VISION	= 140 (number)
   ACT_DOTA_CYCLONE                	= 1786 (number)
   ACT_MP_ATTACK_CROUCH_ITEM1      	= 655 (number)
   DOTA_SHOP_NONE                  	= 8 (number)
   MODIFIER_PROPERTY_ABSORB_SPELL  	= 137 (number)
   xpcall                          	= function: builtin#21 (function)
   MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT	= 135 (number)
   DOTA_LOADOUT_TYPE_WARD          	= 62 (number)
   MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK	= 133 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL	= 147 (number)
   MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK	= 129 (number)
   MODIFIER_PROPERTY_GOLD_RATE_BOOST	= 126 (number)
   EDesc                           	= table: 0x011175d0 (table, already seen)
   ACT_MP_JUMP_ITEM2               	= 665 (number)
   MODIFIER_PROPERTY_DEATHGOLDCOST 	= 124 (number)
   MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING	= 123 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_2	= 2 (number)
   ACT_CROUCHING_GRENADEIDLE       	= 439 (number)
   DebugCreateUnit                 	= function: 0x01145b38 (function)
   ACT_MP_ATTACK_SWIM_PREFIRE      	= 553 (number)
   MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE	= 121 (number)
   MODIFIER_PROPERTY_CASTTIME_PERCENTAGE	= 120 (number)
   DOTA_ABILITY_BEHAVIOR_NONE      	= 0 (number)
   MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE	= 116 (number)
   MODIFIER_PROPERTY_RESPAWNTIME   	= 115 (number)
   DOTA_LOADOUT_TYPE_NONE          	= 86 (number)
   DOTA_LOADOUT_TYPE_SHOULDER      	= 5 (number)
   DOTA_ITEM_NEUTRAL_SLOT          	= 16 (number)
   ACT_WALK_ANGRY                  	= 337 (number)
   FCVAR_NONE                      	= 0 (number)
   ACT_GESTURE_TURN_RIGHT90_FLAT   	= 174 (number)
   MODIFIER_EVENT_ON_ABILITY_FULLY_CAST	= 184 (number)
   ACT_VM_RECOIL2                  	= 217 (number)
   ACT_SCRIPT_CUSTOM_29            	= 940 (number)
   CalcClosestPointOnEntityOBB     	= function: 0x01140c78 (function)
   ACT_VR_SHOTGUN_SLIDE_FORWARD    	= 981 (number)
   ACT_DIESIMPLE                   	= 20 (number)
   ACT_MP_ATTACK_AIRWALK_ITEM2     	= 675 (number)
   ACT_SLAM_STICKWALL_ATTACH       	= 226 (number)
   DOTA_DAMAGE_CATEGORY_SPELL      	= 0 (number)
   DOTA_TEAM_CUSTOM_COUNT          	= 8 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE	= 106 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING	= 105 (number)
   ACT_SECONDARY_VM_DRAW           	= 819 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET	= 104 (number)
   SetPhysAngularVelocity          	= function: 0x0113f4f8 (function)
   CalcDistanceToLineSegment2D     	= function: 0x0113e528 (function)
   ACT_90_LEFT                     	= 139 (number)
   ACT_DOTA_CAST_ABILITY_1_END     	= 1540 (number)
   MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY	= 241 (number)
   ACT_DOTA_DEFEAT                 	= 1592 (number)
   MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE	= 99 (number)
   MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE	= 94 (number)
   MODIFIER_PROPERTY_EXTRA_MANA_BONUS	= 93 (number)
   ACT_MP_RUN_ITEM1                	= 644 (number)
   DAMAGE_TYPE_PHYSICAL            	= 1 (number)
   CDOTA_Ability_Nian_Roar         	= table: 0x011b1ad8 (table, already seen)
   AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES	= 58 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1	= 782 (number)
   IsValidEntity                   	= function: 0x0113d740 (function)
   DOTA_ModifyXP_RoshanKill        	= 3 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE	= 87 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT	= 86 (number)
   MODIFIER_PROPERTY_MANA_REGEN_CONSTANT	= 83 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS	= 79 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION	= 78 (number)
   DOTA_MUSIC_STATUS_EXPLORATION   	= 1 (number)
   ACT_MP_ATTACK_SWIM_ITEM2        	= 674 (number)
   MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR	= 76 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE	= 74 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE	= 73 (number)
   DMG_DROWN                       	= 16384 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS	= 72 (number)
   ACT_MP_ITEM2_GRENADE1_ATTACK    	= 721 (number)
   DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1	= 52 (number)
   MODIFIER_PROPERTY_AVOID_DAMAGE  	= 67 (number)
   MODIFIER_PROPERTY_STATUS_RESISTANCE	= 64 (number)
   ACT_RELOAD_FINISH               	= 69 (number)
   DOTA_SHOWGENERICPOPUP_SHOW_NO_OTHER_DIALOGS	= 2 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS	= 14 (number)
   MODIFIER_PROPERTY_EVASION_CONSTANT	= 62 (number)
   MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT	= 61 (number)
   MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT	= 60 (number)
   CreateItemOnPositionSync        	= function: 0x01145870 (function)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE	= 58 (number)
   cvar_setf                       	= function: 0x0113ca80 (function)
   ACT_MP_ATTACK_CROUCH_MELEE      	= 634 (number)
   ACT_PRIMARY_VM_DRAW             	= 808 (number)
   ACT_VR_PISTOL_IDLE_SLIDE_BACK   	= 949 (number)
   MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE	= 53 (number)
   MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE	= 52 (number)
   ACT_DOTA_TELEPORT_REACT         	= 1631 (number)
   MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET	= 48 (number)
   __DumpScope                     	= function: 0x011b1598 (function)
   ACT_ITEM1_VM_DRYFIRE            	= 859 (number)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE	= 45 (number)
   ScriptDebugRemoveWatches        	= function: 0x011b25e8 (function)
   MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE	= 43 (number)
   InstallMixins                   	= function: 0x011ea308 (function)
   ACT_VM_DRYFIRE_LEFT             	= 483 (number)
   ACT_ANTLION_SCUTTLE_FORWARD     	= 967 (number)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION	= 41 (number)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE	= 40 (number)
   ACT_DOTA_RAZE_3                 	= 1665 (number)
   MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT	= 38 (number)
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE	= 37 (number)
   CScriptHeroList                 	= table: 0x01150ab0 (table, already seen)
   ACT_BUSY_LEAN_BACK_EXIT         	= 386 (number)
   MODIFIER_EVENT_ON_ATTACK        	= 175 (number)
   CDOTA_Unit_Courier              	= table: 0x011b2288 (table, already seen)
   ApplyDamage                     	= function: 0x01151ce8 (function)
   DebugDrawCircle                 	= function: 0x0113f970 (function)
   ITEM_PARTIALLY_SHAREABLE        	= 1 (number)
   MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT	= 31 (number)
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE	= 24 (number)
   ACT_HOVER                       	= 26 (number)
   DOTA_LOADOUT_TYPE_STREAK_EFFECT 	= 78 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE	= 20 (number)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE	= 19 (number)
   MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY	= 15 (number)
   MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION	= 14 (number)
   DMG_REMOVENORAGDOLL             	= 4194304 (number)
   DOTA_ITEM_SLOT_9                	= 8 (number)
   MODIFIER_PROPERTY_PRE_ATTACK    	= 12 (number)
   ACT_OBJ_UPGRADING               	= 470 (number)
   MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE	= 11 (number)
   MODIFIER_PROPERTY_PROCATTACK_FEEDBACK	= 10 (number)
   ACT_DOTA_FLAIL_STATUE           	= 1766 (number)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE	= 8 (number)
   ACT_DOTA_UNDYING_TOMBSTONE      	= 1668 (number)
   ACT_VR_PISTOL_CLIP_OUT_CHAMBERED	= 945 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT	= 3 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE	= 0 (number)
   ACT_DOTA_CHANNEL_ABILITY_4      	= 1523 (number)
   ACT_MP_JUMP_FLOAT_SECONDARY     	= 598 (number)
   ACT_GESTURE_TURN_RIGHT45        	= 168 (number)
   ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK	= 948 (number)
   DOTA_SHOP_SECRET2               	= 5 (number)
   DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK	= 2 (number)
   MODIFIER_EVENT_ON_ATTACKED      	= 196 (number)
   AE_CL_SHOW_PARTICLE_EFFECT      	= 19 (number)
   DebugDrawLine                   	= function: 0x0113f8f0 (function)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7	= 83 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY_LOOP	= 612 (number)
   ACT_MP_ATTACK_STAND_GRENADE_BUILDING	= 740 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY_END	= 616 (number)
   DOTA_SHOP_HOME                  	= 0 (number)
   IsUnitInValidPosition           	= function: 0x01146a90 (function)
   ACT_MP_GESTURE_VC_THUMBSUP_MELEE	= 778 (number)
   ACT_IDLE_PISTOL                 	= 317 (number)
   FIND_ANY_ORDER                  	= 0 (number)
   ACT_GESTURE_RANGE_ATTACK_ML     	= 302 (number)
   ACT_DOTA_CHANNEL_ABILITY_1      	= 1520 (number)
   FIND_CLOSEST                    	= 1 (number)
   FIND_UNITS_EVERYWHERE           	= -1 (number)
   ACT_GRABBITYGLOVES_GRAB_IDLE    	= 957 (number)
   ABILITY_TYPE_HIDDEN             	= 3 (number)
   ACT_WALK_AIM_AGITATED           	= 97 (number)
   SpawnEntityFromTableSynchronous 	= function: 0x0113de20 (function)
   ABILITY_NOT_LEARNABLE           	= 4 (number)
   ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL	= 3 (number)
   ABILITY_CAN_BE_UPGRADED         	= 0 (number)
   SERVER_DLL                      	= 1 (number)
   MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK	= 160 (number)
   ACT_POLICE_HARASS2              	= 339 (number)
   FCVAR_NOT_CONNECTED             	= 4194304 (number)
   DOTA_MAX_TEAM_PLAYERS           	= 24 (number)
   IsServer                        	= function: 0x01140af8 (function)
   ACT_WALK_AIM_PISTOL             	= 366 (number)
   ACT_VM_MISSCENTER2              	= 208 (number)
   ACT_DOTA_CAST_LIFE_BREAK_END    	= 1564 (number)
   Deg2Rad                         	= function: 0x011c1808 (function)
   DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING	= 0 (number)
   ACT_MP_GESTURE_FLINCH_ITEM2     	= 681 (number)
   UserIDToControllerHScript       	= function: 0x0113dc00 (function)
   DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE	= 0 (number)
   AE_CL_STOP_PARTICLE_EFFECT      	= 9 (number)
   ACT_SPINAROUND                  	= 904 (number)
   ACT_DOTA_RELAX_LOOP_END         	= 1634 (number)
   ACT_SCRIPT_CUSTOM_7             	= 918 (number)
   DOTA_ABILITY_BEHAVIOR_AUTOCAST  	= 4096 (number)
   DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING	= 1073741824 (number)
   ACT_DOTA_ITEM_DROP              	= 1697 (number)
   ACT_CSGO_FLASHBANG_REACTION     	= 995 (number)
   DOTA_ABILITY_BEHAVIOR_RUNE_TARGET	= 268435456 (number)
   ACT_ITEM1_VM_IDLE               	= 854 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING	= 134217728 (number)
   DOTA_LOADOUT_TYPE_VERSUS_SCREEN 	= 77 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK	= 33554432 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT	= 8388608 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL	= 4194304 (number)
   ACT_DOTA_GREEVIL_OVERRIDE_ABILITY	= 1618 (number)
   DOTA_GC_TEAM_PLAYER_POOL        	= 4 (number)
   ACT_DOTA_VICTORY                	= 1591 (number)
   DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES	= 524288 (number)
   ACT_WALK_SCARED                 	= 111 (number)
   DOTA_ABILITY_BEHAVIOR_AURA      	= 65536 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT	= 16384 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET	= 8192 (number)
   DOTA_ABILITY_BEHAVIOR_IMMEDIATE 	= 2048 (number)
   DMG_FALL                        	= 32 (number)
   CScriptPrecacheContext          	= table: 0x011c3f38 (table, already seen)
   DOTA_ABILITY_BEHAVIOR_ITEM      	= 256 (number)
   DOTA_ABILITY_BEHAVIOR_NO_TARGET 	= 4 (number)
   ACT_DOTA_CAST_DEAFENING_BLAST_ORB	= 1746 (number)
   printstack                      	= function: 0x01117490 (function)
   DOTA_ABILITY_BEHAVIOR_HIDDEN    	= 1 (number)
   ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED	= 425 (number)
   AE_SV_STOP_PARTICLE_EFFECT      	= 17 (number)
   ACT_PDA_VM_HOLSTER              	= 842 (number)
   DOTA_DEFAULT_UI_INVENTORY_PROTECT	= 10 (number)
   MODIFIER_PROPERTY_RESPAWNTIME_STACKING	= 117 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED	= 524288 (number)
   ACT_SCRIPT_CUSTOM_13            	= 924 (number)
   DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD	= 262144 (number)
   ACT_WALK_STIMULATED             	= 84 (number)
   DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY	= 256 (number)
   DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP	= 65536 (number)
   ACT_MP_CROUCHWALK_ITEM1         	= 647 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS	= 8192 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED	= 4096 (number)
   ACT_DIEBACKWARD                 	= 21 (number)
   MODIFIER_PROPERTY_MANACOST_PERCENTAGE	= 122 (number)
   ACT_ALIEN_BURROW_OUT            	= 49 (number)
   DMG_SONIC                       	= 512 (number)
   DOTA_UNIT_ORDER_CAST_RUNE       	= 26 (number)
   DAMAGE_TYPE_HP_REMOVAL          	= 8 (number)
   ACT_DOTA_GS_SOUL_CHAIN          	= 1729 (number)
   ACT_RUN_AIM_STEALTH             	= 102 (number)
   ACT_MP_PRIMARY_GRENADE2_IDLE    	= 699 (number)
   DOTA_UNIT_TARGET_FLAG_INVULNERABLE	= 64 (number)
   OVERHEAD_ALERT_DISABLE_RESIST   	= 19 (number)
   DOTA_MUSIC_STATUS_LAST          	= 5 (number)
   ACT_GESTURE_RANGE_ATTACK_AR1    	= 298 (number)
   TraceLine                       	= function: 0x011400b0 (function)
   ACT_CROUCH                      	= 44 (number)
   DOTA_UNIT_TARGET_FLAG_MELEE_ONLY	= 4 (number)
   ACT_LOOKBACK_LEFT               	= 61 (number)
   EMPTY                           	= 0 (number)
   SPECIAL2                        	= 9 (number)
   DOTA_UNIT_TARGET_FLAG_NONE      	= 0 (number)
   DOTA_UNIT_TARGET_ALL            	= 55 (number)
   CreateModifierThinker           	= function: 0x011466c8 (function)
   FCVAR_DONTRECORD                	= 131072 (number)
   DOTA_LOADOUT_TYPE_ABILITY3      	= 25 (number)
   ACT_MELEE_ATTACK2               	= 66 (number)
   DOTA_UNIT_TARGET_OTHER          	= 32 (number)
   DOTA_DAMAGE_FLAG_NONE           	= 0 (number)
   DOTA_UNIT_TARGET_COURIER        	= 16 (number)
   ACT_DOTA_SHAKE                  	= 1687 (number)
   ACT_GESTURE_TURN_LEFT           	= 165 (number)
   DOTA_UNIT_TARGET_CREEP          	= 2 (number)
   ACT_RUN_STEALTH                 	= 90 (number)
   ACT_ROLL_LEFT                   	= 40 (number)
   MakeStringToken                 	= function: 0x011c43c8 (function)
   CancelEntityIOEvents            	= function: 0x0113c028 (function)
   ACT_WALK_PACKAGE                	= 322 (number)
   DOTA_UNIT_TARGET_TEAM_BOTH      	= 3 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL 	= 1653 (number)
   MODIFIER_EVENT_ON_REFRESH       	= 188 (number)
   ACT_SIGNAL_LEFT                 	= 57 (number)
   DOTA_UNIT_TARGET_TEAM_NONE      	= 0 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG1_LOW	= 304 (number)
   ACT_DOTA_TELEPORT               	= 1595 (number)
   ACT_DIE_LEFTSIDE                	= 405 (number)
   ACT_LOOKBACK_RIGHT              	= 60 (number)
   ACT_SCRIPT_CUSTOM_3             	= 914 (number)
   ACT_DOTA_CUSTOM_TOWER_TAUNT     	= 1756 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY_LOOP 	= 581 (number)
   DOTA_RUNE_REGENERATION          	= 4 (number)
   DOTA_RUNE_INVISIBILITY          	= 3 (number)
   DOTA_RUNE_HASTE                 	= 1 (number)
   UTIL_MessageTextAll             	= function: 0x01140728 (function)
   ACT_DOTA_ATTACK2                	= 1504 (number)
   DOTA_TEAM_CUSTOM_MAX            	= 13 (number)
   ACT_RANGE_ATTACK_SMG2           	= 281 (number)
   ACT_IDLE_PACKAGE                	= 321 (number)
   DOTA_TEAM_COUNT                 	= 14 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY	= 763 (number)
   ACT_DOTA_SAND_KING_BURROW_IN    	= 1568 (number)
   ITEM_FULLY_SHAREABLE            	= 0 (number)
   DOTA_UNIT_ORDER_SELL_ITEM       	= 17 (number)
   DOTA_TEAM_CUSTOM_1              	= 6 (number)
   FireEntityIOInputString         	= function: 0x0113c6c8 (function)
   DOTA_TEAM_NOTEAM                	= 5 (number)
   DOTA_TEAM_NEUTRALS              	= 4 (number)
   DOTA_GAMERULES_STATE_DISCONNECT 	= 11 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_ITEM1	= 783 (number)
   DOTA_ITEM_TP_SCROLL             	= 15 (number)
   DOTA_TEAM_GOODGUYS              	= 2 (number)
   DOTA_TEAM_FIRST                 	= 2 (number)
   FCVAR_SS                        	= 32768 (number)
   ACT_DOTA_CAST_GHOST_WALK        	= 1582 (number)
   DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES	= 60 (number)
   DOTA_ModifyGold_BountyRune      	= 17 (number)
   ACT_MP_RELOAD_CROUCH_PRIMARY    	= 577 (number)
   ACT_ZOMBIE_LUNGE                	= 965 (number)
   DMG_DROWNRECOVER                	= 524288 (number)
   ACT_VM_UNUSABLE                 	= 805 (number)
   DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT	= 57 (number)
   DOTA_HERO_PICK_STATE_ARDM_SELECT	= 56 (number)
   ACT_WALK_AIM_STEALTH_PISTOL     	= 369 (number)
   CDOTA_BaseNPC                   	= table: 0x01188418 (table, already seen)
   DOTA_HEROPICK_STATE_BD_SELECT   	= 54 (number)
   DOTA_HEROPICK_STATE_CD_PICK     	= 53 (number)
   DOTA_HEROPICK_STATE_CD_SELECT10 	= 52 (number)
   DOTA_HEROPICK_STATE_CD_SELECT9  	= 51 (number)
   DOTA_HEROPICK_STATE_CD_SELECT8  	= 50 (number)
   DOTA_HEROPICK_STATE_CD_SELECT7  	= 49 (number)
   ACT_OVERLAY_GRENADEREADY        	= 443 (number)
   DOTA_HEROPICK_STATE_CD_SELECT6  	= 48 (number)
   DOTA_HUD_VISIBILITY_QUICK_STATS 	= 24 (number)
   AE_CL_PLAYSOUND_POSITION        	= 3 (number)
   InitLogFile                     	= function: 0x0113ce98 (function)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_1	= 1 (number)
   DOTA_HEROPICK_STATE_CD_SELECT5  	= 47 (number)
   ACT_MP_SWIM_SECONDARY           	= 600 (number)
   ACT_FIRE_RECOVER                	= 907 (number)
   ACT_MP_GESTURE_VC_NODNO_ITEM2   	= 792 (number)
   DOTA_HEROPICK_STATE_CD_SELECT4  	= 46 (number)
   ACT_MP_ATTACK_SWIM_MELEE        	= 636 (number)
   ACT_BIG_FLINCH                  	= 64 (number)
   DOTA_HEROPICK_STATE_CD_SELECT3  	= 45 (number)
   ACT_DIE_GUTSHOT                 	= 116 (number)
   DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED	= 34 (number)
   ACT_SHIELD_ATTACK               	= 453 (number)
   DOTA_HEROPICK_STATE_CD_SELECT2  	= 44 (number)
   CInfoPlayerStartDota            	= table: 0x011b3578 (table, already seen)
   DOTA_HEROPICK_STATE_CD_BAN6     	= 42 (number)
   DOTA_HEROPICK_STATE_CD_BAN5     	= 41 (number)
   DOTA_HEROPICK_STATE_CD_BAN4     	= 40 (number)
   DOTA_HEROPICK_STATE_CD_BAN3     	= 39 (number)
   MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS	= 246 (number)
   DOTA_HEROPICK_STATE_CD_BAN1     	= 37 (number)
   DOTA_HEROPICK_STATE_CD_CAPTAINPICK	= 36 (number)
   DOTA_HEROPICK_STATE_CD_INTRO    	= 35 (number)
   DOTA_HEROPICK_STATE_FH_SELECT   	= 34 (number)
   DOTA_HEROPICK_STATE_MO_SELECT   	= 33 (number)
   DOTA_HEROPICK_STATE_AR_SELECT   	= 32 (number)
   ACT_SCRIPT_CUSTOM_21            	= 932 (number)
   GetTreeIdForEntityIndex         	= function: 0x0114ffe8 (function)
   DOTA_HEROPICK_STATE_CM_SELECT9  	= 29 (number)
   DOTA_HEROPICK_STATE_CM_SELECT5  	= 25 (number)
   ACT_COVER_PISTOL_LOW            	= 296 (number)
   DOTA_HEROPICK_STATE_CM_SELECT2  	= 22 (number)
   ACT_RANGE_AIM_LOW               	= 292 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_3  	= 1528 (number)
   DOTA_HEROPICK_STATE_CM_SELECT1  	= 21 (number)
   DOTA_HEROPICK_STATE_CM_BAN14    	= 20 (number)
   DOTA_HEROPICK_STATE_CM_BAN12    	= 18 (number)
   ACT_RELOAD_SHOTGUN              	= 375 (number)
   ACT_MP_SWIM_PDA                 	= 754 (number)
   DOTA_HEROPICK_STATE_CM_BAN10    	= 16 (number)
   DOTA_HEROPICK_STATE_CM_BAN7     	= 13 (number)
   DOTA_HEROPICK_STATE_CM_BAN5     	= 11 (number)
   DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT	= 36 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6	= 82 (number)
   AE_CL_CLOTH_EFFECT              	= 45 (number)
   DOTA_HEROPICK_STATE_CM_BAN4     	= 10 (number)
   DOTA_ModifyGold_WardKill        	= 20 (number)
   ABILITY_TYPE_ATTRIBUTES         	= 2 (number)
   MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE	= 100 (number)
   _VERSION                        	= "Lua 5.1" (string)
   DOTA_HEROPICK_STATE_SD_SELECT   	= 2 (number)
   DOTA_UNIT_ORDER_PATROL          	= 29 (number)
   DOTA_HEROPICK_STATE_AP_SELECT   	= 1 (number)
   ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP 	= 1575 (number)
   DOTA_HEROPICK_STATE_NONE        	= 0 (number)
   CDOTA_Modifier_Lua              	= table: 0x011310f0 (table, already seen)
   CDOTA_Buff                      	= table: 0x0112f2a0 (table, already seen)
   DOTA_LOADOUT_TYPE_MISC_PERSONA_1	= 43 (number)
   ParticleManager                 	= table: 0x0112f118 (table, already seen)
   CScriptParticleManager          	= table: 0x0112e168 (table, already seen)
   HeroList                        	= table: 0x0112bf50 (table, already seen)
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST	= 36 (number)
   DOTA_LOADOUT_TYPE_RADIANT_TOWER 	= 75 (number)
   MODIFIER_PROPERTY_IGNORE_CAST_ANGLE	= 224 (number)
   FCVAR_UNREGISTERED              	= 1 (number)
   ACT_MP_JUMP_BUILDING            	= 731 (number)
   FindSpawnEntityForTeam          	= function: 0x011507e8 (function)
   SendOverheadEventMessage        	= function: 0x01150758 (function)
   ShowCustomHeaderMessage         	= function: 0x011506d0 (function)
   TableHelper                     	= table: 0x0135b3e0 (table, already seen)
   GetItemDefOwnedCount            	= function: 0x011505c0 (function)
   ACT_OBJ_DISMANTLING             	= 464 (number)
   ShowGenericPopupToPlayer        	= function: 0x01150180 (function)
   ACT_SLAM_THROW_DETONATOR_HOLSTER	= 248 (number)
   ACT_IDLE_AIM_AGITATED           	= 93 (number)
   FCVAR_CHEAT                     	= 16384 (number)
   AE_CL_SUPPRESS_EVENTS_WITH_TAG  	= 12 (number)
   GetEntityIndexForTreeId         	= function: 0x0114ff60 (function)
   GetPhysAngularVelocity          	= function: 0x0113f470 (function)
   CreateTempTree                  	= function: 0x0114f448 (function)
   CrossVectors                    	= function: 0x0113c530 (function)
   DOTA_GAMERULES_STATE_PRE_GAME   	= 7 (number)
   GetActiveSpawnGroupHandle       	= function: 0x011404f0 (function)
   QUEST_NUM_TEXT_REPLACE_VALUES   	= 4 (number)
   DOTA_ABILITY_BEHAVIOR_DIRECTIONAL	= 1024 (number)
   MODIFIER_EVENT_ON_SET_LOCATION  	= 202 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_MELEE	= 639 (number)
   rr_GetResponseTargets           	= function: 0x0113fd98 (function)
   ACT_DOTA_OVERRIDE_ABILITY_4     	= 1519 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT   	= 758 (number)
   ACT_READINESS_STIMULATED_TO_RELAXED	= 422 (number)
   ACT_WALK_CROUCH_RIFLE           	= 355 (number)
   DOTA_STASH_SLOT_1               	= 9 (number)
   DOTA_ITEM_SLOT_6                	= 5 (number)
   DOTA_ITEM_SLOT_5                	= 4 (number)
   ScriptDebugAddWatches           	= function: 0x011b2470 (function)
   DOTA_LOADOUT_TYPE_COUNT         	= 87 (number)
   DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS	= 85 (number)
   ACT_ANTLION_SCUTTLE_RIGHT       	= 970 (number)
   DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS	= 84 (number)
   PrecacheModel                   	= function: 0x01145ea0 (function)
   ACT_BARNACLE_PULL               	= 176 (number)
   DOTA_LOADOUT_TYPE_HEAD_EFFECT   	= 81 (number)
   DOTA_DEFAULT_UI_AGHANIMS_STATUS 	= 29 (number)
   AE_IK_SET_MASTER_BLEND_AMOUNT   	= 40 (number)
   DOTA_LOADOUT_TYPE_DEATH_EFFECT  	= 80 (number)
   DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN	= 67108864 (number)
   DOTA_LOADOUT_TYPE_DIRE_TOWER    	= 76 (number)
   SpawnMangoTree                  	= function: 0x01150900 (function)
   StartSoundEventFromPosition     	= function: 0x0113f230 (function)
   DOTA_LOADOUT_TYPE_DIRE_CREEPS   	= 74 (number)
   QAngle                          	= function: 0x01116c80 (function)
   DOTA_LOADOUT_TYPE_MISC          	= 14 (number)
   AE_CL_DISABLE_BODYGROUP         	= 29 (number)
   ACT_GESTURE_MELEE_ATTACK1       	= 147 (number)
   DOTA_LOADOUT_TYPE_EMBLEM        	= 71 (number)
   DOTA_LOADOUT_TYPE_TELEPORT_EFFECT	= 69 (number)
   ScriptDebugDrawWatches          	= function: 0x011b2430 (function)
   ACT_ITEM2_VM_DRYFIRE            	= 870 (number)
   ACT_MP_SECONDARY_GRENADE1_ATTACK	= 703 (number)
   ACT_RUN_RPG                     	= 348 (number)
   ACT_SLAM_THROW_DRAW             	= 243 (number)
   DOTA_LOADOUT_TYPE_HEROIC_STATUE 	= 66 (number)
   DOTA_LOADOUT_TYPE_HUD_SKIN      	= 63 (number)
   DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1	= 46 (number)
   ACT_COVER_LOW_RPG               	= 346 (number)
   DOTA_LOADOUT_TYPE_MUSIC         	= 61 (number)
   MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE	= 143 (number)
   OVERHEAD_ALERT_LAST_HIT_MISS    	= 15 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE	= 27 (number)
   ACT_SLAM_DETONATOR_THROW_DRAW   	= 261 (number)
   LoadKeyValuesFromString         	= function: 0x0113f658 (function)
   ACT_ALIEN_BURROW_IDLE           	= 48 (number)
   ACT_PRIMARY_VM_IDLE_LOWERED     	= 817 (number)
   DOTA_LOADOUT_TYPE_VOICE_PERSONA_1	= 56 (number)
   DOTA_DEFAULT_UI_INVENTORY_PANEL 	= 5 (number)
   ACT_DOTA_DISABLED_END           	= 1776 (number)
   DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1	= 54 (number)
   ACT_VM_FIDGET                   	= 186 (number)
   DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1	= 53 (number)
   MODIFIER_PROPERTY_MISS_PERCENTAGE	= 69 (number)
   PATTACH_CUSTOMORIGIN_FOLLOW     	= 3 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1	= 50 (number)
   DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1	= 49 (number)
   DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1	= 48 (number)
   DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1	= 45 (number)
   DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1	= 44 (number)
   ACT_RANGE_ATTACK_AR2_LOW        	= 275 (number)
   ACT_MP_ATTACK_AIRWALK_BUILDING  	= 739 (number)
   DOTA_LOADOUT_TYPE_LEGS_PERSONA_1	= 40 (number)
   ACT_SLAM_THROW_THROW            	= 239 (number)
   ACT_MP_ITEM2_GRENADE2_ATTACK    	= 724 (number)
   DOTA_LOADOUT_TYPE_NECK_PERSONA_1	= 38 (number)
   DOTA_LOADOUT_TYPE_ARMS_PERSONA_1	= 35 (number)
   ACT_IDLE_AIM_DUAL               	= 888 (number)
   DOTA_DEFAULT_UI_ELEMENT_COUNT   	= 30 (number)
   ACT_IDLE_SMG1                   	= 315 (number)
   ACT_RAGDOLL_RECOVERY_LEFT       	= 953 (number)
   ACT_VR_PISTOL_CLIP_IN_CHAMBERED 	= 947 (number)
   ACT_USE                         	= 47 (number)
   ACT_DOTA_RUN_ALT                	= 1784 (number)
   ACT_DOTA_CAST_DRAGONBREATH      	= 1538 (number)
   DOTA_LOADOUT_TYPE_MAP_EFFECT    	= 82 (number)
   DOTA_HUD_VISIBILITY_ENDGAME_CHAT	= 23 (number)
   DOTA_MAX_TEAM                   	= 24 (number)
   DOTA_UNIT_TARGET_FLAG_MANA_ONLY 	= 32768 (number)
   ACT_MP_JUMP_FLOAT_MELEE         	= 629 (number)
   ACT_MP_ATTACK_AIRWALK_ITEM1     	= 658 (number)
   DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK	= 32 (number)
   ACT_SLAM_STICKWALL_IDLE         	= 224 (number)
   UF_FAIL_MELEE                   	= 13 (number)
   DOTA_UNIT_ORDER_GIVE_ITEM       	= 13 (number)
   DOTA_CONNECTION_STATE_UNKNOWN   	= 0 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_PDA  	= 801 (number)
   RandomInt                       	= function: 0x01144a50 (function)
   DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT	= 58 (number)
   ACT_DOTA_LOADOUT_RARE           	= 1683 (number)
   ACT_RELOAD_DUAL                 	= 889 (number)
   MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND	= 218 (number)
   ACT_SIGNAL3                     	= 52 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2	= 787 (number)
   ExponentialDecay                	= function: 0x0113c138 (function)
   GetListenServerHost             	= function: 0x0113dd18 (function)
   ACT_MP_STAND_PRIMARY            	= 555 (number)
   ACT_MP_STAND_IDLE               	= 503 (number)
   DOTA_TEAM_BADGUYS               	= 3 (number)
   ACT_MP_AIRWALK_MELEE            	= 625 (number)
   ACT_MP_ATTACK_SWIM_ITEM1        	= 657 (number)
   DebugDrawSphere                 	= function: 0x0113f9f0 (function)
   MODIFIER_ATTRIBUTE_PERMANENT    	= 1 (number)
   DOTA_ModifyGold_HeroKill        	= 12 (number)
   ACTIVATE_TYPE_INITIAL_CREATION  	= 0 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY	= 772 (number)
   OVERHEAD_ALERT_BONUS_POISON_DAMAGE	= 9 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY	= 766 (number)
   DOTA_TEAM_CUSTOM_8              	= 13 (number)
   DOTA_ModifyGold_Death           	= 1 (number)
   ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED	= 426 (number)
   ACT_MP_GESTURE_VC_FISTPUMP      	= 759 (number)
   ACT_VM_SPRINT_ENTER             	= 433 (number)
   ACT_VM_IDLE_SILENCED            	= 480 (number)
   DOTA_GAMERULES_STATE_TEAM_SHOWCASE	= 5 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME	= 15 (number)
   ACT_OBJ_RUNNING                 	= 466 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY   	= 583 (number)
   DAMAGE_TYPE_ABILITY_DEFINED     	= 22 (number)
   ScriptDebugTraceAllOn           	= false (boolean)
   ACT_DOTA_TELEPORT_COOP_END      	= 1693 (number)
   ACT_ITEM1_VM_IDLE_TO_LOWERED    	= 860 (number)
   ACT_VM_DRAW_DEPLOYED            	= 495 (number)
   MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK	= 130 (number)
   OVERHEAD_ALERT_INCOMING_DAMAGE  	= 17 (number)
   ACT_CROUCHING_SHIELD_DOWN       	= 456 (number)
   ACT_SCRIPT_CUSTOM_19            	= 930 (number)
   ACT_RELOAD_AUTOGUN              	= 880 (number)
   FCVAR_SPONLY                    	= 64 (number)
   print                           	= function: 0x01117410 (function)
   DoCleaveAttack                  	= function: 0x01147078 (function)
   ACT_SECONDARY_VM_IDLE           	= 821 (number)
   ACT_MP_ITEM2_GRENADE2_IDLE      	= 723 (number)
   ACT_MP_JUMP_LAND_PRIMARY        	= 564 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE	= 70 (number)
   ACT_MP_GESTURE_VC_NODYES_PDA    	= 803 (number)
   ACT_MP_ITEM1_GRENADE2_ATTACK    	= 718 (number)
   ACT_DOTA_FORCESTAFF_END         	= 1602 (number)
   CreateTempTreeWithModel         	= function: 0x0114f560 (function)
   ACT_PICKUP_GROUND               	= 75 (number)
   ACT_DIE_BARNACLE_SWALLOW        	= 396 (number)
   CDOTA_Ability_Animation_Attack  	= table: 0x011afd40 (table, already seen)
   ACT_MP_JUMP_FLOAT_ITEM1         	= 650 (number)
   ACT_MP_ATTACK_SWIM_POSTFIRE     	= 554 (number)
   ACT_MP_SECONDARY_GRENADE2_IDLE  	= 705 (number)
   DOTA_DEFAULT_UI_INVENTORY_SHOP  	= 6 (number)
   load                            	= function: builtin#23 (function)
   UpdateEventPoints               	= function: 0x01146c28 (function)
   ACT_MP_GESTURE_FLINCH_LEFTLEG   	= 687 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED	= 527 (number)
   ACT_MP_SECONDARY_GRENADE2_DRAW  	= 704 (number)
   ACT_MP_ATTACK_AIRWALK_PRIMARY   	= 573 (number)
   CreateItemOnPositionForLaunch   	= function: 0x01145900 (function)
   ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK	= 424 (number)
   ACT_HL2MP_WALK_CROUCH_MELEE     	= 499 (number)
   CSceneEntity                    	= table: 0x011ab1d0 (table, already seen)
   ACT_MP_GRENADE2_IDLE            	= 693 (number)
   DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1	= 41 (number)
   ACT_DOTA_CAST_ABILITY_4_END     	= 1543 (number)
   ACT_READINESS_RELAXED_TO_STIMULATED_WALK	= 420 (number)
   ACT_TRANSITION                  	= 2 (number)
   select                          	= function: builtin#16 (function)
   DOTA_LOADOUT_TYPE_ANNOUNCER     	= 59 (number)
   ACT_VM_MISSLEFT2                	= 204 (number)
   ACT_MP_RELOAD_CROUCH            	= 539 (number)
   ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY	= 673 (number)
   _DeepToString                   	= function: 0x011dde40 (function)
   ACT_RESET                       	= 0 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY	= 588 (number)
   MODIFIER_PRIORITY_SUPER_ULTRA   	= 4 (number)
   package                         	= table: 0x01113aa0 (table, already seen)
   ACT_MP_ATTACK_STAND_ITEM2_SECONDARY	= 671 (number)
   ACT_ITEM2_VM_PULLBACK           	= 866 (number)
   ACT_DOTA_DP_SPIRIT_SIPHON       	= 1712 (number)
   ACT_MIRANA_LEAP_END             	= 1544 (number)
   DOTA_MUSIC_STATUS_DEAD          	= 4 (number)
   ACT_IDLE_ANGRY_SMG1             	= 316 (number)
   ACT_MP_WALK_ITEM2               	= 662 (number)
   ACTIVATE_TYPE_DATAUPDATE_CREATION	= 1 (number)
   AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL	= 55 (number)
   ACT_CSGO_SILENCER_ATTACH        	= 1010 (number)
   MODIFIER_STATE_SPECIALLY_DENIABLE	= 17 (number)
   FindUnitsInLine                 	= function: 0x01145bb8 (function)
   ACT_MP_ATTACK_SWIM_GRENADE      	= 532 (number)
   DOTA_SHOP_NEUTRALS              	= 7 (number)
   ACT_RANGE_ATTACK_AR1            	= 273 (number)
   ACT_MP_PRIMARY_GRENADE1_DRAW    	= 695 (number)
   IsClient                        	= function: 0x01140b78 (function)
   ACT_CROUCHING_GRENADEREADY      	= 440 (number)
   ACT_PREP_TO_FIRE                	= 905 (number)
   ACT_MP_JUMP_START_MELEE         	= 628 (number)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING	= 253 (number)
   ACT_GESTURE_MELEE_ATTACK_SWING  	= 313 (number)
   ACT_MP_RELOAD_CROUCH_END        	= 541 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY  	= 608 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP	= 609 (number)
   DOTA_RUNE_DOUBLEDAMAGE          	= 0 (number)
   ACT_MP_ATTACK_STAND_SECONDARY   	= 601 (number)
   DOTA_UNIT_TARGET_CUSTOM         	= 128 (number)
   ACT_MP_CROUCH_ITEM2             	= 660 (number)
   EmitSoundOn                     	= function: 0x0113d110 (function)
   CDOTA_MapTree                   	= table: 0x011b4110 (table, already seen)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5	= 81 (number)
   DOTA_MUSIC_STATUS_NONE          	= 0 (number)
   ACT_ANTLION_SCUTTLE_BACK        	= 968 (number)
   EmitGlobalSound                 	= function: 0x01145000 (function)
   ACT_JUMP                        	= 29 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME	= 15 (number)
   DOTA_LOADOUT_TYPE_ABILITY1      	= 23 (number)
   ACT_DIE_CROUCH_RIGHTSIDE        	= 407 (number)
   DebugDrawBoxDirection           	= function: 0x0113faf8 (function)
   ACT_SCRIPT_CUSTOM_MOVE          	= 15 (number)
   setmetatable                    	= function: builtin#9 (function)
   DebugBreak                      	= function: 0x011c4420 (function)
   DOTA_INVENTORY_ALLOW_DROP_ON_GROUND	= 4 (number)
   ACT_FLINCH_CROUCH_FRONT         	= 129 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY      	= 580 (number)
   ACT_DYINGTODEAD                 	= 431 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_ITEM2	= 789 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS	= 102 (number)
   DoIncludeScript                 	= function: 0x0117af10 (function)
   ACT_GESTURE_RANGE_ATTACK2_LOW   	= 150 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE	= 641 (number)
   CDotaTutorialNPCBlocker         	= table: 0x011b3e28 (table, already seen)
   SetQuestName                    	= function: 0x0113cc00 (function)
   DOTA_DAMAGE_FLAG_HPLOSS         	= 32 (number)
   ACT_MP_MELEE_GRENADE2_DRAW      	= 710 (number)
   ACT_MP_GRENADE2_ATTACK          	= 694 (number)
   ACT_MP_ATTACK_STAND_ITEM1_SECONDARY	= 654 (number)
   ACT_MELEE_VM_DRAW               	= 830 (number)
   Entities                        	= table: 0x01142e00 (table, already seen)
   ACT_VM_HITRIGHT                 	= 199 (number)
   ACT_VM_PULLPIN                  	= 192 (number)
   ACT_RUN_STIMULATED              	= 88 (number)
   DMG_SHOCK                       	= 256 (number)
   ACT_IDLE_MANNEDGUN              	= 340 (number)
   DOTA_DEFAULT_UI_INVENTORY_COURIER	= 9 (number)
   ACT_SLAM_STICKWALL_DRAW         	= 232 (number)
   EmitSoundOnClient               	= function: 0x0113d190 (function)
   ACT_MP_ATTACK_STAND_PREFIRE     	= 548 (number)
   ACT_MP_ATTACK_SWIM_PDA          	= 756 (number)
   UTIL_RemoveImmediate            	= function: 0x0113c850 (function)
   ACT_MP_ITEM2_GRENADE2_DRAW      	= 722 (number)
   ACT_MP_CROUCH_PRIMARY           	= 556 (number)
   ACT_VR_SHOTGUN_IDLE             	= 972 (number)
   ACT_180_RIGHT                   	= 138 (number)
   ACT_RUN_AIM_STIMULATED          	= 100 (number)
   ACT_SCRIPT_CUSTOM_28            	= 939 (number)
   CreateHeroForPlayer             	= function: 0x011455d8 (function)
   ACT_MP_GESTURE_VC_NODYES_BUILDING	= 797 (number)
   ACT_MP_DEPLOYED                 	= 519 (number)
   ACT_MP_SWIM                     	= 518 (number)
   ACT_RANGE_ATTACK2_LOW           	= 19 (number)
   ACT_CROUCHIDLE_AIM_STIMULATED   	= 104 (number)
   ACT_MP_GESTURE_FLINCH_PRIMARY   	= 677 (number)
   ACT_RUN_CROUCH_RPG              	= 350 (number)
   SetQuestPhase                   	= function: 0x0113cc80 (function)
   ACT_MP_GESTURE_VC_NODNO_PRIMARY 	= 768 (number)
   ACT_MP_JUMP_FLOAT_PDA           	= 752 (number)
   PrintLinkedConsoleMessage       	= function: 0x0113ce08 (function)
   SetRenderingEnabled             	= function: 0x0113c2d0 (function)
   ACT_MP_AIRWALK_PDA              	= 748 (number)
   ACT_IDLE_AIM_RIFLE              	= 895 (number)
   ACT_DOTA_MK_SPRING_END          	= 1719 (number)
   ACT_STAND                       	= 46 (number)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_START	= 1551 (number)
   ACT_CSGO_CLIMB_LADDER           	= 1022 (number)
   ACT_MP_PRIMARY_GRENADE2_ATTACK  	= 700 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO	= 131072 (number)
   ACT_RANGE_ATTACK_AR2_GRENADE    	= 276 (number)
   ACT_DOTA_RUN_STATUE             	= 1764 (number)
   EmitSoundOnLocationWithCaster   	= function: 0x011461c8 (function)
   ACT_DIE_CROUCH_LEFTSIDE         	= 409 (number)
   MELEE_MISS                      	= 4 (number)
   ACT_PHYSCANNON_ANIMATE          	= 399 (number)
   ACT_DOTA_VERSUS                 	= 1716 (number)
   DOTA_ModifyGold_CourierKill     	= 16 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY	= 769 (number)
   ACT_MP_MELEE_GRENADE1_ATTACK    	= 709 (number)
   SetTeamCustomHealthbarColor     	= function: 0x01145f20 (function)
   DOTA_DEFAULT_UI_KILLCAM         	= 26 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE	= 109 (number)
   DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES	= 16 (number)
   CInfoData                       	= table: 0x011c1fa0 (table, already seen)
   ACT_MP_ATTACK_CROUCH_POSTFIRE   	= 552 (number)
   ACT_DOTA_STUN_STATUE            	= 1767 (number)
   ACT_BUSY_LEAN_BACK_ENTRY        	= 385 (number)
   ACT_WALK_CROUCH_AIM             	= 9 (number)
   ACT_MP_GESTURE_VC_NODYES_PRIMARY	= 767 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED	= 571 (number)
   AE_CL_DOTA_PLAY_STATUS_EFFECT   	= 48 (number)
   DOTA_ITEM_INVENTORY_SIZE        	= 9 (number)
   MODIFIER_EVENT_ON_ATTACK_FINISHED	= 234 (number)
   AE_CL_SPEECH                    	= 36 (number)
   ACT_VM_PULLBACK_LOW             	= 189 (number)
   ACT_MP_ITEM1_GRENADE2_IDLE      	= 717 (number)
   AE_WPN_SECONDARYATTACK          	= 35 (number)
   ACT_FLINCH_LEFTARM              	= 121 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY 	= 614 (number)
   ACT_IDLE_SHOTGUN_AGITATED       	= 336 (number)
   DOTA_UNIT_TARGET_FLAG_NO_INVIS  	= 256 (number)
   ACT_DOTA_CAST_ABILITY_3         	= 1512 (number)
   DMG_ALWAYSGIB                   	= 8192 (number)
   ACT_GESTURE_FLINCH_STOMACH      	= 160 (number)
   PRESIM                          	= 0 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY	= 620 (number)
   StartSoundEventReliable         	= function: 0x0113d5b0 (function)
   ACT_VM_HITCENTER2               	= 202 (number)
   ACT_MP_JUMP_LAND                	= 516 (number)
   CCustomGameEventManager         	= table: 0x0120bf18 (table, already seen)
   ACT_CROUCHIDLE                  	= 45 (number)
   Msg                             	= function: 0x01117780 (function)
   ACT_DOTA_LASSO_LOOP             	= 1578 (number)
   ipairs                          	= function: builtin#7 (function)
   ACT_MP_RELOAD_CROUCH_PRIMARY_END	= 579 (number)
   ACT_MP_JUMP_LAND_MELEE          	= 630 (number)
   ACT_DOTA_CAST_ABILITY_5         	= 1514 (number)
   ACT_DOTA_VOODOO_REST            	= 1785 (number)
   ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY	= 656 (number)
   ACT_GESTURE_TURN_LEFT45_FLAT    	= 171 (number)
   ACT_MP_MELEE_GRENADE2_ATTACK    	= 712 (number)
   radiant_melee_mars_shieldbash   	= 1781 (number)
   ACT_MP_RELOAD_AIRWALK_END       	= 547 (number)
   ACT_HL2MP_IDLE_CROUCH_MELEE     	= 498 (number)
   ACT_VM_USABLE_TO_UNUSABLE       	= 807 (number)
   RollPercentage                  	= function: 0x011470f8 (function)
   DOTA_ModifyXP_Outpost           	= 5 (number)
   ACT_SLAM_THROW_TO_TRIPMINE_ND   	= 249 (number)
   ACT_DOTA_POOF_END               	= 1603 (number)
   ACT_RUN_RIFLE                   	= 357 (number)
   DOTA_UNIT_TARGET_FLAG_RANGED_ONLY	= 2 (number)
   ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE 	= 1757 (number)
   MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE	= 54 (number)
   ACT_IDLE_CARRY                  	= 427 (number)
   DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT	= 55 (number)
   ACT_SCRIPT_CUSTOM_5             	= 916 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY	= 764 (number)
   DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION	= 1024 (number)
   ACT_SCRIPT_CUSTOM_8             	= 919 (number)
   ACT_PICKUP_RACK                 	= 76 (number)
   ACT_DOTA_CAST_SUN_STRIKE_ORB    	= 1743 (number)
   FindClearSpaceForUnit           	= function: 0x01145990 (function)
   ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY	= 589 (number)
   ACT_VM_HITLEFT2                 	= 198 (number)
   DOTA_CONNECTION_STATE_ABANDONED 	= 4 (number)
   ACT_STEP_RIGHT                  	= 142 (number)
   ACT_GESTURE_FLINCH_BLAST_SHOTGUN	= 155 (number)
   ACT_VM_RECOIL1                  	= 216 (number)
   ACT_RUN_AIM_RIFLE               	= 358 (number)
   DOTA_ITEM_STASH_MAX             	= 15 (number)
   ACT_DOTA_CAST_EMP_ORB           	= 1740 (number)
   ACT_SLAM_THROW_THROW_ND2        	= 242 (number)
   ACT_DOTA_CAST_TORNADO_ORB       	= 1739 (number)
   DOTA_UNIT_TARGET_TEAM_ENEMY     	= 2 (number)
   MODIFIER_PROPERTY_FIXED_DAY_VISION	= 144 (number)
   ACT_MP_JUMP_START_PRIMARY       	= 562 (number)
   ACT_DI_ALYX_ZOMBIE_TORSO_MELEE  	= 414 (number)
   IsMarkedForDeletion             	= function: 0x0113d7c0 (function)
   DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS	= 512 (number)
   ACT_MP_RUN_ITEM2                	= 661 (number)
   ACT_SECONDARY_VM_HOLSTER        	= 820 (number)
   ACT_SIGNAL_FORWARD              	= 54 (number)
   ACT_GESTURE_RANGE_ATTACK_PISTOL 	= 307 (number)
   ACT_DOTA_CAST4_STATUE           	= 1773 (number)
   UnloadSpawnGroupByHandle        	= function: 0x01140460 (function)
   DOTA_LOADOUT_PERSONA_1_START    	= 29 (number)
   ACT_MP_JUMP_SECONDARY           	= 596 (number)
   ACT_DIE_CROUCH_FRONTSIDE        	= 406 (number)
   getfenv                         	= function: builtin#10 (function)
   ACT_MP_CROUCHWALK_PDA           	= 749 (number)
   ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START	= 1572 (number)
   loadfile                        	= function: 0x011174c0 (function)
   ACT_MP_ATTACK_STAND_MELEE_SECONDARY	= 633 (number)
   ACT_DOTA_NIAN_PIN_TO_STUN       	= 1662 (number)
   MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION	= 216 (number)
   table                           	= table: 0x011142a0 (table, already seen)
   ACT_NEUTRAL_REF_POSE            	= 966 (number)
   ACT_DOTA_CAST_BURROW_END        	= 1702 (number)
   ACT_DOTA_UNDYING_SOUL_RIP       	= 1667 (number)
   ReloadMOTD                      	= function: 0x0113fe20 (function)
   ACT_SMG2_TOBURST                	= 271 (number)
   ACT_DOTA_ICE_VORTEX             	= 1672 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_5  	= 1530 (number)
   TraceCollideable                	= function: 0x011401b0 (function)
   IsInToolsMode                   	= function: 0x01140bf8 (function)
   ACT_DOTA_NIAN_PIN_LOOP          	= 1656 (number)
   DOTA_ABILITY_BEHAVIOR_ATTACK    	= 131072 (number)
   ScriptDebugTextIndent           	= 0 (number)
   ACT_WAKE                        	= 899 (number)
   ACT_CSGO_JUMP                   	= 1020 (number)
   ACT_DOTA_FRUSTRATION            	= 1630 (number)
   ACT_MP_ITEM1_GRENADE1_IDLE      	= 714 (number)
   ACT_COMBAT_IDLE                 	= 110 (number)
   DebugDrawBox                    	= function: 0x0113f870 (function)
   DOTA_GAMERULES_STATE_STRATEGY_TIME	= 4 (number)
   AddFOWViewer                    	= function: 0x01146040 (function)
   ACT_MP_JUMP_FLOAT_PRIMARY       	= 563 (number)
   ACT_MP_GESTURE_VC_NODYES_ITEM1  	= 785 (number)
   ACT_WALK_PISTOL                 	= 364 (number)
   ACT_MP_RELOAD_STAND_PRIMARY_END 	= 576 (number)
   DOTA_STASH_SLOT_3               	= 11 (number)
   ACT_DOTA_CANCEL_SIREN_SONG      	= 1599 (number)
   CDOTA_Unit_CustomGameAnnouncer  	= table: 0x011b1fe8 (table, already seen)
   DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI	= 25 (number)
   ACT_SCRIPT_CUSTOM_18            	= 929 (number)
   ACT_DOTA_CAST_GHOST_SHIP        	= 1708 (number)
   ACT_VR_SHOTGUN_RELOAD_2         	= 975 (number)
   ACT_GESTURE_RELOAD_PISTOL       	= 378 (number)
   DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED	= 3 (number)
   ACT_PLAYER_IDLE_FIRE            	= 488 (number)
   ACT_VM_MISSRIGHT                	= 205 (number)
   ACT_IDLE_RIFLE                  	= 314 (number)
   ACT_GESTURE_TURN_LEFT90_FLAT    	= 173 (number)
   ACT_WALK                        	= 6 (number)
   ACT_MP_GESTURE_VC_NODNO_BUILDING	= 798 (number)
   ACT_DOTA_CAST_ABILITY_3_END     	= 1542 (number)
   ACT_MP_GESTURE_VC_NODNO_SECONDARY	= 774 (number)
   ACT_WAVEFORM_START              	= 1545 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1	= 30 (number)
   AE_CL_FOOTSTEP_RIGHT            	= 22 (number)
   ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY	= 635 (number)
   ACT_FIRE_LOOP                   	= 437 (number)
   MODIFIER_EVENT_ON_RESPAWN       	= 198 (number)
   DAMAGE_TYPE_ALL                 	= 7 (number)
   ACT_DOTA_ATTACK_EVENT           	= 1505 (number)
   PATTACH_ABSORIGIN               	= 0 (number)
   ACT_CSGO_EXIT_LADDER_BOTTOM     	= 1026 (number)
   ACT_BARNACLE_CHEW               	= 178 (number)
   ACT_WALK_RELAXED                	= 83 (number)
   ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED	= 982 (number)
   ACT_DOTA_OVERRIDE_ARCANA        	= 1725 (number)
   ACT_VR_PISTOL_BURST_TOGGLE      	= 984 (number)
   DOTA_INVENTORY_LIMIT_DROP_ON_GROUND	= 16 (number)
   ACT_RANGE_AIM_AR2_LOW           	= 295 (number)
   MAX_PATTACH_TYPES               	= 16 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL	= 536870912 (number)
   MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE	= 247 (number)
   OVERHEAD_ALERT_ITEM_RECEIVED    	= 22 (number)
   ACT_CSGO_FIRE_PRIMARY_OPT_2     	= 998 (number)
   ACT_CSGO_RELOAD_START           	= 1003 (number)
   ACT_CSGO_OPERATE                	= 1006 (number)
   ACT_BUSY_QUEUE                  	= 394 (number)
   vec3_invalid                    	= Vector 0000000001144A10 [340282346638528859811704183484516925440.000000 340282346638528859811704183484516925440.000000 34028234 (userdata)
   ACT_VM_PULLBACK_HIGH            	= 188 (number)
   DAMAGE_TYPE_NONE                	= 0 (number)
   ACT_CSGO_TWITCH                 	= 1011 (number)
   ACT_COVER_MED                   	= 4 (number)
   Warning                         	= function: 0x011169f8 (function)
   ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY	= 771 (number)
   ACT_CSGO_TAUNT                  	= 1028 (number)
   GetFunctionSignature            	= function: 0x011f87e0 (function)
   ACT_SCRIPT_CUSTOM_26            	= 937 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH     	= 757 (number)
   ACT_DOTA_CAST_ABILITY_6         	= 1515 (number)
   ScriptDebugDraw                 	= function: 0x011b21c0 (function)
   DMG_SLOWBURN                    	= 2097152 (number)
   DOTA_LOADOUT_TYPE_MULTIKILL_BANNER	= 67 (number)
   ACT_DOTA_CHANNEL_ABILITY_6      	= 1525 (number)
   SpawnEffigyOfUnitOrModel        	= function: 0x01150870 (function)
   DOTA_UNIT_TARGET_HERO           	= 1 (number)
   ACT_DOTA_ANCESTRAL_SPIRIT       	= 1677 (number)
   ACT_GESTURE_FLINCH_BLAST_DAMAGED	= 156 (number)
   DMG_NERVEGAS                    	= 65536 (number)
   ACT_LEAP                        	= 31 (number)
   ACT_DIE_STAND                   	= 988 (number)
   ACT_SHIELD_UP                   	= 450 (number)
   ACT_MP_GESTURE_VC_NODNO         	= 762 (number)
   ACT_HOP                         	= 30 (number)
   ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED	= 569 (number)
   OVERHEAD_ALERT_MANA_LOSS        	= 12 (number)
   CreateSceneEntity               	= function: 0x0113c958 (function)
   ACT_DOTA_LIFESTEALER_OPEN_WOUNDS	= 1567 (number)
   ACT_DOTA_WHEEL_LAYER            	= 1571 (number)
   ACT_DOTA_JAKIRO_LIQUIDFIRE_START	= 1574 (number)
   ACT_VM_MISSRIGHT2               	= 206 (number)
   ACT_RANGE_ATTACK2               	= 17 (number)
   ACT_MP_RELOAD_STAND_LOOP        	= 537 (number)
   ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END	= 1580 (number)
   PATTACH_POINT                   	= 4 (number)
   DOTA_HEROPICK_STATE_COUNT       	= 62 (number)
   ACT_IDLE_AIM_STEALTH            	= 94 (number)
   ACT_DOTA_CAST_CHAOS_METEOR      	= 1586 (number)
   ACT_DOTA_CAST_SUN_STRIKE        	= 1587 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG2   	= 305 (number)
   DOTA_ModifyGold_PurchaseItem    	= 4 (number)
   ACT_DOTA_LOADOUT                	= 1601 (number)
   ACT_DOTA_TELEPORT_COOP_WAIT     	= 1692 (number)
   ACT_DOTA_RELAX_LOOP             	= 1609 (number)
   ACT_DOTA_BELLYACHE_LOOP         	= 1613 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE	= 2097152 (number)
   ACT_MP_ATTACK_SWIM_PRIMARYFIRE  	= 530 (number)
   GetAbilityKeyValuesByName       	= function: 0x0117adf8 (function)
   OVERHEAD_ALERT_DENY             	= 1 (number)
   ACT_GESTURE_RANGE_ATTACK_SHOTGUN	= 306 (number)
   ResolveNPCPositions             	= function: 0x01146140 (function)
   getmetatable                    	= function: builtin#8 (function)
   MODIFIER_EVENT_ON_ATTACK_CANCELLED	= 244 (number)
   DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST	= 0 (number)
   ACT_VM_HAULBACK                 	= 209 (number)
   DOTA_UNIT_TARGET_FLAG_DEAD      	= 8 (number)
   ScriptDebugWatchFistLine        	= 26 (number)
   ACT_PDA_VM_IDLE                 	= 843 (number)
   ACT_DOTA_DAGON                  	= 1651 (number)
   error                           	= function: builtin#19 (function)
   ACT_PHYSCANNON_ANIMATE_PRE      	= 400 (number)
   ACT_VR_SHOTGUN_OPEN_CHAMBER     	= 973 (number)
   EmitSoundOnLocationForPlayer    	= function: 0x011465b8 (function)
   ACT_DOTA_NIAN_INTRO_LEAP        	= 1660 (number)
   ACT_DOTA_UNDYING_DECAY          	= 1666 (number)
   ACT_DOTA_BRIDGE_THREAT          	= 1650 (number)
   ACT_DOTA_CAST_TORNADO           	= 1583 (number)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL	= 7 (number)
   ACT_OPEN_DOOR                   	= 412 (number)
   ACT_GESTURE_RELOAD_SMG1         	= 379 (number)
   ACT_MP_RELOAD_STAND_SECONDARY_END	= 607 (number)
   ACT_RAGDOLL_RECOVERY_RIGHT      	= 954 (number)
   ACT_MP_SWIM_DEPLOYED_PRIMARY    	= 567 (number)
   ACT_WALK_RIFLE                  	= 353 (number)
   ACT_OVERLAY_GRENADEIDLE         	= 442 (number)
   ACT_DOTA_ITEM_PICKUP            	= 1696 (number)
   POSTSENSING                     	= 2 (number)
   DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE	= 128 (number)
   ACT_DOTA_CAST_ABILITY_2_END     	= 1541 (number)
   ACT_DOTA_AW_MAGNETIC_FIELD      	= 1707 (number)
   DoScriptAssert                  	= function: 0x0113cf98 (function)
   CreateUnitFromTable             	= function: 0x011452a8 (function)
   DOTA_TEAM_CUSTOM_5              	= 10 (number)
   ACT_DOTA_MK_TREE_END            	= 1721 (number)
   ACT_GRABBITYGLOVES_DEACTIVATE   	= 960 (number)
   ACT_MP_SECONDARY_GRENADE2_ATTACK	= 706 (number)
   ACT_SLAM_THROW_ND_DRAW          	= 244 (number)
   Convars                         	= table: 0x01143958 (table, already seen)
   ACT_IDLE_STEALTH_PISTOL         	= 320 (number)
   ACT_DOTA_BLINK_DAGGER           	= 1732 (number)
   ACT_HEADCRAB_SMOKE_BOMB         	= 962 (number)
   ACT_DOTA_CUSTOM_TOWER_IDLE      	= 1735 (number)
   ACT_SLAM_THROW_IDLE             	= 237 (number)
   ACT_JUMP_DUAL                   	= 892 (number)
   ACT_CLIMB_DISMOUNT              	= 35 (number)
   ACT_DOTA_CAST_COLD_SNAP         	= 1581 (number)
   ACT_IDLE_ANGRY_PISTOL           	= 318 (number)
   ACT_MP_RELOAD_STAND_PRIMARY     	= 574 (number)
   ACT_PRIMARY_VM_LOWERED_TO_IDLE  	= 818 (number)
   ACT_FLICK_RIGHT_MIDDLE          	= 902 (number)
   DOTA_ATTRIBUTE_INTELLECT        	= 2 (number)
   ACT_CSGO_CATCH                  	= 1008 (number)
   MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE	= 101 (number)
   DOTA_GC_TEAM_SPECTATOR          	= 3 (number)
   ACT_DOTA_SPWN                   	= 1783 (number)
   ACT_MP_ATTACK_STAND_SECONDARYFIRE	= 524 (number)
   ACT_DOTA_TELEPORT_START         	= 1753 (number)
   ACT_DOTA_RAZE_1                 	= 1663 (number)
   ACT_MP_SWIM_ITEM2               	= 669 (number)
   OVERHEAD_ALERT_BLOCK            	= 8 (number)
   DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED	= 3 (number)
   ACT_DOTA_BRIDGE_DESTROY         	= 1640 (number)
   ACT_SLAM_STICKWALL_TO_TRIPMINE_ND	= 236 (number)
   DOTA_ITEM_MAX                   	= 19 (number)
   ACT_VR_SHOTGUN_CLOSE_CHAMBER    	= 977 (number)
   ACT_PLAYER_CROUCH_FIRE          	= 489 (number)
   ACT_DOTA_CHANNEL_ABILITY_7      	= 1600 (number)
   ACT_DOTA_THUNDER_STRIKE         	= 1678 (number)
   ACT_DOTA_TAUNT_STATUE           	= 1775 (number)
   ACT_SCRIPT_CUSTOM_20            	= 931 (number)
   ACT_MP_JUMP_START               	= 514 (number)
   StopEffect                      	= function: 0x01140030 (function)
   ACT_DOTA_SHARPEN_WEAPON         	= 1637 (number)
   ACT_SIGNAL_RIGHT                	= 58 (number)
   DMG_BLAST                       	= 64 (number)
   MODIFIER_PROPERTY_DISABLE_AUTOATTACK	= 139 (number)
   PATTACH_RENDERORIGIN_FOLLOW     	= 10 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1	= 781 (number)
   ACT_SPECIFIC_SEQUENCE           	= 180 (number)
   ACT_HEADCRAB_SPIT               	= 963 (number)
   json                            	= table: 0x01201690 (table, already seen)
   ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING	= 794 (number)
   ACT_VR_SHOTGUN_SHOOT            	= 979 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_COURIER	= 9 (number)
   ACT_IDLE_STEALTH                	= 81 (number)
   ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING	= 1015 (number)
   AE_CL_MFOOTSTEP_LEFT            	= 23 (number)
   AE_CL_CLOTH_GROUND_OFFSET       	= 43 (number)
   DOTA_LOADOUT_TYPE_TERRAIN       	= 72 (number)
   ACT_RANGE_ATTACK_RIFLE          	= 897 (number)
   DOTA_SpawnMapAtPosition         	= function: 0x011471e8 (function)
   ACT_SCRIPT_CUSTOM_6             	= 917 (number)
   QUEST_TEXT_REPLACE_VALUE_ROUND  	= 2 (number)
   AE_FIRE_INPUT                   	= 37 (number)
   ACT_DOTA_CAST_ALACRITY_ORB      	= 1741 (number)
   DOTA_LOADOUT_TYPE_BACK_PERSONA_1	= 39 (number)
   DOTA_HEROPICK_STATE_RD_SELECT_UNUSED	= 4 (number)
   ACT_DOTA_LIFESTEALER_INFEST     	= 1576 (number)
   AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT	= 50 (number)
   ACT_DOTA_MK_SPRING_SOAR         	= 1718 (number)
   tostring                        	= function: builtin#18 (function)
   ACT_WALK_AGITATED               	= 85 (number)
   DMG_SLASH                       	= 4 (number)
   RemoveSpawnGroupEntityFilter    	= function: 0x011b3d38 (function)
   ACT_DOTA_CAGED_CREEP_RAGE       	= 1644 (number)
   DMG_PREVENT_PHYSICS_FORCE       	= 2048 (number)
   DMG_PARALYZE                    	= 32768 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START	= 1652 (number)
   ACT_WALK_STEALTH_PISTOL         	= 368 (number)
   ACT_MELEE_VM_SECONDARYATTACK    	= 835 (number)
   ACT_DIE_CROUCH                  	= 990 (number)
   MELEE_HIT_PLAYER                	= 7 (number)
   DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT	= 3 (number)
   rr_CommitAIResponse             	= function: 0x0113fd10 (function)
   g_SpawnGroupEntityFilters       	= table: 0x011b3a80 (table, already seen)
   GetMaxOutputDelay               	= function: 0x0113c0b0 (function)
   ACT_MP_RELOAD_STAND_SECONDARY_LOOP	= 606 (number)
   NEARLYEMPTY                     	= 11 (number)
   AE_SV_CREATE_PARTICLE_EFFECT_CFG	= 16 (number)
   DOTA_LOADOUT_TYPE_TAIL_PERSONA_1	= 42 (number)
   ACT_MP_PRIMARY_GRENADE1_ATTACK  	= 697 (number)
   DOTA_UNIT_ORDER_CAST_NO_TARGET  	= 8 (number)
   ACT_DOTA_CUSTOM_TOWER_ATTACK    	= 1734 (number)
   ACT_FLINCH_PHYSICS              	= 125 (number)
   ACT_DOTA_NOTICE                 	= 1747 (number)
   MODIFIER_STATE_PASSIVES_DISABLED	= 28 (number)
   ACT_CLIMB_UP                    	= 33 (number)
   DOTA_RUNE_BOUNTY                	= 5 (number)
   ACT_MP_JUMP_START_PDA           	= 751 (number)
   ACT_RUN_ON_FIRE                 	= 135 (number)
   ACT_FLINCH_CROUCH_RIGHT         	= 132 (number)
   ACT_DOTA_TELEPORT_COOP_START    	= 1691 (number)
   ACT_MP_STAND_BUILDING           	= 725 (number)
   MinimapEvent                    	= function: 0x01146648 (function)
   SendToServerConsole             	= function: 0x0113cd80 (function)
   EntityDesignerNameToClassname   	= table: 0x011dc8f0 (table, already seen)
   ACT_RELOAD_LOW                  	= 70 (number)
   ACT_VM_ATTACH_SILENCER          	= 222 (number)
   DoEntFire                       	= function: 0x0113c8d8 (function)
   ListenToGameEvent               	= function: 0x0113d8c8 (function)
   ACT_MP_CROUCH_MELEE             	= 622 (number)
   ACT_VM_IS_IDLE                  	= 486 (number)
   ScriptDebugTextFilters          	= table: 0x011b1ef0 (table, already seen)
   ACT_STRAFE_RIGHT                	= 39 (number)
   ACT_DOTA_GREEVIL_HOOK_END       	= 1620 (number)
   ACT_CROUCHING_PRIMARYATTACK     	= 441 (number)
   ACT_GESTURE_RELOAD_SHOTGUN      	= 380 (number)
   AE_HAPTIC_PULSE                 	= 47 (number)
   ACT_SHOTGUN_RELOAD_FINISH       	= 263 (number)
   ACT_DOTA_INTRO                  	= 1623 (number)
   PrecacheEntityFromTable         	= function: 0x0113e108 (function)
   DOTA_ModifyXP_CreepKill         	= 2 (number)
   DOTA_STASH_SLOT_4               	= 12 (number)
   MODIFIER_EVENT_ON_ABILITY_START 	= 182 (number)
   ACT_FIRE_END                    	= 438 (number)
   ACT_IDLE_AIM_STIMULATED         	= 92 (number)
   SetOpvarFloatPlayer             	= function: 0x0113d320 (function)
   QSlerp                          	= function: 0x0113d4b8 (function)
   ACT_DOTA_SHOPKEEPER_PET_INTERACT	= 1695 (number)
   ACT_MP_GRENADE1_ATTACK          	= 691 (number)
   FilterSpawnGroupEntities        	= function: 0x011b3d58 (function)
   ACT_VM_RELOAD                   	= 195 (number)
   DMG_ENERGYBEAM                  	= 1024 (number)
   ACT_WALK_CROUCH                 	= 8 (number)
   MODIFIER_STATE_FEARED           	= 42 (number)
   CreateDamageInfo                	= function: 0x0113fea0 (function)
   ACT_DOTA_CHANNEL_END_ABILITY_4  	= 1529 (number)
   ACT_SLAM_THROW_DETONATE         	= 247 (number)
   SplineQuaternions               	= function: 0x0113bf08 (function)
   Say                             	= function: 0x0113f580 (function)
   DebugDrawText                   	= function: 0x0113f7f0 (function)
   DOTA_MINIMAP_EVENT_BASE_GLYPHED 	= 8 (number)
   DOTA_HEROPICK_STATE_CM_PICK     	= 31 (number)
   ACT_WALK_STEALTH                	= 86 (number)
   LerpVectors                     	= function: 0x0113c4b0 (function)
   ACT_RUNTOIDLE                   	= 494 (number)
   CEntities                       	= table: 0x0113e640 (table, already seen)
   TraceHull                       	= function: 0x01140130 (function)
   AddToScriptHelp                 	= function: 0x011f8828 (function)
   ACT_ITEM1_VM_RELOAD             	= 858 (number)
   ACT_SECONDARY_VM_SECONDARYATTACK	= 824 (number)
   ACT_STRAFE_LEFT                 	= 38 (number)
   ACT_SLAM_DETONATOR_HOLSTER      	= 259 (number)
   CreateTriggerRadiusApproximate  	= function: 0x01140698 (function)
   ACT_MP_RUN_BUILDING             	= 727 (number)
   DumpScriptBindings              	= function: 0x011f87a0 (function)
   UTIL_MessageText                	= function: 0x011407b0 (function)
   ACT_SLAM_STICKWALL_TO_THROW     	= 234 (number)
   ACT_FLINCH_CHEST_BACK           	= 127 (number)
   ACT_RUN_HURT                    	= 107 (number)
   ACT_RELOAD_SHOTGUN_LOW          	= 376 (number)
   DOTA_MAX_PLAYER_TEAMS           	= 10 (number)
   PrecacheUnitFromTableAsync      	= function: 0x01145218 (function)
   ACT_DOTA_SWIM_IDLE              	= 1688 (number)
   ACT_IDLE_SUITCASE               	= 323 (number)
   SteamInfo                       	= table: 0x01144268 (table, already seen)
   ACT_OVERLAY_SHIELD_KNOCKBACK    	= 449 (number)
   dofile                          	= function: 0x011174e8 (function)
   FCVAR_PROTECTED                 	= 32 (number)
   ACT_IDLE_SHOTGUN_RELAXED        	= 334 (number)
   FCVAR_ARCHIVE                   	= 128 (number)
   FCVAR_UNLOGGED                  	= 2048 (number)
   ScriptDebugClearWatches         	= function: 0x011b28d8 (function)
   ACT_SCRIPT_CUSTOM_25            	= 936 (number)
   ACT_HL2MP_RUN_MELEE             	= 497 (number)
   ACTIVATE_TYPE_ONRESTORE         	= 2 (number)
   ACT_CSGO_PARACHUTE              	= 1027 (number)
   DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1	= 51 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS	= 107 (number)
   ACT_VM_IS_DRAW                  	= 484 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY    	= 611 (number)
   ACT_BUSY_LEAN_LEFT_EXIT         	= 383 (number)
   GetWorldMinY                    	= function: 0x01144c80 (function)
   ACT_PRIMARY_VM_IDLE             	= 810 (number)
   PATTACH_POINT_FOLLOW            	= 5 (number)
   ACT_RANGE_ATTACK_ML             	= 278 (number)
   ACT_MP_ITEM1_GRENADE1_DRAW      	= 713 (number)
   ACT_VM_PULLBACK                 	= 187 (number)
   DOTA_UNIT_ORDER_STOP            	= 21 (number)
   CreateItem                      	= function: 0x01145660 (function)
   RollPseudoRandomPercentage      	= function: 0x011456e0 (function)
   DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL	= 4 (number)
   MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE	= 59 (number)
   ACT_DOTA_PET_LEVEL              	= 1701 (number)
   ACT_RUN_PISTOL                  	= 365 (number)
   ACT_DOTA_GENERIC_CHANNEL_1      	= 1728 (number)
   ACT_DOTA_SLIDE_LOOP             	= 1727 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED	= 2048 (number)
   ShowGenericPopup                	= function: 0x011500f8 (function)
   GetSystemDate                   	= function: 0x01144f00 (function)
   ACT_DOTA_OVERRIDE_ABILITY_1     	= 1516 (number)
   OVERHEAD_ALERT_SHARD            	= 23 (number)
   DOTA_ModifyGold_Buyback         	= 2 (number)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE	= 46 (number)
   ACT_RANGE_ATTACK_THROW          	= 288 (number)
   GetLobbyEventGameDetails        	= function: 0x01146dc0 (function)
   GetTeamName                     	= function: 0x01146e50 (function)
   ACT_DOTA_MEDUSA_STONE_GAZE      	= 1607 (number)
   ACT_WALK_RIFLE_STIMULATED       	= 329 (number)
   ACT_MP_CROUCH_SECONDARY         	= 591 (number)
   DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO	= 20 (number)
   UF_FAIL_OUT_OF_WORLD            	= 26 (number)
   DOTA_SPEECH_RECIPIENT_TYPE_MAX  	= 10 (number)
   DOTA_ITEM_STASH_SIZE            	= 6 (number)
   string                          	= table: 0x01114600 (table, already seen)
   MODIFIER_PROPERTY_MAX_ATTACK_RANGE	= 110 (number)
   DOTA_PSEUDO_RANDOM_NONE         	= 0 (number)
   ACT_READINESS_RELAXED_TO_STIMULATED	= 419 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3	= 79 (number)
   ACT_UNDEPLOY                    	= 473 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_ITEM2	= 790 (number)
   OVERHEAD_ALERT_BLOCKED          	= 21 (number)
   DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP	= 2 (number)
   DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD	= 6 (number)
   ACT_CSGO_LAND_HEAVY             	= 1024 (number)
   DOTA_ABILITY_BEHAVIOR_UNRESTRICTED	= 1048576 (number)
   ACT_VR_SHOTGUN_SLIDE_BACK       	= 980 (number)
   DOTA_CONNECTION_STATE_NOT_YET_CONNECTED	= 1 (number)
   DOTA_CONNECTION_STATE_FAILED    	= 6 (number)
   ACT_RANGE_AIM_SMG1_LOW          	= 293 (number)
   DOTA_ModifyGold_SelectionPenalty	= 9 (number)
   ACT_FIRE                        	= 906 (number)
   DOTA_UNIT_ORDER_ATTACK_TARGET   	= 4 (number)
   DOTA_ModifyGold_CreepKill       	= 13 (number)
   FCVAR_DEVELOPMENTONLY           	= 2 (number)
   ACT_SLAM_STICKWALL_TO_THROW_ND  	= 235 (number)
   RandomFloat                     	= function: 0x01144aa8 (function)
   DOTA_HEROPICK_STATE_CM_BAN3     	= 9 (number)
   PATTACH_WATERWAKE               	= 12 (number)
   DOTA_RUNE_ARCANE                	= 6 (number)
   DOTA_UNIT_ORDER_CAST_POSITION   	= 5 (number)
   ACT_GESTURE_FLINCH_RIGHTARM     	= 162 (number)
   DOTA_UNIT_ORDER_CAST_TARGET_TREE	= 7 (number)
   ACT_MP_GRENADE2_DRAW            	= 692 (number)
   ACT_DOTA_FORCESTAFF_STATUE      	= 1772 (number)
   DOTA_UNIT_ORDER_HOLD_POSITION   	= 10 (number)
   DOTA_UNIT_ORDER_DROP_ITEM       	= 12 (number)
   ACT_FLINCH_CHEST                	= 119 (number)
   DOTA_TEAM_CUSTOM_4              	= 9 (number)
   DOTA_UNIT_ORDER_BUYBACK         	= 23 (number)
   SpawnEntityFromTableAsynchronous	= function: 0x0113deb0 (function)
   MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL	= 226 (number)
   ACT_RUN_AIM_RELAXED             	= 99 (number)
   DOTA_UNIT_CAP_MELEE_ATTACK      	= 1 (number)
   ACT_WALK_AIM_SHOTGUN            	= 362 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION	= 77 (number)
   PATTACH_ABSORIGIN_FOLLOW        	= 1 (number)
   MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS	= 92 (number)
   ACT_VM_DROP                     	= 191 (number)
   DMG_PHYSGUN                     	= 8388608 (number)
   DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR	= 1 (number)
   AngleDiff                       	= function: 0x01145dc0 (function)
   ACT_GLIDE                       	= 27 (number)
   ACD_DOTA_IDLE                   	= 1777 (number)
   ACT_RANGE_ATTACK_SNIPER_RIFLE   	= 289 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK	= 16 (number)
   ACT_MP_SWIM_MELEE               	= 631 (number)
   ACT_DI_ALYX_ZOMBIE_SHOTGUN64    	= 417 (number)
   PrecacheUnitByNameAsync         	= function: 0x011f8560 (function)
   DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS	= 28 (number)
   DOTA_DEFAULT_UI_ACTION_MINIMAP  	= 4 (number)
   MODIFIER_EVENT_ON_DEATH         	= 197 (number)
   abs                             	= function: 0x011d9bb8 (function)
   DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM	= 19 (number)
   UF_FAIL_INVULNERABLE            	= 18 (number)
   ACT_FLINCH_HEAD                 	= 118 (number)
   ACT_DOTA_TAUNT_SPECIAL          	= 1752 (number)
   ACT_SLAM_TRIPMINE_ATTACH        	= 252 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_MANA	= 7 (number)
   ACT_BUSY_SIT_GROUND_ENTRY       	= 388 (number)
   AE_CL_CREATE_ANIM_SCOPE_PROP    	= 46 (number)
   ACT_DIE_STAND_HEADSHOT          	= 989 (number)
   ACT_DOTA_CAST_GHOST_WALK_ORB    	= 1738 (number)
}