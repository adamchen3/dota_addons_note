{
   ACT_MP_VCD                      	= 521 (number)
   ACT_MP_ATTACK_STAND_PRIMARYFIRE 	= 522 (number)
   ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED	= 523 (number)
   ACT_MP_ATTACK_STAND_SECONDARYFIRE	= 524 (number)
   ACT_MP_ATTACK_STAND_GRENADE     	= 525 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARYFIRE	= 526 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED	= 527 (number)
   ACT_MP_ATTACK_CROUCH_SECONDARYFIRE	= 528 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE    	= 529 (number)
   ACT_MP_ATTACK_SWIM_PRIMARYFIRE  	= 530 (number)
   ACT_MP_ATTACK_SWIM_SECONDARYFIRE	= 531 (number)
   ACT_MP_ATTACK_SWIM_GRENADE      	= 532 (number)
   ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE	= 533 (number)
   ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE	= 534 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE   	= 535 (number)
   ACT_MP_RELOAD_STAND             	= 536 (number)
   ACT_MP_RELOAD_STAND_LOOP        	= 537 (number)
   ACT_MP_RELOAD_STAND_END         	= 538 (number)
   ACT_MP_RELOAD_CROUCH            	= 539 (number)
   ACT_MP_RELOAD_CROUCH_LOOP       	= 540 (number)
   ACT_MP_RELOAD_CROUCH_END        	= 541 (number)
   ACT_MP_RELOAD_SWIM              	= 542 (number)
   ACT_MP_RELOAD_SWIM_LOOP         	= 543 (number)
   ACT_MP_RELOAD_SWIM_END          	= 544 (number)
   ACT_MP_RELOAD_AIRWALK           	= 545 (number)
   ACT_MP_RELOAD_AIRWALK_LOOP      	= 546 (number)
   ACT_MP_RELOAD_AIRWALK_END       	= 547 (number)
   ACT_MP_ATTACK_STAND_PREFIRE     	= 548 (number)
   ParticleManager                 	= table: 0x00237050 (table)
   {
      metatable = table: 0x002358d8
      {
         IsNull                          	= function: 0x00235920 (function)
         SetParticleControlOrientationFLU	= function: 0x002364b8 (function)
         SetParticleControlForward       	= function: 0x00236580 (function)
         FDesc                           	= table: 0x00235990 (table)
         {
            SetParticleControlOrientationFLU	= void SetParticleControlOrientationFLU(int, int, Vector, Vector, Vector)
[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect (userdata)
            SetParticleControlForward       	= void SetParticleControlForward(int, int, Vector)
[OBSOLETE - Use SetParticleControlTransformForward] (int nFXIndex, int nPoint, vForward) (userdata)
            SetParticleControlTransform     	= void SetParticleControlTransform(int, int, Vector, QAngle)
(int nFXIndex, int nPoint, vOrigin, qAngles) (userdata)
            SetParticleControlTransformForward	= void SetParticleControlTransformForward(int, int, Vector, Vector)
(int nFXIndex, int nPoint, vOrigin, vForward) (userdata)
            SetParticleFoWProperties        	= void SetParticleFoWProperties(int, int, int, float)
int nfxindex, int nPoint, int nPoint2, float flRadius (userdata)
            SetParticleShouldCheckFoW       	= bool SetParticleShouldCheckFoW(int, bool)
int nfxindex, bool bCheckFoW (userdata)
            DestroyParticle                 	= void DestroyParticle(int, bool)
(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps. (userdata)
            CreateParticle                  	= int CreateParticle(string, int, handle)
Creates a new particle effect (userdata)
            CreateParticleForPlayer         	= int CreateParticleForPlayer(string, int, handle, handle)
Creates a new particle effect that only plays for the specified player (userdata)
            CreateParticleForTeam           	= int CreateParticleForTeam(string, int, handle, int)
Creates a new particle effect that only plays for the specified team (userdata)
            SetParticleControl              	= void SetParticleControl(int, int, Vector)
Set the control point data for a control on a particle effect (userdata)
            ReleaseParticleIndex            	= void ReleaseParticleIndex(int)
Frees the specified particle index (userdata)
            SetParticleAlwaysSimulate       	= void SetParticleAlwaysSimulate(int)
 (userdata)
            SetParticleControlEnt           	= void SetParticleControlEnt(int, int, handle, int, string, Vector, bool)
 (userdata)
            SetParticleControlFallback      	= void SetParticleControlFallback(int, int, Vector)
(int iIndex, int iPoint, Vector vecPosition) (userdata)
            GetParticleReplacement          	= string GetParticleReplacement(string, handle)
 (userdata)
            SetParticleControlOrientation   	= void SetParticleControlOrientation(int, int, Vector, Vector, Vector)
[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!) (userdata)
         }
         SetParticleControlTransformForward	= function: 0x00236700 (function)
         SetParticleFoWProperties        	= function: 0x002367c8 (function)
         SetParticleShouldCheckFoW       	= function: 0x00236b90 (function)
         DestroyParticle                 	= function: 0x00236c50 (function)
         CreateParticle                  	= function: 0x002359d8 (function)
         CreateParticleForPlayer         	= function: 0x00235a88 (function)
         CreateParticleForTeam           	= function: 0x00235b40 (function)
         SetParticleControl              	= function: 0x00235bf8 (function)
         ReleaseParticleIndex            	= function: 0x00235c78 (function)
         SetParticleAlwaysSimulate       	= function: 0x00235df8 (function)
         SetParticleControlEnt           	= function: 0x00235eb8 (function)
         SetParticleControlFallback      	= function: 0x002360f8 (function)
         GetParticleReplacement          	= function: 0x002361b8 (function)
         SetParticleControlOrientation   	= function: 0x002363f8 (function)
         SetParticleControlTransform     	= function: 0x00236640 (function)
      }
      __self                          	= userdata: 0x002370c8 (userdata)
   }
   CDOTA_Buff                      	= table: 0x00237240 (table)
   {
      AddParticle                     	= function: 0x00238810 (function)
      SetOverheadEffectOffset         	= function: 0x002388c0 (function)
      GetCreationTime                 	= function: 0x00238978 (function)
      GetLastAppliedTime              	= function: 0x00238a28 (function)
      GetAuraDuration                 	= function: 0x00238ae0 (function)
      GetSerialNumber                 	= function: 0x00238b90 (function)
      GetCaster                       	= function: 0x00238c40 (function)
      GetParent                       	= function: 0x00238cf0 (function)
      GetAbility                      	= function: 0x00238da0 (function)
      IsNull                          	= function: 0x00237288 (function)
      GetName                         	= function: 0x00237340 (function)
      FDesc                           	= table: 0x002372f8 (table)
      {
         AddParticle                     	= void AddParticle(int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect)
(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect (userdata)
         SetOverheadEffectOffset         	= bool SetOverheadEffectOffset(float flOffset)
 (userdata)
         GetCreationTime                 	= float GetCreationTime()
 (userdata)
         GetLastAppliedTime              	= float GetLastAppliedTime()
 (userdata)
         GetAuraDuration                 	= float GetAuraDuration()
Returns aura stickiness (default 0.5) (userdata)
         GetName                         	= string GetName()
 (userdata)
         GetCaster                       	= handle GetCaster()
Get the owner of the ability responsible for the modifier. (userdata)
         GetParent                       	= handle GetParent()
Get the unit the modifier is parented to. (userdata)
         GetAbility                      	= handle GetAbility()
Get the ability that generated the modifier. (userdata)
         GetSerialNumber                 	= int GetSerialNumber()
 (userdata)
         SendBuffRefreshToClients        	= void SendBuffRefreshToClients()
 (userdata)
         GetClass                        	= string GetClass()
 (userdata)
         CheckStateToTable               	= void CheckStateToTable(handle table)
 (userdata)
         HasFunction                     	= bool HasFunction(int iFunction)
 (userdata)
         Destroy                         	= void Destroy()
Run all associated destroy functions, then remove the modifier. (userdata)
         IsDebuff                        	= bool IsDebuff()
 (userdata)
         IsStunDebuff                    	= bool IsStunDebuff()
 (userdata)
         IsHexDebuff                     	= bool IsHexDebuff()
 (userdata)
         IncrementStackCount             	= void IncrementStackCount()
Increase this modifier's stack count by 1. (userdata)
         DecrementStackCount             	= void DecrementStackCount()
Decrease this modifier's stack count by 1. (userdata)
         GetStackCount                   	= int GetStackCount()
 (userdata)
         SetStackCount                   	= void SetStackCount(int iCount)
 (userdata)
         GetDieTime                      	= float GetDieTime()
 (userdata)
         GetDuration                     	= float GetDuration()
 (userdata)
         GetRemainingTime                	= float GetRemainingTime()
 (userdata)
         GetElapsedTime                  	= float GetElapsedTime()
 (userdata)
         ForceRefresh                    	= void ForceRefresh()
Run all associated refresh functions on this modifier as if it was re-applied. (userdata)
         GetAuraOwner                    	= handle GetAuraOwner()
 (userdata)
         DestroyOnExpire                 	= bool DestroyOnExpire()
 (userdata)
         StartIntervalThink              	= void StartIntervalThink(float flInterval)
Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1. (userdata)
         SetDuration                     	= void SetDuration(float flDuration, bool bInformClient)
(flTime, bInformClients) (userdata)
      }
      Destroy                         	= function: 0x00237470 (function)
      GetClass                        	= function: 0x002373c0 (function)
      CheckStateToTable               	= function: 0x002374f0 (function)
      HasFunction                     	= function: 0x00237570 (function)
      SendBuffRefreshToClients        	= function: 0x00237620 (function)
      IsDebuff                        	= function: 0x002376e0 (function)
      IsStunDebuff                    	= function: 0x00237790 (function)
      IsHexDebuff                     	= function: 0x00237840 (function)
      IncrementStackCount             	= function: 0x002378f0 (function)
      DecrementStackCount             	= function: 0x002379a8 (function)
      GetStackCount                   	= function: 0x00237a60 (function)
      SetStackCount                   	= function: 0x00237b10 (function)
      GetDieTime                      	= function: 0x00237bc0 (function)
      GetDuration                     	= function: 0x00237c70 (function)
      GetRemainingTime                	= function: 0x00238028 (function)
      GetElapsedTime                  	= function: 0x002380e0 (function)
      ForceRefresh                    	= function: 0x00238498 (function)
      GetAuraOwner                    	= function: 0x00238548 (function)
      DestroyOnExpire                 	= function: 0x002385f8 (function)
      StartIntervalThink              	= function: 0x002386a8 (function)
      SetDuration                     	= function: 0x00238760 (function)
   }
   DOTA_GC_TEAM_CUSTOM_2           	= 7 (number)
   DOTA_GC_TEAM_CUSTOM_3           	= 8 (number)
   DOTA_GC_TEAM_CUSTOM_4           	= 9 (number)
   DOTA_GC_TEAM_CUSTOM_5           	= 10 (number)
   DOTA_GC_TEAM_CUSTOM_6           	= 11 (number)
   DOTA_GC_TEAM_CUSTOM_7           	= 12 (number)
   DOTA_GC_TEAM_CUSTOM_8           	= 13 (number)
   DOTA_GC_TEAM_NEUTRALS           	= 14 (number)
   DOTA_CONNECTION_STATE_UNKNOWN   	= 0 (number)
   DOTA_CONNECTION_STATE_NOT_YET_CONNECTED	= 1 (number)
   DOTA_CONNECTION_STATE_CONNECTED 	= 2 (number)
   DOTA_CONNECTION_STATE_DISCONNECTED	= 3 (number)
   DOTA_CONNECTION_STATE_ABANDONED 	= 4 (number)
   DOTA_CONNECTION_STATE_LOADING   	= 5 (number)
   DOTA_CONNECTION_STATE_FAILED    	= 6 (number)
   DOTA_ModifyGold_Unspecified     	= 0 (number)
   DOTA_ModifyGold_Death           	= 1 (number)
   DOTA_ModifyGold_Buyback         	= 2 (number)
   DOTA_ModifyGold_PurchaseConsumable	= 3 (number)
   DOTA_ModifyGold_PurchaseItem    	= 4 (number)
   DOTA_ModifyGold_AbandonedRedistribute	= 5 (number)
   DOTA_ModifyGold_SellItem        	= 6 (number)
   DOTA_ModifyGold_AbilityCost     	= 7 (number)
   DOTA_ModifyGold_CheatCommand    	= 8 (number)
   DOTA_ModifyGold_SelectionPenalty	= 9 (number)
   DOTA_ModifyGold_GameTick        	= 10 (number)
   DOTA_ModifyGold_Building        	= 11 (number)
   DOTA_ModifyGold_HeroKill        	= 12 (number)
   DOTA_ModifyGold_CreepKill       	= 13 (number)
   DOTA_ModifyGold_NeutralKill     	= 14 (number)
   DOTA_ModifyGold_RoshanKill      	= 15 (number)
   DOTA_ModifyGold_CourierKill     	= 16 (number)
   DOTA_ModifyGold_BountyRune      	= 17 (number)
   DOTA_ModifyGold_SharedGold      	= 18 (number)
   DOTA_ModifyGold_AbilityGold     	= 19 (number)
   DOTA_ModifyGold_WardKill        	= 20 (number)
   DOTA_ModifyGold_CourierKilledByThisPlayer	= 21 (number)
   ExecuteOrderFromTable           	= function: 0x0022e4c8 (function)
   DOTA_UNIT_ORDER_NONE            	= 0 (number)
   DOTA_UNIT_ORDER_MOVE_TO_POSITION	= 1 (number)
   DOTA_UNIT_ORDER_MOVE_TO_TARGET  	= 2 (number)
   DOTA_UNIT_ORDER_ATTACK_MOVE     	= 3 (number)
   DOTA_UNIT_ORDER_ATTACK_TARGET   	= 4 (number)
   DOTA_UNIT_ORDER_CAST_POSITION   	= 5 (number)
   DOTA_UNIT_ORDER_CAST_TARGET     	= 6 (number)
   DOTA_UNIT_ORDER_CAST_TARGET_TREE	= 7 (number)
   DOTA_UNIT_ORDER_CAST_NO_TARGET  	= 8 (number)
   DOTA_UNIT_ORDER_CAST_TOGGLE     	= 9 (number)
   DOTA_UNIT_ORDER_HOLD_POSITION   	= 10 (number)
   DOTA_UNIT_ORDER_TRAIN_ABILITY   	= 11 (number)
   DOTA_UNIT_ORDER_DROP_ITEM       	= 12 (number)
   DOTA_UNIT_ORDER_GIVE_ITEM       	= 13 (number)
   DOTA_UNIT_ORDER_PICKUP_ITEM     	= 14 (number)
   DOTA_UNIT_ORDER_PICKUP_RUNE     	= 15 (number)
   DOTA_UNIT_ORDER_PURCHASE_ITEM   	= 16 (number)
   DOTA_UNIT_ORDER_SELL_ITEM       	= 17 (number)
   DOTA_UNIT_ORDER_DISASSEMBLE_ITEM	= 18 (number)
   DOTA_UNIT_ORDER_MOVE_ITEM       	= 19 (number)
   DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO	= 20 (number)
   DOTA_UNIT_ORDER_STOP            	= 21 (number)
   DOTA_UNIT_ORDER_TAUNT           	= 22 (number)
   DOTA_UNIT_ORDER_BUYBACK         	= 23 (number)
   DOTA_UNIT_ORDER_GLYPH           	= 24 (number)
   DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH	= 25 (number)
   DOTA_UNIT_ORDER_CAST_RUNE       	= 26 (number)
   DOTA_UNIT_ORDER_PING_ABILITY    	= 27 (number)
   DOTA_UNIT_ORDER_MOVE_TO_DIRECTION	= 28 (number)
   DOTA_UNIT_ORDER_PATROL          	= 29 (number)
   DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION	= 30 (number)
   DOTA_UNIT_ORDER_RADAR           	= 31 (number)
   DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK	= 32 (number)
   DOTA_UNIT_ORDER_CONTINUE        	= 33 (number)
   CDOTA_Modifier_Lua_Motion_Both  	= table: 0x0023c960 (table)
   {
      metatable = table: 0x002394a8
      {
         GetAuraDuration                 	= function: 0x0023b148 (function)
         OnIntervalThink                 	= function: 0x00239570 (function)
         OnCreated                       	= function: 0x00239620 (function)
         OnRefresh                       	= function: 0x002396d0 (function)
         OnDestroy                       	= function: 0x00219f08 (function)
         OnRemoved                       	= function: 0x00239780 (function)
         OnStackCountChanged             	= function: 0x00239830 (function)
         IsHidden                        	= function: 0x00239968 (function)
         IsPurgable                      	= function: 0x00239a18 (function)
         IsPurgeException                	= function: 0x00239a88 (function)
         IsAura                          	= function: 0x00239bc0 (function)
         AllowIllusionDuplicate          	= function: 0x00239c40 (function)
         RemoveOnDeath                   	= function: 0x00239cf8 (function)
         IsAuraActiveOnDeath             	= function: 0x00239da8 (function)
         IsPermanent                     	= function: 0x002481a8 (function)
         CanParentBeAutoAttacked         	= function: 0x0023a198 (function)
         SetHasCustomTransmitterData     	= function: 0x0023a250 (function)
         GetCritDamage                   	= function: 0x00219e20 (function)
         GetModifierAura                 	= function: 0x0023a380 (function)
         GetEffectName                   	= function: 0x0023a430 (function)
         GetEffectAttachType             	= function: 0x0023a4e0 (function)
         ShouldUseOverheadOffset         	= function: 0x0023a598 (function)
         GetTexture                      	= function: 0x0023a650 (function)
         IsNull                          	= function: 0x00247220 (function)
         GetPriority                     	= function: 0x0023a7b0 (function)
         GetStatusEffectName             	= function: 0x0023a860 (function)
         StatusEffectPriority            	= function: 0x0023a918 (function)
         GetHeroEffectName               	= function: 0x0023a9d0 (function)
         FDesc                           	= table: 0x00239528 (table)
         {
            GetAuraDuration                 	= float GetAuraDuration()
Returns aura stickiness (userdata)
            OnIntervalThink                 	= void OnIntervalThink()
Runs when the think interval occurs. (userdata)
            OnCreated                       	= void OnCreated(handle table)
Runs when the modifier is created. (userdata)
            OnRefresh                       	= void OnRefresh(handle table)
Runs when the modifier is refreshed. (userdata)
            OnDestroy                       	= void OnDestroy()
Runs when the modifier is destroyed (after unit loses modifier). (userdata)
            OnRemoved                       	= void OnRemoved(bool bDeath)
Runs when the modifier is destroyed (before unit loses modifier). (userdata)
            OnStackCountChanged             	= void OnStackCountChanged(int iStackCount)
Runs when stack count changes (param is old count). (userdata)
            IsHidden                        	= bool IsHidden()
True/false if this modifier should be displayed on the buff bar. (userdata)
            IsPurgable                      	= bool IsPurgable()
True/false if this modifier can be purged. (userdata)
            IsPurgeException                	= bool IsPurgeException()
True/false if this modifier can be purged by strong dispels. (userdata)
            IsAura                          	= bool IsAura()
True/false if this modifier is an aura. (userdata)
            AllowIllusionDuplicate          	= bool AllowIllusionDuplicate()
True/false if this modifier is active on illusions. (userdata)
            RemoveOnDeath                   	= bool RemoveOnDeath()
True/false if this modifier is removed when the parent dies. (userdata)
            IsAuraActiveOnDeath             	= bool IsAuraActiveOnDeath()
True/false if this aura provides buffs when the parent is dead. (userdata)
            IsPermanent                     	= bool IsPermanent()
 (userdata)
            CanParentBeAutoAttacked         	= bool CanParentBeAutoAttacked()
 (userdata)
            SetHasCustomTransmitterData     	= void SetHasCustomTransmitterData(bool bHasCustomData)
 (userdata)
            GetCritDamage                   	= float GetCritDamage()
A Modifier that listens to MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE has to have a GetCritDamage implementation so we can know when to evaluate it. Value should be in 'times the original value format' e.g: 1.5 not 150 (userdata)
            GetModifierAura                 	= string GetModifierAura()
The name of the secondary modifier that will be applied by this modifier (if it is an aura). (userdata)
            GetEffectName                   	= string GetEffectName()
Return the name of the particle system that is created while this modifier is active. (userdata)
            GetEffectAttachType             	= int GetEffectAttachType()
Return the attach type of the particle system from GetEffectName. (userdata)
            ShouldUseOverheadOffset         	= bool ShouldUseOverheadOffset()
Apply the overhead offset to the attached effect. (userdata)
            GetTexture                      	= string GetTexture()
Return the name of the buff icon to be shown for this modifier. (userdata)
            GetAttributes                   	= int GetAttributes()
Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t (userdata)
            GetPriority                     	= int GetPriority()
Return the priority order this modifier will be applied over others. (userdata)
            GetStatusEffectName             	= string GetStatusEffectName()
Return the name of the status effect particle system that is created while this modifier is active. (userdata)
            StatusEffectPriority            	= int StatusEffectPriority()
Relationship of this status effect with those from other buffs (higher is more likely to be shown). (userdata)
            GetHeroEffectName               	= string GetHeroEffectName()
Return the name of the hero effect particle system that is created while this modifier is active. (userdata)
            HeroEffectPriority              	= int HeroEffectPriority()
Relationship of this hero effect with those from other buffs (higher is more likely to be shown). (userdata)
            GetAuraSearchTeam               	= int GetAuraSearchTeam()
Return the teams this aura applies its buff to. (userdata)
            GetAuraSearchType               	= int GetAuraSearchType()
Return the unit classifications this aura applies its buff to. (userdata)
            GetAuraSearchFlags              	= int GetAuraSearchFlags()
Return the unit flags this aura respects when placing buffs. (userdata)
            GetAuraRadius                   	= int GetAuraRadius()
Return the range around the parent this aura tries to apply its buff. (userdata)
            GetAuraEntityReject             	= bool GetAuraEntityReject(handle hEntity)
Return true/false if this entity should receive the aura under specific conditions (userdata)
            IsDebuff                        	= bool IsDebuff()
True/false if this modifier should be displayed as a debuff. (userdata)
            IsStunDebuff                    	= bool IsStunDebuff()
True/false if this modifier is considered a stun for purge reasons. (userdata)
            DestroyOnExpire                 	= bool DestroyOnExpire()
True/false if this buff is removed when the duration expires. (userdata)
         }
         GetAuraSearchTeam               	= function: 0x0023b1c8 (function)
         GetAuraSearchType               	= function: 0x0023b888 (function)
         GetAuraSearchFlags              	= function: 0x0023b940 (function)
         GetAuraRadius                   	= function: 0x0023b9f8 (function)
         GetAuraEntityReject             	= function: 0x0023baa8 (function)
         IsDebuff                        	= function: 0x002398e8 (function)
         IsStunDebuff                    	= function: 0x00239b40 (function)
         DestroyOnExpire                 	= function: 0x002471e0 (function)
         HeroEffectPriority              	= function: 0x0023aa88 (function)
         GetAttributes                   	= function: 0x0023a700 (function)
         AddParticle                     	= function: 0x00238810 (function)
         SetOverheadEffectOffset         	= function: 0x002388c0 (function)
         GetCreationTime                 	= function: 0x00238978 (function)
         GetLastAppliedTime              	= function: 0x00238a28 (function)
         GetAuraDuration                 	= function: 0x00238ae0 (function)
         GetSerialNumber                 	= function: 0x00238b90 (function)
         GetCaster                       	= function: 0x00238c40 (function)
         GetParent                       	= function: 0x00238cf0 (function)
         GetAbility                      	= function: 0x00238da0 (function)
         IsNull                          	= function: 0x00237288 (function)
         GetName                         	= function: 0x00237340 (function)
         FDesc                           	= table: 0x002372f8 (table, already seen)
         Destroy                         	= function: 0x00237470 (function)
         GetClass                        	= function: 0x002373c0 (function)
         CheckStateToTable               	= function: 0x002374f0 (function)
         HasFunction                     	= function: 0x00237570 (function)
         SendBuffRefreshToClients        	= function: 0x00237620 (function)
         IsDebuff                        	= function: 0x002376e0 (function)
         IsStunDebuff                    	= function: 0x00237790 (function)
         IsHexDebuff                     	= function: 0x00237840 (function)
         IncrementStackCount             	= function: 0x002378f0 (function)
         DecrementStackCount             	= function: 0x002379a8 (function)
         GetStackCount                   	= function: 0x00237a60 (function)
         SetStackCount                   	= function: 0x00237b10 (function)
         GetDieTime                      	= function: 0x00237bc0 (function)
         GetDuration                     	= function: 0x00237c70 (function)
         GetRemainingTime                	= function: 0x00238028 (function)
         GetElapsedTime                  	= function: 0x002380e0 (function)
         ForceRefresh                    	= function: 0x00238498 (function)
         GetAuraOwner                    	= function: 0x00238548 (function)
         DestroyOnExpire                 	= function: 0x002385f8 (function)
         StartIntervalThink              	= function: 0x002386a8 (function)
         SetDuration                     	= function: 0x00238760 (function)
      }
      IsNull                          	= function: 0x0023c9a8 (function)
      GetPriority                     	= function: 0x0023cae0 (function)
      ApplyVerticalMotionController   	= function: 0x0023cca8 (function)
      UpdateVerticalMotion            	= function: 0x0023cef0 (function)
      FDesc                           	= table: 0x0023ca18 (table)
      {
         OnVerticalMotionInterrupted     	= void OnVerticalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
         GetPriority                     	= int GetPriority()
Get the priority (userdata)
         UpdateVerticalMotion            	= void UpdateVerticalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         ApplyVerticalMotionController   	= bool ApplyVerticalMotionController()
Starts the vertical motion controller effects for this buff.  Returns true if successful. (userdata)
         SetPriority                     	= void SetPriority(int nMotionPriority)
Set the priority (userdata)
         ApplyHorizontalMotionController 	= bool ApplyHorizontalMotionController()
Starts the horizontal motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateHorizontalMotion          	= void UpdateHorizontalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         OnHorizontalMotionInterrupted   	= void OnHorizontalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
      }
      OnVerticalMotionInterrupted     	= function: 0x0023cf70 (function)
      SetPriority                     	= function: 0x0023ca60 (function)
      ApplyHorizontalMotionController 	= function: 0x0023cb60 (function)
      UpdateHorizontalMotion          	= function: 0x0023cd28 (function)
      OnHorizontalMotionInterrupted   	= function: 0x0023ce70 (function)
   }
   DOTA_HEROPICK_STATE_NONE        	= 0 (number)
   DOTA_HEROPICK_STATE_AP_SELECT   	= 1 (number)
   DOTA_HEROPICK_STATE_SD_SELECT   	= 2 (number)
   DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED	= 3 (number)
   DOTA_HEROPICK_STATE_RD_SELECT_UNUSED	= 4 (number)
   DOTA_HEROPICK_STATE_CM_INTRO    	= 5 (number)
   DOTA_HEROPICK_STATE_CM_CAPTAINPICK	= 6 (number)
   DOTA_HEROPICK_STATE_CM_BAN1     	= 7 (number)
   DOTA_HEROPICK_STATE_CM_BAN2     	= 8 (number)
   DOTA_HEROPICK_STATE_CM_BAN3     	= 9 (number)
   DOTA_HEROPICK_STATE_CM_BAN4     	= 10 (number)
   DOTA_HEROPICK_STATE_CM_BAN5     	= 11 (number)
   DOTA_HEROPICK_STATE_CM_BAN6     	= 12 (number)
   DOTA_HEROPICK_STATE_CM_BAN7     	= 13 (number)
   DOTA_HEROPICK_STATE_CM_BAN8     	= 14 (number)
   DOTA_HEROPICK_STATE_CM_BAN9     	= 15 (number)
   DOTA_HEROPICK_STATE_CM_BAN10    	= 16 (number)
   DOTA_HEROPICK_STATE_CM_BAN11    	= 17 (number)
   DOTA_HEROPICK_STATE_CM_BAN12    	= 18 (number)
   DOTA_HEROPICK_STATE_CM_BAN13    	= 19 (number)
   DOTA_HEROPICK_STATE_CM_BAN14    	= 20 (number)
   DOTA_HEROPICK_STATE_CM_SELECT1  	= 21 (number)
   DOTA_HEROPICK_STATE_CM_SELECT2  	= 22 (number)
   DOTA_HEROPICK_STATE_CM_SELECT3  	= 23 (number)
   DOTA_HEROPICK_STATE_CM_SELECT4  	= 24 (number)
   DOTA_HEROPICK_STATE_CM_SELECT5  	= 25 (number)
   DOTA_HEROPICK_STATE_CM_SELECT6  	= 26 (number)
   DOTA_HEROPICK_STATE_CM_SELECT7  	= 27 (number)
   DOTA_HEROPICK_STATE_CM_SELECT8  	= 28 (number)
   DOTA_HEROPICK_STATE_CM_SELECT9  	= 29 (number)
   DOTA_HEROPICK_STATE_CM_SELECT10 	= 30 (number)
   ACT_DOTA_ALCHEMIST_CONCOCTION_THROW	= 1579 (number)
   ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END	= 1580 (number)
   ACT_DOTA_CAST_COLD_SNAP         	= 1581 (number)
   ACT_DOTA_CAST_GHOST_WALK        	= 1582 (number)
   ACT_DOTA_CAST_TORNADO           	= 1583 (number)
   ACT_DOTA_CAST_EMP               	= 1584 (number)
   ACT_DOTA_CAST_ALACRITY          	= 1585 (number)
   ACT_DOTA_CAST_CHAOS_METEOR      	= 1586 (number)
   ACT_DOTA_CAST_SUN_STRIKE        	= 1587 (number)
   ACT_DOTA_CAST_FORGE_SPIRIT      	= 1588 (number)
   ACT_DOTA_CAST_ICE_WALL          	= 1589 (number)
   ACT_DOTA_CAST_DEAFENING_BLAST   	= 1590 (number)
   ACT_DOTA_VICTORY                	= 1591 (number)
   ACT_DOTA_DEFEAT                 	= 1592 (number)
   ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE	= 1593 (number)
   ACT_DOTA_SPIRIT_BREAKER_CHARGE_END	= 1594 (number)
   ACT_DOTA_TELEPORT               	= 1595 (number)
   ACT_DOTA_TELEPORT_END           	= 1596 (number)
   ACT_DOTA_CAST_REFRACTION        	= 1597 (number)
   ACT_DOTA_CAST_ABILITY_7         	= 1598 (number)
   ACT_DOTA_CANCEL_SIREN_SONG      	= 1599 (number)
   ACT_DOTA_CHANNEL_ABILITY_7      	= 1600 (number)
   ACT_DOTA_LOADOUT                	= 1601 (number)
   ACT_DOTA_FORCESTAFF_END         	= 1602 (number)
   ACT_DOTA_POOF_END               	= 1603 (number)
   ACT_DOTA_SLARK_POUNCE           	= 1604 (number)
   ACT_DOTA_MAGNUS_SKEWER_START    	= 1605 (number)
   ACT_DOTA_MAGNUS_SKEWER_END      	= 1606 (number)
   ACT_DOTA_MEDUSA_STONE_GAZE      	= 1607 (number)
   ACT_DOTA_RELAX_START            	= 1608 (number)
   ACT_DOTA_RELAX_LOOP             	= 1609 (number)
   ACT_DOTA_RELAX_END              	= 1610 (number)
   ACT_DOTA_CENTAUR_STAMPEDE       	= 1611 (number)
   ACT_DOTA_BELLYACHE_START        	= 1612 (number)
   ACT_DOTA_BELLYACHE_LOOP         	= 1613 (number)
   ACT_DOTA_BELLYACHE_END          	= 1614 (number)
   ACT_DOTA_ROQUELAIRE_LAND        	= 1615 (number)
   ACT_DOTA_ROQUELAIRE_LAND_IDLE   	= 1616 (number)
   ACT_DOTA_GREEVIL_CAST           	= 1617 (number)
   ACT_DOTA_GREEVIL_OVERRIDE_ABILITY	= 1618 (number)
   ACT_DOTA_GREEVIL_HOOK_START     	= 1619 (number)
   ACT_DOTA_GREEVIL_HOOK_END       	= 1620 (number)
   ACT_DOTA_GREEVIL_BLINK_BONE     	= 1621 (number)
   ACT_DOTA_IDLE_SLEEPING          	= 1622 (number)
   ACT_DOTA_INTRO                  	= 1623 (number)
   ACT_DOTA_GESTURE_POINT          	= 1624 (number)
   ACT_DOTA_GESTURE_ACCENT         	= 1625 (number)
   ACT_DOTA_SLEEPING_END           	= 1626 (number)
   ACT_DOTA_AMBUSH                 	= 1627 (number)
   ACT_DOTA_ITEM_LOOK              	= 1628 (number)
   ACT_DOTA_STARTLE                	= 1629 (number)
   ACT_DOTA_FRUSTRATION            	= 1630 (number)
   ACT_DOTA_TELEPORT_REACT         	= 1631 (number)
   ACT_DOTA_TELEPORT_END_REACT     	= 1632 (number)
   ACT_DOTA_SHRUG                  	= 1633 (number)
   ACT_DOTA_RELAX_LOOP_END         	= 1634 (number)
   ACT_DOTA_PRESENT_ITEM           	= 1635 (number)
   ACT_DOTA_IDLE_IMPATIENT         	= 1636 (number)
   ACT_DOTA_SHARPEN_WEAPON         	= 1637 (number)
   ACT_DOTA_SHARPEN_WEAPON_OUT     	= 1638 (number)
   ACT_DOTA_IDLE_SLEEPING_END      	= 1639 (number)
   ACT_DOTA_BRIDGE_DESTROY         	= 1640 (number)
   ACT_DOTA_TAUNT_SNIPER           	= 1641 (number)
   ACT_DOTA_DEATH_BY_SNIPER        	= 1642 (number)
   ACT_DOTA_LOOK_AROUND            	= 1643 (number)
   ACT_DOTA_CAGED_CREEP_RAGE       	= 1644 (number)
   ACT_DOTA_CAGED_CREEP_RAGE_OUT   	= 1645 (number)
   ACT_DOTA_CAGED_CREEP_SMASH      	= 1646 (number)
   ACT_DOTA_CAGED_CREEP_SMASH_OUT  	= 1647 (number)
   ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP	= 1648 (number)
   ACT_DOTA_INTRO_LOOP             	= 1649 (number)
   ACT_DOTA_BRIDGE_THREAT          	= 1650 (number)
   ACT_DOTA_DAGON                  	= 1651 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START	= 1652 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL 	= 1653 (number)
   ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END	= 1654 (number)
   ACT_DOTA_NIAN_PIN_START         	= 1655 (number)
   ACT_DOTA_NIAN_PIN_LOOP          	= 1656 (number)
   ACT_DOTA_NIAN_PIN_END           	= 1657 (number)
   ACT_DOTA_LEAP_STUN              	= 1658 (number)
   ACT_DOTA_LEAP_SWIPE             	= 1659 (number)
   ACT_DOTA_NIAN_INTRO_LEAP        	= 1660 (number)
   ACT_DOTA_AREA_DENY              	= 1661 (number)
   ACT_DOTA_NIAN_PIN_TO_STUN       	= 1662 (number)
   ACT_DOTA_RAZE_1                 	= 1663 (number)
   ACT_DOTA_RAZE_2                 	= 1664 (number)
   ACT_DOTA_RAZE_3                 	= 1665 (number)
   ACT_DOTA_UNDYING_DECAY          	= 1666 (number)
   ACT_DOTA_UNDYING_SOUL_RIP       	= 1667 (number)
   ACT_DOTA_UNDYING_TOMBSTONE      	= 1668 (number)
   ACT_DOTA_WHIRLING_AXES_RANGED   	= 1669 (number)
   ACT_DOTA_SHALLOW_GRAVE          	= 1670 (number)
   ACT_DOTA_COLD_FEET              	= 1671 (number)
   ACT_DOTA_ICE_VORTEX             	= 1672 (number)
   ACT_DOTA_CHILLING_TOUCH         	= 1673 (number)
   ACT_DOTA_ENFEEBLE               	= 1674 (number)
   ACT_DOTA_FATAL_BONDS            	= 1675 (number)
   ACT_DOTA_MIDNIGHT_PULSE         	= 1676 (number)
   ACT_DOTA_ANCESTRAL_SPIRIT       	= 1677 (number)
   ACT_MP_AIRWALK_PDA              	= 748 (number)
   ACT_MP_CROUCHWALK_PDA           	= 749 (number)
   ACT_MP_JUMP_PDA                 	= 750 (number)
   ACT_MP_JUMP_START_PDA           	= 751 (number)
   ACT_MP_JUMP_FLOAT_PDA           	= 752 (number)
   ACT_MP_JUMP_LAND_PDA            	= 753 (number)
   ACT_MP_SWIM_PDA                 	= 754 (number)
   ACT_MP_ATTACK_STAND_PDA         	= 755 (number)
   ACT_MP_ATTACK_SWIM_PDA          	= 756 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH     	= 757 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT   	= 758 (number)
   ACT_MP_GESTURE_VC_FISTPUMP      	= 759 (number)
   ACT_MP_GESTURE_VC_THUMBSUP      	= 760 (number)
   ACT_MP_GESTURE_VC_NODYES        	= 761 (number)
   ACT_MP_GESTURE_VC_NODNO         	= 762 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY	= 763 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY	= 764 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY	= 765 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY	= 766 (number)
   ACT_MP_GESTURE_VC_NODYES_PRIMARY	= 767 (number)
   ACT_MP_GESTURE_VC_NODNO_PRIMARY 	= 768 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY	= 769 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY	= 770 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY	= 771 (number)
   ACT_DOTA_CAST_BURROW_END        	= 1702 (number)
   ACT_DOTA_LIFESTEALER_ASSIMILATE 	= 1703 (number)
   ACT_DOTA_LIFESTEALER_EJECT      	= 1704 (number)
   ACT_DOTA_ATTACK_EVENT_BASH      	= 1705 (number)
   ACT_DOTA_CAPTURE_RARE           	= 1706 (number)
   ACT_DOTA_AW_MAGNETIC_FIELD      	= 1707 (number)
   ACT_DOTA_CAST_GHOST_SHIP        	= 1708 (number)
   ACT_DOTA_FXANIM                 	= 1709 (number)
   ACT_DOTA_VICTORY_START          	= 1710 (number)
   ACT_DOTA_DEFEAT_START           	= 1711 (number)
   ACT_DOTA_DP_SPIRIT_SIPHON       	= 1712 (number)
   ACT_DOTA_TRICKS_END             	= 1713 (number)
   ACT_DOTA_ES_STONE_CALLER        	= 1714 (number)
   ACT_DOTA_MK_STRIKE              	= 1715 (number)
   ACT_DOTA_VERSUS                 	= 1716 (number)
   ACT_DOTA_CAPTURE_CARD           	= 1717 (number)
   ACT_DOTA_MK_SPRING_SOAR         	= 1718 (number)
   ACT_DOTA_MK_SPRING_END          	= 1719 (number)
   ACT_DOTA_MK_TREE_SOAR           	= 1720 (number)
   ACT_DOTA_MK_TREE_END            	= 1721 (number)
   ACT_DOTA_MK_FUR_ARMY            	= 1722 (number)
   ACT_DOTA_MK_SPRING_CAST         	= 1723 (number)
   ACT_DOTA_NECRO_GHOST_SHROUD     	= 1724 (number)
   ACT_DOTA_OVERRIDE_ARCANA        	= 1725 (number)
   ACT_DOTA_SLIDE                  	= 1726 (number)
   ACT_DOTA_SLIDE_LOOP             	= 1727 (number)
   ACT_DOTA_GENERIC_CHANNEL_1      	= 1728 (number)
   ACT_DOTA_GS_SOUL_CHAIN          	= 1729 (number)
   ACT_DOTA_GS_INK_CREATURE        	= 1730 (number)
   ACT_DOTA_TRANSITION             	= 1731 (number)
   ACT_DOTA_BLINK_DAGGER           	= 1732 (number)
   ACT_DOTA_BLINK_DAGGER_END       	= 1733 (number)
   ACT_DOTA_CUSTOM_TOWER_ATTACK    	= 1734 (number)
   ACT_DOTA_CUSTOM_TOWER_IDLE      	= 1735 (number)
   ACT_DOTA_CUSTOM_TOWER_DIE       	= 1736 (number)
   ACT_DOTA_CAST_COLD_SNAP_ORB     	= 1737 (number)
   ACT_DOTA_CAST_GHOST_WALK_ORB    	= 1738 (number)
   ACT_DOTA_CAST_TORNADO_ORB       	= 1739 (number)
   ACT_DOTA_CAST_EMP_ORB           	= 1740 (number)
   ACT_DOTA_CAST_ALACRITY_ORB      	= 1741 (number)
   ACT_DOTA_CAST_CHAOS_METEOR_ORB  	= 1742 (number)
   ACT_DOTA_CAST_SUN_STRIKE_ORB    	= 1743 (number)
   ACT_DOTA_CAST_FORGE_SPIRIT_ORB  	= 1744 (number)
   ACT_DOTA_CAST_ICE_WALL_ORB      	= 1745 (number)
   ACT_DOTA_CAST_DEAFENING_BLAST_ORB	= 1746 (number)
   ACT_DOTA_NOTICE                 	= 1747 (number)
   ACT_DOTA_CAST_ABILITY_2_ALLY    	= 1748 (number)
   ACT_DOTA_SHUFFLE_L              	= 1749 (number)
   ACT_DOTA_SHUFFLE_R              	= 1750 (number)
   ACT_DOTA_OVERRIDE_LOADOUT       	= 1751 (number)
   ACT_DOTA_TAUNT_SPECIAL          	= 1752 (number)
   ACT_DOTA_TELEPORT_START         	= 1753 (number)
   ACT_DOTA_GENERIC_CHANNEL_1_START	= 1754 (number)
   ACT_DOTA_CUSTOM_TOWER_IDLE_RARE 	= 1755 (number)
   ACT_DOTA_CUSTOM_TOWER_TAUNT     	= 1756 (number)
   ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE 	= 1757 (number)
   ACT_DOTA_ATTACK_SPECIAL         	= 1758 (number)
   ACT_DOTA_TRANSITION_IDLE        	= 1759 (number)
   ACT_DOTA_PIERCE_THE_VEIL        	= 1760 (number)
   CInfoPlayerStartDota            	= table: 0x002c1fc8 (table)
   {
      metatable = table: 0x002a43f8
      {
         IsNull                          	= function: 0x002a4440 (function)
         FDesc                           	= table: 0x002a44b0 (table)
         {
         }
         GetChildren                     	= function: 0x0023f1f0 (function)
         SetParent                       	= function: 0x0023f2a0 (function)
         SetConstraint                   	= function: 0x0023f350 (function)
         EyePosition                     	= function: 0x0023f400 (function)
         SetAngles                       	= function: 0x0023ed80 (function)
         SetAbsAngles                    	= function: 0x0023ee30 (function)
         GetAnglesAsVector               	= function: 0x0023efb8 (function)
         EyeAngles                       	= function: 0x0023f070 (function)
         SetOrigin                       	= function: 0x0023fac0 (function)
         SetLocalAngles                  	= function: 0x0023fb70 (function)
         GetLocalAngles                  	= function: 0x0023fc20 (function)
         SetLocalOrigin                  	= function: 0x0023fcd0 (function)
         GetLocalOrigin                  	= function: 0x0023fd80 (function)
         TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
         TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
         SetForwardVector                	= function: 0x0023ffb0 (function)
         GetBoundingMins                 	= function: 0x00240068 (function)
         GetBoundingMaxs                 	= function: 0x00240118 (function)
         GetBounds                       	= function: 0x002401c8 (function)
         GetAngularVelocity              	= function: 0x00240278 (function)
         SetAngularVelocity              	= function: 0x0023f4b0 (function)
         AddEffects                      	= function: 0x0023f568 (function)
         RemoveEffects                   	= function: 0x0023f618 (function)
         Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
         Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
         Attribute_SetIntValue           	= function: 0x0023f878 (function)
         Attribute_GetIntValue           	= function: 0x0023f930 (function)
         HasAttribute                    	= function: 0x0023f9e8 (function)
         DeleteAttribute                 	= function: 0x00240f00 (function)
         ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
         GetOwner                        	= function: 0x00241070 (function)
         SetOwner                        	= function: 0x00241120 (function)
         SetEntityName                   	= function: 0x002411d0 (function)
         GetMass                         	= function: 0x00241280 (function)
         SetMass                         	= function: 0x00241300 (function)
         GetSpawnGroupHandle             	= function: 0x00241380 (function)
         GetAbsOrigin                    	= function: 0x00241438 (function)
         GetAngles                       	= function: 0x002414e8 (function)
         GetAbsScale                     	= function: 0x00241598 (function)
         SetAbsScale                     	= function: 0x00241648 (function)
         GetLocalScale                   	= function: 0x002416f8 (function)
         SetLocalScale                   	= function: 0x002417a8 (function)
         SetAbsOrigin                    	= function: 0x00241858 (function)
         GetCenter                       	= function: 0x00241908 (function)
         GetTeamNumber                   	= function: 0x002419b8 (function)
         GetTeam                         	= function: 0x00241a68 (function)
         SetTeam                         	= function: 0x00241ae8 (function)
         FollowEntity                    	= function: 0x00241b68 (function)
         FollowEntityMerge               	= function: 0x00241c18 (function)
         Trigger                         	= function: 0x00241cd0 (function)
         SetContextThink                 	= function: 0x00241d78 (function)
         SetContext                      	= function: 0x00241e28 (function)
         SetContextNum                   	= function: 0x00240330 (function)
         GetContext                      	= function: 0x002403e0 (function)
         GatherCriteria                  	= function: 0x00240490 (function)
         TakeDamage                      	= function: 0x00240540 (function)
         IsAlive                         	= function: 0x002405f0 (function)
         IsPlayerPawn                    	= function: 0x00240698 (function)
         IsPlayerController              	= function: 0x00240748 (function)
         IsNPC                           	= function: 0x00240800 (function)
         IsDOTANPC                       	= function: 0x002408a8 (function)
         GetMaxHealth                    	= function: 0x00240958 (function)
         SetMaxHealth                    	= function: 0x00240a08 (function)
         SetHealth                       	= function: 0x00240ab8 (function)
         GetHealth                       	= function: 0x00240b68 (function)
         SetGravity                      	= function: 0x00240c18 (function)
         SetFriction                     	= function: 0x00240cc8 (function)
         SetVelocity                     	= function: 0x00240d78 (function)
         GetLocalVelocity                	= function: 0x00240e28 (function)
         GetVelocity                     	= function: 0x002436a8 (function)
         ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
         GetLocalAngularVelocity         	= function: 0x002438d8 (function)
         GetBaseVelocity                 	= function: 0x00243990 (function)
         OverrideFriction                	= function: 0x00243a40 (function)
         EmitSound                       	= function: 0x00243af8 (function)
         EmitSoundParams                 	= function: 0x00243ba8 (function)
         StopSound                       	= function: 0x00243c58 (function)
         GetSoundDuration                	= function: 0x00243d08 (function)
         PrecacheScriptSound             	= function: 0x00243dc0 (function)
         IsPlayer                        	= function: 0x00243e78 (function)
         GetOrigin                       	= function: 0x00243f28 (function)
         IsNull                          	= function: 0x0023e670 (function)
         SetThink                        	= function: 0x00308700 (function)
         FDesc                           	= table: 0x0023e6e0 (table)
         {
            GetChildren                     	= handle GetChildren()
Get the entities parented to this entity. (userdata)
            SetParent                       	= void SetParent(handle hParent, string pAttachmentname)
Set the parent for this entity. (userdata)
            SetConstraint                   	= void SetConstraint(Vector vPos)
Set the position of the constraint. (userdata)
            EyePosition                     	= Vector EyePosition()
Get vector to eye position - absolute coords. (userdata)
            SetAngles                       	= void SetAngles(float fPitch, float fYaw, float fRoll)
Set entity pitch, yaw, roll by component. (userdata)
            SetAbsAngles                    	= void SetAbsAngles(float fPitch, float fYaw, float fRoll)
Set entity pitch, yaw, roll by component. (userdata)
            GetAnglesAsVector               	= Vector GetAnglesAsVector()
Get entity pitch, yaw, roll as a vector. (userdata)
            EyeAngles                       	= QAngle EyeAngles()
Get the qangles that this entity is looking at. (userdata)
            SetOrigin                       	= void SetOrigin(Vector v)
 (userdata)
            SetLocalAngles                  	= void SetLocalAngles(float fPitch, float fYaw, float fRoll)
Set entity local pitch, yaw, roll by component (userdata)
            GetLocalAngles                  	= QAngle GetLocalAngles()
Get entity local pitch, yaw, roll as a QAngle (userdata)
            SetLocalOrigin                  	= void SetLocalOrigin(Vector origin)
Set entity local origin from a Vector (userdata)
            GetLocalOrigin                  	= Vector GetLocalOrigin()
Get entity local origin as a Vector (userdata)
            TransformPointEntityToWorld     	= Vector TransformPointEntityToWorld(Vector vPoint)
Returns the input Vector transformed from entity to world space (userdata)
            TransformPointWorldToEntity     	= Vector TransformPointWorldToEntity(Vector vPoint)
Returns the input Vector transformed from world to entity space (userdata)
            SetForwardVector                	= void SetForwardVector(Vector v)
Set the orientation of the entity to have this forward vector. (userdata)
            GetBoundingMins                 	= Vector GetBoundingMins()
Get a vector containing min bounds, centered on object. (userdata)
            GetBoundingMaxs                 	= Vector GetBoundingMaxs()
Get a vector containing max bounds, centered on object. (userdata)
            GetBounds                       	= table GetBounds()
Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object. (userdata)
            GetAngularVelocity              	= Vector GetAngularVelocity()
Get the local angular velocity - returns a vector of pitch,yaw,roll (userdata)
            SetAngularVelocity              	= void SetAngularVelocity(float pitchVel, float yawVel, float rollVel)
Set the local angular velocity - takes float pitch,yaw,roll velocities (userdata)
            AddEffects                      	= void AddEffects(int nFlags)
AddEffects( int ): Adds the render effect flag. (userdata)
            RemoveEffects                   	= void RemoveEffects(int nFlags)
RemoveEffects( int ): Removes the render effect flag. (userdata)
            Attribute_SetFloatValue         	= void Attribute_SetFloatValue(string pName, float flValue)
Set float value for an entity attribute. (userdata)
            Attribute_GetFloatValue         	= float Attribute_GetFloatValue(string pName, float flDefault)
Get float value for an entity attribute. (userdata)
            Attribute_SetIntValue           	= void Attribute_SetIntValue(string pName, int nValue)
Set int value for an entity attribute. (userdata)
            Attribute_GetIntValue           	= int Attribute_GetIntValue(string pName, int nDefault)
Get int value for an entity attribute. (userdata)
            HasAttribute                    	= bool HasAttribute(string pName)
See if an entity has a particular attribute. (userdata)
            DeleteAttribute                 	= void DeleteAttribute(string pName)
Delete an entity attribute. (userdata)
            ValidatePrivateScriptScope      	= void ValidatePrivateScriptScope()
Validates the private script scope and creates it if one doesn't exist. (userdata)
            GetOwner                        	= handle GetOwner()
Gets this entity's owner (userdata)
            SetOwner                        	= void SetOwner(handle pOwner)
Sets this entity's owner (userdata)
            SetEntityName                   	= void SetEntityName(string pName)
Set the name of an entity. (userdata)
            GetMass                         	= float GetMass()
Get the mass of an entity. (returns 0 if it doesn't have a physics object) (userdata)
            SetMass                         	= void SetMass(float flMass)
Set the mass of an entity. (does nothing if it doesn't have a physics object) (userdata)
            GetSpawnGroupHandle             	= int GetSpawnGroupHandle()
Returns the spawn group handle of this entity (userdata)
            GetAbsOrigin                    	= Vector GetAbsOrigin()
 (userdata)
            GetAngles                       	= QAngle GetAngles()
 (userdata)
            GetAbsScale                     	= float GetAbsScale()
 (userdata)
            SetAbsScale                     	= void SetAbsScale(float flScale)
 (userdata)
            GetLocalScale                   	= float GetLocalScale()
 (userdata)
            SetLocalScale                   	= void SetLocalScale(float flScale)
 (userdata)
            SetAbsOrigin                    	= void SetAbsOrigin(Vector origin)
 (userdata)
            GetCenter                       	= Vector GetCenter()
Get vector to center of object - absolute coords (userdata)
            GetTeamNumber                   	= int GetTeamNumber()
Get the team number of this entity. (userdata)
            GetTeam                         	= int GetTeam()
Get the team number of this entity. (userdata)
            SetTeam                         	= void SetTeam(int iTeamNum)
 (userdata)
            FollowEntity                    	= void FollowEntity(handle hEnt, bool bBoneMerge)
hEntity to follow, bool bBoneMerge (userdata)
            FollowEntityMerge               	= void FollowEntityMerge(handle hEnt, string pszBoneOrAttachName)
hEntity to follow, string BoneOrAttachName (userdata)
            Trigger                         	= void Trigger()
Fires off this entity's OnTrigger responses. (userdata)
            SetContextThink                 	= void SetContextThink(string pszContextName, handle hThinkFunc, float flInterval)
Set a think function on this entity. (userdata)
            SetContext                      	= void SetContext(string pName, string pValue, float duration)
SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever'). (userdata)
            SetContextNum                   	= void SetContextNum(string pName, float fValue, float duration)
SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever'). (userdata)
            GetContext                      	= table GetContext(string name)
GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found). (userdata)
            GatherCriteria                  	= void GatherCriteria(handle hResult)
Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks. (userdata)
            TakeDamage                      	= int TakeDamage(handle hInfo)
Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object. (userdata)
            IsAlive                         	= bool IsAlive()
Is this entity alive? (userdata)
            IsPlayerPawn                    	= bool IsPlayerPawn()
Is this entity a player pawn? (userdata)
            IsPlayerController              	= bool IsPlayerController()
Is this entity a player controller? (userdata)
            IsNPC                           	= bool IsNPC()
Is this entity an CAI_BaseNPC? (userdata)
            IsDOTANPC                       	= bool IsDOTANPC()
Is this entity a Dota NPC? (userdata)
            GetMaxHealth                    	= int GetMaxHealth()
Get the maximum health of this entity. (userdata)
            SetMaxHealth                    	= void SetMaxHealth(int amt)
Set the maximum health of this entity. (userdata)
            SetHealth                       	= void SetHealth(int nHealth)
Set the health of this entity. (userdata)
            GetHealth                       	= int GetHealth()
Get the health of this entity. (userdata)
            SetGravity                      	= void SetGravity(float flGravity)
Set PLAYER gravity, ignored for objects. (userdata)
            SetFriction                     	= void SetFriction(float flFriction)
Set PLAYER friction, ignored for objects. (userdata)
            SetVelocity                     	= void SetVelocity(Vector vecVelocity)
 (userdata)
            GetLocalVelocity                	= Vector GetLocalVelocity()
Get Entity relative velocity. (userdata)
            GetVelocity                     	= Vector GetVelocity()
 (userdata)
            ApplyAbsVelocityImpulse         	= void ApplyAbsVelocityImpulse(Vector vecImpulse)
Apply a Velocity Impulse (userdata)
            ApplyLocalAngularVelocityImpulse	= void ApplyLocalAngularVelocityImpulse(Vector angImpulse)
Apply an Ang Velocity Impulse (userdata)
            GetLocalAngularVelocity         	= QAngle GetLocalAngularVelocity()
Maybe local angvel (userdata)
            GetBaseVelocity                 	= Vector GetBaseVelocity()
Get Base? velocity. (userdata)
            OverrideFriction                	= void OverrideFriction(float duration, float friction)
Takes duration, value for a temporary override. (userdata)
            EmitSound                       	= void EmitSound(string soundname)
Plays a sound from this entity. (userdata)
            EmitSoundParams                 	= void EmitSoundParams(string soundname, int nPitch, float flVolume, float flDelay)
Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0. (userdata)
            StopSound                       	= void StopSound(string soundname)
Stops a named sound playing from this entity. (userdata)
            GetSoundDuration                	= float GetSoundDuration(string soundname, string actormodel)
Returns float duration of the sound. Takes soundname and optional actormodelname. (userdata)
            PrecacheScriptSound             	= void PrecacheScriptSound(string soundname)
Precache a sound for later playing. (userdata)
            IsPlayer                        	= bool IsPlayer()
Back compat: Is this entity a player pawn *or* controller? (userdata)
            GetOrigin                       	= Vector GetOrigin()
 (userdata)
            Kill                            	= void Kill()
 (userdata)
            GetForwardVector                	= Vector GetForwardVector()
Get the forward vector of the entity. (userdata)
            GetRightVector                  	= Vector GetRightVector()
Get the right vector of the entity. WARNING: This produces a left-handed coordinate system. Use GetLeftVector instead (which is aligned with the y axis of the entity). (userdata)
            GetLeftVector                   	= Vector GetLeftVector()
Get the left vector of the entity. (userdata)
            GetUpVector                     	= Vector GetUpVector()
Get the up vector of the entity. (userdata)
            GetModelName                    	= string GetModelName()
Returns the name of the model. (userdata)
            GetMoveParent                   	= handle GetMoveParent()
If in hierarchy, retrieves the entity's parent. (userdata)
            GetRootMoveParent               	= handle GetRootMoveParent()
If in hierarchy, walks up the hierarchy to find the root parent. (userdata)
            FirstMoveChild                  	= handle FirstMoveChild()
 (userdata)
            NextMovePeer                    	= handle NextMovePeer()
 (userdata)
            GetOwnerEntity                  	= handle GetOwnerEntity()
Get the owner entity, if there is one (userdata)
         }
         StopThink                       	= function: 0x00308730 (function)
         IsInstance                      	= function: 0x00308760 (function)
         IsBaseNPC                       	= function: 0x00337ae8 (function)
         Kill                            	= function: 0x0023e728 (function)
         GetForwardVector                	= function: 0x0023e810 (function)
         GetRightVector                  	= function: 0x0023e8c8 (function)
         GetLeftVector                   	= function: 0x0023ea68 (function)
         GetUpVector                     	= function: 0x0023eae8 (function)
         GetModelName                    	= function: 0x0023ea00 (function)
         GetMoveParent                   	= function: 0x0023ecd0 (function)
         GetRootMoveParent               	= function: 0x0023e978 (function)
         FirstMoveChild                  	= function: 0x0023ef08 (function)
         NextMovePeer                    	= function: 0x0023eb98 (function)
         GetOwnerEntity                  	= function: 0x0023f140 (function)
         IsNull                          	= function: 0x0023d458 (function)
         FireOutput                      	= function: 0x0023d570 (function)
         RemoveSelf                      	= function: 0x0023d688 (function)
         GetIntAttr                      	= function: 0x0023d738 (function)
         SetIntAttr                      	= function: 0x0023d870 (function)
         FDesc                           	= table: 0x0023d4f0 (table)
         {
            FireOutput                      	= void FireOutput(string, handle, handle, table, float)
Fire an entity output (userdata)
            RemoveSelf                      	= void RemoveSelf()
Delete this entity (userdata)
            GetIntAttr                      	= int GetIntAttr(string)
Get Integer Attribute (userdata)
            SetIntAttr                      	= void SetIntAttr(string, int)
Set Integer Attribute (userdata)
            GetName                         	= string GetName()
Get the entity name (userdata)
            GetDebugName                    	= string GetDebugName()
Get the entity name w/help if not defined (i.e. classname/etc) (userdata)
            ConnectOutput                   	= void ConnectOutput(string, string)
Adds an I/O connection that will call the named function on this entity when the specified output fires. (userdata)
            RedirectOutput                  	= void RedirectOutput(string, string, handle)
Adds an I/O connection that will call the named function on the passed entity when the specified output fires. (userdata)
            DisconnectOutput                	= void DisconnectOutput(string, string)
Removes a connected script function from an I/O event on this entity. (userdata)
            DisconnectRedirectedOutput      	= void DisconnectRedirectedOutput(string, string, handle)
Removes a connected script function from an I/O event on the passed entity. (userdata)
            GetEntityIndex                  	= int GetEntityIndex()
 (userdata)
            entindex                        	= int entindex()
 (userdata)
            GetClassname                    	= string GetClassname()
 (userdata)
            GetEntityHandle                 	= ehandle GetEntityHandle()
Get the entity as an EHANDLE (userdata)
            Destroy                         	= void Destroy()
 (userdata)
            GetPublicScriptScope            	= handle GetPublicScriptScope()
Retrieve the public script-side data associated with an entity (userdata)
            GetOrCreatePublicScriptScope    	= handle GetOrCreatePublicScriptScope()
Retrieve, creating if necessary, the public script-side data associated with an entity (userdata)
            GetPrivateScriptScope           	= handle GetPrivateScriptScope()
Retrieve the private per-instance script-side data associated with an entity (userdata)
            GetOrCreatePrivateScriptScope   	= handle GetOrCreatePrivateScriptScope()
Retrieve, creating if necessary, the private per-instance script-side data associated with an entity (userdata)
         }
         GetDebugName                    	= function: 0x0023d5e0 (function)
         ConnectOutput                   	= function: 0x0023dad0 (function)
         RedirectOutput                  	= function: 0x0023d7a8 (function)
         DisconnectOutput                	= function: 0x00214310 (function)
         DisconnectRedirectedOutput      	= function: 0x00214988 (function)
         GetEntityIndex                  	= function: 0x0023d998 (function)
         entindex                        	= function: 0x0023da18 (function)
         GetClassname                    	= function: 0x0023de90 (function)
         GetEntityHandle                 	= function: 0x0023df10 (function)
         Destroy                         	= function: 0x0023df90 (function)
         GetPublicScriptScope            	= function: 0x0023db80 (function)
         GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
         GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
         GetName                         	= function: 0x0023d8f0 (function)
      }
      IsNull                          	= function: 0x002c2010 (function)
      FDesc                           	= table: 0x002c2080 (table)
      {
         IsEnabled                       	= bool IsEnabled()
Returns whether the object is currently active (userdata)
         SetEnabled                      	= void SetEnabled(bool bEnabled)
Enable or disable the obstruction (userdata)
      }
      IsEnabled                       	= function: 0x00298298 (function)
      SetEnabled                      	= function: 0x002983b0 (function)
   }
   CDOTA_BaseNPC_Watch_Tower       	= table: 0x002c26d0 (table)
   {
      metatable = table: 0x002baef8
      {
         IsNull                          	= function: 0x002baf40 (function)
         FDesc                           	= table: 0x002bafb0 (table)
         {
            GetInvulnCount                  	= int GetInvulnCount()
Get the invulnerability count for a building. (userdata)
            SetInvulnCount                  	= void SetInvulnCount(int nInvulnCount)
Set the invulnerability counter of this building. (userdata)
         }
         GetInvulnCount                  	= function: 0x002baff8 (function)
         SetInvulnCount                  	= function: 0x002bb110 (function)
         SetAggroTarget                  	= function: 0x00259348 (function)
         AlertNearbyUnits                	= function: 0x002593f8 (function)
         GetAdditionalBattleMusicWeight  	= function: 0x002594b0 (function)
         SetAdditionalBattleMusicWeight  	= function: 0x00259570 (function)
         GetForceAttackTarget            	= function: 0x00259630 (function)
         SetForceAttackTarget            	= function: 0x002596e8 (function)
         SetForceAttackTargetAlly        	= function: 0x002597a0 (function)
         IsChanneling                    	= function: 0x00259860 (function)
         Interrupt                       	= function: 0x00259910 (function)
         InterruptChannel                	= function: 0x002599c0 (function)
         InterruptMotionControllers      	= function: 0x00259a78 (function)
         RemoveHorizontalMotionController	= function: 0x00259b38 (function)
         RemoveVerticalMotionController  	= function: 0x00259c00 (function)
         IsCurrentlyVerticalMotionControlled	= function: 0x00259cc0 (function)
         IsCurrentlyHorizontalMotionControlled	= function: 0x00259d88 (function)
         GetRangeToUnit                  	= function: 0x00259e50 (function)
         MoveToTargetToAttack            	= function: 0x0029e200 (function)
         PatrolToPosition                	= function: 0x0029e2b8 (function)
         DropItemAtPosition              	= function: 0x0029e370 (function)
         MoveToNPCToGiveItem             	= function: 0x0029e428 (function)
         PickupDroppedItem               	= function: 0x0029e4e0 (function)
         PickupRune                      	= function: 0x0029e598 (function)
         SellItem                        	= function: 0x0029e648 (function)
         DisassembleItem                 	= function: 0x0029e6f8 (function)
         EjectItemFromStash              	= function: 0x0029e7a8 (function)
         RemoveItem                      	= function: 0x0029e860 (function)
         TakeItem                        	= function: 0x0029e910 (function)
         SetCanSellItems                 	= function: 0x0029e9c0 (function)
         CanSellItems                    	= function: 0x0029ea70 (function)
         AddItemByName                   	= function: 0x0029eb20 (function)
         AddItem                         	= function: 0x0029ebd0 (function)
         AddAbility                      	= function: 0x0029ec50 (function)
         SwapItems                       	= function: 0x0029ed00 (function)
         RemoveAbility                   	= function: 0x0029edb0 (function)
         HasAbility                      	= function: 0x0029ee60 (function)
         RemoveAbilityByHandle           	= function: 0x0029ef10 (function)
         GetStatusResistance             	= function: 0x0029efc8 (function)
         GetEvasion                      	= function: 0x0029f080 (function)
         GetSpellAmplification           	= function: 0x0029f130 (function)
         IsInRangeOfShop                 	= function: 0x0029d540 (function)
         SetBaseMaxHealth                	= function: 0x0029d5f0 (function)
         GetBaseMaxHealth                	= function: 0x0029d6a8 (function)
         ModifyHealth                    	= function: 0x0029d760 (function)
         SetMana                         	= function: 0x0029d810 (function)
         SetMaxMana                      	= function: 0x0029d890 (function)
         GetMana                         	= function: 0x0029d940 (function)
         GetMaxMana                      	= function: 0x0029d9c0 (function)
         GetManaPercent                  	= function: 0x0029da70 (function)
         Script_ReduceMana               	= function: 0x0029db20 (function)
         GiveMana                        	= function: 0x0029dbd8 (function)
         SpendMana                       	= function: 0x0029dc88 (function)
         Heal                            	= function: 0x0029dd38 (function)
         AddNoDraw                       	= function: 0x002a31a8 (function)
         RemoveNoDraw                    	= function: 0x002a3258 (function)
         GetCreationTime                 	= function: 0x002a3128 (function)
         IsNull                          	= function: 0x00233fb8 (function)
         Kill                            	= function: 0x002a0e50 (function)
         SetOrigin                       	= function: 0x002a7160 (function)
         SetHealthBarOffsetOverride      	= function: 0x00234070 (function)
         GetBaseHealthBarOffset          	= function: 0x00234198 (function)
         SetNeverMoveToClearSpace        	= function: 0x0029bb30 (function)
         GetNeverMoveToClearSpace        	= function: 0x0029bce0 (function)
         IsIdle                          	= function: 0x0029bda0 (function)
         GetLastIdleChangeTime           	= function: 0x0029bc78 (function)
         FaceTowards                     	= function: 0x0029bf28 (function)
         StopFacing                      	= function: 0x0029bbf0 (function)
         SpeakConcept                    	= function: 0x0029c130 (function)
         QueueConcept                    	= function: 0x0029be20 (function)
         QueueTeamConcept                	= function: 0x0029c368 (function)
         QueueTeamConceptNoSpectators    	= function: 0x0029c420 (function)
         SetInitialGoalEntity            	= function: 0x0029c4e0 (function)
         GetInitialGoalEntity            	= function: 0x0029c598 (function)
         SetMustReachEachGoalEntity      	= function: 0x0029c650 (function)
         GetMustReachEachGoalEntity      	= function: 0x0029bfa8 (function)
         SetInitialGoalPosition          	= function: 0x0029c068 (function)
         GetInitialGoalPosition          	= function: 0x0029c1e0 (function)
         CalculateGenericBonuses         	= function: 0x0029c298 (function)
         ChangeTeam                      	= function: 0x0029cd20 (function)
         GetIdealSpeed                   	= function: 0x0029cdd0 (function)
         GetIdealSpeedNoSlows            	= function: 0x0029ce80 (function)
         GetLevel                        	= function: 0x0029cf38 (function)
         IsAncient                       	= function: 0x0029cfe8 (function)
         IsBossCreature                  	= function: 0x0029d098 (function)
         IsNeutralUnitType               	= function: 0x0029d148 (function)
         IsSummoned                      	= function: 0x0029d200 (function)
         GetCloneSource                  	= function: 0x0029d2b0 (function)
         IsClone                         	= function: 0x0029d360 (function)
         SetFollowRange                  	= function: 0x0029d3e0 (function)
         GetHullRadius                   	= function: 0x0029d490 (function)
         GetCollisionPadding             	= function: 0x0029c710 (function)
         GetPaddedCollisionRadius        	= function: 0x0029c7c8 (function)
         SetHullRadius                   	= function: 0x0029c888 (function)
         GetHealthPercent                	= function: 0x0029c938 (function)
         GetHealthDeficit                	= function: 0x0029ca58 (function)
         GetLastDamageTime               	= function: 0x0029cb10 (function)
         MoveToPosition                  	= function: 0x0029cbc8 (function)
         MoveToPositionAggressive        	= function: 0x0029cc78 (function)
         MoveToNPC                       	= function: 0x0029e150 (function)
         IsAlive                         	= function: 0x002a1aa0 (function)
         IsBaseNPC                       	= function: 0x00337b78 (function)
         IsHardDisarmed                  	= function: 0x00337b18 (function)
         IsSoftDisarmed                  	= function: 0x00337b48 (function)
         SetCustomHealthLabel            	= function: 0x002a3740 (function)
         SetShouldDoFlyHeightVisual      	= function: 0x002a3680 (function)
         SetCursorCastTarget             	= function: 0x002a35c8 (function)
         SetRevealRadius                 	= function: 0x002a3518 (function)
         IsMoving                        	= function: 0x002a3468 (function)
         RemoveAllModifiers              	= function: 0x002a33b0 (function)
         Purge                           	= function: 0x002a3308 (function)
         AngerNearbyUnits                	= function: 0x002a3070 (function)
         RespawnUnit                     	= function: 0x002a2fc0 (function)
         SetUnitCanRespawn               	= function: 0x002a2f08 (function)
         UnitCanRespawn                  	= function: 0x002a2e58 (function)
         NotifyWearablesOfModelChange    	= function: 0x002a2d98 (function)
         WasKilledPassively              	= function: 0x002a2ce0 (function)
         GetModelRadius                  	= function: 0x002a2c30 (function)
         DestroyAllSpeechBubbles         	= function: 0x002a2b78 (function)
         AddSpeechBubble                 	= function: 0x002a2ac8 (function)
         SetOriginalModel                	= function: 0x002a2a10 (function)
         ManageModelChanges              	= function: 0x002a2958 (function)
         IsPhantomBlocker                	= function: 0x002a28a0 (function)
         MakePhantomBlocker              	= function: 0x0025af90 (function)
         BoundingRadius2D                	= function: 0x0025aed8 (function)
         MakeVisibleDueToAttack          	= function: 0x0025ae20 (function)
         MakeVisibleToTeam               	= function: 0x0025ad68 (function)
         GetOpposingTeamNumber           	= function: 0x0025acb0 (function)
         CanBeSeenByAnyOpposingTeam      	= function: 0x0025abf0 (function)
         IsOpposingTeam                  	= function: 0x0025ab40 (function)
         DropItemAtPositionImmediate     	= function: 0x0025aa80 (function)
         SetModifierStackCount           	= function: 0x0025a9c8 (function)
         GetModifierStackCount           	= function: 0x0025a910 (function)
         HasModifier                     	= function: 0x0025a860 (function)
         FindAllModifiersByName          	= function: 0x0025a7a8 (function)
         FindAllModifiers                	= function: 0x0025a6f0 (function)
         FindModifierByNameAndCaster     	= function: 0x0025a630 (function)
         FindModifierByName              	= function: 0x0025a578 (function)
         RemoveModifierByNameAndCaster   	= function: 0x0025a4b8 (function)
         RemoveAllModifiersOfName        	= function: 0x0025a3f8 (function)
         RemoveModifierByName            	= function: 0x0025a340 (function)
         GetModifierNameByIndex          	= function: 0x0025a288 (function)
         GetModifierCount                	= function: 0x0025a1d0 (function)
         AddNewModifier                  	= function: 0x0025a120 (function)
         SetIdleAcquire                  	= function: 0x0025a070 (function)
         ShouldIdleAcquire               	= function: 0x00259fb8 (function)
         IsPositionInRange               	= function: 0x00259f00 (function)
         FDesc                           	= table: 0x00234028 (table)
         {
            SetAggroTarget                  	= void SetAggroTarget(handle hAggroTarget)
Set this unit's aggro target to a specified unit. (userdata)
            AlertNearbyUnits                	= void AlertNearbyUnits(handle hAttacker, handle hAbility)
 (userdata)
            GetAdditionalBattleMusicWeight  	= float GetAdditionalBattleMusicWeight()
Combat involving this creature will have this weight added to the music calcuations. (userdata)
            SetAdditionalBattleMusicWeight  	= void SetAdditionalBattleMusicWeight(float flWeight)
Combat involving this creature will have this weight added to the music calcuations. (userdata)
            GetForceAttackTarget            	= handle GetForceAttackTarget()
 (userdata)
            SetForceAttackTarget            	= void SetForceAttackTarget(handle hNPC)
 (userdata)
            SetForceAttackTargetAlly        	= void SetForceAttackTargetAlly(handle hNPC)
 (userdata)
            IsChanneling                    	= bool IsChanneling()
Is this unit currently channeling a spell? (userdata)
            Interrupt                       	= void Interrupt()
 (userdata)
            InterruptChannel                	= void InterruptChannel()
 (userdata)
            InterruptMotionControllers      	= void InterruptMotionControllers(bool bFindClearSpace)
 (userdata)
            RemoveHorizontalMotionController	= void RemoveHorizontalMotionController(handle hBuff)
 (userdata)
            RemoveVerticalMotionController  	= void RemoveVerticalMotionController(handle hBuff)
 (userdata)
            IsCurrentlyVerticalMotionControlled	= bool IsCurrentlyVerticalMotionControlled()
 (userdata)
            IsCurrentlyHorizontalMotionControlled	= bool IsCurrentlyHorizontalMotionControlled()
 (userdata)
            GetRangeToUnit                  	= float GetRangeToUnit(handle hNPC)
 (userdata)
            MoveToTargetToAttack            	= void MoveToTargetToAttack(handle hTarget)
Move to a target to attack. (userdata)
            PatrolToPosition                	= void PatrolToPosition(Vector vDest)
Issue a Patrol-To command. (userdata)
            DropItemAtPosition              	= void DropItemAtPosition(Vector vDest, handle hItem)
Drop an item at a given point. (userdata)
            MoveToNPCToGiveItem             	= void MoveToNPCToGiveItem(handle hNPC, handle hItem)
Give an item to another unit. (userdata)
            PickupDroppedItem               	= void PickupDroppedItem(handle hItem)
Pick up a dropped item. (userdata)
            PickupRune                      	= void PickupRune(handle hItem)
Pick up a rune. (userdata)
            SellItem                        	= void SellItem(handle hItem)
Sells the passed item in this unit's inventory. (userdata)
            DisassembleItem                 	= void DisassembleItem(handle hItem)
Disassemble the passed item in this unit's inventory. (userdata)
            EjectItemFromStash              	= void EjectItemFromStash(handle hItem)
Drops the selected item out of this unit's stash. (userdata)
            RemoveItem                      	= void RemoveItem(handle hItem)
Removes the passed item from this unit's inventory and deletes it. (userdata)
            TakeItem                        	= handle TakeItem(handle hItem)
Removed the passed item from this unit's inventory. (userdata)
            SetCanSellItems                 	= void SetCanSellItems(bool bCanSell)
Set whether or not this unit is allowed to sell items (bCanSellItems) (userdata)
            CanSellItems                    	= bool CanSellItems()
Query if this unit can sell items. (userdata)
            AddItemByName                   	= handle AddItemByName(string pszItemName)
Add an item to this unit's inventory. (userdata)
            AddItem                         	= handle AddItem(handle hItem)
Add an item to this unit's inventory. (userdata)
            AddAbility                      	= handle AddAbility(string pszAbilityName)
Add an ability to this unit by name. (userdata)
            SwapItems                       	= void SwapItems(int nSlot1, int nSlot2)
Swap the contents of two item slots (slot1, slot2) (userdata)
            RemoveAbility                   	= void RemoveAbility(string pszAbilityName)
Remove an ability from this unit by name. (userdata)
            HasAbility                      	= bool HasAbility(string pszAbilityName)
See whether this unit has an ability by name. (userdata)
            RemoveAbilityByHandle           	= void RemoveAbilityByHandle(handle hAbility)
Remove the passed ability from this unit. (userdata)
            GetStatusResistance             	= float GetStatusResistance()
 (userdata)
            GetEvasion                      	= float GetEvasion()
 (userdata)
            GetSpellAmplification           	= float GetSpellAmplification(bool bBaseOnly)
 (userdata)
            IsInRangeOfShop                 	= bool IsInRangeOfShop(int nShopType, bool bPhysical)
Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear (userdata)
            SetBaseMaxHealth                	= void SetBaseMaxHealth(float flBaseMaxHealth)
Set a new base max health value. (userdata)
            GetBaseMaxHealth                	= float GetBaseMaxHealth()
Gets the base max health value. (userdata)
            ModifyHealth                    	= void ModifyHealth(int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags)
Sets the health to a specific value, with optional flags or inflictors. (userdata)
            SetMana                         	= void SetMana(float flMana)
Set the mana on this unit. (userdata)
            SetMaxMana                      	= void SetMaxMana(float flMaxMana)
Set the maximum mana of this unit. (userdata)
            GetMana                         	= float GetMana()
Get the mana on this unit. (userdata)
            GetMaxMana                      	= float GetMaxMana()
Get the maximum mana of this unit. (userdata)
            GetManaPercent                  	= int GetManaPercent()
Get the percent of mana remaining. (userdata)
            Script_ReduceMana               	= float Script_ReduceMana(float flMana, handle hAbility)
Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent. (userdata)
            GiveMana                        	= void GiveMana(float flMana)
Give mana to this unit, this can be used for mana gained by abilities or item usage. (userdata)
            SpendMana                       	= void SpendMana(float flManaSpent, handle hAbility)
Spend mana from this unit, this can be used for spending mana from abilities or item usage. (userdata)
            Heal                            	= void Heal(float flAmount, handle hInflictor)
Heal this unit. (userdata)
            AddNoDraw                       	= void AddNoDraw()
Adds the no draw flag. (userdata)
            RemoveNoDraw                    	= void RemoveNoDraw()
Remove the no draw flag. (userdata)
            GetCreationTime                 	= float GetCreationTime()
 (userdata)
            Kill                            	= void Kill(handle hAbility, handle hAttacker)
Kills this NPC, with the params Ability and Attacker. (userdata)
            SetOrigin                       	= void SetOrigin(Vector vLocation)
Set the unit's origin. (userdata)
            SetHealthBarOffsetOverride      	= void SetHealthBarOffsetOverride(int nOffset)
 (userdata)
            GetBaseHealthBarOffset          	= int GetBaseHealthBarOffset()
 (userdata)
            SetNeverMoveToClearSpace        	= void SetNeverMoveToClearSpace(bool neverMoveToClearSpace)
If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
            GetNeverMoveToClearSpace        	= bool GetNeverMoveToClearSpace()
If set to true, we will never attempt to move this unit to clear space, even when it unphases. (userdata)
            IsIdle                          	= bool IsIdle()
Is this creature currently idle? (userdata)
            GetLastIdleChangeTime           	= float GetLastIdleChangeTime()
Get the last game time that this unit switched to/from idle state. (userdata)
            FaceTowards                     	= void FaceTowards(Vector vTarget)
This unit will be set to face the target point. (userdata)
            StopFacing                      	= void StopFacing()
 (userdata)
            SpeakConcept                    	= void SpeakConcept(handle hCriteriaTable)
Speak a response system concept with the TLK_DOTA_CUSTOM concept. (userdata)
            QueueConcept                    	= void QueueConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay. (userdata)
            QueueTeamConcept                	= void QueueTeamConcept(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. (userdata)
            QueueTeamConceptNoSpectators    	= void QueueTeamConceptNoSpectators(float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo)
Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators. (userdata)
            SetInitialGoalEntity            	= void SetInitialGoalEntity(handle hGoal)
Sets the initial waypoint goal for this NPC. (userdata)
            GetInitialGoalEntity            	= handle GetInitialGoalEntity()
Returns the initial waypoint goal for this NPC. (userdata)
            SetMustReachEachGoalEntity      	= void SetMustReachEachGoalEntity(bool must)
Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
            GetMustReachEachGoalEntity      	= bool GetMustReachEachGoalEntity()
Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path. (userdata)
            SetInitialGoalPosition          	= void SetInitialGoalPosition(Vector vPosition)
Set waypoint position for this NPC. (userdata)
            GetInitialGoalPosition          	= Vector GetInitialGoalPosition()
Get waypoint position for this NPC. (userdata)
            CalculateGenericBonuses         	= void CalculateGenericBonuses()
 (userdata)
            ChangeTeam                      	= void ChangeTeam(int iTeamNum)
 (userdata)
            GetIdealSpeed                   	= float GetIdealSpeed()
Returns speed after all modifiers. (userdata)
            GetIdealSpeedNoSlows            	= float GetIdealSpeedNoSlows()
Returns speed after all modifiers, but excluding those that reduce speed. (userdata)
            GetLevel                        	= int GetLevel()
Returns the level of this unit. (userdata)
            IsAncient                       	= bool IsAncient()
Is this unit an Ancient? (userdata)
            IsBossCreature                  	= bool IsBossCreature()
Is this unit a Boss Creature? (used by custom games) (userdata)
            IsNeutralUnitType               	= bool IsNeutralUnitType()
Is this a neutral? (userdata)
            IsSummoned                      	= bool IsSummoned()
Is this unit summoned? (userdata)
            GetCloneSource                  	= handle GetCloneSource()
Get clone source (Meepo Prime, if this is a Meepo) (userdata)
            IsClone                         	= bool IsClone()
Is this unit a clone? (Meepo) (userdata)
            SetFollowRange                  	= void SetFollowRange(float flFollowRange)
 (userdata)
            GetHullRadius                   	= float GetHullRadius()
Get the collision hull radius of this NPC. (userdata)
            GetCollisionPadding             	= float GetCollisionPadding()
Returns the size of the collision padding around the hull. (userdata)
            GetPaddedCollisionRadius        	= float GetPaddedCollisionRadius()
Get the collision hull radius (including padding) of this NPC. (userdata)
            SetHullRadius                   	= void SetHullRadius(float flHullRadius)
Set the collision hull radius of this NPC. (userdata)
            GetHealthPercent                	= int GetHealthPercent()
Get the current health percent of the unit. (userdata)
            GetHealthDeficit                	= int GetHealthDeficit()
Returns integer amount of health missing from max. (userdata)
            GetLastDamageTime               	= float GetLastDamageTime()
Get the last time this NPC took damage (userdata)
            MoveToPosition                  	= void MoveToPosition(Vector vDest)
Issue a Move-To command. (userdata)
            MoveToPositionAggressive        	= void MoveToPositionAggressive(Vector vDest)
Issue an Attack-Move-To command. (userdata)
            MoveToNPC                       	= void MoveToNPC(handle hNPC)
Move to follow a unit. (userdata)
            IsAlive                         	= bool IsAlive()
Is this unit alive? (userdata)
            SetCustomHealthLabel            	= void SetCustomHealthLabel(string pLabel, int r, int g, int b)
 (userdata)
            SetShouldDoFlyHeightVisual      	= void SetShouldDoFlyHeightVisual(bool bShouldVisuallyFly)
 (userdata)
            SetCursorCastTarget             	= void SetCursorCastTarget(handle hEntity)
 (userdata)
            SetRevealRadius                 	= void SetRevealRadius(float revealRadius)
sets the client side map reveal radius for this unit (userdata)
            IsMoving                        	= bool IsMoving()
Is this unit moving? (userdata)
            RemoveAllModifiers              	= void RemoveAllModifiers(int targets, bool bNow, bool bPermanent, bool bDeath)
(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath) (userdata)
            Purge                           	= void Purge(bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions)
(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions) (userdata)
            AngerNearbyUnits                	= void AngerNearbyUnits()
 (userdata)
            RespawnUnit                     	= void RespawnUnit()
Respawns the target unit if it can be respawned. (userdata)
            SetUnitCanRespawn               	= void SetUnitCanRespawn(bool bCanRespawn)
 (userdata)
            UnitCanRespawn                  	= bool UnitCanRespawn()
 (userdata)
            NotifyWearablesOfModelChange    	= void NotifyWearablesOfModelChange(bool bOriginalModel)
 (userdata)
            WasKilledPassively              	= bool WasKilledPassively()
 (userdata)
            GetModelRadius                  	= float GetModelRadius()
 (userdata)
            DestroyAllSpeechBubbles         	= void DestroyAllSpeechBubbles()
 (userdata)
            AddSpeechBubble                 	= void AddSpeechBubble(int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY)
Add a speech bubble(1-4 live at a time) to this NPC. (userdata)
            SetOriginalModel                	= void SetOriginalModel(string pszModelName)
Sets the original model of this entity, which it will tend to fall back to anytime its state changes. (userdata)
            ManageModelChanges              	= void ManageModelChanges()
 (userdata)
            IsPhantomBlocker                	= bool IsPhantomBlocker()
 (userdata)
            MakePhantomBlocker              	= void MakePhantomBlocker()
 (userdata)
            BoundingRadius2D                	= float BoundingRadius2D()
 (userdata)
            MakeVisibleDueToAttack          	= void MakeVisibleDueToAttack(int iTeam, float flRadius)
 (userdata)
            MakeVisibleToTeam               	= void MakeVisibleToTeam(int iTeam, float flDuration)
 (userdata)
            GetOpposingTeamNumber           	= int GetOpposingTeamNumber()
 (userdata)
            CanBeSeenByAnyOpposingTeam      	= bool CanBeSeenByAnyOpposingTeam()
 (userdata)
            IsOpposingTeam                  	= bool IsOpposingTeam(int nTeam)
 (userdata)
            DropItemAtPositionImmediate     	= void DropItemAtPositionImmediate(handle hItem, Vector vPosition)
Immediately drop a carried item at a given position. (userdata)
            SetModifierStackCount           	= void SetModifierStackCount(string pszScriptName, handle hCaster, int nStackCount)
Sets the stack count of a given modifier. (userdata)
            GetModifierStackCount           	= int GetModifierStackCount(string pszScriptName, handle hCaster)
Gets the stack count of a given modifier. (userdata)
            HasModifier                     	= bool HasModifier(string pszScriptName)
Sees if this unit has a given modifier. (userdata)
            FindAllModifiersByName          	= table FindAllModifiersByName(string pszScriptName)
Returns a table of all of the modifiers on the NPC with the passed name (modifierName) (userdata)
            FindAllModifiers                	= table FindAllModifiers()
Returns a table of all of the modifiers on the NPC. (userdata)
            FindModifierByNameAndCaster     	= handle FindModifierByNameAndCaster(string pszScriptName, handle hCaster)
Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster ) (userdata)
            FindModifierByName              	= handle FindModifierByName(string pszScriptName)
Return a handle to the modifier of the given name if found, else nil (string Name ) (userdata)
            RemoveModifierByNameAndCaster   	= void RemoveModifierByNameAndCaster(string pszScriptName, handle hCaster)
Removes a modifier that was cast by the given caster. (userdata)
            RemoveAllModifiersOfName        	= void RemoveAllModifiersOfName(string pszScriptName)
Removes all copies of a modifier. (userdata)
            RemoveModifierByName            	= void RemoveModifierByName(string pszScriptName)
Removes a modifier. (userdata)
            GetModifierNameByIndex          	= string GetModifierNameByIndex(int nIndex)
Get a modifier name by index. (userdata)
            GetModifierCount                	= int GetModifierCount()
How many modifiers does this unit have? (userdata)
            AddNewModifier                  	= handle AddNewModifier(handle hCaster, handle hAbility, string pszScriptName, handle hModifierTable)
Add a modifier to this unit. (userdata)
            SetIdleAcquire                  	= void SetIdleAcquire(bool bIdleAcquire)
 (userdata)
            ShouldIdleAcquire               	= bool ShouldIdleAcquire()
 (userdata)
            IsPositionInRange               	= bool IsPositionInRange(Vector vPosition, float flRange)
 (userdata)
            HealWithParams                  	= void HealWithParams(float flAmount, handle hInflictor, bool bLifesteal, bool bAmplify, handle hSource, bool bSpellLifesteal)
Heal this unit (with more parameters) (userdata)
            GetAcquisitionRange             	= float GetAcquisitionRange()
Gets the range at which this unit will auto-acquire. (userdata)
            SetAcquisitionRange             	= void SetAcquisitionRange(int nRange)
 (userdata)
            Script_GetAttackRange           	= float Script_GetAttackRange()
Gets this unit's attack range after all modifiers. (userdata)
            GetAttackRangeBuffer            	= float GetAttackRangeBuffer()
Gets the attack range buffer. (userdata)
            GetBaseAttackRange              	= int GetBaseAttackRange()
 (userdata)
            GetAttackDamage                 	= int GetAttackDamage()
Returns a random integer between the minimum and maximum base damage of the unit. (userdata)
            GetAverageTrueAttackDamage      	= int GetAverageTrueAttackDamage(handle hTarget)
Returns the average value of the minimum and maximum damage values. (userdata)
            SetShouldComputeRemainingPathLength	= void SetShouldComputeRemainingPathLength(bool bCompute)
 (userdata)
            GetRemainingPathLength          	= float GetRemainingPathLength()
 (userdata)
            PerformAttack                   	= void PerformAttack(handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss)
Performs an attack on a target. (userdata)
            IsHero                          	= bool IsHero()
Is this a hero or hero illusion? (userdata)
            IsRealHero                      	= bool IsRealHero()
Is this a real hero? (userdata)
            IsConsideredHero                	= bool IsConsideredHero()
Is this unit a considered a hero for targeting purposes? (userdata)
            IsCreepHero                     	= bool IsCreepHero()
Is this unit a creep hero? (userdata)
            IsOther                         	= bool IsOther()
Is this unit a ward-type unit? (userdata)
            IsTower                         	= bool IsTower()
Is this a tower? (userdata)
            IsBuilding                      	= bool IsBuilding()
Is this unit a building? (userdata)
            IsFort                          	= bool IsFort()
Is this unit an Ancient? (userdata)
            IsBarracks                      	= bool IsBarracks()
Is this unit a Barracks? (userdata)
            IsCreep                         	= bool IsCreep()
Is this unit a creep? (userdata)
            IsCourier                       	= bool IsCourier()
Is this unit a courier? (userdata)
            IsBoss                          	= bool IsBoss()
Is this unit a boss? (userdata)
            IsCreature                      	= bool IsCreature()
Is this a Creature type NPC? (userdata)
            IsWard                          	= bool IsWard()
Is this a Ward? (userdata)
            IsHeroWard                      	= bool IsHeroWard()
Is this a Hero Ward? (userdata)
            IsShrine                        	= bool IsShrine()
Is this a shrine? (userdata)
            IsPhantom                       	= bool IsPhantom()
Is this a phantom unit? (userdata)
            IsZombie                        	= bool IsZombie()
Is this entity an Undying Zombie? (userdata)
            GetNeutralSpawnerName           	= string GetNeutralSpawnerName()
Get the name of this camp's neutral spawner. (userdata)
            CanEntityBeSeenByMyTeam         	= bool CanEntityBeSeenByMyTeam(handle hEntity)
Check FoW to see if an entity is visible. (userdata)
            GetDayTimeVisionRange           	= int GetDayTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            GetBaseDayTimeVisionRange       	= int GetBaseDayTimeVisionRange()
Returns the vision range before modifiers. (userdata)
            SetDayTimeVisionRange           	= void SetDayTimeVisionRange(int iRange)
Set the base vision range. (userdata)
            GetNightTimeVisionRange         	= int GetNightTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            GetBaseNightTimeVisionRange     	= int GetBaseNightTimeVisionRange()
Returns the vision range after modifiers. (userdata)
            SetNightTimeVisionRange         	= void SetNightTimeVisionRange(int iRange)
Returns the vision range after modifiers. (userdata)
            GetCurrentVisionRange           	= int GetCurrentVisionRange()
Gets the current vision range. (userdata)
            SetDeathXP                      	= void SetDeathXP(int iXPBounty)
Set the XP bounty on this unit. (userdata)
            GetDeathXP                      	= int GetDeathXP()
Get the XP bounty on this unit. (userdata)
            SetMinimumGoldBounty            	= void SetMinimumGoldBounty(int iGoldBountyMin)
Set the minimum gold bounty for this unit. (userdata)
            GetMinimumGoldBounty            	= int GetMinimumGoldBounty()
Get the minimum gold bounty for this unit. (userdata)
            SetMaximumGoldBounty            	= void SetMaximumGoldBounty(int iGoldBountyMax)
Set the maximum gold bounty for this unit. (userdata)
            GetMaximumGoldBounty            	= int GetMaximumGoldBounty()
Get the maximum gold bounty for this unit. (userdata)
            GetGoldBounty                   	= int GetGoldBounty()
Get the gold bounty on this unit. (userdata)
            GetTotalPurchasedUpgradeGoldCost	= int GetTotalPurchasedUpgradeGoldCost()
Get how much gold has been spent on ability upgrades. (userdata)
            IsControllableByAnyPlayer       	= bool IsControllableByAnyPlayer()
Is this unit controlled by any non-bot player? (userdata)
            IsOwnedByAnyPlayer              	= bool IsOwnedByAnyPlayer()
Is this unit owned by any non-bot player? (userdata)
            GetMainControllingPlayer        	= int GetMainControllingPlayer()
Returns the player ID of the controlling player. (userdata)
            SetControllableByPlayer         	= void SetControllableByPlayer(int nPlayerID, bool bSkipAdjustingPosition)
Set this unit controllable by the player with the passed ID. (userdata)
            GetPlayerOwnerID                	= int GetPlayerOwnerID()
Get the owner player ID for this unit. (userdata)
            GetPlayerOwner                  	= handle GetPlayerOwner()
Returns the player that owns this unit. (userdata)
            GetBaseDamageMin                	= int GetBaseDamageMin()
Get the minimum attack damage of this unit. (userdata)
            GetBaseDamageMax                	= int GetBaseDamageMax()
Get the maximum attack damage of this unit. (userdata)
            SetBaseDamageMin                	= void SetBaseDamageMin(int nMin)
Sets the minimum base damage. (userdata)
            SetBaseDamageMax                	= void SetBaseDamageMax(int nMax)
Sets the maximum base damage. (userdata)
            GetDamageMin                    	= int GetDamageMin()
Get the minimum attack damage of this unit. (userdata)
            GetDamageMax                    	= int GetDamageMax()
Get the maximum attack damage of this unit. (userdata)
            GetPhysicalArmorValue           	= float GetPhysicalArmorValue(bool bIgnoreBase)
Returns current physical armor value. (userdata)
            Script_GetMagicalArmorValue     	= float Script_GetMagicalArmorValue(bool bUseExperimentalFormula, handle inflictor)
Returns current magical armor value. (userdata)
            SetPhysicalArmorBaseValue       	= void SetPhysicalArmorBaseValue(float flPhysicalArmorValue)
Sets base physical armor value. (userdata)
            GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
Returns base physical armor value. (userdata)
            SetBaseMagicalResistanceValue   	= void SetBaseMagicalResistanceValue(float flMagicalResistanceValue)
Sets base magical armor value. (userdata)
            GetBaseMagicalResistanceValue   	= float GetBaseMagicalResistanceValue()
Returns base magical armor value. (userdata)
            SetBaseManaRegen                	= void SetBaseManaRegen(float flManaRegen)
 (userdata)
            GetBonusManaRegen               	= float GetBonusManaRegen()
This Mana regen is derived from constant bonuses like Basilius. (userdata)
            GetManaRegen                    	= float GetManaRegen()
 (userdata)
            SetBaseHealthRegen              	= void SetBaseHealthRegen(float flHealthRegen)
 (userdata)
            GetBaseHealthRegen              	= float GetBaseHealthRegen()
 (userdata)
            GetHealthRegen                  	= float GetHealthRegen()
 (userdata)
            SetBaseMoveSpeed                	= void SetBaseMoveSpeed(int iMoveSpeed)
 (userdata)
            GetBaseMoveSpeed                	= float GetBaseMoveSpeed()
 (userdata)
            SetBaseAttackTime               	= void SetBaseAttackTime(float flBaseAttackTime)
 (userdata)
            GetBaseAttackTime               	= float GetBaseAttackTime()
 (userdata)
            GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed(bool bIgnoreTempAttackSpeed)
 (userdata)
            GetAttacksPerSecond             	= float GetAttacksPerSecond(bool bIgnoreTempAttackSpeed)
 (userdata)
            GetSecondsPerAttack             	= float GetSecondsPerAttack(bool bIgnoreTempAttackSpeed)
 (userdata)
            GetHasteFactor                  	= float GetHasteFactor()
 (userdata)
            GetCastPoint                    	= float GetCastPoint(bool bAttack)
 (userdata)
            GetAttackSpeed                  	= float GetAttackSpeed(bool bIgnoreTempAttackSpeed)
 (userdata)
            GetDisplayAttackSpeed           	= float GetDisplayAttackSpeed()
Attack speed expressed as constant value (userdata)
            GetMoveSpeedModifier            	= float GetMoveSpeedModifier(float flBaseSpeed, bool bReturnUnslowed)
 (userdata)
            GetCastRangeBonus               	= float GetCastRangeBonus()
 (userdata)
            GetCooldownReduction            	= float GetCooldownReduction()
 (userdata)
            IsIllusion                      	= bool IsIllusion()
 (userdata)
            MakeIllusion                    	= void MakeIllusion()
 (userdata)
            IsStrongIllusion                	= bool IsStrongIllusion()
 (userdata)
            IsTempestDouble                 	= bool IsTempestDouble()
 (userdata)
            IsReincarnating                 	= bool IsReincarnating()
 (userdata)
            ClearActivityModifiers          	= void ClearActivityModifiers()
Clear Activity modifiers (userdata)
            AddActivityModifier             	= void AddActivityModifier(string szName)
Add an activity modifier that affects future StartGesture calls (userdata)
            StartGesture                    	= void StartGesture(int nActivity)
Add the given gesture activity. (userdata)
            StartGestureWithFade            	= void StartGestureWithFade(int nActivity, float fFadeIn, float fFadeOut)
Add the given gesture activity faded according to to the parameters. (userdata)
            StartGestureFadeWithSequenceSettings	= void StartGestureFadeWithSequenceSettings(int nActivity)
Add the given gesture activity faded according to its sequence settings. (userdata)
            StartGestureWithPlaybackRate    	= void StartGestureWithPlaybackRate(int nActivity, float flRate)
Add the given gesture activity with a playback rate override. (userdata)
            StartGestureWithFadeAndPlaybackRate	= void StartGestureWithFadeAndPlaybackRate(int nActivity, float fFadeIn, float fFadeOut, float flRate)
Add the given gesture activity faded according to to the parameters and with a playback rate override. (userdata)
            RemoveGesture                   	= void RemoveGesture(int nActivity)
Remove the given gesture activity. (userdata)
            FadeGesture                     	= void FadeGesture(int nActivity)
Fade and remove the given gesture activity. (userdata)
            PlayVCD                         	= void PlayVCD(string pVCD)
Play a VCD on the NPC. (userdata)
            ForcePlayActivityOnce           	= void ForcePlayActivityOnce(int nActivity)
Play an activity once, and then go back to idle. (userdata)
            OnCommandMoveToDirection        	= void OnCommandMoveToDirection(Vector pos)
Tells the underlying AI to move in the given direction, skipping Dota orders (userdata)
            TriggerSpellAbsorb              	= bool TriggerSpellAbsorb(handle hAbility)
 (userdata)
            TriggerModifierDodge            	= bool TriggerModifierDodge()
 (userdata)
            TriggerSpellReflect             	= void TriggerSpellReflect(handle hAbility)
Trigger the Lotus Orb-like effect.(hAbility) (userdata)
            SwapAbilities                   	= void SwapAbilities(string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2)
Swaps the slots of the two passed abilities and sets them enabled/disabled. (userdata)
            UnHideAbilityToSlot             	= void UnHideAbilityToSlot(string pszAbilityName, string pszReplacedAbilityName)
Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot. (userdata)
            FindAbilityByName               	= handle FindAbilityByName(string pAbilityName)
Retrieve an ability by name from the unit. (userdata)
            GetAbilityByIndex               	= handle GetAbilityByIndex(int iIndex)
Retrieve an ability by index from the unit. (userdata)
            GetAbilityCount                 	= int GetAbilityCount()
 (userdata)
            SetAbilityByIndex               	= void SetAbilityByIndex(handle hAbility, int iIndex)
Set the ability by index. (userdata)
            RemoveAbilityFromIndexByName    	= void RemoveAbilityFromIndexByName(string pszAbilityName)
 (userdata)
            GetCurrentActiveAbility         	= handle GetCurrentActiveAbility()
Get the ability this unit is currently casting. (userdata)
            CastAbilityOnPosition           	= void CastAbilityOnPosition(Vector vPosition, handle hAbility, int iPlayerIndex)
Cast an ability on a position. (userdata)
            CastAbilityOnTarget             	= void CastAbilityOnTarget(handle hTarget, handle hAbility, int iPlayerIndex)
Cast an ability on a target entity. (userdata)
            CastAbilityNoTarget             	= void CastAbilityNoTarget(handle hAbility, int iPlayerIndex)
Cast an ability with no target. (userdata)
            CastAbilityToggle               	= void CastAbilityToggle(handle hAbility, int iPlayerIndex)
Toggle an ability. (userdata)
            CastAbilityImmediately          	= void CastAbilityImmediately(handle hAbility, int iPlayerIndex)
Cast an ability immediately. (userdata)
            Hold                            	= void Hold()
Hold position. (userdata)
            Stop                            	= void Stop()
Stop the current order. (userdata)
            SetCursorPosition               	= void SetCursorPosition(Vector vLocation)
 (userdata)
            SetCursorTargetingNothing       	= void SetCursorTargetingNothing(bool bTargetingNothing)
 (userdata)
            GetCursorCastTarget             	= handle GetCursorCastTarget()
 (userdata)
            GetCursorPosition               	= Vector GetCursorPosition()
 (userdata)
            GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
 (userdata)
            HasInventory                    	= bool HasInventory()
Does this unit have an inventory. (userdata)
            SetHasInventory                 	= void SetHasInventory(bool bHasInventory)
Set if this unit has an inventory. (userdata)
            GetItemInSlot                   	= handle GetItemInSlot(int i)
Returns nth item in inventory slot (index is zero based). (userdata)
            IsRooted                        	= bool IsRooted()
 (userdata)
            IsDisarmed                      	= bool IsDisarmed()
 (userdata)
            IsAttackImmune                  	= bool IsAttackImmune()
 (userdata)
            IsSilenced                      	= bool IsSilenced()
 (userdata)
            IsMuted                         	= bool IsMuted()
 (userdata)
            IsStunned                       	= bool IsStunned()
 (userdata)
            IsHexed                         	= bool IsHexed()
 (userdata)
            IsFeared                        	= bool IsFeared()
 (userdata)
            IsTaunted                       	= bool IsTaunted()
 (userdata)
            IsInvisible                     	= bool IsInvisible()
 (userdata)
            IsInvulnerable                  	= bool IsInvulnerable()
 (userdata)
            IsMagicImmune                   	= bool IsMagicImmune()
 (userdata)
            IsDebuffImmune                  	= bool IsDebuffImmune()
 (userdata)
            NoUnitCollision                 	= bool NoUnitCollision()
 (userdata)
            ProvidesVision                  	= bool ProvidesVision()
 (userdata)
            IsNightmared                    	= bool IsNightmared()
 (userdata)
            IsBlockDisabled                 	= bool IsBlockDisabled()
 (userdata)
            IsEvadeDisabled                 	= bool IsEvadeDisabled()
 (userdata)
            IsUnselectable                  	= bool IsUnselectable()
 (userdata)
            IsUnableToMiss                  	= bool IsUnableToMiss()
 (userdata)
            IsSpeciallyDeniable             	= bool IsSpeciallyDeniable()
 (userdata)
            IsSpeciallyUndeniable           	= bool IsSpeciallyUndeniable()
 (userdata)
            IsCommandRestricted             	= bool IsCommandRestricted()
 (userdata)
            NotOnMinimap                    	= bool NotOnMinimap()
 (userdata)
            NotOnMinimapForEnemies          	= bool NotOnMinimapForEnemies()
 (userdata)
            IsLowAttackPriority             	= bool IsLowAttackPriority()
 (userdata)
            NoHealthBar                     	= bool NoHealthBar()
 (userdata)
            NoTeamSelect                    	= bool NoTeamSelect()
 (userdata)
            PassivesDisabled                	= bool PassivesDisabled()
 (userdata)
            IsDominated                     	= bool IsDominated()
 (userdata)
            IsBlind                         	= bool IsBlind()
 (userdata)
            IsOutOfGame                     	= bool IsOutOfGame()
 (userdata)
            IsUntargetableFrom              	= bool IsUntargetableFrom(handle pTargettingSource)
 (userdata)
            IsFrozen                        	= bool IsFrozen()
 (userdata)
            NoTeamMoveTo                    	= bool NoTeamMoveTo()
 (userdata)
            IsPhased                        	= bool IsPhased()
 (userdata)
            Script_IsDeniable               	= bool Script_IsDeniable()
 (userdata)
            IsMovementImpaired              	= bool IsMovementImpaired()
 (userdata)
            HasItemInInventory              	= bool HasItemInInventory(string pItemName)
See whether this unit has an item by name. (userdata)
            FindItemInInventory             	= handle FindItemInInventory(string pszItemName)
Get handle to first item in inventory, else nil. (userdata)
            HasScepter                      	= bool HasScepter()
 (userdata)
            SetStolenScepter                	= void SetStolenScepter(bool bStolenScepter)
 (userdata)
            GetAttackCapability             	= int GetAttackCapability()
 (userdata)
            SetAttackCapability             	= void SetAttackCapability(int iAttackCapabilities)
 (userdata)
            SetMoveCapability               	= void SetMoveCapability(int iMoveCapabilities)
 (userdata)
            HasGroundMovementCapability     	= bool HasGroundMovementCapability()
 (userdata)
            HasFlyMovementCapability        	= bool HasFlyMovementCapability()
 (userdata)
            HasMovementCapability           	= bool HasMovementCapability()
 (userdata)
            HasAttackCapability             	= bool HasAttackCapability()
 (userdata)
            HasAnyActiveAbilities           	= bool HasAnyActiveAbilities()
 (userdata)
            HasFlyingVision                 	= bool HasFlyingVision()
 (userdata)
            IsRangedAttacker                	= bool IsRangedAttacker()
Is this unit a ranged attacker? (userdata)
            GetProjectileSpeed              	= int GetProjectileSpeed()
 (userdata)
            SetRangedProjectileName         	= void SetRangedProjectileName(string pProjectileName)
 (userdata)
            GetRangedProjectileName         	= string GetRangedProjectileName()
 (userdata)
            SetUnitName                     	= void SetUnitName(string pName)
 (userdata)
            GetUnitName                     	= string GetUnitName()
Get the name of this unit. (userdata)
            GetUnitLabel                    	= string GetUnitLabel()
 (userdata)
            ForceKill                       	= void ForceKill(bool bReincarnate)
Kill this unit immediately. (userdata)
            AttackReady                     	= bool AttackReady()
 (userdata)
            AttackNoEarlierThan             	= void AttackNoEarlierThan(float flTime, float flTimeDisparityTolerance)
 (userdata)
            TimeUntilNextAttack             	= float TimeUntilNextAttack()
 (userdata)
            GetLastAttackTime               	= float GetLastAttackTime()
 (userdata)
            GetAttackAnimationPoint         	= float GetAttackAnimationPoint()
 (userdata)
            IsAttackingEntity               	= bool IsAttackingEntity(handle hEntity)
 (userdata)
            IsAttacking                     	= bool IsAttacking()
 (userdata)
            SetAttacking                    	= void SetAttacking(handle hAttackTarget)
 (userdata)
            GetAttackTarget                 	= handle GetAttackTarget()
 (userdata)
            GetAggroTarget                  	= handle GetAggroTarget()
Returns this unit's aggro target. (userdata)
         }
         HealWithParams                  	= function: 0x0029ddb8 (function)
         GetAcquisitionRange             	= function: 0x0029de68 (function)
         SetAcquisitionRange             	= function: 0x0029df20 (function)
         Script_GetAttackRange           	= function: 0x0029dfd8 (function)
         GetAttackRangeBuffer            	= function: 0x0029e090 (function)
         GetBaseAttackRange              	= function: 0x002a09f8 (function)
         GetAttackDamage                 	= function: 0x002a0ab0 (function)
         GetAverageTrueAttackDamage      	= function: 0x002a0b60 (function)
         SetShouldComputeRemainingPathLength	= function: 0x002a0c20 (function)
         GetRemainingPathLength          	= function: 0x002a0ce8 (function)
         PerformAttack                   	= function: 0x002a0da0 (function)
         IsHero                          	= function: 0x002a0ed0 (function)
         IsRealHero                      	= function: 0x002a0f50 (function)
         IsConsideredHero                	= function: 0x002a1000 (function)
         IsCreepHero                     	= function: 0x002a10b8 (function)
         IsOther                         	= function: 0x002a1168 (function)
         IsTower                         	= function: 0x002a11e8 (function)
         IsBuilding                      	= function: 0x002a1268 (function)
         IsFort                          	= function: 0x002a1318 (function)
         IsBarracks                      	= function: 0x002a1398 (function)
         IsCreep                         	= function: 0x002a1448 (function)
         IsCourier                       	= function: 0x002a14c8 (function)
         IsBoss                          	= function: 0x002a1578 (function)
         IsCreature                      	= function: 0x002a15f8 (function)
         IsWard                          	= function: 0x002a16a8 (function)
         IsHeroWard                      	= function: 0x002a1728 (function)
         IsShrine                        	= function: 0x002a17d8 (function)
         IsPhantom                       	= function: 0x002a1888 (function)
         IsZombie                        	= function: 0x002a1938 (function)
         GetNeutralSpawnerName           	= function: 0x002a19e8 (function)
         CanEntityBeSeenByMyTeam         	= function: 0x002a1b20 (function)
         GetDayTimeVisionRange           	= function: 0x002a1bd8 (function)
         GetBaseDayTimeVisionRange       	= function: 0x002a1c90 (function)
         SetDayTimeVisionRange           	= function: 0x002a1d50 (function)
         GetNightTimeVisionRange         	= function: 0x002a1e08 (function)
         GetBaseNightTimeVisionRange     	= function: 0x002a1ec0 (function)
         SetNightTimeVisionRange         	= function: 0x002a1f80 (function)
         GetCurrentVisionRange           	= function: 0x002a2038 (function)
         SetDeathXP                      	= function: 0x002a20f0 (function)
         GetDeathXP                      	= function: 0x002a21a0 (function)
         SetMinimumGoldBounty            	= function: 0x002a2250 (function)
         GetMinimumGoldBounty            	= function: 0x002a2308 (function)
         SetMaximumGoldBounty            	= function: 0x002a23c0 (function)
         GetMaximumGoldBounty            	= function: 0x002a2478 (function)
         GetGoldBounty                   	= function: 0x002a2530 (function)
         GetTotalPurchasedUpgradeGoldCost	= function: 0x002a25e0 (function)
         IsControllableByAnyPlayer       	= function: 0x002a26a8 (function)
         IsOwnedByAnyPlayer              	= function: 0x002a2768 (function)
         GetMainControllingPlayer        	= function: 0x002a2820 (function)
         SetControllableByPlayer         	= function: 0x0029f1e8 (function)
         GetPlayerOwnerID                	= function: 0x0029f2a0 (function)
         GetPlayerOwner                  	= function: 0x0029f358 (function)
         GetBaseDamageMin                	= function: 0x0029f408 (function)
         GetBaseDamageMax                	= function: 0x0029f4c0 (function)
         SetBaseDamageMin                	= function: 0x0029f578 (function)
         SetBaseDamageMax                	= function: 0x0029f630 (function)
         GetDamageMin                    	= function: 0x0029f6e8 (function)
         GetDamageMax                    	= function: 0x0029f798 (function)
         GetPhysicalArmorValue           	= function: 0x0029f848 (function)
         Script_GetMagicalArmorValue     	= function: 0x0029f900 (function)
         SetPhysicalArmorBaseValue       	= function: 0x0029f9c0 (function)
         GetPhysicalArmorBaseValue       	= function: 0x0029fa80 (function)
         SetBaseMagicalResistanceValue   	= function: 0x0029fb40 (function)
         GetBaseMagicalResistanceValue   	= function: 0x0029fc00 (function)
         SetBaseManaRegen                	= function: 0x0029fcc0 (function)
         GetBonusManaRegen               	= function: 0x0029fd78 (function)
         GetManaRegen                    	= function: 0x0029fe30 (function)
         SetBaseHealthRegen              	= function: 0x0029fee0 (function)
         GetBaseHealthRegen              	= function: 0x0029ff98 (function)
         GetHealthRegen                  	= function: 0x002a0050 (function)
         SetBaseMoveSpeed                	= function: 0x002a0100 (function)
         GetBaseMoveSpeed                	= function: 0x002a01b8 (function)
         SetBaseAttackTime               	= function: 0x002a0270 (function)
         GetBaseAttackTime               	= function: 0x002a0328 (function)
         GetIncreasedAttackSpeed         	= function: 0x002a03e0 (function)
         GetAttacksPerSecond             	= function: 0x002a0498 (function)
         GetSecondsPerAttack             	= function: 0x002a0550 (function)
         GetHasteFactor                  	= function: 0x002a0608 (function)
         GetCastPoint                    	= function: 0x002a06b8 (function)
         GetAttackSpeed                  	= function: 0x002a0768 (function)
         GetDisplayAttackSpeed           	= function: 0x002a0818 (function)
         GetMoveSpeedModifier            	= function: 0x002a08d0 (function)
         GetCastRangeBonus               	= function: 0x002a58b0 (function)
         GetCooldownReduction            	= function: 0x002a5968 (function)
         IsIllusion                      	= function: 0x002a5a20 (function)
         MakeIllusion                    	= function: 0x002a5aa0 (function)
         IsStrongIllusion                	= function: 0x002a5b50 (function)
         IsTempestDouble                 	= function: 0x002a5c08 (function)
         IsReincarnating                 	= function: 0x002a5cb8 (function)
         ClearActivityModifiers          	= function: 0x002a5d68 (function)
         AddActivityModifier             	= function: 0x002a5e20 (function)
         StartGesture                    	= function: 0x002a5ed8 (function)
         StartGestureWithFade            	= function: 0x002a5f88 (function)
         StartGestureFadeWithSequenceSettings	= function: 0x002a6040 (function)
         StartGestureWithPlaybackRate    	= function: 0x002a6108 (function)
         StartGestureWithFadeAndPlaybackRate	= function: 0x002a61c8 (function)
         RemoveGesture                   	= function: 0x002a6290 (function)
         FadeGesture                     	= function: 0x002a6340 (function)
         PlayVCD                         	= function: 0x002a63f0 (function)
         ForcePlayActivityOnce           	= function: 0x002a6470 (function)
         OnCommandMoveToDirection        	= function: 0x002a6528 (function)
         TriggerSpellAbsorb              	= function: 0x002a65e8 (function)
         TriggerModifierDodge            	= function: 0x002a66a0 (function)
         TriggerSpellReflect             	= function: 0x002a6758 (function)
         SwapAbilities                   	= function: 0x002a6810 (function)
         UnHideAbilityToSlot             	= function: 0x002a68c0 (function)
         FindAbilityByName               	= function: 0x002a6978 (function)
         GetAbilityByIndex               	= function: 0x002a6a30 (function)
         GetAbilityCount                 	= function: 0x002a6ae8 (function)
         SetAbilityByIndex               	= function: 0x002a6b98 (function)
         RemoveAbilityFromIndexByName    	= function: 0x002a6c50 (function)
         GetCurrentActiveAbility         	= function: 0x002a6d10 (function)
         CastAbilityOnPosition           	= function: 0x002a6dc8 (function)
         CastAbilityOnTarget             	= function: 0x002a6e80 (function)
         CastAbilityNoTarget             	= function: 0x002a6f38 (function)
         CastAbilityToggle               	= function: 0x002a6ff0 (function)
         CastAbilityImmediately          	= function: 0x002a70a8 (function)
         Hold                            	= function: 0x002a71e0 (function)
         Stop                            	= function: 0x002a7260 (function)
         SetCursorPosition               	= function: 0x002a72e0 (function)
         SetCursorTargetingNothing       	= function: 0x002a7398 (function)
         GetCursorCastTarget             	= function: 0x002a7458 (function)
         GetCursorPosition               	= function: 0x002a7510 (function)
         GetCursorTargetingNothing       	= function: 0x00253098 (function)
         HasInventory                    	= function: 0x00253158 (function)
         SetHasInventory                 	= function: 0x00253208 (function)
         GetItemInSlot                   	= function: 0x002532b8 (function)
         IsRooted                        	= function: 0x00253368 (function)
         IsDisarmed                      	= function: 0x00253418 (function)
         IsAttackImmune                  	= function: 0x002534c8 (function)
         IsSilenced                      	= function: 0x00253578 (function)
         IsMuted                         	= function: 0x00253628 (function)
         IsStunned                       	= function: 0x002536a8 (function)
         IsHexed                         	= function: 0x00253758 (function)
         IsFeared                        	= function: 0x002537d8 (function)
         IsTaunted                       	= function: 0x00253888 (function)
         IsInvisible                     	= function: 0x00253938 (function)
         IsInvulnerable                  	= function: 0x002539e8 (function)
         IsMagicImmune                   	= function: 0x00253a98 (function)
         IsDebuffImmune                  	= function: 0x00253b48 (function)
         NoUnitCollision                 	= function: 0x00253bf8 (function)
         ProvidesVision                  	= function: 0x00253ca8 (function)
         IsNightmared                    	= function: 0x00253d58 (function)
         IsBlockDisabled                 	= function: 0x00253e08 (function)
         IsEvadeDisabled                 	= function: 0x00253eb8 (function)
         IsUnselectable                  	= function: 0x00253f68 (function)
         IsUnableToMiss                  	= function: 0x00254018 (function)
         IsSpeciallyDeniable             	= function: 0x002540c8 (function)
         IsSpeciallyUndeniable           	= function: 0x00254180 (function)
         IsCommandRestricted             	= function: 0x00254238 (function)
         NotOnMinimap                    	= function: 0x002542f0 (function)
         NotOnMinimapForEnemies          	= function: 0x002543a0 (function)
         IsLowAttackPriority             	= function: 0x00254458 (function)
         NoHealthBar                     	= function: 0x00254510 (function)
         NoTeamSelect                    	= function: 0x002545c0 (function)
         PassivesDisabled                	= function: 0x00254670 (function)
         IsDominated                     	= function: 0x00254728 (function)
         IsBlind                         	= function: 0x002547d8 (function)
         IsOutOfGame                     	= function: 0x00254858 (function)
         IsUntargetableFrom              	= function: 0x00254908 (function)
         IsFrozen                        	= function: 0x002549c0 (function)
         NoTeamMoveTo                    	= function: 0x00254a70 (function)
         IsPhased                        	= function: 0x00254b20 (function)
         Script_IsDeniable               	= function: 0x00254bd0 (function)
         IsMovementImpaired              	= function: 0x00254c88 (function)
         HasItemInInventory              	= function: 0x00254d40 (function)
         FindItemInInventory             	= function: 0x00254df8 (function)
         HasScepter                      	= function: 0x00254eb0 (function)
         SetStolenScepter                	= function: 0x00254f60 (function)
         GetAttackCapability             	= function: 0x00255018 (function)
         SetAttackCapability             	= function: 0x002550d0 (function)
         SetMoveCapability               	= function: 0x00255188 (function)
         HasGroundMovementCapability     	= function: 0x00255240 (function)
         HasFlyMovementCapability        	= function: 0x00255300 (function)
         HasMovementCapability           	= function: 0x002553c0 (function)
         HasAttackCapability             	= function: 0x00255478 (function)
         HasAnyActiveAbilities           	= function: 0x00258538 (function)
         HasFlyingVision                 	= function: 0x002585f0 (function)
         IsRangedAttacker                	= function: 0x002586a0 (function)
         GetProjectileSpeed              	= function: 0x00258758 (function)
         SetRangedProjectileName         	= function: 0x00258810 (function)
         GetRangedProjectileName         	= function: 0x002588c8 (function)
         SetUnitName                     	= function: 0x00258980 (function)
         GetUnitName                     	= function: 0x00258a30 (function)
         GetUnitLabel                    	= function: 0x00258ae0 (function)
         ForceKill                       	= function: 0x00258b90 (function)
         AttackReady                     	= function: 0x00258c40 (function)
         AttackNoEarlierThan             	= function: 0x00258cf0 (function)
         TimeUntilNextAttack             	= function: 0x00258da8 (function)
         GetLastAttackTime               	= function: 0x00258e60 (function)
         GetAttackAnimationPoint         	= function: 0x00258f18 (function)
         IsAttackingEntity               	= function: 0x00258fd0 (function)
         IsAttacking                     	= function: 0x00259088 (function)
         SetAttacking                    	= function: 0x00259138 (function)
         GetAttackTarget                 	= function: 0x002591e8 (function)
         GetAggroTarget                  	= function: 0x00259298 (function)
         IsNull                          	= function: 0x0029b088 (function)
         GetCurrentScene                 	= function: 0x0029b258 (function)
         GetSceneByIndex                 	= function: 0x0029b308 (function)
         FDesc                           	= table: 0x0029b0f8 (table)
         {
            ScriptPlayScene                 	= float ScriptPlayScene(string pszScene, float flDelay)
( vcd file, delay ) - play specified vcd file (userdata)
            GetCurrentScene                 	= handle GetCurrentScene()
Returns the instance of the oldest active scene entity (if any). (userdata)
            GetSceneByIndex                 	= handle GetSceneByIndex(int index)
Returns the instance of the scene entity at the specified index. (userdata)
         }
         ScriptPlayScene                 	= function: 0x0029b140 (function)
         IsNull                          	= function: 0x0029a400 (function)
         IsSequenceFinished              	= function: 0x0029a8a8 (function)
         GetSequence                     	= function: 0x0029a7c0 (function)
         SetSequence                     	= function: 0x0029aa98 (function)
         ResetSequence                   	= function: 0x0029a738 (function)
         FDesc                           	= table: 0x0029a470 (table)
         {
            GetCycle                        	= float GetCycle()
Get the cycle of the animation. (userdata)
            IsSequenceFinished              	= bool IsSequenceFinished()
Ask whether the main sequence is done playing. (userdata)
            GetSequence                     	= string GetSequence()
Returns the name of the active sequence. (userdata)
            SetSequence                     	= void SetSequence(string pSequenceName)
Sets the active sequence by name, keeping the current cycle. (userdata)
            ResetSequence                   	= void ResetSequence(string pSequenceName)
Sets the active sequence by name, resetting the current cycle. (userdata)
            ActiveSequenceDuration          	= float ActiveSequenceDuration()
Returns the duration in seconds of the active sequence. (userdata)
            SequenceDuration                	= float SequenceDuration(string pSequenceName)
Returns the duration in seconds of the given sequence name. (userdata)
            SetPoseParameter                	= float SetPoseParameter(string szName, float fValue)
Set the specified pose parameter to the specified value. (userdata)
            StopAnimation                   	= void StopAnimation()
Stop the current animation by setting playback rate to 0.0. (userdata)
            SetCycle                        	= void SetCycle(float flCycle)
Set the cycle of the animation. (userdata)
         }
         SequenceDuration                	= function: 0x0029a960 (function)
         ActiveSequenceDuration          	= function: 0x0029acd0 (function)
         GetCycle                        	= function: 0x0029a828 (function)
         SetPoseParameter                	= function: 0x0029a4b8 (function)
         StopAnimation                   	= function: 0x0029a5d8 (function)
         SetCycle                        	= function: 0x0029a688 (function)
         IsNull                          	= function: 0x00298c90 (function)
         SetMaterialGroup                	= function: 0x00299950 (function)
         FDesc                           	= table: 0x00298d00 (table)
         {
            SetMaterialGroup                	= void SetMaterialGroup(string pMaterialGroup)
SetMaterialGroup( string ): Set the material group of this entity. (userdata)
            GetModelScale                   	= float GetModelScale()
Get scale of entity's model. (userdata)
            SetModelScale                   	= void SetModelScale(float flScale)
Set scale of entity's model. (userdata)
            ScriptLookupAttachment          	= int ScriptLookupAttachment(string pAttachmentName)
Get the named attachment id. (userdata)
            GetAttachmentOrigin             	= Vector GetAttachmentOrigin(int iAttachment)
Get the attachment id's origin vector. (userdata)
            GetAttachmentAngles             	= Vector GetAttachmentAngles(int iAttachment)
Get the attachment id's angles as a p,y,r vector. (userdata)
            GetAttachmentForward            	= Vector GetAttachmentForward(int iAttachment)
Get the attachment id's forward vector. (userdata)
            SetSize                         	= void SetSize(Vector mins, Vector maxs)
 (userdata)
            SetModel                        	= void SetModel(string pModelName)
 (userdata)
            GetRenderAlpha                  	= int GetRenderAlpha()
GetRenderAlpha(): Get the alpha modulation of this entity. (userdata)
            SetRenderAlpha                  	= void SetRenderAlpha(int nAlpha)
SetRenderAlpha( int ): Set the alpha modulation of this entity. (userdata)
            SetRenderMode                   	= void SetRenderMode(int nMode)
SetRenderMode( int ): Sets the render mode of the entity. (userdata)
            SetRenderColor                  	= void SetRenderColor(int r, int g, int b)
SetRenderColor( r, g, b ): Sets the render color of the entity. (userdata)
            GetRenderColor                  	= Vector GetRenderColor()
GetRenderColor(): Get the render color of the entity. (userdata)
            SetMaterialGroupHash            	= void SetMaterialGroupHash(unsigned nHash)
SetMaterialGroupHash( uint32 ): Set the material group hash of this entity. (userdata)
            GetMaterialGroupHash            	= unsigned GetMaterialGroupHash()
GetMaterialGroupHash(): Get the material group hash of this entity. (userdata)
            SetSingleMeshGroup              	= void SetSingleMeshGroup(string pMeshGroupName)
SetSingleMeshGroup( string ): Set a single mesh group for this entity. (userdata)
            SetMaterialGroupMask            	= void SetMaterialGroupMask(uint64 nMeshGroupMask)
SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity. (userdata)
            GetMaterialGroupMask            	= uint64 GetMaterialGroupMask()
GetMaterialGroupMask(): Get the mesh group mask of this entity. (userdata)
            SetBodygroup                    	= void SetBodygroup(int iGroup, int iValue)
Sets a bodygroup. (userdata)
            SetBodygroupByName              	= void SetBodygroupByName(string pName, int iValue)
Sets a bodygroup by name. (userdata)
            SetSkin                         	= void SetSkin(int iSkin)
Set skin (int). (userdata)
         }
         GetModelScale                   	= function: 0x00298d48 (function)
         SetModelScale                   	= function: 0x00298e30 (function)
         ScriptLookupAttachment          	= function: 0x00298ee0 (function)
         GetAttachmentOrigin             	= function: 0x00299088 (function)
         GetAttachmentAngles             	= function: 0x00299108 (function)
         GetAttachmentForward            	= function: 0x00299020 (function)
         SetSize                         	= function: 0x00299300 (function)
         SetModel                        	= function: 0x00298f98 (function)
         GetRenderAlpha                  	= function: 0x00299508 (function)
         SetRenderAlpha                  	= function: 0x002991c0 (function)
         SetRenderMode                   	= function: 0x00299740 (function)
         SetRenderColor                  	= function: 0x002997f0 (function)
         GetRenderColor                  	= function: 0x002998a0 (function)
         SetMaterialGroupHash            	= function: 0x002999d0 (function)
         GetMaterialGroupHash            	= function: 0x00299380 (function)
         SetSingleMeshGroup              	= function: 0x00299438 (function)
         SetMaterialGroupMask            	= function: 0x002995b8 (function)
         GetMaterialGroupMask            	= function: 0x00299670 (function)
         SetBodygroup                    	= function: 0x0029a098 (function)
         SetBodygroupByName              	= function: 0x0029a148 (function)
         SetSkin                         	= function: 0x0029a200 (function)
         GetChildren                     	= function: 0x0023f1f0 (function)
         SetParent                       	= function: 0x0023f2a0 (function)
         SetConstraint                   	= function: 0x0023f350 (function)
         EyePosition                     	= function: 0x0023f400 (function)
         SetAngles                       	= function: 0x0023ed80 (function)
         SetAbsAngles                    	= function: 0x0023ee30 (function)
         GetAnglesAsVector               	= function: 0x0023efb8 (function)
         EyeAngles                       	= function: 0x0023f070 (function)
         SetOrigin                       	= function: 0x0023fac0 (function)
         SetLocalAngles                  	= function: 0x0023fb70 (function)
         GetLocalAngles                  	= function: 0x0023fc20 (function)
         SetLocalOrigin                  	= function: 0x0023fcd0 (function)
         GetLocalOrigin                  	= function: 0x0023fd80 (function)
         TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
         TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
         SetForwardVector                	= function: 0x0023ffb0 (function)
         GetBoundingMins                 	= function: 0x00240068 (function)
         GetBoundingMaxs                 	= function: 0x00240118 (function)
         GetBounds                       	= function: 0x002401c8 (function)
         GetAngularVelocity              	= function: 0x00240278 (function)
         SetAngularVelocity              	= function: 0x0023f4b0 (function)
         AddEffects                      	= function: 0x0023f568 (function)
         RemoveEffects                   	= function: 0x0023f618 (function)
         Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
         Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
         Attribute_SetIntValue           	= function: 0x0023f878 (function)
         Attribute_GetIntValue           	= function: 0x0023f930 (function)
         HasAttribute                    	= function: 0x0023f9e8 (function)
         DeleteAttribute                 	= function: 0x00240f00 (function)
         ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
         GetOwner                        	= function: 0x00241070 (function)
         SetOwner                        	= function: 0x00241120 (function)
         SetEntityName                   	= function: 0x002411d0 (function)
         GetMass                         	= function: 0x00241280 (function)
         SetMass                         	= function: 0x00241300 (function)
         GetSpawnGroupHandle             	= function: 0x00241380 (function)
         GetAbsOrigin                    	= function: 0x00241438 (function)
         GetAngles                       	= function: 0x002414e8 (function)
         GetAbsScale                     	= function: 0x00241598 (function)
         SetAbsScale                     	= function: 0x00241648 (function)
         GetLocalScale                   	= function: 0x002416f8 (function)
         SetLocalScale                   	= function: 0x002417a8 (function)
         SetAbsOrigin                    	= function: 0x00241858 (function)
         GetCenter                       	= function: 0x00241908 (function)
         GetTeamNumber                   	= function: 0x002419b8 (function)
         GetTeam                         	= function: 0x00241a68 (function)
         SetTeam                         	= function: 0x00241ae8 (function)
         FollowEntity                    	= function: 0x00241b68 (function)
         FollowEntityMerge               	= function: 0x00241c18 (function)
         Trigger                         	= function: 0x00241cd0 (function)
         SetContextThink                 	= function: 0x00241d78 (function)
         SetContext                      	= function: 0x00241e28 (function)
         SetContextNum                   	= function: 0x00240330 (function)
         GetContext                      	= function: 0x002403e0 (function)
         GatherCriteria                  	= function: 0x00240490 (function)
         TakeDamage                      	= function: 0x00240540 (function)
         IsAlive                         	= function: 0x002405f0 (function)
         IsPlayerPawn                    	= function: 0x00240698 (function)
         IsPlayerController              	= function: 0x00240748 (function)
         IsNPC                           	= function: 0x00240800 (function)
         IsDOTANPC                       	= function: 0x002408a8 (function)
         GetMaxHealth                    	= function: 0x00240958 (function)
         SetMaxHealth                    	= function: 0x00240a08 (function)
         SetHealth                       	= function: 0x00240ab8 (function)
         GetHealth                       	= function: 0x00240b68 (function)
         SetGravity                      	= function: 0x00240c18 (function)
         SetFriction                     	= function: 0x00240cc8 (function)
         SetVelocity                     	= function: 0x00240d78 (function)
         GetLocalVelocity                	= function: 0x00240e28 (function)
         GetVelocity                     	= function: 0x002436a8 (function)
         ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
         GetLocalAngularVelocity         	= function: 0x002438d8 (function)
         GetBaseVelocity                 	= function: 0x00243990 (function)
         OverrideFriction                	= function: 0x00243a40 (function)
         EmitSound                       	= function: 0x00243af8 (function)
         EmitSoundParams                 	= function: 0x00243ba8 (function)
         StopSound                       	= function: 0x00243c58 (function)
         GetSoundDuration                	= function: 0x00243d08 (function)
         PrecacheScriptSound             	= function: 0x00243dc0 (function)
         IsPlayer                        	= function: 0x00243e78 (function)
         GetOrigin                       	= function: 0x00243f28 (function)
         IsNull                          	= function: 0x0023e670 (function)
         SetThink                        	= function: 0x00308700 (function)
         FDesc                           	= table: 0x0023e6e0 (table, already seen)
         StopThink                       	= function: 0x00308730 (function)
         IsInstance                      	= function: 0x00308760 (function)
         IsBaseNPC                       	= function: 0x00337ae8 (function)
         Kill                            	= function: 0x0023e728 (function)
         GetForwardVector                	= function: 0x0023e810 (function)
         GetRightVector                  	= function: 0x0023e8c8 (function)
         GetLeftVector                   	= function: 0x0023ea68 (function)
         GetUpVector                     	= function: 0x0023eae8 (function)
         GetModelName                    	= function: 0x0023ea00 (function)
         GetMoveParent                   	= function: 0x0023ecd0 (function)
         GetRootMoveParent               	= function: 0x0023e978 (function)
         FirstMoveChild                  	= function: 0x0023ef08 (function)
         NextMovePeer                    	= function: 0x0023eb98 (function)
         GetOwnerEntity                  	= function: 0x0023f140 (function)
         IsNull                          	= function: 0x0023d458 (function)
         FireOutput                      	= function: 0x0023d570 (function)
         RemoveSelf                      	= function: 0x0023d688 (function)
         GetIntAttr                      	= function: 0x0023d738 (function)
         SetIntAttr                      	= function: 0x0023d870 (function)
         FDesc                           	= table: 0x0023d4f0 (table, already seen)
         GetDebugName                    	= function: 0x0023d5e0 (function)
         ConnectOutput                   	= function: 0x0023dad0 (function)
         RedirectOutput                  	= function: 0x0023d7a8 (function)
         DisconnectOutput                	= function: 0x00214310 (function)
         DisconnectRedirectedOutput      	= function: 0x00214988 (function)
         GetEntityIndex                  	= function: 0x0023d998 (function)
         entindex                        	= function: 0x0023da18 (function)
         GetClassname                    	= function: 0x0023de90 (function)
         GetEntityHandle                 	= function: 0x0023df10 (function)
         Destroy                         	= function: 0x0023df90 (function)
         GetPublicScriptScope            	= function: 0x0023db80 (function)
         GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
         GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
         GetName                         	= function: 0x0023d8f0 (function)
      }
      IsNull                          	= function: 0x002c2718 (function)
      FDesc                           	= table: 0x002c2788 (table)
      {
         GetInteractAbilityName          	= string GetInteractAbilityName()
The name of the ability used when triggering interaction on the outpost. (userdata)
         SetInteractAbilityName          	= void SetInteractAbilityName(string pszInteractAbilityName)
The name of the ability used when triggering interaction on the outpost. (userdata)
      }
      GetInteractAbilityName          	= function: 0x002c28f0 (function)
      SetInteractAbilityName          	= function: 0x002c27d0 (function)
   }
   CDOTA_BaseNPC_MangoTree         	= table: 0x002c2ae0 (table)
   {
      metatable                       	= table: 0x002baef8 (table, already seen)
      IsNull                          	= function: 0x002c2b28 (function)
      FDesc                           	= table: 0x002c2b98 (table)
      {
      }
   }
   CDotaTutorialNPCBlocker         	= table: 0x002c2d18 (table)
   {
      metatable = table: 0x0029b040
      {
         IsNull                          	= function: 0x0029b088 (function)
         GetCurrentScene                 	= function: 0x0029b258 (function)
         GetSceneByIndex                 	= function: 0x0029b308 (function)
         FDesc                           	= table: 0x0029b0f8 (table, already seen)
         ScriptPlayScene                 	= function: 0x0029b140 (function)
         IsNull                          	= function: 0x0029a400 (function)
         IsSequenceFinished              	= function: 0x0029a8a8 (function)
         GetSequence                     	= function: 0x0029a7c0 (function)
         SetSequence                     	= function: 0x0029aa98 (function)
         ResetSequence                   	= function: 0x0029a738 (function)
         FDesc                           	= table: 0x0029a470 (table, already seen)
         SequenceDuration                	= function: 0x0029a960 (function)
         ActiveSequenceDuration          	= function: 0x0029acd0 (function)
         GetCycle                        	= function: 0x0029a828 (function)
         SetPoseParameter                	= function: 0x0029a4b8 (function)
         StopAnimation                   	= function: 0x0029a5d8 (function)
         SetCycle                        	= function: 0x0029a688 (function)
         IsNull                          	= function: 0x00298c90 (function)
         SetMaterialGroup                	= function: 0x00299950 (function)
         FDesc                           	= table: 0x00298d00 (table, already seen)
         GetModelScale                   	= function: 0x00298d48 (function)
         SetModelScale                   	= function: 0x00298e30 (function)
         ScriptLookupAttachment          	= function: 0x00298ee0 (function)
         GetAttachmentOrigin             	= function: 0x00299088 (function)
         GetAttachmentAngles             	= function: 0x00299108 (function)
         GetAttachmentForward            	= function: 0x00299020 (function)
         SetSize                         	= function: 0x00299300 (function)
         SetModel                        	= function: 0x00298f98 (function)
         GetRenderAlpha                  	= function: 0x00299508 (function)
         SetRenderAlpha                  	= function: 0x002991c0 (function)
         SetRenderMode                   	= function: 0x00299740 (function)
         SetRenderColor                  	= function: 0x002997f0 (function)
         GetRenderColor                  	= function: 0x002998a0 (function)
         SetMaterialGroupHash            	= function: 0x002999d0 (function)
         GetMaterialGroupHash            	= function: 0x00299380 (function)
         SetSingleMeshGroup              	= function: 0x00299438 (function)
         SetMaterialGroupMask            	= function: 0x002995b8 (function)
         GetMaterialGroupMask            	= function: 0x00299670 (function)
         SetBodygroup                    	= function: 0x0029a098 (function)
         SetBodygroupByName              	= function: 0x0029a148 (function)
         SetSkin                         	= function: 0x0029a200 (function)
         GetChildren                     	= function: 0x0023f1f0 (function)
         SetParent                       	= function: 0x0023f2a0 (function)
         SetConstraint                   	= function: 0x0023f350 (function)
         EyePosition                     	= function: 0x0023f400 (function)
         SetAngles                       	= function: 0x0023ed80 (function)
         SetAbsAngles                    	= function: 0x0023ee30 (function)
         GetAnglesAsVector               	= function: 0x0023efb8 (function)
         EyeAngles                       	= function: 0x0023f070 (function)
         SetOrigin                       	= function: 0x0023fac0 (function)
         SetLocalAngles                  	= function: 0x0023fb70 (function)
         GetLocalAngles                  	= function: 0x0023fc20 (function)
         SetLocalOrigin                  	= function: 0x0023fcd0 (function)
         GetLocalOrigin                  	= function: 0x0023fd80 (function)
         TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
         TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
         SetForwardVector                	= function: 0x0023ffb0 (function)
         GetBoundingMins                 	= function: 0x00240068 (function)
         GetBoundingMaxs                 	= function: 0x00240118 (function)
         GetBounds                       	= function: 0x002401c8 (function)
         GetAngularVelocity              	= function: 0x00240278 (function)
         SetAngularVelocity              	= function: 0x0023f4b0 (function)
         AddEffects                      	= function: 0x0023f568 (function)
         RemoveEffects                   	= function: 0x0023f618 (function)
         Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
         Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
         Attribute_SetIntValue           	= function: 0x0023f878 (function)
         Attribute_GetIntValue           	= function: 0x0023f930 (function)
         HasAttribute                    	= function: 0x0023f9e8 (function)
         DeleteAttribute                 	= function: 0x00240f00 (function)
         ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
         GetOwner                        	= function: 0x00241070 (function)
         SetOwner                        	= function: 0x00241120 (function)
         SetEntityName                   	= function: 0x002411d0 (function)
         GetMass                         	= function: 0x00241280 (function)
         SetMass                         	= function: 0x00241300 (function)
         GetSpawnGroupHandle             	= function: 0x00241380 (function)
         GetAbsOrigin                    	= function: 0x00241438 (function)
         GetAngles                       	= function: 0x002414e8 (function)
         GetAbsScale                     	= function: 0x00241598 (function)
         SetAbsScale                     	= function: 0x00241648 (function)
         GetLocalScale                   	= function: 0x002416f8 (function)
         SetLocalScale                   	= function: 0x002417a8 (function)
         SetAbsOrigin                    	= function: 0x00241858 (function)
         GetCenter                       	= function: 0x00241908 (function)
         GetTeamNumber                   	= function: 0x002419b8 (function)
         GetTeam                         	= function: 0x00241a68 (function)
         SetTeam                         	= function: 0x00241ae8 (function)
         FollowEntity                    	= function: 0x00241b68 (function)
         FollowEntityMerge               	= function: 0x00241c18 (function)
         Trigger                         	= function: 0x00241cd0 (function)
         SetContextThink                 	= function: 0x00241d78 (function)
         SetContext                      	= function: 0x00241e28 (function)
         SetContextNum                   	= function: 0x00240330 (function)
         GetContext                      	= function: 0x002403e0 (function)
         GatherCriteria                  	= function: 0x00240490 (function)
         TakeDamage                      	= function: 0x00240540 (function)
         IsAlive                         	= function: 0x002405f0 (function)
         IsPlayerPawn                    	= function: 0x00240698 (function)
         IsPlayerController              	= function: 0x00240748 (function)
         IsNPC                           	= function: 0x00240800 (function)
         IsDOTANPC                       	= function: 0x002408a8 (function)
         GetMaxHealth                    	= function: 0x00240958 (function)
         SetMaxHealth                    	= function: 0x00240a08 (function)
         SetHealth                       	= function: 0x00240ab8 (function)
         GetHealth                       	= function: 0x00240b68 (function)
         SetGravity                      	= function: 0x00240c18 (function)
         SetFriction                     	= function: 0x00240cc8 (function)
         SetVelocity                     	= function: 0x00240d78 (function)
         GetLocalVelocity                	= function: 0x00240e28 (function)
         GetVelocity                     	= function: 0x002436a8 (function)
         ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
         GetLocalAngularVelocity         	= function: 0x002438d8 (function)
         GetBaseVelocity                 	= function: 0x00243990 (function)
         OverrideFriction                	= function: 0x00243a40 (function)
         EmitSound                       	= function: 0x00243af8 (function)
         EmitSoundParams                 	= function: 0x00243ba8 (function)
         StopSound                       	= function: 0x00243c58 (function)
         GetSoundDuration                	= function: 0x00243d08 (function)
         PrecacheScriptSound             	= function: 0x00243dc0 (function)
         IsPlayer                        	= function: 0x00243e78 (function)
         GetOrigin                       	= function: 0x00243f28 (function)
         IsNull                          	= function: 0x0023e670 (function)
         SetThink                        	= function: 0x00308700 (function)
         FDesc                           	= table: 0x0023e6e0 (table, already seen)
         StopThink                       	= function: 0x00308730 (function)
         IsInstance                      	= function: 0x00308760 (function)
         IsBaseNPC                       	= function: 0x00337ae8 (function)
         Kill                            	= function: 0x0023e728 (function)
         GetForwardVector                	= function: 0x0023e810 (function)
         GetRightVector                  	= function: 0x0023e8c8 (function)
         GetLeftVector                   	= function: 0x0023ea68 (function)
         GetUpVector                     	= function: 0x0023eae8 (function)
         GetModelName                    	= function: 0x0023ea00 (function)
         GetMoveParent                   	= function: 0x0023ecd0 (function)
         GetRootMoveParent               	= function: 0x0023e978 (function)
         FirstMoveChild                  	= function: 0x0023ef08 (function)
         NextMovePeer                    	= function: 0x0023eb98 (function)
         GetOwnerEntity                  	= function: 0x0023f140 (function)
         IsNull                          	= function: 0x0023d458 (function)
         FireOutput                      	= function: 0x0023d570 (function)
         RemoveSelf                      	= function: 0x0023d688 (function)
         GetIntAttr                      	= function: 0x0023d738 (function)
         SetIntAttr                      	= function: 0x0023d870 (function)
         FDesc                           	= table: 0x0023d4f0 (table, already seen)
         GetDebugName                    	= function: 0x0023d5e0 (function)
         ConnectOutput                   	= function: 0x0023dad0 (function)
         RedirectOutput                  	= function: 0x0023d7a8 (function)
         DisconnectOutput                	= function: 0x00214310 (function)
         DisconnectRedirectedOutput      	= function: 0x00214988 (function)
         GetEntityIndex                  	= function: 0x0023d998 (function)
         entindex                        	= function: 0x0023da18 (function)
         GetClassname                    	= function: 0x0023de90 (function)
         GetEntityHandle                 	= function: 0x0023df10 (function)
         Destroy                         	= function: 0x0023df90 (function)
         GetPublicScriptScope            	= function: 0x0023db80 (function)
         GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
         GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
         GetName                         	= function: 0x0023d8f0 (function)
      }
      IsNull                          	= function: 0x002c2d60 (function)
      FDesc                           	= table: 0x002c2dd0 (table)
      {
         SetEnabled                      	= void SetEnabled(bool bEnabled)
 (userdata)
         SetOtherBlocker                 	= void SetOtherBlocker(handle hBlocker)
 (userdata)
      }
      SetOtherBlocker                 	= function: 0x002c2e18 (function)
      SetEnabled                      	= function: 0x002c2f30 (function)
   }
   CDOTA_MapTree                   	= table: 0x002c30e0 (table)
   {
      metatable = table: 0x0023e628
      {
         GetChildren                     	= function: 0x0023f1f0 (function)
         SetParent                       	= function: 0x0023f2a0 (function)
         SetConstraint                   	= function: 0x0023f350 (function)
         EyePosition                     	= function: 0x0023f400 (function)
         SetAngles                       	= function: 0x0023ed80 (function)
         SetAbsAngles                    	= function: 0x0023ee30 (function)
         GetAnglesAsVector               	= function: 0x0023efb8 (function)
         EyeAngles                       	= function: 0x0023f070 (function)
         SetOrigin                       	= function: 0x0023fac0 (function)
         SetLocalAngles                  	= function: 0x0023fb70 (function)
         GetLocalAngles                  	= function: 0x0023fc20 (function)
         SetLocalOrigin                  	= function: 0x0023fcd0 (function)
         GetLocalOrigin                  	= function: 0x0023fd80 (function)
         TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
         TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
         SetForwardVector                	= function: 0x0023ffb0 (function)
         GetBoundingMins                 	= function: 0x00240068 (function)
         GetBoundingMaxs                 	= function: 0x00240118 (function)
         GetBounds                       	= function: 0x002401c8 (function)
         GetAngularVelocity              	= function: 0x00240278 (function)
         SetAngularVelocity              	= function: 0x0023f4b0 (function)
         AddEffects                      	= function: 0x0023f568 (function)
         RemoveEffects                   	= function: 0x0023f618 (function)
         Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
         Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
         Attribute_SetIntValue           	= function: 0x0023f878 (function)
         Attribute_GetIntValue           	= function: 0x0023f930 (function)
         HasAttribute                    	= function: 0x0023f9e8 (function)
         DeleteAttribute                 	= function: 0x00240f00 (function)
         ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
         GetOwner                        	= function: 0x00241070 (function)
         SetOwner                        	= function: 0x00241120 (function)
         SetEntityName                   	= function: 0x002411d0 (function)
         GetMass                         	= function: 0x00241280 (function)
         SetMass                         	= function: 0x00241300 (function)
         GetSpawnGroupHandle             	= function: 0x00241380 (function)
         GetAbsOrigin                    	= function: 0x00241438 (function)
         GetAngles                       	= function: 0x002414e8 (function)
         GetAbsScale                     	= function: 0x00241598 (function)
         SetAbsScale                     	= function: 0x00241648 (function)
         GetLocalScale                   	= function: 0x002416f8 (function)
         SetLocalScale                   	= function: 0x002417a8 (function)
         SetAbsOrigin                    	= function: 0x00241858 (function)
         GetCenter                       	= function: 0x00241908 (function)
         GetTeamNumber                   	= function: 0x002419b8 (function)
         GetTeam                         	= function: 0x00241a68 (function)
         SetTeam                         	= function: 0x00241ae8 (function)
         FollowEntity                    	= function: 0x00241b68 (function)
         FollowEntityMerge               	= function: 0x00241c18 (function)
         Trigger                         	= function: 0x00241cd0 (function)
         SetContextThink                 	= function: 0x00241d78 (function)
         SetContext                      	= function: 0x00241e28 (function)
         SetContextNum                   	= function: 0x00240330 (function)
         GetContext                      	= function: 0x002403e0 (function)
         GatherCriteria                  	= function: 0x00240490 (function)
         TakeDamage                      	= function: 0x00240540 (function)
         IsAlive                         	= function: 0x002405f0 (function)
         IsPlayerPawn                    	= function: 0x00240698 (function)
         IsPlayerController              	= function: 0x00240748 (function)
         IsNPC                           	= function: 0x00240800 (function)
         IsDOTANPC                       	= function: 0x002408a8 (function)
         GetMaxHealth                    	= function: 0x00240958 (function)
         SetMaxHealth                    	= function: 0x00240a08 (function)
         SetHealth                       	= function: 0x00240ab8 (function)
         GetHealth                       	= function: 0x00240b68 (function)
         SetGravity                      	= function: 0x00240c18 (function)
         SetFriction                     	= function: 0x00240cc8 (function)
         SetVelocity                     	= function: 0x00240d78 (function)
         GetLocalVelocity                	= function: 0x00240e28 (function)
         GetVelocity                     	= function: 0x002436a8 (function)
         ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
         ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
         GetLocalAngularVelocity         	= function: 0x002438d8 (function)
         GetBaseVelocity                 	= function: 0x00243990 (function)
         OverrideFriction                	= function: 0x00243a40 (function)
         EmitSound                       	= function: 0x00243af8 (function)
         EmitSoundParams                 	= function: 0x00243ba8 (function)
         StopSound                       	= function: 0x00243c58 (function)
         GetSoundDuration                	= function: 0x00243d08 (function)
         PrecacheScriptSound             	= function: 0x00243dc0 (function)
         IsPlayer                        	= function: 0x00243e78 (function)
         GetOrigin                       	= function: 0x00243f28 (function)
         IsNull                          	= function: 0x0023e670 (function)
         SetThink                        	= function: 0x00308700 (function)
         FDesc                           	= table: 0x0023e6e0 (table, already seen)
         StopThink                       	= function: 0x00308730 (function)
         IsInstance                      	= function: 0x00308760 (function)
         IsBaseNPC                       	= function: 0x00337ae8 (function)
         Kill                            	= function: 0x0023e728 (function)
         GetForwardVector                	= function: 0x0023e810 (function)
         GetRightVector                  	= function: 0x0023e8c8 (function)
         GetLeftVector                   	= function: 0x0023ea68 (function)
         GetUpVector                     	= function: 0x0023eae8 (function)
         GetModelName                    	= function: 0x0023ea00 (function)
         GetMoveParent                   	= function: 0x0023ecd0 (function)
         GetRootMoveParent               	= function: 0x0023e978 (function)
         FirstMoveChild                  	= function: 0x0023ef08 (function)
         NextMovePeer                    	= function: 0x0023eb98 (function)
         GetOwnerEntity                  	= function: 0x0023f140 (function)
         IsNull                          	= function: 0x0023d458 (function)
         FireOutput                      	= function: 0x0023d570 (function)
         RemoveSelf                      	= function: 0x0023d688 (function)
         GetIntAttr                      	= function: 0x0023d738 (function)
         SetIntAttr                      	= function: 0x0023d870 (function)
         FDesc                           	= table: 0x0023d4f0 (table, already seen)
         GetDebugName                    	= function: 0x0023d5e0 (function)
         ConnectOutput                   	= function: 0x0023dad0 (function)
         RedirectOutput                  	= function: 0x0023d7a8 (function)
         DisconnectOutput                	= function: 0x00214310 (function)
         DisconnectRedirectedOutput      	= function: 0x00214988 (function)
         GetEntityIndex                  	= function: 0x0023d998 (function)
         entindex                        	= function: 0x0023da18 (function)
         GetClassname                    	= function: 0x0023de90 (function)
         GetEntityHandle                 	= function: 0x0023df10 (function)
         Destroy                         	= function: 0x0023df90 (function)
         GetPublicScriptScope            	= function: 0x0023db80 (function)
         GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
         GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
         GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
         GetName                         	= function: 0x0023d8f0 (function)
      }
      IsNull                          	= function: 0x002c3128 (function)
      GrowBack                        	= function: 0x002c31e0 (function)
      CutDown                         	= function: 0x002c32f8 (function)
      FDesc                           	= table: 0x002c3198 (table)
      {
         CutDown                         	= void CutDown(int nTeamNumberKnownTo)
Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team) (userdata)
         CutDownRegrowAfter              	= void CutDownRegrowAfter(float flRegrowAfter, int nTeamNumberKnownTo)
Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team) (userdata)
         IsStanding                      	= bool IsStanding()
Returns true if the tree is standing, false if it has been cut down (userdata)
         GrowBack                        	= void GrowBack()
Grows back the tree if it was cut down. (userdata)
      }
      IsStanding                      	= function: 0x002c3548 (function)
      CutDownRegrowAfter              	= function: 0x002c33a0 (function)
   }
   CDOTABaseAbility                	= table: 0x002c3700 (table)
   {
      metatable                       	= table: 0x0023e628 (table, already seen)
      IsStolen                        	= function: 0x002ca6f8 (function)
      PlaysDefaultAnimWhenStolen      	= function: 0x002ca7a8 (function)
      GetStolenActivityModifier       	= function: 0x002c6f90 (function)
      RefreshCharges                  	= function: 0x002c7050 (function)
      SetCurrentAbilityCharges        	= function: 0x002c7100 (function)
      EnableAbilityChargesOnTalentUpgrade	= function: 0x002c71c0 (function)
      GetInitialAbilityCharges        	= function: 0x002c7288 (function)
      IsChanneling                    	= function: 0x002ca0c0 (function)
      GetAbilityChargeRestoreTime     	= function: 0x002c7400 (function)
      GetCurrentAbilityCharges        	= function: 0x002c74c0 (function)
      SetUpgradeRecommended           	= function: 0x002c7580 (function)
      GetUpgradeRecommended           	= function: 0x002c7638 (function)
      GetLevelSpecialValueFor         	= function: 0x002c76f0 (function)
      GetLevelSpecialValueNoOverride  	= function: 0x002c77a8 (function)
      GetSpecialValueFor              	= function: 0x002c7868 (function)
      GetAbilityKeyValues             	= function: 0x002c3800 (function)
      GetCursorTarget                 	= function: 0x002c39a0 (function)
      SetLevel                        	= function: 0x002c3d48 (function)
      IsTrained                       	= function: 0x002c3a50 (function)
      GetPlaybackRateOverride         	= function: 0x002c3f50 (function)
      GetAbilityName                  	= function: 0x002c3c40 (function)
      SetAbilityIndex                 	= function: 0x002c4190 (function)
      GetAbilityIndex                 	= function: 0x002c4240 (function)
      GetAbilityType                  	= function: 0x002c42f0 (function)
      OnAbilityPinged                 	= function: 0x002c4420 (function)
      CanAbilityBeUpgraded            	= function: 0x002c3dc8 (function)
      GetHeroLevelRequiredToUpgrade   	= function: 0x002c3e80 (function)
      IsPassive                       	= function: 0x002c4008 (function)
      IsToggle                        	= function: 0x002c40b8 (function)
      IsActivated                     	= function: 0x002c4b60 (function)
      IsRefreshable                   	= function: 0x002c4c10 (function)
      IsCosmetic                      	= function: 0x00337ab8 (function)
      IsSharedWithTeammates           	= function: 0x002c4d70 (function)
      SetHidden                       	= function: 0x002c4e28 (function)
      SetActivated                    	= function: 0x002c4ed8 (function)
      ToggleAutoCast                  	= function: 0x002c4f88 (function)
      GetAutoCastState                	= function: 0x002c5038 (function)
      IsItem                          	= function: 0x002c50f0 (function)
      GetChannelTime                  	= function: 0x002c5170 (function)
      GetDuration                     	= function: 0x002c5aa0 (function)
      EndChannel                      	= function: 0x002c44d0 (function)
      ToggleAbility                   	= function: 0x002c4580 (function)
      CastAbility                     	= function: 0x002c4630 (function)
      GetCastRange                    	= function: 0x00337a88 (function)
      GetEffectiveCastRange           	= function: 0x002c47d8 (function)
      GetCastPointModifier            	= function: 0x002c4910 (function)
      GetAOERadius                    	= function: 0x002c49c8 (function)
      ContinueCasting                 	= function: 0x002c4a78 (function)
      GetAnimationIgnoresModelScale   	= function: 0x002c5f18 (function)
      SetOverrideCastPoint            	= function: 0x002c5fd8 (function)
      GetModifierValue                	= function: 0x002c6090 (function)
      GetModifierValueBonus           	= function: 0x002c6148 (function)
      SetRefCountsModifiers           	= function: 0x002c6200 (function)
      RefCountsModifiers              	= function: 0x002c62b8 (function)
      IncrementModifierRefCount       	= function: 0x002c6370 (function)
      DecrementModifierRefCount       	= function: 0x002c6430 (function)
      NumModifiersUsingAbility        	= function: 0x002c64f0 (function)
      IsFullyCastable                 	= function: 0x002c65b0 (function)
      IsAttributeBonus                	= function: 0x002c6660 (function)
      ProcsMagicStick                 	= function: 0x002c6718 (function)
      StartCooldown                   	= function: 0x002c67c8 (function)
      EndCooldown                     	= function: 0x002c6878 (function)
      GetCooldown                     	= function: 0x002c6928 (function)
      GetEffectiveCooldown            	= function: 0x002c69d8 (function)
      IsNull                          	= function: 0x002c3748 (function)
      GetCastPoint                    	= function: 0x002c4890 (function)
      UpgradeAbility                  	= function: 0x002c43a0 (function)
      GetLevel                        	= function: 0x002c3ad8 (function)
      GetCloneSource                  	= function: 0x002c5b20 (function)
      IsCosmetic_Engine               	= function: 0x002c4cc0 (function)
      GetCursorPosition               	= function: 0x002c3b40 (function)
      GetCursorTargetingNothing       	= function: 0x002c3bc0 (function)
      GetCastRange_Engine             	= function: 0x002c46e0 (function)
      GetMaxAbilityCharges            	= function: 0x002c7348 (function)
      GetChannelStartTime             	= function: 0x002c5220 (function)
      GetCaster                       	= function: 0x002c3920 (function)
      IsHidden                        	= function: 0x002c4ae0 (function)
      FDesc                           	= table: 0x002c37b8 (table)
      {
         IsStolen                        	= bool IsStolen()
 (userdata)
         PlaysDefaultAnimWhenStolen      	= bool PlaysDefaultAnimWhenStolen()
 (userdata)
         GetStolenActivityModifier       	= string GetStolenActivityModifier()
 (userdata)
         RefreshCharges                  	= void RefreshCharges()
 (userdata)
         SetCurrentAbilityCharges        	= void SetCurrentAbilityCharges(int nCharges)
 (userdata)
         EnableAbilityChargesOnTalentUpgrade	= void EnableAbilityChargesOnTalentUpgrade(handle hAbility, string pszTalentName)
 (userdata)
         GetInitialAbilityCharges        	= int GetInitialAbilityCharges(int iLevel)
 (userdata)
         IsChanneling                    	= bool IsChanneling()
Returns whether the ability is currently channeling. (userdata)
         GetAbilityChargeRestoreTime     	= float GetAbilityChargeRestoreTime(int iLevel)
 (userdata)
         GetCurrentAbilityCharges        	= int GetCurrentAbilityCharges()
 (userdata)
         SetUpgradeRecommended           	= void SetUpgradeRecommended(bool bUpgradeRecommended)
 (userdata)
         GetUpgradeRecommended           	= bool GetUpgradeRecommended()
 (userdata)
         GetLevelSpecialValueFor         	= table GetLevelSpecialValueFor(string szName, int nLevel)
 (userdata)
         GetLevelSpecialValueNoOverride  	= table GetLevelSpecialValueNoOverride(string szName, int nLevel)
 (userdata)
         GetSpecialValueFor              	= table GetSpecialValueFor(string szName)
Gets a value from this ability's special value block for its current level. (userdata)
         GetAbilityKeyValues             	= table GetAbilityKeyValues()
Gets the key values definition for this ability. (userdata)
         GetCursorTarget                 	= handle GetCursorTarget()
 (userdata)
         SetLevel                        	= void SetLevel(int iLevel)
Sets the level of this ability. (userdata)
         IsTrained                       	= bool IsTrained()
 (userdata)
         GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
 (userdata)
         GetAbilityName                  	= string GetAbilityName()
Returns the name of this ability. (userdata)
         SetAbilityIndex                 	= void SetAbilityIndex(int iIndex)
 (userdata)
         GetAbilityIndex                 	= int GetAbilityIndex()
 (userdata)
         GetAbilityType                  	= int GetAbilityType()
 (userdata)
         OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
 (userdata)
         CanAbilityBeUpgraded            	= <unknown> CanAbilityBeUpgraded()
 (userdata)
         GetHeroLevelRequiredToUpgrade   	= int GetHeroLevelRequiredToUpgrade()
 (userdata)
         IsPassive                       	= bool IsPassive()
 (userdata)
         IsToggle                        	= bool IsToggle()
 (userdata)
         IsActivated                     	= bool IsActivated()
 (userdata)
         IsRefreshable                   	= bool IsRefreshable()
 (userdata)
         IsCosmetic                      	= bool IsCosmetic(handle hEntity)
 (userdata)
         IsSharedWithTeammates           	= bool IsSharedWithTeammates()
 (userdata)
         SetHidden                       	= void SetHidden(bool bHidden)
 (userdata)
         SetActivated                    	= void SetActivated(bool bActivated)
 (userdata)
         ToggleAutoCast                  	= void ToggleAutoCast()
 (userdata)
         GetAutoCastState                	= bool GetAutoCastState()
 (userdata)
         IsItem                          	= bool IsItem()
 (userdata)
         GetChannelTime                  	= float GetChannelTime()
 (userdata)
         GetDuration                     	= float GetDuration()
 (userdata)
         EndChannel                      	= void EndChannel(bool bInterrupted)
 (userdata)
         ToggleAbility                   	= void ToggleAbility()
 (userdata)
         CastAbility                     	= bool CastAbility()
 (userdata)
         GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Gets the cast range of the ability. (userdata)
         GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Gets the cast range of the ability, taking modifiers into account. (userdata)
         GetCastPointModifier            	= float GetCastPointModifier()
 (userdata)
         GetAOERadius                    	= int GetAOERadius()
 (userdata)
         ContinueCasting                 	= bool ContinueCasting()
 (userdata)
         GetAnimationIgnoresModelScale   	= bool GetAnimationIgnoresModelScale()
 (userdata)
         SetOverrideCastPoint            	= void SetOverrideCastPoint(float flCastPoint)
 (userdata)
         GetModifierValue                	= float GetModifierValue()
 (userdata)
         GetModifierValueBonus           	= float GetModifierValueBonus()
 (userdata)
         SetRefCountsModifiers           	= void SetRefCountsModifiers(bool bRefCounts)
 (userdata)
         RefCountsModifiers              	= bool RefCountsModifiers()
 (userdata)
         IncrementModifierRefCount       	= void IncrementModifierRefCount()
 (userdata)
         DecrementModifierRefCount       	= void DecrementModifierRefCount()
 (userdata)
         NumModifiersUsingAbility        	= int NumModifiersUsingAbility()
 (userdata)
         IsFullyCastable                 	= bool IsFullyCastable()
Returns whether the ability can be cast. (userdata)
         IsAttributeBonus                	= bool IsAttributeBonus()
 (userdata)
         ProcsMagicStick                 	= bool ProcsMagicStick()
 (userdata)
         StartCooldown                   	= void StartCooldown(float flCooldown)
 (userdata)
         EndCooldown                     	= void EndCooldown()
Clear the cooldown remaining on this ability. (userdata)
         GetCooldown                     	= float GetCooldown(int iLevel)
Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left. (userdata)
         GetEffectiveCooldown            	= float GetEffectiveCooldown(int iLevel)
 (userdata)
         GetCastPoint                    	= float GetCastPoint()
 (userdata)
         UpgradeAbility                  	= void UpgradeAbility(bool bSupressSpeech)
 (userdata)
         GetLevel                        	= int GetLevel()
Get the current level of the ability. (userdata)
         GetCloneSource                  	= handle GetCloneSource()
 (userdata)
         GetCursorPosition               	= Vector GetCursorPosition()
 (userdata)
         GetCursorTargetingNothing       	= bool GetCursorTargetingNothing()
 (userdata)
         GetMaxAbilityCharges            	= int GetMaxAbilityCharges(int iLevel)
 (userdata)
         GetChannelStartTime             	= float GetChannelStartTime()
 (userdata)
         GetCaster                       	= handle GetCaster()
 (userdata)
         IsHidden                        	= bool IsHidden()
 (userdata)
         IsCooldownReady                 	= bool IsCooldownReady()
 (userdata)
         GetSharedCooldownName           	= string GetSharedCooldownName()
 (userdata)
         GetCooldownTime                 	= float GetCooldownTime()
 (userdata)
         GetCooldownTimeRemaining        	= float GetCooldownTimeRemaining()
 (userdata)
         SetFrozenCooldown               	= void SetFrozenCooldown(bool bFrozenCooldown)
 (userdata)
         ForceSetFrozenCooldown          	= void ForceSetFrozenCooldown(int nValue)
 (userdata)
         ShouldUseResources              	= bool ShouldUseResources()
 (userdata)
         UseResources                    	= void UseResources(bool bMana, bool bUseHealth, bool bGold, bool bCooldown)
 (userdata)
         PayManaCost                     	= void PayManaCost()
 (userdata)
         RefundManaCost                  	= void RefundManaCost()
 (userdata)
         IsOwnersManaEnough              	= bool IsOwnersManaEnough()
 (userdata)
         PayHealthCost                   	= void PayHealthCost()
 (userdata)
         RefundHealthCost                	= void RefundHealthCost()
 (userdata)
         PayGoldCost                     	= void PayGoldCost()
 (userdata)
         IsOwnersGoldEnough              	= bool IsOwnersGoldEnough(int nIssuerPlayerID)
 (userdata)
         PayGoldCostForUpgrade           	= void PayGoldCostForUpgrade()
 (userdata)
         IsOwnersGoldEnoughForUpgrade    	= bool IsOwnersGoldEnoughForUpgrade()
 (userdata)
         GetAbilityDamage                	= int GetAbilityDamage()
 (userdata)
         CreateVisibilityNode            	= void CreateVisibilityNode(Vector vLocation, float fRadius, float fDuration)
 (userdata)
         GetToggleState                  	= bool GetToggleState()
 (userdata)
         GetBehavior                     	= double GetBehavior()
 (userdata)
         GetBehaviorInt                  	= int GetBehaviorInt()
Get ability behavior flags as an int for compatability. (userdata)
         GetAbilityTargetTeam            	= int GetAbilityTargetTeam()
 (userdata)
         GetAbilityTargetType            	= int GetAbilityTargetType()
 (userdata)
         GetAbilityTargetFlags           	= int GetAbilityTargetFlags()
 (userdata)
         GetAbilityDamageType            	= int GetAbilityDamageType()
 (userdata)
         GetMaxLevel                     	= int GetMaxLevel()
 (userdata)
         RefreshIntrinsicModifier        	= void RefreshIntrinsicModifier()
 (userdata)
         OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
 (userdata)
         OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
 (userdata)
         OnSpellStart                    	= void OnSpellStart()
 (userdata)
         OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
 (userdata)
         OnUpgrade                       	= void OnUpgrade()
 (userdata)
         OnOwnerSpawned                  	= void OnOwnerSpawned()
 (userdata)
         OnToggle                        	= void OnToggle()
 (userdata)
         OnOwnerDied                     	= void OnOwnerDied()
 (userdata)
         GetBackswingTime                	= float GetBackswingTime()
 (userdata)
         GetManaCost                     	= int GetManaCost(int iLevel)
 (userdata)
         GetEffectiveManaCost            	= int GetEffectiveManaCost(int iLevel)
 (userdata)
         GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
 (userdata)
         GetHealthCost                   	= int GetHealthCost(int iLevel)
 (userdata)
         GetEffectiveHealthCost          	= int GetEffectiveHealthCost(int iLevel)
 (userdata)
         GetChannelledHealthCostPerSecond	= int GetChannelledHealthCostPerSecond(int iLevel)
 (userdata)
         GetGoldCost                     	= int GetGoldCost(int iLevel)
 (userdata)
         GetGoldCostForUpgrade           	= int GetGoldCostForUpgrade(int iLevel)
 (userdata)
         GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
 (userdata)
         ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
 (userdata)
         OnHeroLevelUp                   	= void OnHeroLevelUp()
 (userdata)
         OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
 (userdata)
         HeroXPChange                    	= bool HeroXPChange(float flXP)
 (userdata)
         OnChannelThink                  	= void OnChannelThink(float flInterval)
 (userdata)
         MarkAbilityButtonDirty          	= void MarkAbilityButtonDirty()
Mark the ability button for this ability as needing a refresh. (userdata)
         SpeakAbilityConcept             	= void SpeakAbilityConcept(int iConcept)
 (userdata)
         GetConceptRecipientType         	= int GetConceptRecipientType()
 (userdata)
         SpeakTrigger                    	= <unknown> SpeakTrigger()
 (userdata)
         SetInAbilityPhase               	= void SetInAbilityPhase(bool bInAbilityPhase)
 (userdata)
         IsInAbilityPhase                	= bool IsInAbilityPhase()
Returns whether the ability is currently casting. (userdata)
         SetChanneling                   	= void SetChanneling(bool bChanneling)
 (userdata)
         RequiresFacing                  	= bool RequiresFacing()
 (userdata)
         GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
 (userdata)
         GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
 (userdata)
         SetStealable                    	= void SetStealable(bool bStealable)
 (userdata)
         IsStealable                     	= bool IsStealable()
 (userdata)
         IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
 (userdata)
         IsHiddenAsSecondaryAbility      	= bool IsHiddenAsSecondaryAbility()
 (userdata)
         SetStolen                       	= void SetStolen(bool bStolen)
 (userdata)
      }
      IsCooldownReady                 	= function: 0x002c6a90 (function)
      GetSharedCooldownName           	= function: 0x002c6b40 (function)
      GetCooldownTime                 	= function: 0x002c6bf8 (function)
      GetCooldownTimeRemaining        	= function: 0x002c6ca8 (function)
      SetFrozenCooldown               	= function: 0x002c6d68 (function)
      ForceSetFrozenCooldown          	= function: 0x002c6e20 (function)
      ShouldUseResources              	= function: 0x002c6ed8 (function)
      UseResources                    	= function: 0x002c52d8 (function)
      PayManaCost                     	= function: 0x002c5388 (function)
      RefundManaCost                  	= function: 0x002c5438 (function)
      IsOwnersManaEnough              	= function: 0x002c54e8 (function)
      PayHealthCost                   	= function: 0x002c55a0 (function)
      RefundHealthCost                	= function: 0x002c5650 (function)
      PayGoldCost                     	= function: 0x002c5708 (function)
      IsOwnersGoldEnough              	= function: 0x002c57b8 (function)
      PayGoldCostForUpgrade           	= function: 0x002c5870 (function)
      IsOwnersGoldEnoughForUpgrade    	= function: 0x002c5928 (function)
      GetAbilityDamage                	= function: 0x002c59e8 (function)
      CreateVisibilityNode            	= function: 0x002c5ba0 (function)
      GetToggleState                  	= function: 0x002c5c58 (function)
      GetBehavior                     	= function: 0x002c5d08 (function)
      GetBehaviorInt                  	= function: 0x002c5db8 (function)
      GetAbilityTargetTeam            	= function: 0x002c5e68 (function)
      GetAbilityTargetType            	= function: 0x002c87d8 (function)
      GetAbilityTargetFlags           	= function: 0x002c8890 (function)
      GetAbilityDamageType            	= function: 0x002c8948 (function)
      GetMaxLevel                     	= function: 0x002c8a00 (function)
      RefreshIntrinsicModifier        	= function: 0x002c8ab0 (function)
      OnAbilityPhaseStart             	= function: 0x002c8b70 (function)
      OnAbilityPhaseInterrupted       	= function: 0x002c8c28 (function)
      OnSpellStart                    	= function: 0x002c8ce8 (function)
      OnChannelFinish                 	= function: 0x002c8d98 (function)
      OnUpgrade                       	= function: 0x002c8e48 (function)
      OnOwnerSpawned                  	= function: 0x002c8ef8 (function)
      OnToggle                        	= function: 0x002c8fa8 (function)
      OnOwnerDied                     	= function: 0x002c9058 (function)
      GetBackswingTime                	= function: 0x002c9108 (function)
      GetManaCost                     	= function: 0x002c91c0 (function)
      GetEffectiveManaCost            	= function: 0x002c9270 (function)
      GetChannelledManaCostPerSecond  	= function: 0x002c9328 (function)
      GetHealthCost                   	= function: 0x002c93e8 (function)
      GetEffectiveHealthCost          	= function: 0x002c9498 (function)
      GetChannelledHealthCostPerSecond	= function: 0x002c9550 (function)
      GetGoldCost                     	= function: 0x002c9618 (function)
      GetGoldCostForUpgrade           	= function: 0x002c96c8 (function)
      GetIntrinsicModifierName        	= function: 0x002c9780 (function)
      ResetToggleOnRespawn            	= function: 0x002c9840 (function)
      OnHeroLevelUp                   	= function: 0x002c98f8 (function)
      OnHeroCalculateStatBonus        	= function: 0x002c99a8 (function)
      HeroXPChange                    	= function: 0x002c9a68 (function)
      OnChannelThink                  	= function: 0x002c9b18 (function)
      MarkAbilityButtonDirty          	= function: 0x002c9bc8 (function)
      SpeakAbilityConcept             	= function: 0x002c9c80 (function)
      GetConceptRecipientType         	= function: 0x002c9d38 (function)
      SpeakTrigger                    	= function: 0x002c9df0 (function)
      SetInAbilityPhase               	= function: 0x002c9ea0 (function)
      IsInAbilityPhase                	= function: 0x002c9f58 (function)
      SetChanneling                   	= function: 0x002ca010 (function)
      RequiresFacing                  	= function: 0x002ca140 (function)
      GetAssociatedPrimaryAbilities   	= function: 0x002ca1f0 (function)
      GetAssociatedSecondaryAbilities 	= function: 0x002ca2b0 (function)
      SetStealable                    	= function: 0x002ca370 (function)
      IsStealable                     	= function: 0x002ca420 (function)
      IsHiddenWhenStolen              	= function: 0x002ca4d0 (function)
      IsHiddenAsSecondaryAbility      	= function: 0x002ca588 (function)
      SetStolen                       	= function: 0x002ca648 (function)
   }
   _DeepToString                   	= function: 0x00315740 (function)
   scripthelp_DeepString           	= "Convert a class/array/instance/table to a string" (string)
   DeepToString                    	= function: 0x00315770 (function)
   scripthelp_DeepPrint            	= "Print out a class/array/instance/table to the console" (string)
   DeepPrint                       	= function: 0x003157a0 (function)
   DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED	= 34 (number)
   DOTA_UNIT_ORDER_CAST_RIVER_PAINT	= 35 (number)
   DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT	= 36 (number)
   DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN	= 37 (number)
   DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH	= 38 (number)
   DOTA_UNIT_ORDER_MOVE_RELATIVE   	= 39 (number)
   DOTA_UNIT_ORDER_CAST_TOGGLE_ALT 	= 40 (number)
   DOTA_UNIT_CAP_NO_ATTACK         	= 0 (number)
   DOTA_UNIT_CAP_MELEE_ATTACK      	= 1 (number)
   DOTA_UNIT_CAP_RANGED_ATTACK     	= 2 (number)
   DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL	= 4 (number)
   ACT_CROUCHING_PRIMARYATTACK     	= 441 (number)
   ACT_OVERLAY_GRENADEIDLE         	= 442 (number)
   ACT_OVERLAY_GRENADEREADY        	= 443 (number)
   ACT_OVERLAY_PRIMARYATTACK       	= 444 (number)
   ACT_OVERLAY_SHIELD_UP           	= 445 (number)
   ACT_OVERLAY_SHIELD_DOWN         	= 446 (number)
   ACT_OVERLAY_SHIELD_UP_IDLE      	= 447 (number)
   ACT_OVERLAY_SHIELD_ATTACK       	= 448 (number)
   ACT_OVERLAY_SHIELD_KNOCKBACK    	= 449 (number)
   ACT_MP_ATTACK_STAND_POSTFIRE    	= 549 (number)
   ACT_MP_ATTACK_STAND_STARTFIRE   	= 550 (number)
   ACT_MP_ATTACK_CROUCH_PREFIRE    	= 551 (number)
   ACT_MP_ATTACK_CROUCH_POSTFIRE   	= 552 (number)
   ACT_MP_ATTACK_SWIM_PREFIRE      	= 553 (number)
   ACT_CROUCHING_SHIELD_UP         	= 455 (number)
   ACT_CROUCHING_SHIELD_DOWN       	= 456 (number)
   ACT_CROUCHING_SHIELD_UP_IDLE    	= 457 (number)
   ACT_CROUCHING_SHIELD_ATTACK     	= 458 (number)
   ACT_CROUCHING_SHIELD_KNOCKBACK  	= 459 (number)
   ACT_TURNRIGHT45                 	= 460 (number)
   ACT_TURNLEFT45                  	= 461 (number)
   ACT_TURN                        	= 462 (number)
   ACT_OBJ_ASSEMBLING              	= 463 (number)
   ACT_OBJ_DISMANTLING             	= 464 (number)
   ACT_OBJ_STARTUP                 	= 465 (number)
   ACT_MP_SWIM_PRIMARY             	= 565 (number)
   ACT_MP_DEPLOYED_PRIMARY         	= 566 (number)
   ACT_MP_SWIM_DEPLOYED_PRIMARY    	= 567 (number)
   ACT_MP_ATTACK_STAND_PRIMARY     	= 568 (number)
   ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED	= 569 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARY    	= 570 (number)
   ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED	= 571 (number)
   ACT_MP_ATTACK_SWIM_PRIMARY      	= 572 (number)
   ACT_MP_ATTACK_AIRWALK_PRIMARY   	= 573 (number)
   ACT_MP_RELOAD_STAND_PRIMARY     	= 574 (number)
   ACT_MP_RELOAD_STAND_PRIMARY_LOOP	= 575 (number)
   ACT_MP_RELOAD_STAND_PRIMARY_END 	= 576 (number)
   ACT_MP_RELOAD_CROUCH_PRIMARY    	= 577 (number)
   ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP	= 578 (number)
   ACT_MP_RELOAD_CROUCH_PRIMARY_END	= 579 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY      	= 580 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY_LOOP 	= 581 (number)
   ACT_MP_RELOAD_SWIM_PRIMARY_END  	= 582 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY   	= 583 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP	= 584 (number)
   ACT_MP_RELOAD_AIRWALK_PRIMARY_END	= 585 (number)
   ACT_MP_ATTACK_STAND_GRENADE_PRIMARY	= 586 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY	= 587 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY	= 588 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY	= 589 (number)
   ACT_MP_STAND_SECONDARY          	= 590 (number)
   ACT_MP_CROUCH_SECONDARY         	= 591 (number)
   ACT_MP_RUN_SECONDARY            	= 592 (number)
   ACT_MP_WALK_SECONDARY           	= 593 (number)
   ACT_MP_AIRWALK_SECONDARY        	= 594 (number)
   ACT_MP_CROUCHWALK_SECONDARY     	= 595 (number)
   ACT_MP_JUMP_SECONDARY           	= 596 (number)
   ACT_MP_JUMP_START_SECONDARY     	= 597 (number)
   ACT_MP_JUMP_FLOAT_SECONDARY     	= 598 (number)
   ACT_MP_JUMP_LAND_SECONDARY      	= 599 (number)
   ACT_MP_SWIM_SECONDARY           	= 600 (number)
   ACT_MP_ATTACK_STAND_SECONDARY   	= 601 (number)
   ACT_MP_ATTACK_CROUCH_SECONDARY  	= 602 (number)
   ACT_MP_ATTACK_SWIM_SECONDARY    	= 603 (number)
   ACT_MP_ATTACK_AIRWALK_SECONDARY 	= 604 (number)
   ACT_MP_RELOAD_STAND_SECONDARY   	= 605 (number)
   ACT_MP_RELOAD_STAND_SECONDARY_LOOP	= 606 (number)
   ACT_MP_RELOAD_STAND_SECONDARY_END	= 607 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY  	= 608 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP	= 609 (number)
   ACT_MP_RELOAD_CROUCH_SECONDARY_END	= 610 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY    	= 611 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY_LOOP	= 612 (number)
   ACT_MP_RELOAD_SWIM_SECONDARY_END	= 613 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY 	= 614 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP	= 615 (number)
   ACT_MP_RELOAD_AIRWALK_SECONDARY_END	= 616 (number)
   ACT_MP_ATTACK_STAND_GRENADE_SECONDARY	= 617 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY	= 618 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY	= 619 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY	= 620 (number)
   ACT_MP_STAND_MELEE              	= 621 (number)
   ACT_MP_CROUCH_MELEE             	= 622 (number)
   ACT_MP_RUN_MELEE                	= 623 (number)
   ACT_MP_WALK_MELEE               	= 624 (number)
   ACT_MP_AIRWALK_MELEE            	= 625 (number)
   ACT_MP_CROUCHWALK_MELEE         	= 626 (number)
   ACT_MP_JUMP_MELEE               	= 627 (number)
   ACT_MP_JUMP_START_MELEE         	= 628 (number)
   ACT_MP_JUMP_FLOAT_MELEE         	= 629 (number)
   ACT_MP_JUMP_LAND_MELEE          	= 630 (number)
   ACT_MP_SWIM_MELEE               	= 631 (number)
   ACT_MP_ATTACK_STAND_MELEE       	= 632 (number)
   ACT_MP_ATTACK_STAND_MELEE_SECONDARY	= 633 (number)
   ACT_MP_ATTACK_CROUCH_MELEE      	= 634 (number)
   ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY	= 635 (number)
   ACT_MP_ATTACK_SWIM_MELEE        	= 636 (number)
   ACT_MP_ATTACK_AIRWALK_MELEE     	= 637 (number)
   CEntityInstance                 	= table: 0x0021a0a0 (table)
   {
      IsNull                          	= function: 0x0023d458 (function)
      FireOutput                      	= function: 0x0023d570 (function)
      RemoveSelf                      	= function: 0x0023d688 (function)
      GetIntAttr                      	= function: 0x0023d738 (function)
      SetIntAttr                      	= function: 0x0023d870 (function)
      FDesc                           	= table: 0x0023d4f0 (table, already seen)
      GetDebugName                    	= function: 0x0023d5e0 (function)
      ConnectOutput                   	= function: 0x0023dad0 (function)
      RedirectOutput                  	= function: 0x0023d7a8 (function)
      DisconnectOutput                	= function: 0x00214310 (function)
      DisconnectRedirectedOutput      	= function: 0x00214988 (function)
      GetEntityIndex                  	= function: 0x0023d998 (function)
      entindex                        	= function: 0x0023da18 (function)
      GetClassname                    	= function: 0x0023de90 (function)
      GetEntityHandle                 	= function: 0x0023df10 (function)
      Destroy                         	= function: 0x0023df90 (function)
      GetPublicScriptScope            	= function: 0x0023db80 (function)
      GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
      GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
      GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
      GetName                         	= function: 0x0023d8f0 (function)
   }
   ACT_MP_ATTACK_CROUCH_GRENADE_MELEE	= 639 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_MELEE	= 640 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE	= 641 (number)
   ACT_MP_STAND_ITEM1              	= 642 (number)
   ACT_MP_CROUCH_ITEM1             	= 643 (number)
   ACT_MP_RUN_ITEM1                	= 644 (number)
   ACT_MP_WALK_ITEM1               	= 645 (number)
   ACT_MP_AIRWALK_ITEM1            	= 646 (number)
   ACT_MP_CROUCHWALK_ITEM1         	= 647 (number)
   ACT_MP_JUMP_ITEM1               	= 648 (number)
   ACT_MP_JUMP_START_ITEM1         	= 649 (number)
   ACT_MP_JUMP_FLOAT_ITEM1         	= 650 (number)
   ACT_MP_JUMP_LAND_ITEM1          	= 651 (number)
   ACT_MP_SWIM_ITEM1               	= 652 (number)
   ACT_MP_ATTACK_STAND_ITEM1       	= 653 (number)
   ACT_MP_ATTACK_STAND_ITEM1_SECONDARY	= 654 (number)
   ACT_MP_ATTACK_CROUCH_ITEM1      	= 655 (number)
   ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY	= 656 (number)
   ACT_MP_ATTACK_SWIM_ITEM1        	= 657 (number)
   ACT_MP_ATTACK_AIRWALK_ITEM1     	= 658 (number)
   CBaseEntity                     	= table: 0x0023e628 (table, already seen)
   ACT_MP_CROUCH_ITEM2             	= 660 (number)
   ACT_MP_RUN_ITEM2                	= 661 (number)
   ACT_MP_WALK_ITEM2               	= 662 (number)
   ACT_MP_AIRWALK_ITEM2            	= 663 (number)
   ACT_MP_CROUCHWALK_ITEM2         	= 664 (number)
   ACT_MP_JUMP_ITEM2               	= 665 (number)
   ACT_MP_JUMP_START_ITEM2         	= 666 (number)
   ACT_MP_JUMP_FLOAT_ITEM2         	= 667 (number)
   ACT_MP_JUMP_LAND_ITEM2          	= 668 (number)
   ACT_MP_SWIM_ITEM2               	= 669 (number)
   ACT_MP_ATTACK_STAND_ITEM2       	= 670 (number)
   ACT_MP_ATTACK_STAND_ITEM2_SECONDARY	= 671 (number)
   ACT_MP_ATTACK_CROUCH_ITEM2      	= 672 (number)
   ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY	= 673 (number)
   ACT_MP_ATTACK_SWIM_ITEM2        	= 674 (number)
   ACT_MP_ATTACK_AIRWALK_ITEM2     	= 675 (number)
   ACT_MP_GESTURE_FLINCH           	= 676 (number)
   ACT_MP_GESTURE_FLINCH_PRIMARY   	= 677 (number)
   ACT_MP_GESTURE_FLINCH_SECONDARY 	= 678 (number)
   ACT_MP_GESTURE_FLINCH_MELEE     	= 679 (number)
   ACT_MP_GESTURE_FLINCH_ITEM1     	= 680 (number)
   ACT_MP_GESTURE_FLINCH_ITEM2     	= 681 (number)
   ACT_MP_GESTURE_FLINCH_HEAD      	= 682 (number)
   ACT_MP_GESTURE_FLINCH_CHEST     	= 683 (number)
   ACT_MP_GESTURE_FLINCH_STOMACH   	= 684 (number)
   ACT_MP_GESTURE_FLINCH_LEFTARM   	= 685 (number)
   ACT_MP_GESTURE_FLINCH_RIGHTARM  	= 686 (number)
   ACT_MP_GESTURE_FLINCH_LEFTLEG   	= 687 (number)
   ACT_MP_GESTURE_FLINCH_RIGHTLEG  	= 688 (number)
   ACT_MP_GRENADE1_DRAW            	= 689 (number)
   ACT_MP_GRENADE1_IDLE            	= 690 (number)
   ACT_MP_GRENADE1_ATTACK          	= 691 (number)
   ACT_MP_GRENADE2_DRAW            	= 692 (number)
   ACT_MP_GRENADE2_IDLE            	= 693 (number)
   ACT_MP_GRENADE2_ATTACK          	= 694 (number)
   ACT_MP_PRIMARY_GRENADE1_DRAW    	= 695 (number)
   ACT_MP_PRIMARY_GRENADE1_IDLE    	= 696 (number)
   ACT_MP_PRIMARY_GRENADE1_ATTACK  	= 697 (number)
   ACT_MP_PRIMARY_GRENADE2_DRAW    	= 698 (number)
   ACT_MP_PRIMARY_GRENADE2_IDLE    	= 699 (number)
   ACT_MP_PRIMARY_GRENADE2_ATTACK  	= 700 (number)
   ACT_MP_SECONDARY_GRENADE1_DRAW  	= 701 (number)
   ACT_MP_SECONDARY_GRENADE1_IDLE  	= 702 (number)
   ACT_MP_SECONDARY_GRENADE1_ATTACK	= 703 (number)
   ACT_MP_SECONDARY_GRENADE2_DRAW  	= 704 (number)
   ACT_MP_SECONDARY_GRENADE2_IDLE  	= 705 (number)
   ACT_MP_SECONDARY_GRENADE2_ATTACK	= 706 (number)
   ACT_MP_MELEE_GRENADE1_DRAW      	= 707 (number)
   ACT_MP_MELEE_GRENADE1_IDLE      	= 708 (number)
   ACT_MP_MELEE_GRENADE1_ATTACK    	= 709 (number)
   ACT_MP_MELEE_GRENADE2_DRAW      	= 710 (number)
   ACT_MP_MELEE_GRENADE2_IDLE      	= 711 (number)
   ACT_MP_MELEE_GRENADE2_ATTACK    	= 712 (number)
   ACT_MP_ITEM1_GRENADE1_DRAW      	= 713 (number)
   ACT_MP_ITEM1_GRENADE1_IDLE      	= 714 (number)
   ACT_MP_ITEM1_GRENADE1_ATTACK    	= 715 (number)
   ACT_MP_ITEM1_GRENADE2_DRAW      	= 716 (number)
   ACT_MP_ITEM1_GRENADE2_IDLE      	= 717 (number)
   ACT_MP_ITEM1_GRENADE2_ATTACK    	= 718 (number)
   ACT_MP_ITEM2_GRENADE1_DRAW      	= 719 (number)
   ACT_MP_ITEM2_GRENADE1_IDLE      	= 720 (number)
   ACT_MP_ITEM2_GRENADE1_ATTACK    	= 721 (number)
   ACT_MP_ITEM2_GRENADE2_DRAW      	= 722 (number)
   ACT_MP_ITEM2_GRENADE2_IDLE      	= 723 (number)
   ACT_MP_ITEM2_GRENADE2_ATTACK    	= 724 (number)
   ACT_MP_STAND_BUILDING           	= 725 (number)
   ACT_MP_CROUCH_BUILDING          	= 726 (number)
   ACT_MP_RUN_BUILDING             	= 727 (number)
   ACT_MP_WALK_BUILDING            	= 728 (number)
   ACT_MP_AIRWALK_BUILDING         	= 729 (number)
   ACT_MP_CROUCHWALK_BUILDING      	= 730 (number)
   ACT_MP_JUMP_BUILDING            	= 731 (number)
   ACT_MP_JUMP_START_BUILDING      	= 732 (number)
   ACT_MP_JUMP_FLOAT_BUILDING      	= 733 (number)
   ACT_MP_JUMP_LAND_BUILDING       	= 734 (number)
   ACT_MP_SWIM_BUILDING            	= 735 (number)
   ACT_MP_ATTACK_STAND_BUILDING    	= 736 (number)
   ACT_MP_ATTACK_CROUCH_BUILDING   	= 737 (number)
   ACT_MP_ATTACK_SWIM_BUILDING     	= 738 (number)
   ACT_MP_ATTACK_AIRWALK_BUILDING  	= 739 (number)
   ACT_MP_ATTACK_STAND_GRENADE_BUILDING	= 740 (number)
   ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING	= 741 (number)
   ACT_MP_ATTACK_SWIM_GRENADE_BUILDING	= 742 (number)
   ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING	= 743 (number)
   ACT_MP_STAND_PDA                	= 744 (number)
   ACT_MP_CROUCH_PDA               	= 745 (number)
   ACT_MP_RUN_PDA                  	= 746 (number)
   ACT_MP_WALK_PDA                 	= 747 (number)
   ACT_VM_UNUSABLE_TO_USABLE       	= 806 (number)
   ACT_VM_USABLE_TO_UNUSABLE       	= 807 (number)
   ACT_PRIMARY_VM_DRAW             	= 808 (number)
   ACT_PRIMARY_VM_HOLSTER          	= 809 (number)
   ACT_PRIMARY_VM_IDLE             	= 810 (number)
   FrameTime                       	= function: 0x00244058 (function)
   Script_RandomFloat              	= function: 0x00244210 (function)
   CancelEntityIOEvents            	= function: 0x002442c8 (function)
   GetMaxOutputDelay               	= function: 0x00244380 (function)
   ExponentialDecay                	= function: 0x00244438 (function)
   SplineVectors                   	= function: 0x00244108 (function)
   SplineQuaternions               	= function: 0x00244678 (function)
   AxisAngleToQuaternion           	= function: 0x00244730 (function)
   RotateQuaternionByAxisAngle     	= function: 0x002447e8 (function)
   LerpVectors                     	= function: 0x002448a8 (function)
   CrossVectors                    	= function: 0x00244958 (function)
   RotationDeltaAsAngularVelocity  	= function: 0x00244a08 (function)
   FireEntityIOInputVec            	= function: 0x00244ac8 (function)
   FireEntityIOInputString         	= function: 0x002444f0 (function)
   FireEntityIOInputNameOnly       	= function: 0x002445a8 (function)
   SetRenderingEnabled             	= function: 0x00244e88 (function)
   cvar_getf                       	= function: 0x00244f40 (function)
   cvar_setf                       	= function: 0x00244ff0 (function)
   ShowMessage                     	= function: 0x002450a0 (function)
   GetMapName                      	= function: 0x00245150 (function)
   SetQuestName                    	= function: 0x00245200 (function)
   SetQuestPhase                   	= function: 0x002452b0 (function)
   SendToConsole                   	= function: 0x00245360 (function)
   SendToServerConsole             	= function: 0x00245410 (function)
   PrintLinkedConsoleMessage       	= function: 0x002454c8 (function)
   InitLogFile                     	= function: 0x00245588 (function)
   AppendToLogFile                 	= function: 0x00245638 (function)
   DoScriptAssert                  	= function: 0x002456e8 (function)
   Time                            	= function: 0x00245798 (function)
   Plat_FloatTime                  	= function: 0x00244b80 (function)
   LocalTime                       	= function: 0x00244c30 (function)
   UTIL_Remove                     	= function: 0x00244ce0 (function)
   UTIL_RemoveImmediate            	= function: 0x00244d90 (function)
   DoEntFire                       	= function: 0x00244e48 (function)
   CreateSceneEntity               	= function: 0x00245e90 (function)
   ACT_PDA_VM_SECONDARYATTACK      	= 846 (number)
   ACT_PDA_VM_RELOAD               	= 847 (number)
   ACT_PDA_VM_DRYFIRE              	= 848 (number)
   ACT_PDA_VM_IDLE_TO_LOWERED      	= 849 (number)
   ACT_PDA_VM_IDLE_LOWERED         	= 850 (number)
   ACT_PDA_VM_LOWERED_TO_IDLE      	= 851 (number)
   ACT_ITEM1_VM_DRAW               	= 852 (number)
   ACT_ITEM1_VM_HOLSTER            	= 853 (number)
   ACT_ITEM1_VM_IDLE               	= 854 (number)
   ACT_ITEM1_VM_PULLBACK           	= 855 (number)
   ACT_ITEM1_VM_PRIMARYATTACK      	= 856 (number)
   ACT_ITEM1_VM_SECONDARYATTACK    	= 857 (number)
   ACT_ITEM1_VM_RELOAD             	= 858 (number)
   ACT_ITEM1_VM_DRYFIRE            	= 859 (number)
   ACT_ITEM1_VM_IDLE_TO_LOWERED    	= 860 (number)
   ACT_ITEM1_VM_IDLE_LOWERED       	= 861 (number)
   ACT_ITEM1_VM_LOWERED_TO_IDLE    	= 862 (number)
   ACT_ITEM2_VM_DRAW               	= 863 (number)
   ACT_ITEM2_VM_HOLSTER            	= 864 (number)
   ACT_ITEM2_VM_IDLE               	= 865 (number)
   ACT_ITEM2_VM_PULLBACK           	= 866 (number)
   ACT_ITEM2_VM_PRIMARYATTACK      	= 867 (number)
   ACT_ITEM2_VM_SECONDARYATTACK    	= 868 (number)
   ACT_ITEM2_VM_RELOAD             	= 869 (number)
   ACT_ITEM2_VM_DRYFIRE            	= 870 (number)
   ACT_ITEM2_VM_IDLE_TO_LOWERED    	= 871 (number)
   ACT_ITEM2_VM_IDLE_LOWERED       	= 872 (number)
   ACT_ITEM2_VM_LOWERED_TO_IDLE    	= 873 (number)
   ACT_RELOAD_SUCCEED              	= 874 (number)
   ACT_RELOAD_FAIL                 	= 875 (number)
   SetOpvarFloatAll                	= function: 0x00245ae0 (function)
   ACT_RUN_AIM_AUTOGUN             	= 877 (number)
   ACT_IDLE_AUTOGUN                	= 878 (number)
   ACT_IDLE_AIM_AUTOGUN            	= 879 (number)
   ACT_RELOAD_AUTOGUN              	= 880 (number)
   ACT_CROUCH_IDLE_AUTOGUN         	= 881 (number)
   ACT_RANGE_ATTACK_AUTOGUN        	= 882 (number)
   ACT_JUMP_AUTOGUN                	= 883 (number)
   StopSoundEvent                  	= function: 0x002481e8 (function)
   ACT_WALK_AIM_DUAL               	= 885 (number)
   ACT_RUN_AIM_DUAL                	= 886 (number)
   ACT_IDLE_DUAL                   	= 887 (number)
   ACT_IDLE_AIM_DUAL               	= 888 (number)
   ACT_RELOAD_DUAL                 	= 889 (number)
   ACT_CROUCH_IDLE_DUAL            	= 890 (number)
   ACT_RANGE_ATTACK_DUAL           	= 891 (number)
   ACT_JUMP_DUAL                   	= 892 (number)
   ACT_IDLE_AIM_SHOTGUN            	= 893 (number)
   ACT_CROUCH_IDLE_SHOTGUN         	= 894 (number)
   ACT_IDLE_AIM_RIFLE              	= 895 (number)
   ACT_CROUCH_IDLE_RIFLE           	= 896 (number)
   ACT_RANGE_ATTACK_RIFLE          	= 897 (number)
   ACT_SLEEP                       	= 898 (number)
   DebugDrawCircle                 	= function: 0x00248c68 (function)
   DebugDrawSphere                 	= function: 0x00248d18 (function)
   DebugDrawLine_vCol              	= function: 0x00248dc8 (function)
   DebugDrawBoxDirection           	= function: 0x00248e80 (function)
   DebugDrawClear                  	= function: 0x00248f38 (function)
   ReloadMOTD                      	= function: 0x00248fe8 (function)
   CreateDamageInfo                	= function: 0x00249098 (function)
   DestroyDamageInfo               	= function: 0x00249150 (function)
   CreateEffect                    	= function: 0x00249208 (function)
   StopEffect                      	= function: 0x002492b8 (function)
   TraceLine                       	= function: 0x00249368 (function)
   TraceHull                       	= function: 0x00249418 (function)
   TraceCollideable                	= function: 0x002494c8 (function)
   GetFrameCount                   	= function: 0x00249580 (function)
   RegisterSpawnGroupFilterProxy   	= function: 0x00249630 (function)
   RemoveSpawnGroupFilterProxy     	= function: 0x002496f0 (function)
   UnloadSpawnGroup                	= function: 0x002497b0 (function)
   UnloadSpawnGroupByHandle        	= function: 0x00249868 (function)
   GetActiveSpawnGroupHandle       	= function: 0x00249928 (function)
   ManuallyTriggerSpawnGroupCompletion	= function: 0x002499e8 (function)
   ACT_FIRE_LOOP                   	= 437 (number)
   ACT_FIRE_END                    	= 438 (number)
   ACT_CROUCHING_GRENADEIDLE       	= 439 (number)
   ACT_CROUCHING_GRENADEREADY      	= 440 (number)
   ACT_SCRIPT_CUSTOM_12            	= 923 (number)
   ACT_SCRIPT_CUSTOM_13            	= 924 (number)
   DMG_DROWN                       	= 16384 (number)
   DMG_PARALYZE                    	= 32768 (number)
   DMG_NERVEGAS                    	= 65536 (number)
   DMG_POISON                      	= 131072 (number)
   DMG_RADIATION                   	= 262144 (number)
   DMG_DROWNRECOVER                	= 524288 (number)
   DMG_ACID                        	= 1048576 (number)
   DMG_SLOWBURN                    	= 2097152 (number)
   DMG_REMOVENORAGDOLL             	= 4194304 (number)
   DMG_PHYSGUN                     	= 8388608 (number)
   DMG_PLASMA                      	= 16777216 (number)
   EMPTY                           	= 0 (number)
   SECONDARY_EMPTY                 	= 1 (number)
   SINGLE_SHOT                     	= 2 (number)
   DOUBLE_SHOT                     	= 3 (number)
   MELEE_MISS                      	= 4 (number)
   MELEE_HIT                       	= 5 (number)
   MELEE_HIT_WORLD                 	= 6 (number)
   MELEE_HIT_PLAYER                	= 7 (number)
   MELEE_HIT_NPC                   	= 8 (number)
   SPECIAL1                        	= 9 (number)
   SPECIAL2                        	= 10 (number)
   SPECIAL3                        	= 11 (number)
   NEARLYEMPTY                     	= 12 (number)
   __UNKNOWN__                     	= 16 (number)
   ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY	= 950 (number)
   ACT_RAGDOLL_RECOVERY_FRONT      	= 951 (number)
   ACT_RAGDOLL_RECOVERY_BACK       	= 952 (number)
   ACT_RAGDOLL_RECOVERY_LEFT       	= 953 (number)
   ACT_RAGDOLL_RECOVERY_RIGHT      	= 954 (number)
   ACT_GRABBITYGLOVES_GRAB         	= 955 (number)
   ACT_GRABBITYGLOVES_RELEASE      	= 956 (number)
   ACT_GRABBITYGLOVES_GRAB_IDLE    	= 957 (number)
   ACT_GRABBITYGLOVES_ACTIVE       	= 958 (number)
   ACT_GRABBITYGLOVES_ACTIVE_IDLE  	= 959 (number)
   ACT_GRABBITYGLOVES_DEACTIVATE   	= 960 (number)
   ACT_GRABBITYGLOVES_PULL         	= 961 (number)
   ACT_HEADCRAB_SMOKE_BOMB         	= 962 (number)
   ACT_HEADCRAB_SPIT               	= 963 (number)
   ACT_ZOMBIE_TRIP                 	= 964 (number)
   ACT_ZOMBIE_LUNGE                	= 965 (number)
   ACT_NEUTRAL_REF_POSE            	= 966 (number)
   ACT_ANTLION_SCUTTLE_FORWARD     	= 967 (number)
   ACT_ANTLION_SCUTTLE_BACK        	= 968 (number)
   ACT_ANTLION_SCUTTLE_LEFT        	= 969 (number)
   ACT_ANTLION_SCUTTLE_RIGHT       	= 970 (number)
   ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK	= 971 (number)
   ACT_VR_SHOTGUN_IDLE             	= 972 (number)
   ACT_VR_SHOTGUN_OPEN_CHAMBER     	= 973 (number)
   ACT_VR_SHOTGUN_RELOAD_1         	= 974 (number)
   ACT_VR_SHOTGUN_RELOAD_2         	= 975 (number)
   ACT_VR_SHOTGUN_RELOAD_3         	= 976 (number)
   ACT_VR_SHOTGUN_CLOSE_CHAMBER    	= 977 (number)
   ACT_VR_SHOTGUN_TRIGGER_SQUEEZE  	= 978 (number)
   ACT_VR_SHOTGUN_SHOOT            	= 979 (number)
   ACT_VR_SHOTGUN_SLIDE_BACK       	= 980 (number)
   VectorDistanceSq                	= function: 0x00313888 (function)
   VectorDistance                  	= function: 0x003138b8 (function)
   VectorLerp                      	= function: 0x003138e8 (function)
   VectorIsZero                    	= function: 0x00313918 (function)
   RemapVal                        	= function: 0x00313948 (function)
   RemapValClamped                 	= function: 0x003143a0 (function)
   Merge                           	= function: 0x00312070 (function)
   ParticleEffectControlPoints     	= table: 0x00312d70 (table)
   {
      __instanceof__                  	= function: 0x00315020 (function)
      __class__                       	= table: 0x00312d70 (table, already seen)
      __getbase__                     	= function: 0x003150b8 (function)
      __getclass__                    	= function: 0x00312db8 (function)
      __initprops__                   	= table: 0x00314fd8 (table)
      {
      }
   }
   scripthelp_DeepPrintTable       	= "Print out a table (and subtables) to the console" (string)
   _DeepPrintMetaTable             	= function: 0x00318368 (function)
   _DeepPrintTable                 	= function: 0x00318398 (function)
   _deepprint_alreadyseen          	= table: 0x003825d0 (array table)
   [
      1                               	= table: 0x00211d90 (table, already seen)
      2                               	= table: 0x00237050 (table, already seen)
      3                               	= table: 0x002358d8 (table, already seen)
      4                               	= table: 0x00235990 (table, already seen)
      5                               	= table: 0x00237240 (table, already seen)
      6                               	= table: 0x002372f8 (table, already seen)
      7                               	= table: 0x0023c960 (table, already seen)
      8                               	= table: 0x002394a8 (table, already seen)
      9                               	= table: 0x00239528 (table, already seen)
      10                              	= table: 0x0023ca18 (table, already seen)
      11                              	= table: 0x002c1fc8 (table, already seen)
      12                              	= table: 0x002a43f8 (table, already seen)
      13                              	= table: 0x002a44b0 (table, already seen)
      14                              	= table: 0x0023e6e0 (table, already seen)
      15                              	= table: 0x0023d4f0 (table, already seen)
      16                              	= table: 0x002c2080 (table, already seen)
      17                              	= table: 0x002c26d0 (table, already seen)
      18                              	= table: 0x002baef8 (table, already seen)
      19                              	= table: 0x002bafb0 (table, already seen)
      20                              	= table: 0x00234028 (table, already seen)
      21                              	= table: 0x0029b0f8 (table, already seen)
      22                              	= table: 0x0029a470 (table, already seen)
      23                              	= table: 0x00298d00 (table, already seen)
      24                              	= table: 0x002c2788 (table, already seen)
      25                              	= table: 0x002c2ae0 (table, already seen)
      26                              	= table: 0x002c2b98 (table, already seen)
      27                              	= table: 0x002c2d18 (table, already seen)
      28                              	= table: 0x0029b040 (table, already seen)
      29                              	= table: 0x002c2dd0 (table, already seen)
      30                              	= table: 0x002c30e0 (table, already seen)
      31                              	= table: 0x0023e628 (table, already seen)
      32                              	= table: 0x002c3198 (table, already seen)
      33                              	= table: 0x002c3700 (table, already seen)
      34                              	= table: 0x002c37b8 (table, already seen)
      35                              	= table: 0x0021a0a0 (table, already seen)
      36                              	= table: 0x00312d70 (table, already seen)
      37                              	= table: 0x00314fd8 (table, already seen)
      38                              	= table: 0x003825d0 (table, already seen)
   ]
   CreateUniformRandomStream       	= function: 0x00245c50 (function)
   SetOpvarFloatPlayer             	= function: 0x00245b98 (function)
   DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1	= 58 (number)
   CustomUI                        	= table: 0x0034ede8 (table)
   {
      metatable = table: 0x0034e898
      {
         IsNull                          	= function: 0x0034e8e0 (function)
         DynamicHud_Create               	= function: 0x0034e998 (function)
         DynamicHud_SetVisible           	= function: 0x0034eab8 (function)
         DynamicHud_SetDialogVariables   	= function: 0x0034eb70 (function)
         DynamicHud_Destroy              	= function: 0x0034ed20 (function)
         FDesc                           	= table: 0x0034e950 (table)
         {
            DynamicHud_Destroy              	= void DynamicHud_Destroy(int, string)
Destroy a custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID ) (userdata)
            DynamicHud_Create               	= void DynamicHud_Create(int, string, string, handle)
Create a new custom UI HUD element for the specified player(s). ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ ) (userdata)
            DynamicHud_SetVisible           	= void DynamicHud_SetVisible(int, string, bool)
Toggle the visibility of an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, bool Visible ) (userdata)
            DynamicHud_SetDialogVariables   	= void DynamicHud_SetDialogVariables(int, string, handle)
Add or modify dialog variables for an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables ) (userdata)
         }
      }
      __self                          	= userdata: 0x0034ee60 (userdata)
   }
   CDOTA_CustomUIManager           	= table: 0x0034e898 (table, already seen)
   CustomNetTables                 	= table: 0x0034e6a0 (table)
   {
      metatable = table: 0x0034e390
      {
         IsNull                          	= function: 0x0034e3d8 (function)
         FDesc                           	= table: 0x0034e448 (table)
         {
            GetTableValue                   	= table GetTableValue(string, string)
( string TableName, string KeyName ) (userdata)
            SetTableValue                   	= bool SetTableValue(string, string, handle)
( string TableName, string KeyName, script_table Value ) (userdata)
         }
         GetTableValue                   	= function: 0x0034e5a8 (function)
         SetTableValue                   	= function: 0x0034e490 (function)
      }
      __self                          	= userdata: 0x0034e718 (userdata)
   }
   CCustomNetTableManager          	= table: 0x0034e390 (table, already seen)
   CustomGameEventManager          	= table: 0x0034e190 (table)
   {
      metatable = table: 0x0034db10
      {
         IsNull                          	= function: 0x0034db58 (function)
         Send_ServerToTeam               	= function: 0x0034df90 (function)
         Send_ServerToPlayer             	= function: 0x0034e010 (function)
         Send_ServerToAllClients         	= function: 0x0034dde8 (function)
         FDesc                           	= table: 0x0034dbc8 (table)
         {
            Send_ServerToAllClients         	= void Send_ServerToAllClients(string, handle)
( string EventName, table EventData ) (userdata)
            Send_ServerToTeam               	= void Send_ServerToTeam(int, string, handle)
( int TeamNumber, string EventName, table EventData ) (userdata)
            Send_ServerToPlayer             	= void Send_ServerToPlayer(handle, string, handle)
( Entity Player, string EventName, table EventData ) (userdata)
            RegisterListener                	= int RegisterListener(string, handle)
( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later. (userdata)
            UnregisterListener              	= void UnregisterListener(int)
( int ListnerID ) - Unregister a specific listener (userdata)
         }
         RegisterListener                	= function: 0x0034dc10 (function)
         UnregisterListener              	= function: 0x0034dd30 (function)
      }
      __self                          	= userdata: 0x0034e208 (userdata)
   }
   CCustomGameEventManager         	= table: 0x0034db10 (table, already seen)
   VoteSystem                      	= table: 0x0034d918 (table)
   {
      metatable = table: 0x0034d6b8
      {
         IsNull                          	= function: 0x0034d700 (function)
         FDesc                           	= table: 0x0034d770 (table)
         {
            StartVote                       	= void StartVote(handle)
Starts a vote, based upon a table of parameters (userdata)
         }
         StartVote                       	= function: 0x0034d7b8 (function)
      }
      __self                          	= userdata: 0x0034d990 (userdata)
   }
   CDOTAVoteSystem                 	= table: 0x0034d6b8 (table, already seen)
   Tutorial                        	= table: 0x0034d4c8 (table)
   {
      metatable = table: 0x00346b18
      {
         IsNull                          	= function: 0x00346b60 (function)
         AddBot                          	= function: 0x0034cae8 (function)
         AddShopWhitelistItem            	= function: 0x0034c560 (function)
         RemoveShopWhitelistItem         	= function: 0x0034c618 (function)
         SetTutorialUI                   	= function: 0x0034c828 (function)
         FDesc                           	= table: 0x00346bd0 (table)
         {
            FinishTutorial                  	= void FinishTutorial()
End the tutorial. (userdata)
            AddBot                          	= bool AddBot(string, string, string, bool)
Add a computer controlled bot. (userdata)
            AddShopWhitelistItem            	= void AddShopWhitelistItem(string)
Add an item to the shop whitelist. (userdata)
            RemoveShopWhitelistItem         	= void RemoveShopWhitelistItem(string)
Remove an item from the shop whitelist. (userdata)
            SetTutorialUI                   	= void SetTutorialUI(int)
Set the UI to use a reduced version to focus attention to specific elements. (userdata)
            SetShopOpen                     	= void SetShopOpen(bool)
Set the shop open or closed. (userdata)
            SetItemGuide                    	= void SetItemGuide(string)
Set the current item guide. (userdata)
            SetQuickBuy                     	= void SetQuickBuy(string)
Set players quick buy item. (userdata)
            SetOrModifyPlayerGold           	= void SetOrModifyPlayerGold(int, bool)
Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify (userdata)
            IsItemInWhiteList               	= bool IsItemInWhiteList(string)
Is this item currently in the white list. (userdata)
            UpgradePlayerAbility            	= void UpgradePlayerAbility(string)
Upgrade a specific ability for the local hero (userdata)
            CompleteQuest                   	= void CompleteQuest(string)
Complete a quest, (userdata)
            SetTutorialConvar               	= void SetTutorialConvar(string, string)
Set a tutorial convar (userdata)
            SelectPlayerTeam                	= void SelectPlayerTeam(string)
Select the team for the local player (userdata)
            SelectHero                      	= void SelectHero(string)
Select a hero for the local player (userdata)
            SetWhiteListEnabled             	= void SetWhiteListEnabled(bool)
Set if we should whitelist shop items. (userdata)
            AddQuest                        	= void AddQuest(string, int, string, string)
Add a quest to the quest log (userdata)
            CreateLocationTask              	= void CreateLocationTask(Vector)
Add a task to move to a specific location (userdata)
            StartTutorialMode               	= void StartTutorialMode()
Initialize Tutorial Mode (userdata)
            ForceGameStart                  	= void ForceGameStart()
Force the start of the game. (userdata)
            EnablePlayerOffscreenTip        	= void EnablePlayerOffscreenTip(bool)
Enable the tip to alert players how to find their hero. (userdata)
            EnableCreepAggroViz             	= void EnableCreepAggroViz(bool)
Alert the player when a creep becomes agro to their hero. (userdata)
            EnableTowerAggroViz             	= void EnableTowerAggroViz(bool)
Alert the player when a tower becomes agro to their hero. (userdata)
         }
         SetItemGuide                    	= function: 0x0034d268 (function)
         SetQuickBuy                     	= function: 0x0034d318 (function)
         SetOrModifyPlayerGold           	= function: 0x0034d3c8 (function)
         SetShopOpen                     	= function: 0x0034c8d8 (function)
         IsItemInWhiteList               	= function: 0x0034c7a8 (function)
         SetWhiteListEnabled             	= function: 0x0034cb68 (function)
         FinishTutorial                  	= function: 0x0034ca68 (function)
         CompleteQuest                   	= function: 0x00346fe8 (function)
         SetTutorialConvar               	= function: 0x00346ea0 (function)
         SelectPlayerTeam                	= function: 0x00346c18 (function)
         SelectHero                      	= function: 0x00346d38 (function)
         UpgradePlayerAbility            	= function: 0x00346de8 (function)
         AddQuest                        	= function: 0x00346f68 (function)
         CreateLocationTask              	= function: 0x00346c90 (function)
         StartTutorialMode               	= function: 0x0034c4a8 (function)
         ForceGameStart                  	= function: 0x0034c9e8 (function)
         EnablePlayerOffscreenTip        	= function: 0x0034c6e8 (function)
         EnableCreepAggroViz             	= function: 0x00347068 (function)
         EnableTowerAggroViz             	= function: 0x0034c930 (function)
      }
      __self                          	= userdata: 0x0034d540 (userdata)
   }
   CDOTATutorial                   	= table: 0x00346b18 (table, already seen)
   GameRules                       	= table: 0x00346928 (table)
   {
      metatable = table: 0x003380d8
      {
         SetCustomGameSetupRemainingTime 	= function: 0x00344028 (function)
         SetCustomGameSetupAutoLaunchDelay	= function: 0x003440e8 (function)
         EnableCustomGameSetupAutoLaunch 	= function: 0x003441b0 (function)
         LockCustomGameSetupTeamAssignment	= function: 0x00344270 (function)
         SetCustomGameTeamMaxPlayers     	= function: 0x00344338 (function)
         GetCustomGameTeamMaxPlayers     	= function: 0x003443f8 (function)
         SetHeroSelectPenaltyTime        	= function: 0x003444b8 (function)
         SetCustomGameAllowHeroPickMusic 	= function: 0x00344578 (function)
         SetCustomGameAllowBattleMusic   	= function: 0x00344638 (function)
         SetCustomGameAllowMusicAtGameStart	= function: 0x003446f8 (function)
         SetCustomGameAllowSecondaryAbilitiesOnOtherUnits	= function: 0x003447c0 (function)
         GetGameSessionConfigValue       	= function: 0x003471a8 (function)
         GetAnnouncer                    	= function: 0x00347268 (function)
         PlayerHasCustomGameHostPrivileges	= function: 0x00347318 (function)
         GetPlayerCustomGameAccountRecord	= function: 0x003473e0 (function)
         SetCustomGameAccountRecordSaveFunction	= function: 0x003474a8 (function)
         Script_GetMatchID               	= function: 0x00347570 (function)
         SetPostGameLayout               	= function: 0x00347628 (function)
         SetPostGameColumns              	= function: 0x003476e0 (function)
         SetPostGameTeamScores           	= function: 0x00347798 (function)
         SetEventMetadataCustomTable     	= function: 0x00347850 (function)
         AddEventMetadataLeaderboardEntry	= function: 0x00347910 (function)
         AddEventMetadataLeaderboardEntryRawScore	= function: 0x003479d8 (function)
         SetEventSignoutCustomTable      	= function: 0x00347aa8 (function)
         BotPopulate                     	= function: 0x00347b68 (function)
         ResetToCustomGameSetup          	= function: 0x00347c18 (function)
         ResetGameTime                   	= function: 0x00347cd0 (function)
         SetWhiteListEnabled             	= function: 0x00347d80 (function)
         AddItemToWhiteList              	= function: 0x00347e38 (function)
         RemoveItemFromWhiteList         	= function: 0x00347ef0 (function)
         IsItemInWhiteList               	= function: 0x00347fa8 (function)
         ForceGameStart                  	= function: 0x00348060 (function)
         ForceCreepSpawn                 	= function: 0x00348110 (function)
         PrepareSpawners                 	= function: 0x003481c0 (function)
         SpawnAndReleaseCreeps           	= function: 0x00348270 (function)
         SpawnNeutralCreeps              	= function: 0x00348328 (function)
         AddBotPlayerWithEntityScript    	= function: 0x003483e0 (function)
         RemoveFakeClient                	= function: 0x003484a0 (function)
         ExecuteTeamPing                 	= function: 0x00348558 (function)
         State_Get                       	= function: 0x00341d50 (function)
         GetGameTime                     	= function: 0x00341e38 (function)
         GetGameFrameTime                	= function: 0x00342208 (function)
         GetDOTATime                     	= function: 0x003423b0 (function)
         GetDifficulty                   	= function: 0x00342430 (function)
         GetCustomGameDifficulty         	= function: 0x00342348 (function)
         GetBannedHeroes                 	= function: 0x00342620 (function)
         GetBannedHeroIDs                	= function: 0x003422c0 (function)
         IsDev                           	= function: 0x00342858 (function)
         Defeated                        	= function: 0x003424e0 (function)
         ResetDefeated                   	= function: 0x00342a60 (function)
         SetGameWinner                   	= function: 0x00342b10 (function)
         MakeTeamLose                    	= function: 0x00342bc0 (function)
         GetDroppedItem                  	= function: 0x00342c70 (function)
         SetRiverPaint                   	= function: 0x00342d20 (function)
         ClearRiverPaint                 	= function: 0x003426d0 (function)
         NumDroppedItems                 	= function: 0x00342780 (function)
         SendCustomMessage               	= function: 0x003428d8 (function)
         SendCustomMessageToTeam         	= function: 0x00342990 (function)
         SetHeroRespawnEnabled           	= function: 0x003433e0 (function)
         Playtesting_UpdateAddOnKeyValues	= function: 0x00343498 (function)
         ResetToHeroSelection            	= function: 0x00343560 (function)
         SetTreeRegrowTime               	= function: 0x00343618 (function)
         SetHeroSelectionTime            	= function: 0x003436d0 (function)
         SetPreGameTime                  	= function: 0x00343788 (function)
         SetPostGameTime                 	= function: 0x00343838 (function)
         SetStrategyTime                 	= function: 0x003438e8 (function)
         SetShowcaseTime                 	= function: 0x00343998 (function)
         SetRuneSpawnTime                	= function: 0x00343a48 (function)
         SetSameHeroSelectionEnabled     	= function: 0x00343b00 (function)
         SetUseUniversalShopMode         	= function: 0x00343bc0 (function)
         SetUseBaseGoldBountyOnHeroes    	= function: 0x00342dd0 (function)
         SetTimeOfDay                    	= function: 0x00342e90 (function)
         GetTimeOfDay                    	= function: 0x00342f40 (function)
         IsInBanPhase                    	= function: 0x00342ff0 (function)
         GetStateTransitionTime          	= function: 0x00343118 (function)
         IsDaytime                       	= function: 0x00343198 (function)
         IsTemporaryNight                	= function: 0x00343248 (function)
         BeginTemporaryNight             	= function: 0x00343300 (function)
         IsNightstalkerNight             	= function: 0x00344848 (function)
         BeginNightstalkerNight          	= function: 0x00344900 (function)
         SetOverlayHealthBarUnit         	= function: 0x003449b8 (function)
         SetHeroMinimapIconScale         	= function: 0x00344a70 (function)
         SetCreepMinimapIconScale        	= function: 0x00344b28 (function)
         SetCreepSpawningEnabled         	= function: 0x00344be8 (function)
         SetRuneMinimapIconScale         	= function: 0x00344ca0 (function)
         SetSafeToLeave                  	= function: 0x00344d58 (function)
         SetUseCustomHeroXPValues        	= function: 0x00344e08 (function)
         SetCustomGameDifficulty         	= function: 0x00344ec8 (function)
         SetGoldTickTime                 	= function: 0x00344f80 (function)
         SetGoldPerTick                  	= function: 0x00345030 (function)
         SetStartingGold                 	= function: 0x003450e0 (function)
         GetMatchSignoutComplete         	= function: 0x00345190 (function)
         DidMatchSignoutTimeOut          	= function: 0x00345248 (function)
         GetNianTotalDamageTaken         	= function: 0x00345300 (function)
         GetGameModeEntity               	= function: 0x003453b8 (function)
         SetFirstBloodActive             	= function: 0x00345470 (function)
         SetHideKillMessageHeaders       	= function: 0x00345528 (function)
         SetCustomVictoryMessage         	= function: 0x003455e8 (function)
         SetCustomGameEndDelay           	= function: 0x003456a0 (function)
         SetCustomVictoryMessageDuration 	= function: 0x00345758 (function)
         IsGamePaused                    	= function: 0x00345818 (function)
         IsHeroRespawnEnabled            	= function: 0x003458c8 (function)
         AddMinimapDebugPoint            	= function: 0x00343c78 (function)
         AddMinimapDebugPointForTeam     	= function: 0x00343d30 (function)
         FinishCustomGameSetup           	= function: 0x00343df0 (function)
         SetEnableAlternateHeroGrids     	= function: 0x00343ea8 (function)
         SetCustomGameSetupTimeout       	= function: 0x00343f68 (function)
         AddHeroToPlayerAvailability     	= function: 0x003460c8 (function)
         ClearPlayerHeroAvailability     	= function: 0x00346188 (function)
         ResetPlayer                     	= function: 0x00346248 (function)
         SetSuggestAbilitiesEnabled      	= function: 0x003462f8 (function)
         SetSuggestItemsEnabled          	= function: 0x003463b8 (function)
         GetNeutralInitialSpawnOffset    	= function: 0x00346820 (function)
         ShouldHideBlacklistedHeroes     	= function: 0x00346760 (function)
         IsHeroEnabledViaLists           	= function: 0x003466a8 (function)
         SetNeutralInitialSpawnOffset    	= function: 0x003465e8 (function)
         IsSuggestItemsEnabled           	= function: 0x00346530 (function)
         IsSuggestAbilitiesEnabled       	= function: 0x00346470 (function)
         SetHideBlacklistedHeroes        	= function: 0x00346008 (function)
         ClearHeroWhitelist              	= function: 0x00345f50 (function)
         RemoveHeroIDFromWhitelist       	= function: 0x00345e90 (function)
         RemoveHeroFromWhitelist         	= function: 0x00345dd8 (function)
         AddHeroIDToWhitelist            	= function: 0x00345d20 (function)
         FDesc                           	= table: 0x00341d08 (table)
         {
            SetCustomGameSetupRemainingTime 	= void SetCustomGameSetupRemainingTime(float)
Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever (userdata)
            SetCustomGameSetupAutoLaunchDelay	= void SetCustomGameSetupAutoLaunchDelay(float)
Set the amount of time to wait for auto launch. (userdata)
            EnableCustomGameSetupAutoLaunch 	= void EnableCustomGameSetupAutoLaunch(bool)
Enabled (true) or disable (false) auto launch for custom game setup. (userdata)
            LockCustomGameSetupTeamAssignment	= void LockCustomGameSetupTeamAssignment(bool)
Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams. (userdata)
            SetCustomGameTeamMaxPlayers     	= void SetCustomGameTeamMaxPlayers(int, int)
Set whether a team is selectable during game setup (userdata)
            GetCustomGameTeamMaxPlayers     	= int GetCustomGameTeamMaxPlayers(int)
Get whether a team is selectable during game setup (userdata)
            SetHeroSelectPenaltyTime        	= void SetHeroSelectPenaltyTime(float)
Sets amount of penalty time before randoming a hero (userdata)
            SetCustomGameAllowHeroPickMusic 	= void SetCustomGameAllowHeroPickMusic(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            SetCustomGameAllowBattleMusic   	= void SetCustomGameAllowBattleMusic(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            SetCustomGameAllowMusicAtGameStart	= void SetCustomGameAllowMusicAtGameStart(bool)
Sets a flag to enable/disable the default music handling code for custom games (userdata)
            SetCustomGameAllowSecondaryAbilitiesOnOtherUnits	= void SetCustomGameAllowSecondaryAbilitiesOnOtherUnits(bool)
Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero. (userdata)
            GetGameSessionConfigValue       	= string GetGameSessionConfigValue(string, string)
Get a string value from the game session config (map options) (userdata)
            GetAnnouncer                    	= handle GetAnnouncer(int)
Get the announcer for a team (userdata)
            PlayerHasCustomGameHostPrivileges	= bool PlayerHasCustomGameHostPrivileges(handle)
Whether a player has custom game host privileges (shuffle teams, etc.) (userdata)
            GetPlayerCustomGameAccountRecord	= table GetPlayerCustomGameAccountRecord(int)
(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session (userdata)
            SetCustomGameAccountRecordSaveFunction	= void SetCustomGameAccountRecordSaveFunction(handle, handle)
(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table) (userdata)
            Script_GetMatchID               	= uint64 Script_GetMatchID()
Get the MatchID for this game. (userdata)
            SetPostGameLayout               	= void SetPostGameLayout(int)
Configure post game to be single or double column layout (userdata)
            SetPostGameColumns              	= bool SetPostGameColumns(handle)
Set columns to show in post game (userdata)
            SetPostGameTeamScores           	= bool SetPostGameTeamScores(handle)
Set score value for each team. First element is for DOTA_TEAM_GOODGUYS. (userdata)
            SetEventMetadataCustomTable     	= bool SetEventMetadataCustomTable(handle)
Event-only ( table hMetadataTable ) (userdata)
            AddEventMetadataLeaderboardEntry	= bool AddEventMetadataLeaderboardEntry(string, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 ) (userdata)
            AddEventMetadataLeaderboardEntryRawScore	= bool AddEventMetadataLeaderboardEntryRawScore(string, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)
Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 ) (userdata)
            SetEventSignoutCustomTable      	= bool SetEventSignoutCustomTable(handle)
Event-only ( table hMetadataTable ) (userdata)
            BotPopulate                     	= void BotPopulate()
Fills all the teams with bots if cheat mode is enabled. (userdata)
            ResetToCustomGameSetup          	= void ResetToCustomGameSetup()
Restart at custom game setup. (userdata)
            ResetGameTime                   	= void ResetGameTime()
Restart gametime from 0 (userdata)
            SetWhiteListEnabled             	= void SetWhiteListEnabled(bool)
Item whitelist functionality enable/disable (userdata)
            AddItemToWhiteList              	= void AddItemToWhiteList(string)
Add an item to the whitelist (userdata)
            RemoveItemFromWhiteList         	= void RemoveItemFromWhiteList(string)
Remove an item from the whitelist (userdata)
            IsItemInWhiteList               	= bool IsItemInWhiteList(string)
Query an item in the whitelist (userdata)
            ForceGameStart                  	= void ForceGameStart()
Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS (userdata)
            ForceCreepSpawn                 	= void ForceCreepSpawn()
Spawn the next wave of creeps. (userdata)
            PrepareSpawners                 	= void PrepareSpawners(float)
Prepare Dota lane style spawners with a given interval (userdata)
            SpawnAndReleaseCreeps           	= void SpawnAndReleaseCreeps()
Spawn and release the next creep wave from Dota lane style spawners. (userdata)
            SpawnNeutralCreeps              	= void SpawnNeutralCreeps()
Spawn and release the next set of neutral camps. (userdata)
            AddBotPlayerWithEntityScript    	= handle AddBotPlayerWithEntityScript(string, string, int, string, bool)
Spawn a bot player of the passed hero name, player name, and team. (userdata)
            RemoveFakeClient                	= void RemoveFakeClient(int)
Removes a fake client (userdata)
            ExecuteTeamPing                 	= void ExecuteTeamPing(int, float, float, handle, unsigned)
Sends a minimap ping to all players on the team (userdata)
            State_Get                       	= int State_Get()
Get the current Gamerules state (userdata)
            GetGameTime                     	= float GetGameTime()
Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused (userdata)
            GetGameFrameTime                	= float GetGameFrameTime()
Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused (userdata)
            GetDOTATime                     	= float GetDOTATime(bool, bool)
(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time. (userdata)
            GetDifficulty                   	= int GetDifficulty()
Returns difficulty level of the custom game mode (userdata)
            GetCustomGameDifficulty         	= int GetCustomGameDifficulty()
Returns the difficulty level of the custom game mode (userdata)
            GetBannedHeroes                 	= table GetBannedHeroes()
Returns the hero unit names banned in this game, if any (userdata)
            GetBannedHeroIDs                	= table GetBannedHeroIDs()
Returns the hero unit IDs banned in this game, if any (userdata)
            IsDev                           	= bool IsDev()
 (userdata)
            Defeated                        	= void Defeated()
Kills the ancient, etc. (userdata)
            ResetDefeated                   	= void ResetDefeated()
Restart after killing the ancient, etc. (userdata)
            SetGameWinner                   	= void SetGameWinner(int)
Makes the specified team win (userdata)
            MakeTeamLose                    	= void MakeTeamLose(int)
Makes the specified team lose (userdata)
            GetDroppedItem                  	= handle GetDroppedItem(int)
Gets the Xth dropped item (userdata)
            SetRiverPaint                   	= void SetRiverPaint(int, float)
Paints the river for a duration (userdata)
            ClearRiverPaint                 	= void ClearRiverPaint()
Clears the current river paint (userdata)
            NumDroppedItems                 	= int NumDroppedItems()
Returns the number of items currently dropped on the ground (userdata)
            SendCustomMessage               	= void SendCustomMessage(string, int, int)
Sends a message on behalf of a player. (userdata)
            SendCustomMessageToTeam         	= void SendCustomMessageToTeam(string, int, int, int)
Sends a message on behalf of a player to the specified team. (userdata)
            SetHeroRespawnEnabled           	= void SetHeroRespawnEnabled(bool)
Control if the normal DOTA hero respawn rules apply. (userdata)
            Playtesting_UpdateAddOnKeyValues	= void Playtesting_UpdateAddOnKeyValues()
Updates custom hero, unit and ability KeyValues in memory with the latest values from disk (userdata)
            ResetToHeroSelection            	= void ResetToHeroSelection()
Restart the game at hero selection (userdata)
            SetTreeRegrowTime               	= void SetTreeRegrowTime(float)
Sets the tree regrow time in seconds. (userdata)
            SetHeroSelectionTime            	= void SetHeroSelectionTime(float)
Sets the amount of time players have to pick their hero. (userdata)
            SetPreGameTime                  	= void SetPreGameTime(float)
Sets the amount of time players have between picking their hero and game start. (userdata)
            SetPostGameTime                 	= void SetPostGameTime(float)
Sets the amount of time players have between the game ending and the server disconnecting them. (userdata)
            SetStrategyTime                 	= void SetStrategyTime(float)
Sets the amount of time players have between the hero selection and entering the showcase phase. (userdata)
            SetShowcaseTime                 	= void SetShowcaseTime(float)
Sets the amount of time players have between the strategy phase and entering the pre-game phase. (userdata)
            SetRuneSpawnTime                	= void SetRuneSpawnTime(float)
Sets the amount of time between rune spawns. (userdata)
            SetSameHeroSelectionEnabled     	= void SetSameHeroSelectionEnabled(bool)
When true, players can repeatedly pick the same hero. (userdata)
            SetUseUniversalShopMode         	= void SetUseUniversalShopMode(bool)
When true, all items are available at as long as any shop is in range. (userdata)
            SetUseBaseGoldBountyOnHeroes    	= void SetUseBaseGoldBountyOnHeroes(bool)
Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas. (userdata)
            SetTimeOfDay                    	= void SetTimeOfDay(float)
Set the time of day. (userdata)
            GetTimeOfDay                    	= float GetTimeOfDay()
Get the time of day (userdata)
            IsInBanPhase                    	= bool IsInBanPhase()
Are we in the ban phase of hero pick? (userdata)
            GetStateTransitionTime          	= float GetStateTransitionTime()
Get time remaining between state changes. (userdata)
            IsDaytime                       	= bool IsDaytime()
Is it day time? (userdata)
            IsTemporaryNight                	= bool IsTemporaryNight()
Is it temporarily night-time? (userdata)
            BeginTemporaryNight             	= void BeginTemporaryNight(float)
Begin temporary night. (userdata)
            IsNightstalkerNight             	= bool IsNightstalkerNight()
Is it night stalker night-time? (userdata)
            BeginNightstalkerNight          	= void BeginNightstalkerNight(float)
Begin night stalker night. (userdata)
            SetOverlayHealthBarUnit         	= void SetOverlayHealthBarUnit(handle, int)
Show this unit's health on the overlay health bar (userdata)
            SetHeroMinimapIconScale         	= void SetHeroMinimapIconScale(float)
(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap. (userdata)
            SetCreepMinimapIconScale        	= void SetCreepMinimapIconScale(float)
(flMinimapCreepIconScale) - Scale the creep icons on the minimap. (userdata)
            SetCreepSpawningEnabled         	= void SetCreepSpawningEnabled(bool)
Sets whether the regular Dota creeps spawn. (userdata)
            SetRuneMinimapIconScale         	= void SetRuneMinimapIconScale(float)
(flMinimapRuneIconScale) - Scale the rune icons on the minimap. (userdata)
            SetSafeToLeave                  	= void SetSafeToLeave(bool)
(bSafeToLeave) - Mark this game as safe to leave. (userdata)
            SetUseCustomHeroXPValues        	= void SetUseCustomHeroXPValues(bool)
Allows heroes in the map to give a specific amount of XP (this value must be set). (userdata)
            SetCustomGameDifficulty         	= void SetCustomGameDifficulty(int)
Set the difficulty level of the custom game mode (userdata)
            SetGoldTickTime                 	= void SetGoldTickTime(float)
Set the time interval between auto gold increases. (userdata)
            SetGoldPerTick                  	= void SetGoldPerTick(int)
Set the auto gold increase per timed interval. (userdata)
            SetStartingGold                 	= void SetStartingGold(int)
Set the starting gold amount. (userdata)
            GetMatchSignoutComplete         	= bool GetMatchSignoutComplete()
Have we received the post match signout message that includes reward information (userdata)
            DidMatchSignoutTimeOut          	= bool DidMatchSignoutTimeOut()
true when we have waited some time after end of the game and not received signout (userdata)
            GetNianTotalDamageTaken         	= int GetNianTotalDamageTaken()
For New Bloom, get total damage taken by the Nian / Year Beast (userdata)
            GetGameModeEntity               	= handle GetGameModeEntity()
Get the game mode entity (userdata)
            SetFirstBloodActive             	= void SetFirstBloodActive(bool)
Sets whether First Blood has been triggered. (userdata)
            SetHideKillMessageHeaders       	= void SetHideKillMessageHeaders(bool)
Sets whether the multikill, streak, and first-blood banners appear at the top of the screen. (userdata)
            SetCustomVictoryMessage         	= void SetCustomVictoryMessage(string)
Sets the victory message. (userdata)
            SetCustomGameEndDelay           	= void SetCustomGameEndDelay(float)
Sets the game end delay. (userdata)
            SetCustomVictoryMessageDuration 	= void SetCustomVictoryMessageDuration(float)
Sets the victory message duration. (userdata)
            IsGamePaused                    	= bool IsGamePaused()
Returns whether the game is paused. (userdata)
            IsHeroRespawnEnabled            	= bool IsHeroRespawnEnabled()
Returns whether hero respawn is enabled. (userdata)
            AddMinimapDebugPoint            	= void AddMinimapDebugPoint(int, Vector, int, int, int, int, float)
Add a point on the minimap. (userdata)
            AddMinimapDebugPointForTeam     	= void AddMinimapDebugPointForTeam(int, Vector, int, int, int, int, float, int)
Add a point on the minimap for a specific team. (userdata)
            FinishCustomGameSetup           	= void FinishCustomGameSetup()
Indicate that the custom game setup phase is complete, and advance to the game. (userdata)
            SetEnableAlternateHeroGrids     	= void SetEnableAlternateHeroGrids(bool)
Allow alternate hero grids to be used (DOTA+, etc).  True by default. (userdata)
            SetCustomGameSetupTimeout       	= void SetCustomGameSetupTimeout(float)
Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called) (userdata)
            AddHeroToPlayerAvailability     	= void AddHeroToPlayerAvailability(int, int)
Adds hero of given ID to available heroes of player of given ID (userdata)
            ClearPlayerHeroAvailability     	= void ClearPlayerHeroAvailability(int)
Clears available heroes of player of given ID (userdata)
            ResetPlayer                     	= void ResetPlayer(int)
Resets the player of a given ID. (userdata)
            SetSuggestAbilitiesEnabled      	= void SetSuggestAbilitiesEnabled(bool)
Sets Dota Plus ability suggestions enabled or disabled (userdata)
            SetSuggestItemsEnabled          	= void SetSuggestItemsEnabled(bool)
Sets Dota Plus ability item enabled or disabled (userdata)
            GetNeutralInitialSpawnOffset    	= float GetNeutralInitialSpawnOffset()
Gets the extra offset to initial neutral creep spawn delay (userdata)
            ShouldHideBlacklistedHeroes     	= bool ShouldHideBlacklistedHeroes()
Are blacklisted heroes hidden, or just dimmed, in hero picking? (userdata)
            IsHeroEnabledViaLists           	= bool IsHeroEnabledViaLists(string)
Is the hero not blacklisted, and is it either whitelisted or the whitelist is empty? (userdata)
            SetNeutralInitialSpawnOffset    	= void SetNeutralInitialSpawnOffset(float)
Sets the extra offset to initial neutral creep spawn delay (userdata)
            IsSuggestItemsEnabled           	= bool IsSuggestItemsEnabled()
Returns whether Dota Plus item suggestions are enabled or disabled (userdata)
            IsSuggestAbilitiesEnabled       	= bool IsSuggestAbilitiesEnabled()
Returns whether Dota Plus ability suggestions are enabled or disabled (userdata)
            SetHideBlacklistedHeroes        	= void SetHideBlacklistedHeroes(bool)
Should blacklisted heroes be hidden, or just dimmed, in hero picking? (userdata)
            ClearHeroWhitelist              	= void ClearHeroWhitelist()
Clears the hero whitelist (userdata)
            RemoveHeroIDFromWhitelist       	= void RemoveHeroIDFromWhitelist(int)
Remove the hero ID from the hero whitelist if present (userdata)
            RemoveHeroFromWhitelist         	= void RemoveHeroFromWhitelist(string)
Remove the hero from the hero whitelist if present (userdata)
            AddHeroIDToWhitelist            	= void AddHeroIDToWhitelist(int)
Add the hero ID to the hero whitelist if it is not already present (userdata)
            AddHeroToWhitelist              	= void AddHeroToWhitelist(string)
Add the hero to the hero whitelist if it is not already present (userdata)
            ClearHeroBlacklist              	= void ClearHeroBlacklist()
Clears the hero blacklist (userdata)
            RemoveHeroIDFromBlacklist       	= void RemoveHeroIDFromBlacklist(int)
Remove the hero ID from the hero blacklist if present (userdata)
            RemoveHeroFromBlacklist         	= void RemoveHeroFromBlacklist(string)
Remove the hero from the hero blacklist if present (userdata)
            SetSpeechUseSpawnInsteadOfRespawnConcept	= void SetSpeechUseSpawnInsteadOfRespawnConcept(bool)
Set whether to speak a Spawn concept instead of a Respawn concept on respawn. (userdata)
            SetIgnoreLobbyTeamsInCustomGame 	= void SetIgnoreLobbyTeamsInCustomGame(bool)
Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true. (userdata)
            SetCustomGameBansPerTeam        	= void SetCustomGameBansPerTeam(int)
Set number of hero bans each team gets (userdata)
            IsCheatMode                     	= bool IsCheatMode()
Are cheats enabled on the server (userdata)
            GetWeatherWindDirection         	= Vector GetWeatherWindDirection()
Get Weather Wind Direction Vector (userdata)
            GetItemStockCount               	= int GetItemStockCount(int, string, int)
Get the stock count of the item (userdata)
            GetItemStockTime                	= float GetItemStockTime(int, string, int)
Get the time an item will be added to stock (userdata)
            GetIetmStockDuration            	= float GetIetmStockDuration(int, string, int)
Get the time it takes to add a new item to stock (userdata)
            IncreaseItemStock               	= void IncreaseItemStock(int, string, int, int)
Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID . (userdata)
            SetItemStockCount               	= void SetItemStockCount(int, int, string, int)
Set the stock count of the item (userdata)
            ModifyGoldFiltered              	= int ModifyGoldFiltered(int, int, bool, int)
Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true (userdata)
            SetWeatherWindDirection         	= void SetWeatherWindDirection(Vector)
Set Weather Wind Direction Vector (userdata)
            GetNextRuneSpawnTime            	= float GetNextRuneSpawnTime()
Gets next rune spawn time (userdata)
            SetNextRuneSpawnTime            	= void SetNextRuneSpawnTime(float)
Sets next rune spawn time (userdata)
            GetNextBountyRuneSpawnTime      	= float GetNextBountyRuneSpawnTime()
Gets next bounty rune spawn time (userdata)
            SetNextBountyRuneSpawnTime      	= void SetNextBountyRuneSpawnTime(float)
Sets next bounty rune spawn time (userdata)
            SetFilterMoreGold               	= void SetFilterMoreGold(bool)
Sets whether to filter more gold events than normal (userdata)
            SetGlyphCooldown                	= void SetGlyphCooldown(int, float)
Set Glyph cooldown for team (userdata)
            SetAllowOutpostBonuses          	= void SetAllowOutpostBonuses(bool)
Allow Outposts granting XP (userdata)
            AddHeroToBlacklist              	= void AddHeroToBlacklist(string)
Add the hero to the hero blacklist if it is not already present (userdata)
            AddHeroIDToBlacklist            	= void AddHeroIDToBlacklist(int)
Add the hero ID to the hero blacklist if it is not already present (userdata)
         }
         AddHeroToWhitelist              	= function: 0x00345c68 (function)
         ClearHeroBlacklist              	= function: 0x00345bb0 (function)
         RemoveHeroIDFromBlacklist       	= function: 0x00345af0 (function)
         RemoveHeroFromBlacklist         	= function: 0x00345a38 (function)
         AddHeroIDToBlacklist            	= function: 0x00345980 (function)
         AddHeroToBlacklist              	= function: 0x003493a8 (function)
         IsNull                          	= function: 0x00338120 (function)
         SetSpeechUseSpawnInsteadOfRespawnConcept	= function: 0x00348608 (function)
         SetIgnoreLobbyTeamsInCustomGame 	= function: 0x003486d8 (function)
         SetCustomGameBansPerTeam        	= function: 0x00348798 (function)
         IsCheatMode                     	= function: 0x00348858 (function)
         GetWeatherWindDirection         	= function: 0x00348908 (function)
         GetItemStockCount               	= function: 0x003489c0 (function)
         GetItemStockTime                	= function: 0x00348a78 (function)
         GetIetmStockDuration            	= function: 0x00348b30 (function)
         ModifyGoldFiltered              	= function: 0x003491b8 (function)
         IncreaseItemStock               	= function: 0x00348be8 (function)
         SetItemStockCount               	= function: 0x00348ca0 (function)
         SetWeatherWindDirection         	= function: 0x00348d58 (function)
         GetNextRuneSpawnTime            	= function: 0x00348e10 (function)
         SetNextRuneSpawnTime            	= function: 0x00348ec8 (function)
         GetNextBountyRuneSpawnTime      	= function: 0x00348f80 (function)
         SetNextBountyRuneSpawnTime      	= function: 0x00349040 (function)
         SetFilterMoreGold               	= function: 0x00349100 (function)
         SetGlyphCooldown                	= function: 0x00349238 (function)
         SetAllowOutpostBonuses          	= function: 0x003492f0 (function)
      }
      AddonTemplate                   	= table: 0x003820a8 (table)
      {
         metatable = table: 0x00399428
         {
            OnThink                         	= function: 0x0031a0b0 (function)
            __getbase__                     	= function: 0x0032bcd0 (function)
            __instanceof__                  	= function: 0x00399470 (function)
            __class__                       	= table: 0x00399428 (table, already seen)
            InitGameMode                    	= function: 0x003179f8 (function)
            __getclass__                    	= function: 0x0032ba40 (function)
            __initprops__                   	= table: 0x00399530 (table)
            {
            }
         }
      }
      __self                          	= userdata: 0x003469a0 (userdata)
   }
   CDOTAGameRules                  	= table: 0x003380d8 (table, already seen)
   h                               	= function: 0x00327100 (function)
   c                               	= table: 0x0031d318 (table)
   {
      metatable                       	= table: 0x0021a0a0 (table, already seen)
      constructor                     	= function: 0x00317b20 (function)
      inspect                         	= function: 0x0031d108 (function)
      __instanceof__                  	= function: 0x00327080 (function)
      describe_R                      	= function: 0x0031d0d8 (function)
      __getclass__                    	= function: 0x0031d360 (function)
      __getbase__                     	= function: 0x00327100 (function)
      Specification                   	= table: 0x0031d298 (table)
      {
         scriptclassname                 	= "CEntityInstance" (string)
      }
      __class__                       	= table: 0x0031d318 (table, already seen)
      __initprops__                   	= table: 0x003270b8 (table)
      {
      }
   }
   ExtendInstance                  	= function: 0x00337f08 (function)
   g_reloadState                   	= table: 0x00337ec0 (table)
   {
      game.entities.entmixin_enabledisable	= true (boolean)
      bit                             	= table: 0x00217f10 (table)
      {
         tobit                           	= function: builtin#64 (function)
         bnot                            	= function: builtin#65 (function)
         bswap                           	= function: builtin#66 (function)
         lshift                          	= function: builtin#67 (function)
         rshift                          	= function: builtin#68 (function)
         arshift                         	= function: builtin#69 (function)
         rol                             	= function: builtin#70 (function)
         ror                             	= function: builtin#71 (function)
         band                            	= function: builtin#72 (function)
         bor                             	= function: builtin#73 (function)
         bxor                            	= function: builtin#74 (function)
         tohex                           	= function: builtin#75 (function)
      }
      package                         	= table: 0x002148d8 (table)
      {
         config                          	= "\
;
?
!
-
" (string)
         loaded                          	= table: 0x002134e0 (table)
         {
            game.entities.entmixin_enabledisable	= true (boolean)
            bit                             	= table: 0x00217f10 (table, already seen)
            package                         	= table: 0x002148d8 (table, already seen)
            utils.class                     	= true (boolean)
            utils.library                   	= true (boolean)
            utils.vscriptinit               	= true (boolean)
            core.coreinit                   	= true (boolean)
            utils.utilsinit                 	= true (boolean)
            framework.frameworkinit         	= true (boolean)
            framework.entities.entitiesinit 	= true (boolean)
            game.gameinit                   	= true (boolean)
            _G                              	= table: 0x00211d90 (table, already seen)
            utils.deepprint                 	= true (boolean)
            debug                           	= table: 0x00217768 (table)
            {
               gethook                         	= function: builtin#144 (function)
               traceback                       	= function: builtin#146 (function)
               debug                           	= function: builtin#145 (function)
               setfenv                         	= function: builtin#135 (function)
               getmetatable                    	= function: builtin#132 (function)
               setmetatable                    	= function: builtin#133 (function)
               getfenv                         	= function: builtin#134 (function)
               getregistry                     	= function: builtin#131 (function)
               getinfo                         	= function: builtin#136 (function)
               getlocal                        	= function: builtin#137 (function)
               setlocal                        	= function: builtin#138 (function)
               getupvalue                      	= function: builtin#139 (function)
               setupvalue                      	= function: builtin#140 (function)
               upvalueid                       	= function: builtin#141 (function)
               upvaluejoin                     	= function: builtin#142 (function)
               sethook                         	= function: builtin#143 (function)
            }
            game/dkjson                     	= table: 0x003303b8 (table)
            {
               use_lpeg                        	= function: 0x00337970 (function)
               encode                          	= function: 0x00337248 (function)
               decode                          	= function: 0x003378f8 (function)
               addnewline                      	= function: 0x00336dc8 (function)
               null                            	= table: 0x003304b0 (table)
               {
               }
               encodeexception                 	= function: 0x00336fa0 (function)
               quotestring                     	= function: 0x003407a0 (function)
               version                         	= "dkjson 2.5" (string)
            }
            string                          	= table: 0x00215e58 (table)
            {
               match                           	= function: builtin#85 (function)
               gmatch                          	= function: builtin#87 (function)
               gsub                            	= function: builtin#88 (function)
               format                          	= function: builtin#89 (function)
               gfind                           	= function: builtin#87 (function)
               len                             	= function: 0x002160d0 (function)
               byte                            	= function: builtin#76 (function)
               char                            	= function: builtin#77 (function)
               sub                             	= function: builtin#78 (function)
               rep                             	= function: builtin#79 (function)
               reverse                         	= function: builtin#80 (function)
               lower                           	= function: builtin#81 (function)
               upper                           	= function: builtin#82 (function)
               dump                            	= function: builtin#83 (function)
               find                            	= function: builtin#84 (function)
            }
            coroutine                       	= table: 0x002143d8 (table)
            {
               yield                           	= function: builtin#34 (function)
               resume                          	= function: builtin#35 (function)
               wrap                            	= function: builtin#37 (function)
               status                          	= function: builtin#30 (function)
               running                         	= function: builtin#31 (function)
               isyieldable                     	= function: builtin#32 (function)
               create                          	= function: builtin#33 (function)
            }
            table                           	= table: 0x00215250 (table)
            {
               foreachi                        	= function: 0x00215500 (function)
               foreach                         	= function: 0x00215618 (function)
               getn                            	= function: 0x002156f0 (function)
               maxn                            	= function: builtin#90 (function)
               insert                          	= function: builtin#91 (function)
               remove                          	= function: 0x00215908 (function)
               move                            	= function: 0x00215a60 (function)
               concat                          	= function: builtin#92 (function)
               sort                            	= function: builtin#97 (function)
            }
            math                            	= table: 0x002167a8 (table)
            {
               asin                            	= function: builtin#47 (function)
               acos                            	= function: builtin#48 (function)
               atan                            	= function: builtin#49 (function)
               sinh                            	= function: builtin#50 (function)
               cosh                            	= function: builtin#51 (function)
               tanh                            	= function: builtin#52 (function)
               frexp                           	= function: builtin#53 (function)
               modf                            	= function: builtin#54 (function)
               log                             	= function: builtin#55 (function)
               deg                             	= function: 0x00217268 (function)
               rad                             	= function: 0x00217348 (function)
               atan2                           	= function: builtin#56 (function)
               pow                             	= function: builtin#57 (function)
               fmod                            	= function: builtin#58 (function)
               ldexp                           	= function: builtin#59 (function)
               min                             	= function: builtin#60 (function)
               max                             	= function: builtin#61 (function)
               pi                              	= 3.1415926535898 (number)
               huge                            	= inf (number)
               random                          	= function: builtin#62 (function)
               randomseed                      	= function: builtin#63 (function)
               mod                             	= function: builtin#58 (function)
               abs                             	= function: builtin#38 (function)
               floor                           	= function: builtin#39 (function)
               ceil                            	= function: builtin#40 (function)
               sqrt                            	= function: builtin#41 (function)
               log10                           	= function: builtin#42 (function)
               exp                             	= function: builtin#43 (function)
               sin                             	= function: builtin#44 (function)
               cos                             	= function: builtin#45 (function)
               tan                             	= function: builtin#46 (function)
            }
         }
         preload                         	= table: 0x00214fb8 (table)
         {
            table.new                       	= function: 0x00215b50 (function)
            table.clone                     	= function: 0x00215bb8 (function)
            table.isarray                   	= function: 0x00215c20 (function)
            table.nkeys                     	= function: 0x00215c88 (function)
            table.isempty                   	= function: 0x00215cf0 (function)
            table.clear                     	= function: 0x00215000 (function)
            string.buffer                   	= function: 0x00216688 (function)
         }
         searchpath                      	= function: 0x002149e8 (function)
         seeall                          	= function: 0x00214a50 (function)
         loaders                         	= table: 0x00214ab0 (array table)
         [
            1                               	= function: 0x00214b20 (function)
            2                               	= function: 0x00218560 (function)
         ]
         path                            	= ".\?.lua;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\lua\?.lua;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\lua\?\init.lua;" (string)
         cpath                           	= ".\?.dll;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\?.dll;E:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\loadall.dll" (string)
      }
      utils.class                     	= true (boolean)
      utils.library                   	= true (boolean)
      utils.vscriptinit               	= true (boolean)
      core.coreinit                   	= true (boolean)
      utils.utilsinit                 	= true (boolean)
      framework.frameworkinit         	= true (boolean)
      framework.entities.entitiesinit 	= true (boolean)
      game.gameinit                   	= true (boolean)
      _G                              	= table: 0x00211d90 (table, already seen)
      utils.deepprint                 	= true (boolean)
      debug                           	= table: 0x00217768 (table, already seen)
      game/dkjson                     	= table: 0x003303b8 (table, already seen)
      string                          	= table: 0x00215e58 (table, already seen)
      coroutine                       	= table: 0x002143d8 (table, already seen)
      table                           	= table: 0x00215250 (table, already seen)
      math                            	= table: 0x002167a8 (table, already seen)
   }
   AddToScriptHelp                 	= function: 0x00337e90 (function)
   _PublishedHelp                  	= table: 0x00337e48 (table)
   {
   }
   AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES	= 48 (number)
   AE_PULSE_GRAPH_IKLOCKLEFTARM    	= 30 (number)
   CreateItem                      	= function: 0x0024fe38 (function)
   ACT_PREP_TO_FIRE                	= 905 (number)
   DOTA_ITEM_TRANSIENT_RECIPE      	= 18 (number)
   DOTA_PSEUDO_RANDOM_NONE         	= 0 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3	= 79 (number)
   EmitAnnouncerSound              	= function: 0x00250ff0 (function)
   GridNav                         	= table: 0x00233df0 (table)
   {
      metatable = table: 0x00233100
      {
         IsNull                          	= function: 0x00233148 (function)
         FindPathLength                  	= function: 0x002338a0 (function)
         IsNearbyTree                    	= function: 0x00233950 (function)
         RegrowAllTrees                  	= function: 0x00233b88 (function)
         DestroyTreesAroundPoint         	= function: 0x00233c38 (function)
         FDesc                           	= table: 0x002331b8 (table)
         {
            CanFindPath                     	= bool CanFindPath(Vector, Vector)
Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd) (userdata)
            FindPathLength                  	= float FindPathLength(Vector, Vector)
Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd ) (userdata)
            IsNearbyTree                    	= bool IsNearbyTree(Vector, float, bool)
(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point (userdata)
            RegrowAllTrees                  	= void RegrowAllTrees()
Causes all trees in the map to regrow (userdata)
            DestroyTreesAroundPoint         	= void DestroyTreesAroundPoint(Vector, float, bool)
Destroy all trees in the area(vPosition, flRadius, bFullCollision (userdata)
            GetAllTreesAroundPoint          	= table GetAllTreesAroundPoint(Vector, float, bool)
Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision). (userdata)
            WorldToGridPosX                 	= int WorldToGridPosX(float)
Get the X index of a given world X position (userdata)
            WorldToGridPosY                 	= int WorldToGridPosY(float)
Get the Y index of a given world Y position (userdata)
            GridPosToWorldCenterX           	= float GridPosToWorldCenterX(int)
Get the X position of the center of a given X index (userdata)
            GridPosToWorldCenterY           	= float GridPosToWorldCenterY(int)
Get the Y position of the center of a given Y index (userdata)
            IsBlocked                       	= bool IsBlocked(Vector)
Checks whether the given position is blocked (userdata)
            IsTraversable                   	= bool IsTraversable(Vector)
Checks whether the given position is traversable (userdata)
         }
         GetAllTreesAroundPoint          	= function: 0x00233cf0 (function)
         CanFindPath                     	= function: 0x002337f0 (function)
         WorldToGridPosX                 	= function: 0x00233200 (function)
         WorldToGridPosY                 	= function: 0x00233318 (function)
         GridPosToWorldCenterX           	= function: 0x002333c8 (function)
         GridPosToWorldCenterY           	= function: 0x00233548 (function)
         IsBlocked                       	= function: 0x002335c8 (function)
         IsTraversable                   	= function: 0x00233740 (function)
      }
      __self                          	= userdata: 0x00233e68 (userdata)
   }
   ProjectileManager               	= table: 0x00234fc0 (table)
   {
      metatable = table: 0x002342c0
      {
         IsNull                          	= function: 0x00234308 (function)
         DestroyTrackingProjectile       	= function: 0x00234e00 (function)
         IsValidProjectile               	= function: 0x00234ec0 (function)
         FDesc                           	= table: 0x00234378 (table)
         {
            ChangeTrackingProjectileSpeed   	= void ChangeTrackingProjectileSpeed(handle, int)
Update speed (userdata)
            DestroyTrackingProjectile       	= void DestroyTrackingProjectile(int)
Destroy a tracking projectile early (userdata)
            IsValidProjectile               	= bool IsValidProjectile(int)
Is this a valid projectile? (userdata)
            CreateTrackingProjectile        	= int CreateTrackingProjectile(handle)
Creates a tracking projectile (userdata)
            CreateLinearProjectile          	= int CreateLinearProjectile(handle)
Creates a linear projectile and returns the projectile ID (userdata)
            DestroyLinearProjectile         	= void DestroyLinearProjectile(int)
Destroys the linear projectile matching the argument ID (userdata)
            ProjectileDodge                 	= void ProjectileDodge(handle)
Makes the specified unit dodge projectiles (userdata)
            GetLinearProjectileVelocity     	= Vector GetLinearProjectileVelocity(int)
Returns a vector representing the current velocity of the projectile. (userdata)
            GetLinearProjectileRadius       	= float GetLinearProjectileRadius(int)
Returns current radius of projectile (userdata)
            GetLinearProjectileLocation     	= Vector GetLinearProjectileLocation(int)
Returns current location of projectile (userdata)
            GetTrackingProjectileLocation   	= Vector GetTrackingProjectileLocation(int)
Returns current location of projectile (userdata)
            UpdateLinearProjectileDirection 	= void UpdateLinearProjectileDirection(int, Vector, float)
Update velocity (userdata)
         }
         ChangeTrackingProjectileSpeed   	= function: 0x00234d40 (function)
         CreateTrackingProjectile        	= function: 0x002343c0 (function)
         CreateLinearProjectile          	= function: 0x00234480 (function)
         DestroyLinearProjectile         	= function: 0x00234538 (function)
         ProjectileDodge                 	= function: 0x002345f0 (function)
         GetLinearProjectileVelocity     	= function: 0x00234670 (function)
         GetLinearProjectileRadius       	= function: 0x00234730 (function)
         GetLinearProjectileLocation     	= function: 0x002347f0 (function)
         GetTrackingProjectileLocation   	= function: 0x00234a38 (function)
         UpdateLinearProjectileDirection 	= function: 0x00234af8 (function)
      }
      __self                          	= userdata: 0x00235038 (userdata)
   }
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL	= 5 (number)
   CDOTAGameManager                	= table: 0x00235188 (table)
   {
      IsNull                          	= function: 0x002351d0 (function)
      GetHeroDataByName_Script        	= function: 0x002355d8 (function)
      GetHeroLocTokenByID             	= function: 0x00235520 (function)
      GetHeroIDByName                 	= function: 0x00235338 (function)
      GetHeroNameByID                 	= function: 0x00235288 (function)
      FDesc                           	= table: 0x00235240 (table)
      {
         GetHeroLocTokenByID             	= string GetHeroLocTokenByID(int)
Get the localization token for the given hero ID. (userdata)
         GetHeroDataByName_Script        	= table GetHeroDataByName_Script(string)
Get the hero unit  (userdata)
         GetHeroNameByID                 	= string GetHeroNameByID(int)
Get the hero name given a hero ID. (userdata)
         GetHeroIDByName                 	= int GetHeroIDByName(string)
Get the hero ID given the hero name. (userdata)
         GetHeroNameForUnitName          	= string GetHeroNameForUnitName(string)
Get the hero name given a unit name. (userdata)
         GetHeroUnitNameByID             	= string GetHeroUnitNameByID(int)
Get the hero unit name given the hero ID. (userdata)
      }
      GetHeroNameForUnitName          	= function: 0x002353e8 (function)
      GetHeroUnitNameByID             	= function: 0x002354a0 (function)
   }
   MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL	= 6 (number)
   DOTAGameManager                 	= table: 0x002356e0 (table)
   {
      metatable                       	= table: 0x00235188 (table, already seen)
      __self                          	= userdata: 0x00235758 (userdata)
   }
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL	= 7 (number)
   CScriptParticleManager          	= table: 0x002358d8 (table, already seen)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE	= 8 (number)
   CDOTA_Modifier_Lua              	= table: 0x002394a8 (table, already seen)
   MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET	= 9 (number)
   CDOTA_Modifier_Lua_Horizontal_Motion	= table: 0x0023bca8 (table)
   {
      metatable                       	= table: 0x002394a8 (table, already seen)
      IsNull                          	= function: 0x0023bcf0 (function)
      GetPriority                     	= function: 0x0023be58 (function)
      ApplyHorizontalMotionController 	= function: 0x0023bed8 (function)
      SetPriority                     	= function: 0x0023bda8 (function)
      FDesc                           	= table: 0x0023bd60 (table)
      {
         GetPriority                     	= int GetPriority()
Get the priority (userdata)
         SetPriority                     	= void SetPriority(int nMotionPriority)
Set the priority (userdata)
         ApplyHorizontalMotionController 	= bool ApplyHorizontalMotionController()
Starts the horizontal motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateHorizontalMotion          	= void UpdateHorizontalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         OnHorizontalMotionInterrupted   	= void OnHorizontalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
      }
      UpdateHorizontalMotion          	= function: 0x0023bf98 (function)
      OnHorizontalMotionInterrupted   	= function: 0x0023c018 (function)
   }
   MODIFIER_PROPERTY_PROCATTACK_FEEDBACK	= 10 (number)
   CDOTA_Modifier_Lua_Vertical_Motion	= table: 0x0023c220 (table)
   {
      metatable                       	= table: 0x002394a8 (table, already seen)
      IsNull                          	= function: 0x0023c268 (function)
      SetMotionPriority               	= function: 0x0023c320 (function)
      GetMotionPriority               	= function: 0x0023c3d8 (function)
      ApplyVerticalMotionController   	= function: 0x0023c490 (function)
      UpdateVerticalMotion            	= function: 0x0023c618 (function)
      FDesc                           	= table: 0x0023c2d8 (table)
      {
         SetMotionPriority               	= void SetMotionPriority(int nMotionPriority)
Set the priority (userdata)
         GetMotionPriority               	= int GetMotionPriority()
Get the priority (userdata)
         ApplyVerticalMotionController   	= bool ApplyVerticalMotionController()
Starts the vertical motion controller effects for this buff.  Returns true if successful. (userdata)
         UpdateVerticalMotion            	= void UpdateVerticalMotion(handle me, float dt)
Perform any motion from the given interval on the NPC. (userdata)
         OnVerticalMotionInterrupted     	= void OnVerticalMotionInterrupted()
Called when the motion gets interrupted. (userdata)
      }
      OnVerticalMotionInterrupted     	= function: 0x0023c698 (function)
   }
   MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE	= 11 (number)
   DOTA_HEROPICK_STATE_CM_PICK     	= 31 (number)
   MODIFIER_PROPERTY_PRE_ATTACK    	= 12 (number)
   DOTA_HEROPICK_STATE_AR_SELECT   	= 32 (number)
   MODIFIER_PROPERTY_INVISIBILITY_LEVEL	= 13 (number)
   DOTA_HEROPICK_STATE_CD_BAN5     	= 41 (number)
   MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION	= 14 (number)
   DeepPrintTable                  	= function: 0x00318608 (function)
   MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY	= 15 (number)
   CBodyComponent                  	= table: 0x00298198 (table)
   {
      IsNull                          	= function: 0x002981e0 (function)
      AddVelocity                     	= function: 0x00232948 (function)
      AddImpulseAtPosition            	= function: 0x00232a60 (function)
      SetVelocity                     	= function: 0x00298618 (function)
      SetAngularVelocity              	= function: 0x00298788 (function)
      FDesc                           	= table: 0x00298250 (table)
      {
         AddVelocity                     	= void AddVelocity(Vector, Vector)
Add linear and angular velocity to the physics object (userdata)
         AddImpulseAtPosition            	= void AddImpulseAtPosition(Vector, Vector)
Apply an impulse at a worldspace position to the physics (userdata)
         SetVelocity                     	= void SetVelocity(Vector)
 (userdata)
         SetAngularVelocity              	= void SetAngularVelocity(Vector)
 (userdata)
         IsAttachedToParent              	= bool IsAttachedToParent()
Is attached to parent (userdata)
         DetachFromParent                	= void DetachFromParent()
Detach from its parent (userdata)
         SetMaterialGroup                	= void SetMaterialGroup(utlstringtoken)
 (userdata)
      }
      IsAttachedToParent              	= function: 0x002989c8 (function)
      SetMaterialGroup                	= function: 0x00298808 (function)
      DetachFromParent                	= function: 0x00298720 (function)
   }
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT	= 16 (number)
   abs                             	= function: 0x00312040 (function)
   MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE	= 17 (number)
   max                             	= function: 0x00312010 (function)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE	= 18 (number)
   CBaseModelEntity                	= table: 0x00298c48 (table)
   {
      metatable                       	= table: 0x0023e628 (table, already seen)
      IsNull                          	= function: 0x00298c90 (function)
      SetMaterialGroup                	= function: 0x00299950 (function)
      FDesc                           	= table: 0x00298d00 (table, already seen)
      GetModelScale                   	= function: 0x00298d48 (function)
      SetModelScale                   	= function: 0x00298e30 (function)
      ScriptLookupAttachment          	= function: 0x00298ee0 (function)
      GetAttachmentOrigin             	= function: 0x00299088 (function)
      GetAttachmentAngles             	= function: 0x00299108 (function)
      GetAttachmentForward            	= function: 0x00299020 (function)
      SetSize                         	= function: 0x00299300 (function)
      SetModel                        	= function: 0x00298f98 (function)
      GetRenderAlpha                  	= function: 0x00299508 (function)
      SetRenderAlpha                  	= function: 0x002991c0 (function)
      SetRenderMode                   	= function: 0x00299740 (function)
      SetRenderColor                  	= function: 0x002997f0 (function)
      GetRenderColor                  	= function: 0x002998a0 (function)
      SetMaterialGroupHash            	= function: 0x002999d0 (function)
      GetMaterialGroupHash            	= function: 0x00299380 (function)
      SetSingleMeshGroup              	= function: 0x00299438 (function)
      SetMaterialGroupMask            	= function: 0x002995b8 (function)
      GetMaterialGroupMask            	= function: 0x00299670 (function)
      SetBodygroup                    	= function: 0x0029a098 (function)
      SetBodygroupByName              	= function: 0x0029a148 (function)
      SetSkin                         	= function: 0x0029a200 (function)
   }
   MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE	= 19 (number)
   min                             	= function: 0x00311fe0 (function)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE	= 20 (number)
   Lerp                            	= function: 0x00313858 (function)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2	= 21 (number)
   Clamp                           	= function: 0x00313828 (function)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE	= 22 (number)
   Rad2Deg                         	= function: 0x003137f8 (function)
   MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2	= 23 (number)
   Deg2Rad                         	= function: 0x003137c8 (function)
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE	= 24 (number)
   DumpSpawnGroupEntityFilters     	= function: 0x003086d0 (function)
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN	= 25 (number)
   GetSpawnGroupEntityFilterFunc   	= function: 0x003086a0 (function)
   MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX	= 26 (number)
   ClearSpawnGroupEntityFilters    	= function: 0x00308670 (function)
   MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT	= 27 (number)
   FilterSpawnGroupEntities        	= function: 0x00308640 (function)
   MODIFIER_PROPERTY_MOVESPEED_LIMIT	= 28 (number)
   RemoveSpawnGroupEntityFilter    	= function: 0x00308610 (function)
   MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE	= 29 (number)
   CBaseAnimatingActivity          	= table: 0x0029a3b8 (table)
   {
      metatable                       	= table: 0x00298c48 (table, already seen)
      IsNull                          	= function: 0x0029a400 (function)
      IsSequenceFinished              	= function: 0x0029a8a8 (function)
      GetSequence                     	= function: 0x0029a7c0 (function)
      SetSequence                     	= function: 0x0029aa98 (function)
      ResetSequence                   	= function: 0x0029a738 (function)
      FDesc                           	= table: 0x0029a470 (table, already seen)
      SequenceDuration                	= function: 0x0029a960 (function)
      ActiveSequenceDuration          	= function: 0x0029acd0 (function)
      GetCycle                        	= function: 0x0029a828 (function)
      SetPoseParameter                	= function: 0x0029a4b8 (function)
      StopAnimation                   	= function: 0x0029a5d8 (function)
      SetCycle                        	= function: 0x0029a688 (function)
   }
   MODIFIER_PROPERTY_FIXED_ATTACK_RATE	= 30 (number)
   RegisterSpawnGroupEntityFilter  	= function: 0x003085e0 (function)
   MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT	= 31 (number)
   g_SpawnGroupEntityFilters       	= table: 0x00308598 (table)
   {
   }
   MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT	= 32 (number)
   EndScriptDebug                  	= function: 0x00308568 (function)
   MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT	= 33 (number)
   BeginScriptDebug                	= function: 0x00308538 (function)
   MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT	= 34 (number)
   __VScriptServerDebugHook        	= function: 0x00308508 (function)
   MODIFIER_PROPERTY_HEALTHCOST_REDUCTION_CONSTANT	= 35 (number)
   ScriptDebugHook                 	= function: 0x003084d8 (function)
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT	= 36 (number)
   ScriptDebugRemoveTextFilter     	= function: 0x003084a8 (function)
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST	= 37 (number)
   CDOTA_BaseNPC                   	= table: 0x00233f70 (table)
   {
      metatable                       	= table: 0x0029b040 (table, already seen)
      SetAggroTarget                  	= function: 0x00259348 (function)
      AlertNearbyUnits                	= function: 0x002593f8 (function)
      GetAdditionalBattleMusicWeight  	= function: 0x002594b0 (function)
      SetAdditionalBattleMusicWeight  	= function: 0x00259570 (function)
      GetForceAttackTarget            	= function: 0x00259630 (function)
      SetForceAttackTarget            	= function: 0x002596e8 (function)
      SetForceAttackTargetAlly        	= function: 0x002597a0 (function)
      IsChanneling                    	= function: 0x00259860 (function)
      Interrupt                       	= function: 0x00259910 (function)
      InterruptChannel                	= function: 0x002599c0 (function)
      InterruptMotionControllers      	= function: 0x00259a78 (function)
      RemoveHorizontalMotionController	= function: 0x00259b38 (function)
      RemoveVerticalMotionController  	= function: 0x00259c00 (function)
      IsCurrentlyVerticalMotionControlled	= function: 0x00259cc0 (function)
      IsCurrentlyHorizontalMotionControlled	= function: 0x00259d88 (function)
      GetRangeToUnit                  	= function: 0x00259e50 (function)
      MoveToTargetToAttack            	= function: 0x0029e200 (function)
      PatrolToPosition                	= function: 0x0029e2b8 (function)
      DropItemAtPosition              	= function: 0x0029e370 (function)
      MoveToNPCToGiveItem             	= function: 0x0029e428 (function)
      PickupDroppedItem               	= function: 0x0029e4e0 (function)
      PickupRune                      	= function: 0x0029e598 (function)
      SellItem                        	= function: 0x0029e648 (function)
      DisassembleItem                 	= function: 0x0029e6f8 (function)
      EjectItemFromStash              	= function: 0x0029e7a8 (function)
      RemoveItem                      	= function: 0x0029e860 (function)
      TakeItem                        	= function: 0x0029e910 (function)
      SetCanSellItems                 	= function: 0x0029e9c0 (function)
      CanSellItems                    	= function: 0x0029ea70 (function)
      AddItemByName                   	= function: 0x0029eb20 (function)
      AddItem                         	= function: 0x0029ebd0 (function)
      AddAbility                      	= function: 0x0029ec50 (function)
      SwapItems                       	= function: 0x0029ed00 (function)
      RemoveAbility                   	= function: 0x0029edb0 (function)
      HasAbility                      	= function: 0x0029ee60 (function)
      RemoveAbilityByHandle           	= function: 0x0029ef10 (function)
      GetStatusResistance             	= function: 0x0029efc8 (function)
      GetEvasion                      	= function: 0x0029f080 (function)
      GetSpellAmplification           	= function: 0x0029f130 (function)
      IsInRangeOfShop                 	= function: 0x0029d540 (function)
      SetBaseMaxHealth                	= function: 0x0029d5f0 (function)
      GetBaseMaxHealth                	= function: 0x0029d6a8 (function)
      ModifyHealth                    	= function: 0x0029d760 (function)
      SetMana                         	= function: 0x0029d810 (function)
      SetMaxMana                      	= function: 0x0029d890 (function)
      GetMana                         	= function: 0x0029d940 (function)
      GetMaxMana                      	= function: 0x0029d9c0 (function)
      GetManaPercent                  	= function: 0x0029da70 (function)
      Script_ReduceMana               	= function: 0x0029db20 (function)
      GiveMana                        	= function: 0x0029dbd8 (function)
      SpendMana                       	= function: 0x0029dc88 (function)
      Heal                            	= function: 0x0029dd38 (function)
      AddNoDraw                       	= function: 0x002a31a8 (function)
      RemoveNoDraw                    	= function: 0x002a3258 (function)
      GetCreationTime                 	= function: 0x002a3128 (function)
      IsNull                          	= function: 0x00233fb8 (function)
      Kill                            	= function: 0x002a0e50 (function)
      SetOrigin                       	= function: 0x002a7160 (function)
      SetHealthBarOffsetOverride      	= function: 0x00234070 (function)
      GetBaseHealthBarOffset          	= function: 0x00234198 (function)
      SetNeverMoveToClearSpace        	= function: 0x0029bb30 (function)
      GetNeverMoveToClearSpace        	= function: 0x0029bce0 (function)
      IsIdle                          	= function: 0x0029bda0 (function)
      GetLastIdleChangeTime           	= function: 0x0029bc78 (function)
      FaceTowards                     	= function: 0x0029bf28 (function)
      StopFacing                      	= function: 0x0029bbf0 (function)
      SpeakConcept                    	= function: 0x0029c130 (function)
      QueueConcept                    	= function: 0x0029be20 (function)
      QueueTeamConcept                	= function: 0x0029c368 (function)
      QueueTeamConceptNoSpectators    	= function: 0x0029c420 (function)
      SetInitialGoalEntity            	= function: 0x0029c4e0 (function)
      GetInitialGoalEntity            	= function: 0x0029c598 (function)
      SetMustReachEachGoalEntity      	= function: 0x0029c650 (function)
      GetMustReachEachGoalEntity      	= function: 0x0029bfa8 (function)
      SetInitialGoalPosition          	= function: 0x0029c068 (function)
      GetInitialGoalPosition          	= function: 0x0029c1e0 (function)
      CalculateGenericBonuses         	= function: 0x0029c298 (function)
      ChangeTeam                      	= function: 0x0029cd20 (function)
      GetIdealSpeed                   	= function: 0x0029cdd0 (function)
      GetIdealSpeedNoSlows            	= function: 0x0029ce80 (function)
      GetLevel                        	= function: 0x0029cf38 (function)
      IsAncient                       	= function: 0x0029cfe8 (function)
      IsBossCreature                  	= function: 0x0029d098 (function)
      IsNeutralUnitType               	= function: 0x0029d148 (function)
      IsSummoned                      	= function: 0x0029d200 (function)
      GetCloneSource                  	= function: 0x0029d2b0 (function)
      IsClone                         	= function: 0x0029d360 (function)
      SetFollowRange                  	= function: 0x0029d3e0 (function)
      GetHullRadius                   	= function: 0x0029d490 (function)
      GetCollisionPadding             	= function: 0x0029c710 (function)
      GetPaddedCollisionRadius        	= function: 0x0029c7c8 (function)
      SetHullRadius                   	= function: 0x0029c888 (function)
      GetHealthPercent                	= function: 0x0029c938 (function)
      GetHealthDeficit                	= function: 0x0029ca58 (function)
      GetLastDamageTime               	= function: 0x0029cb10 (function)
      MoveToPosition                  	= function: 0x0029cbc8 (function)
      MoveToPositionAggressive        	= function: 0x0029cc78 (function)
      MoveToNPC                       	= function: 0x0029e150 (function)
      IsAlive                         	= function: 0x002a1aa0 (function)
      IsBaseNPC                       	= function: 0x00337b78 (function)
      IsHardDisarmed                  	= function: 0x00337b18 (function)
      IsSoftDisarmed                  	= function: 0x00337b48 (function)
      SetCustomHealthLabel            	= function: 0x002a3740 (function)
      SetShouldDoFlyHeightVisual      	= function: 0x002a3680 (function)
      SetCursorCastTarget             	= function: 0x002a35c8 (function)
      SetRevealRadius                 	= function: 0x002a3518 (function)
      IsMoving                        	= function: 0x002a3468 (function)
      RemoveAllModifiers              	= function: 0x002a33b0 (function)
      Purge                           	= function: 0x002a3308 (function)
      AngerNearbyUnits                	= function: 0x002a3070 (function)
      RespawnUnit                     	= function: 0x002a2fc0 (function)
      SetUnitCanRespawn               	= function: 0x002a2f08 (function)
      UnitCanRespawn                  	= function: 0x002a2e58 (function)
      NotifyWearablesOfModelChange    	= function: 0x002a2d98 (function)
      WasKilledPassively              	= function: 0x002a2ce0 (function)
      GetModelRadius                  	= function: 0x002a2c30 (function)
      DestroyAllSpeechBubbles         	= function: 0x002a2b78 (function)
      AddSpeechBubble                 	= function: 0x002a2ac8 (function)
      SetOriginalModel                	= function: 0x002a2a10 (function)
      ManageModelChanges              	= function: 0x002a2958 (function)
      IsPhantomBlocker                	= function: 0x002a28a0 (function)
      MakePhantomBlocker              	= function: 0x0025af90 (function)
      BoundingRadius2D                	= function: 0x0025aed8 (function)
      MakeVisibleDueToAttack          	= function: 0x0025ae20 (function)
      MakeVisibleToTeam               	= function: 0x0025ad68 (function)
      GetOpposingTeamNumber           	= function: 0x0025acb0 (function)
      CanBeSeenByAnyOpposingTeam      	= function: 0x0025abf0 (function)
      IsOpposingTeam                  	= function: 0x0025ab40 (function)
      DropItemAtPositionImmediate     	= function: 0x0025aa80 (function)
      SetModifierStackCount           	= function: 0x0025a9c8 (function)
      GetModifierStackCount           	= function: 0x0025a910 (function)
      HasModifier                     	= function: 0x0025a860 (function)
      FindAllModifiersByName          	= function: 0x0025a7a8 (function)
      FindAllModifiers                	= function: 0x0025a6f0 (function)
      FindModifierByNameAndCaster     	= function: 0x0025a630 (function)
      FindModifierByName              	= function: 0x0025a578 (function)
      RemoveModifierByNameAndCaster   	= function: 0x0025a4b8 (function)
      RemoveAllModifiersOfName        	= function: 0x0025a3f8 (function)
      RemoveModifierByName            	= function: 0x0025a340 (function)
      GetModifierNameByIndex          	= function: 0x0025a288 (function)
      GetModifierCount                	= function: 0x0025a1d0 (function)
      AddNewModifier                  	= function: 0x0025a120 (function)
      SetIdleAcquire                  	= function: 0x0025a070 (function)
      ShouldIdleAcquire               	= function: 0x00259fb8 (function)
      IsPositionInRange               	= function: 0x00259f00 (function)
      FDesc                           	= table: 0x00234028 (table, already seen)
      HealWithParams                  	= function: 0x0029ddb8 (function)
      GetAcquisitionRange             	= function: 0x0029de68 (function)
      SetAcquisitionRange             	= function: 0x0029df20 (function)
      Script_GetAttackRange           	= function: 0x0029dfd8 (function)
      GetAttackRangeBuffer            	= function: 0x0029e090 (function)
      GetBaseAttackRange              	= function: 0x002a09f8 (function)
      GetAttackDamage                 	= function: 0x002a0ab0 (function)
      GetAverageTrueAttackDamage      	= function: 0x002a0b60 (function)
      SetShouldComputeRemainingPathLength	= function: 0x002a0c20 (function)
      GetRemainingPathLength          	= function: 0x002a0ce8 (function)
      PerformAttack                   	= function: 0x002a0da0 (function)
      IsHero                          	= function: 0x002a0ed0 (function)
      IsRealHero                      	= function: 0x002a0f50 (function)
      IsConsideredHero                	= function: 0x002a1000 (function)
      IsCreepHero                     	= function: 0x002a10b8 (function)
      IsOther                         	= function: 0x002a1168 (function)
      IsTower                         	= function: 0x002a11e8 (function)
      IsBuilding                      	= function: 0x002a1268 (function)
      IsFort                          	= function: 0x002a1318 (function)
      IsBarracks                      	= function: 0x002a1398 (function)
      IsCreep                         	= function: 0x002a1448 (function)
      IsCourier                       	= function: 0x002a14c8 (function)
      IsBoss                          	= function: 0x002a1578 (function)
      IsCreature                      	= function: 0x002a15f8 (function)
      IsWard                          	= function: 0x002a16a8 (function)
      IsHeroWard                      	= function: 0x002a1728 (function)
      IsShrine                        	= function: 0x002a17d8 (function)
      IsPhantom                       	= function: 0x002a1888 (function)
      IsZombie                        	= function: 0x002a1938 (function)
      GetNeutralSpawnerName           	= function: 0x002a19e8 (function)
      CanEntityBeSeenByMyTeam         	= function: 0x002a1b20 (function)
      GetDayTimeVisionRange           	= function: 0x002a1bd8 (function)
      GetBaseDayTimeVisionRange       	= function: 0x002a1c90 (function)
      SetDayTimeVisionRange           	= function: 0x002a1d50 (function)
      GetNightTimeVisionRange         	= function: 0x002a1e08 (function)
      GetBaseNightTimeVisionRange     	= function: 0x002a1ec0 (function)
      SetNightTimeVisionRange         	= function: 0x002a1f80 (function)
      GetCurrentVisionRange           	= function: 0x002a2038 (function)
      SetDeathXP                      	= function: 0x002a20f0 (function)
      GetDeathXP                      	= function: 0x002a21a0 (function)
      SetMinimumGoldBounty            	= function: 0x002a2250 (function)
      GetMinimumGoldBounty            	= function: 0x002a2308 (function)
      SetMaximumGoldBounty            	= function: 0x002a23c0 (function)
      GetMaximumGoldBounty            	= function: 0x002a2478 (function)
      GetGoldBounty                   	= function: 0x002a2530 (function)
      GetTotalPurchasedUpgradeGoldCost	= function: 0x002a25e0 (function)
      IsControllableByAnyPlayer       	= function: 0x002a26a8 (function)
      IsOwnedByAnyPlayer              	= function: 0x002a2768 (function)
      GetMainControllingPlayer        	= function: 0x002a2820 (function)
      SetControllableByPlayer         	= function: 0x0029f1e8 (function)
      GetPlayerOwnerID                	= function: 0x0029f2a0 (function)
      GetPlayerOwner                  	= function: 0x0029f358 (function)
      GetBaseDamageMin                	= function: 0x0029f408 (function)
      GetBaseDamageMax                	= function: 0x0029f4c0 (function)
      SetBaseDamageMin                	= function: 0x0029f578 (function)
      SetBaseDamageMax                	= function: 0x0029f630 (function)
      GetDamageMin                    	= function: 0x0029f6e8 (function)
      GetDamageMax                    	= function: 0x0029f798 (function)
      GetPhysicalArmorValue           	= function: 0x0029f848 (function)
      Script_GetMagicalArmorValue     	= function: 0x0029f900 (function)
      SetPhysicalArmorBaseValue       	= function: 0x0029f9c0 (function)
      GetPhysicalArmorBaseValue       	= function: 0x0029fa80 (function)
      SetBaseMagicalResistanceValue   	= function: 0x0029fb40 (function)
      GetBaseMagicalResistanceValue   	= function: 0x0029fc00 (function)
      SetBaseManaRegen                	= function: 0x0029fcc0 (function)
      GetBonusManaRegen               	= function: 0x0029fd78 (function)
      GetManaRegen                    	= function: 0x0029fe30 (function)
      SetBaseHealthRegen              	= function: 0x0029fee0 (function)
      GetBaseHealthRegen              	= function: 0x0029ff98 (function)
      GetHealthRegen                  	= function: 0x002a0050 (function)
      SetBaseMoveSpeed                	= function: 0x002a0100 (function)
      GetBaseMoveSpeed                	= function: 0x002a01b8 (function)
      SetBaseAttackTime               	= function: 0x002a0270 (function)
      GetBaseAttackTime               	= function: 0x002a0328 (function)
      GetIncreasedAttackSpeed         	= function: 0x002a03e0 (function)
      GetAttacksPerSecond             	= function: 0x002a0498 (function)
      GetSecondsPerAttack             	= function: 0x002a0550 (function)
      GetHasteFactor                  	= function: 0x002a0608 (function)
      GetCastPoint                    	= function: 0x002a06b8 (function)
      GetAttackSpeed                  	= function: 0x002a0768 (function)
      GetDisplayAttackSpeed           	= function: 0x002a0818 (function)
      GetMoveSpeedModifier            	= function: 0x002a08d0 (function)
      GetCastRangeBonus               	= function: 0x002a58b0 (function)
      GetCooldownReduction            	= function: 0x002a5968 (function)
      IsIllusion                      	= function: 0x002a5a20 (function)
      MakeIllusion                    	= function: 0x002a5aa0 (function)
      IsStrongIllusion                	= function: 0x002a5b50 (function)
      IsTempestDouble                 	= function: 0x002a5c08 (function)
      IsReincarnating                 	= function: 0x002a5cb8 (function)
      ClearActivityModifiers          	= function: 0x002a5d68 (function)
      AddActivityModifier             	= function: 0x002a5e20 (function)
      StartGesture                    	= function: 0x002a5ed8 (function)
      StartGestureWithFade            	= function: 0x002a5f88 (function)
      StartGestureFadeWithSequenceSettings	= function: 0x002a6040 (function)
      StartGestureWithPlaybackRate    	= function: 0x002a6108 (function)
      StartGestureWithFadeAndPlaybackRate	= function: 0x002a61c8 (function)
      RemoveGesture                   	= function: 0x002a6290 (function)
      FadeGesture                     	= function: 0x002a6340 (function)
      PlayVCD                         	= function: 0x002a63f0 (function)
      ForcePlayActivityOnce           	= function: 0x002a6470 (function)
      OnCommandMoveToDirection        	= function: 0x002a6528 (function)
      TriggerSpellAbsorb              	= function: 0x002a65e8 (function)
      TriggerModifierDodge            	= function: 0x002a66a0 (function)
      TriggerSpellReflect             	= function: 0x002a6758 (function)
      SwapAbilities                   	= function: 0x002a6810 (function)
      UnHideAbilityToSlot             	= function: 0x002a68c0 (function)
      FindAbilityByName               	= function: 0x002a6978 (function)
      GetAbilityByIndex               	= function: 0x002a6a30 (function)
      GetAbilityCount                 	= function: 0x002a6ae8 (function)
      SetAbilityByIndex               	= function: 0x002a6b98 (function)
      RemoveAbilityFromIndexByName    	= function: 0x002a6c50 (function)
      GetCurrentActiveAbility         	= function: 0x002a6d10 (function)
      CastAbilityOnPosition           	= function: 0x002a6dc8 (function)
      CastAbilityOnTarget             	= function: 0x002a6e80 (function)
      CastAbilityNoTarget             	= function: 0x002a6f38 (function)
      CastAbilityToggle               	= function: 0x002a6ff0 (function)
      CastAbilityImmediately          	= function: 0x002a70a8 (function)
      Hold                            	= function: 0x002a71e0 (function)
      Stop                            	= function: 0x002a7260 (function)
      SetCursorPosition               	= function: 0x002a72e0 (function)
      SetCursorTargetingNothing       	= function: 0x002a7398 (function)
      GetCursorCastTarget             	= function: 0x002a7458 (function)
      GetCursorPosition               	= function: 0x002a7510 (function)
      GetCursorTargetingNothing       	= function: 0x00253098 (function)
      HasInventory                    	= function: 0x00253158 (function)
      SetHasInventory                 	= function: 0x00253208 (function)
      GetItemInSlot                   	= function: 0x002532b8 (function)
      IsRooted                        	= function: 0x00253368 (function)
      IsDisarmed                      	= function: 0x00253418 (function)
      IsAttackImmune                  	= function: 0x002534c8 (function)
      IsSilenced                      	= function: 0x00253578 (function)
      IsMuted                         	= function: 0x00253628 (function)
      IsStunned                       	= function: 0x002536a8 (function)
      IsHexed                         	= function: 0x00253758 (function)
      IsFeared                        	= function: 0x002537d8 (function)
      IsTaunted                       	= function: 0x00253888 (function)
      IsInvisible                     	= function: 0x00253938 (function)
      IsInvulnerable                  	= function: 0x002539e8 (function)
      IsMagicImmune                   	= function: 0x00253a98 (function)
      IsDebuffImmune                  	= function: 0x00253b48 (function)
      NoUnitCollision                 	= function: 0x00253bf8 (function)
      ProvidesVision                  	= function: 0x00253ca8 (function)
      IsNightmared                    	= function: 0x00253d58 (function)
      IsBlockDisabled                 	= function: 0x00253e08 (function)
      IsEvadeDisabled                 	= function: 0x00253eb8 (function)
      IsUnselectable                  	= function: 0x00253f68 (function)
      IsUnableToMiss                  	= function: 0x00254018 (function)
      IsSpeciallyDeniable             	= function: 0x002540c8 (function)
      IsSpeciallyUndeniable           	= function: 0x00254180 (function)
      IsCommandRestricted             	= function: 0x00254238 (function)
      NotOnMinimap                    	= function: 0x002542f0 (function)
      NotOnMinimapForEnemies          	= function: 0x002543a0 (function)
      IsLowAttackPriority             	= function: 0x00254458 (function)
      NoHealthBar                     	= function: 0x00254510 (function)
      NoTeamSelect                    	= function: 0x002545c0 (function)
      PassivesDisabled                	= function: 0x00254670 (function)
      IsDominated                     	= function: 0x00254728 (function)
      IsBlind                         	= function: 0x002547d8 (function)
      IsOutOfGame                     	= function: 0x00254858 (function)
      IsUntargetableFrom              	= function: 0x00254908 (function)
      IsFrozen                        	= function: 0x002549c0 (function)
      NoTeamMoveTo                    	= function: 0x00254a70 (function)
      IsPhased                        	= function: 0x00254b20 (function)
      Script_IsDeniable               	= function: 0x00254bd0 (function)
      IsMovementImpaired              	= function: 0x00254c88 (function)
      HasItemInInventory              	= function: 0x00254d40 (function)
      FindItemInInventory             	= function: 0x00254df8 (function)
      HasScepter                      	= function: 0x00254eb0 (function)
      SetStolenScepter                	= function: 0x00254f60 (function)
      GetAttackCapability             	= function: 0x00255018 (function)
      SetAttackCapability             	= function: 0x002550d0 (function)
      SetMoveCapability               	= function: 0x00255188 (function)
      HasGroundMovementCapability     	= function: 0x00255240 (function)
      HasFlyMovementCapability        	= function: 0x00255300 (function)
      HasMovementCapability           	= function: 0x002553c0 (function)
      HasAttackCapability             	= function: 0x00255478 (function)
      HasAnyActiveAbilities           	= function: 0x00258538 (function)
      HasFlyingVision                 	= function: 0x002585f0 (function)
      IsRangedAttacker                	= function: 0x002586a0 (function)
      GetProjectileSpeed              	= function: 0x00258758 (function)
      SetRangedProjectileName         	= function: 0x00258810 (function)
      GetRangedProjectileName         	= function: 0x002588c8 (function)
      SetUnitName                     	= function: 0x00258980 (function)
      GetUnitName                     	= function: 0x00258a30 (function)
      GetUnitLabel                    	= function: 0x00258ae0 (function)
      ForceKill                       	= function: 0x00258b90 (function)
      AttackReady                     	= function: 0x00258c40 (function)
      AttackNoEarlierThan             	= function: 0x00258cf0 (function)
      TimeUntilNextAttack             	= function: 0x00258da8 (function)
      GetLastAttackTime               	= function: 0x00258e60 (function)
      GetAttackAnimationPoint         	= function: 0x00258f18 (function)
      IsAttackingEntity               	= function: 0x00258fd0 (function)
      IsAttacking                     	= function: 0x00259088 (function)
      SetAttacking                    	= function: 0x00259138 (function)
      GetAttackTarget                 	= function: 0x002591e8 (function)
      GetAggroTarget                  	= function: 0x00259298 (function)
   }
   MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE	= 38 (number)
   ScriptDebugAddTextFilter        	= function: 0x00308478 (function)
   MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT	= 39 (number)
   ScriptDebugTextDraw             	= function: 0x00308448 (function)
   MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE	= 40 (number)
   ScriptDebugTextPrint            	= function: 0x00308418 (function)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE	= 41 (number)
   ScriptDebugTextTrace            	= function: 0x003083e8 (function)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION	= 42 (number)
   ScriptDebugClearTraces          	= function: 0x003083b8 (function)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY	= 43 (number)
   ScriptDebugRemoveTrace          	= function: 0x00308388 (function)
   MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE	= 44 (number)
   ScriptDebugAddTrace             	= function: 0x00308358 (function)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP	= 45 (number)
   ScriptDebugTraceAll             	= function: 0x00308328 (function)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE	= 46 (number)
   ScriptDebugClearWatches         	= function: 0x003082f8 (function)
   MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE	= 47 (number)
   ScriptDebugRemoveWatchPattern   	= function: 0x0030ddb8 (function)
   MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE	= 48 (number)
   ScriptDebugAddWatchPattern      	= function: 0x0030dd88 (function)
   MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET	= 49 (number)
   ScriptDebugRemoveWatches        	= function: 0x0030dd58 (function)
   MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE	= 50 (number)
   ScriptDebugRemoveWatch          	= function: 0x0030dd28 (function)
   MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE	= 51 (number)
   ScriptDebugAddWatches           	= function: 0x0030dcf8 (function)
   MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE	= 52 (number)
   ScriptDebugAddWatch             	= function: 0x0030dcc8 (function)
   MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE	= 53 (number)
   ScriptDebugDrawWatches          	= function: 0x0030dc98 (function)
   MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE	= 54 (number)
   ScriptDebugDraw                 	= function: 0x0030dfc0 (function)
   MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE	= 55 (number)
   ScriptDebugTraceAllOn           	= false (boolean)
   MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE	= 56 (number)
   ScriptDebugTraces               	= table: 0x0030dc50 (table)
   {
   }
   MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE	= 57 (number)
   ScriptDebugWatches              	= table: 0x0030dc08 (table)
   {
   }
   MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE	= 58 (number)
   ScriptDebugDrawTextEnabled      	= true (boolean)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE	= 59 (number)
   ScriptDebugDrawWatchesEnabled   	= true (boolean)
   MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE	= 60 (number)
   ScriptDebugInDebugDraw          	= false (boolean)
   MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT	= 61 (number)
   ScriptDebugTextFilters          	= table: 0x0030dbc0 (table)
   {
   }
   MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT	= 62 (number)
   ScriptDebugTextIndent           	= 0 (number)
   MODIFIER_PROPERTY_EVASION_CONSTANT	= 63 (number)
   ScriptDebugText                 	= table: 0x0030db78 (table)
   {
   }
   MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT	= 64 (number)
   ScriptDebugDefaultWatchColor    	= table: 0x0030db08 (array table)
   [
      1                               	= 0 (number)
      2                               	= 192 (number)
      3                               	= 0 (number)
   ]
   MODIFIER_PROPERTY_STATUS_RESISTANCE	= 65 (number)
   NDEBUG_PERSIST_TILL_NEXT_SERVER 	= 0.01023 (number)
   MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING	= 66 (number)
   ScriptDebugWatchFistLine        	= 26 (number)
   MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER	= 67 (number)
   ScriptDebugTextTime             	= 10 (number)
   MODIFIER_PROPERTY_AVOID_DAMAGE  	= 68 (number)
   ScriptDebugTextLines            	= 20 (number)
   MODIFIER_PROPERTY_AVOID_SPELL   	= 69 (number)
   ScriptDebugFirstLine            	= 6 (number)
   MODIFIER_PROPERTY_MISS_PERCENTAGE	= 70 (number)
   __RegisterGameEventListeners    	= function: 0x0030df90 (function)
   Dynamic_Wrap                    	= function: 0x0030df60 (function)
   __DumpScope                     	= function: 0x0030df30 (function)
   ConnectOutputs                  	= function: 0x0030df00 (function)
   __OutputsPattern                	= "^On.*Output$" (string)
   __ReplaceClosures               	= function: 0x0030ded0 (function)
   EntFireByHandle                 	= function: 0x003114e0 (function)
   EntFire                         	= function: 0x003114b0 (function)
   ScriptAssert                    	= function: 0x00311480 (function)
   UniqueString                    	= function: 0x00311450 (function)
   vlua                            	= table: 0x003005b8 (table)
   {
      slice                           	= function: 0x00300ab0 (function)
      contains                        	= function: 0x002ffcc0 (function)
      resize                          	= function: 0x00300c98 (function)
      reverse                         	= function: 0x00300c68 (function)
      select                          	= function: 0x002ffd88 (function)
      extend                          	= function: 0x00300cc8 (function)
      map                             	= function: 0x00300cf8 (function)
      compare                         	= function: 0x002f8608 (function)
      reduce                          	= function: 0x00300d28 (function)
      tableadd                        	= function: 0x002ffcf0 (function)
      delete                          	= function: 0x002f85d0 (function)
      split                           	= function: 0x002ffd20 (function)
      rawdelete                       	= function: 0x00300a20 (function)
      rawin                           	= function: 0x00300a50 (function)
      find                            	= function: 0x00300a80 (function)
      clear                           	= function: 0x00300600 (function)
      clone                           	= function: 0x002ffd58 (function)
   }
   isclass                         	= function: 0x002dbe60 (function)
   getbase                         	= function: 0x002dbe30 (function)
   getclass                        	= function: 0x002d84f8 (function)
   instanceof                      	= function: 0x002d26b0 (function)
   class                           	= function: 0x002d20b8 (function)
   SetTeamCustomHealthbarColor     	= function: 0x00250ad8 (function)
   RemoveFOWViewer                 	= function: 0x00250d08 (function)
   ACT_VR_SHOTGUN_SLIDE_FORWARD    	= 981 (number)
   ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED	= 982 (number)
   CDesc                           	= table: 0x00219bd0 (table)
   {
      CDOTA_SimpleObstruction         	= table: 0x002ea560 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002ea5a8 (function)
         FDesc                           	= table: 0x002ea618 (table)
         {
            IsEnabled                       	= bool IsEnabled()
Returns whether the obstruction is currently active (userdata)
            SetEnabled                      	= void SetEnabled(bool bEnabled, bool bForce)
Enable or disable the obstruction (userdata)
         }
         IsEnabled                       	= function: 0x002ea660 (function)
         SetEnabled                      	= function: 0x002ea748 (function)
      }
      CDOTA_BaseNPC_Building          	= table: 0x002baef8 (table, already seen)
      CDOTAGameRules                  	= table: 0x003380d8 (table, already seen)
      CDOTA_BaseNPC_Shop              	= table: 0x002bb2f8 (table)
      {
         metatable                       	= table: 0x002baef8 (table, already seen)
         IsNull                          	= function: 0x002bb340 (function)
         FDesc                           	= table: 0x002bb3b0 (table)
         {
            GetShopType                     	= int GetShopType()
Get the DOTA_SHOP_TYPE (userdata)
            SetShopType                     	= void SetShopType(int eShopType)
Set the DOTA_SHOP_TYPE. (userdata)
         }
         GetShopType                     	= function: 0x002bb510 (function)
         SetShopType                     	= function: 0x002bb3f8 (function)
      }
      CDOTA_Unit_Scout                	= table: 0x002eae38 (table)
      {
         metatable                       	= table: 0x00233f70 (table, already seen)
         IsNull                          	= function: 0x002eae80 (function)
         FDesc                           	= table: 0x002eaef0 (table)
         {
         }
      }
      CDOTA_Ability_Nian_Leap         	= table: 0x002eb070 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002eb0b8 (function)
         FDesc                           	= table: 0x002eb128 (table)
         {
            SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
         }
         SetPlaybackRate                 	= function: 0x002eb170 (function)
      }
      CBaseFlex                       	= table: 0x0029b040 (table, already seen)
      CDOTA_Ability_Animation_Attack  	= table: 0x002eb3c8 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002eb410 (function)
         FDesc                           	= table: 0x002eb480 (table)
         {
            SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
         }
         SetPlaybackRate                 	= function: 0x002eb4c8 (function)
      }
      CDOTA_Ability_Animation_TailSpin	= table: 0x002eb6f8 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002eb740 (function)
         FDesc                           	= table: 0x002eb7b0 (table)
         {
            SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
         }
         SetPlaybackRate                 	= function: 0x002c20c8 (function)
      }
      CDOTA_Unit_Nian                 	= table: 0x002c22e0 (table)
      {
         metatable = table: 0x002a3930
         {
            IsNull                          	= function: 0x002a3978 (function)
            SetChampion                     	= function: 0x002a3b18 (function)
            IsChampion                      	= function: 0x002a3bc8 (function)
            SetEconItemGroup                	= function: 0x002a3d40 (function)
            SetRequiresReachingEndPath      	= function: 0x002a3dc0 (function)
            FDesc                           	= table: 0x002a39e8 (table)
            {
               SetChampion                     	= void SetChampion(bool bIsChampion)
Flag this unit as a champion creature. (userdata)
               IsChampion                      	= bool IsChampion()
Is this unit a champion? (userdata)
               SetEconItemGroup                	= void SetEconItemGroup(int nGroup)
Switches visible econ item group. (userdata)
               SetRequiresReachingEndPath      	= void SetRequiresReachingEndPath(bool bRequiresReachingEndPath)
Set whether creatures require reaching their end path before becoming idle (userdata)
               GetDisableResistance            	= float GetDisableResistance()
Set creature's current disable resistance (userdata)
               SetDisableResistance            	= void SetDisableResistance(float flDisableResistance)
Set creature's current disable resistance (userdata)
               GetUltimateDisableResistance    	= float GetUltimateDisableResistance()
Set creature's current disable resistance from ultimates (userdata)
               SetUltimateDisableResistance    	= void SetUltimateDisableResistance(float flUltDisableResistance)
Set creature's current disable resistance from ultimates (userdata)
               CreatureLevelUp                 	= void CreatureLevelUp(int iLevels)
Level the creature up by the specified number of levels (userdata)
               SetHPGain                       	= void SetHPGain(int nHPGain)
Set the hit points gained per level on this creature. (userdata)
               SetManaGain                     	= void SetManaGain(int nManaGain)
Set the mana points gained per level on this creature. (userdata)
               SetHPRegenGain                  	= void SetHPRegenGain(float flHPRegenGain)
Set the hit points regen gained per level on this creature. (userdata)
               SetManaRegenGain                	= void SetManaRegenGain(float flManaRegenGain)
Set the mana points regen gained per level on this creature. (userdata)
               SetDamageGain                   	= void SetDamageGain(int nDamageGain)
Set the damage gained per level on this creature. (userdata)
               SetArmorGain                    	= void SetArmorGain(float flArmorGain)
Set the armor gained per level on this creature. (userdata)
               SetMagicResistanceGain          	= void SetMagicResistanceGain(float flMagicResistanceGain)
Set the magic resistance gained per level on this creature. (userdata)
               SetDisableResistanceGain        	= void SetDisableResistanceGain(float flDisableResistanceGain)
Set the disable resistance gained per level on this creature. (userdata)
               SetAttackTimeGain               	= void SetAttackTimeGain(float flAttackTimeGain)
Set the attack time gained per level on this creature. (userdata)
               SetMoveSpeedGain                	= void SetMoveSpeedGain(int nMoveSpeedGain)
Set the move speed gained per level on this creature. (userdata)
               IsReincarnating                 	= bool IsReincarnating()
Is this creature respawning? (userdata)
               SetXPGain                       	= void SetXPGain(int nXPGain)
Set the XP gained per level on this creature. (userdata)
               SetAggroOnOwnerOnDamage         	= void SetAggroOnOwnerOnDamage(bool bAggro)
Does this creature aggro on the owner of the attacking unit when taking damage? (userdata)
               AddItemDrop                     	= void AddItemDrop(handle hDropData)
Add the specified item drop to this creature. (userdata)
               RemoveAllItemDrops              	= void RemoveAllItemDrops()
Remove all item drops from this creature. (userdata)
               SetBountyGain                   	= void SetBountyGain(int nBountyGain)
Set the bounty gold gained per level on this creature. (userdata)
            }
            SetDisableResistance            	= function: 0x002a4000 (function)
            GetUltimateDisableResistance    	= function: 0x002a4240 (function)
            SetUltimateDisableResistance    	= function: 0x002a4300 (function)
            CreatureLevelUp                 	= function: 0x002a4548 (function)
            SetHPGain                       	= function: 0x002a45f8 (function)
            SetManaGain                     	= function: 0x002a46a8 (function)
            SetHPRegenGain                  	= function: 0x002a4758 (function)
            SetManaRegenGain                	= function: 0x002a4808 (function)
            SetDamageGain                   	= function: 0x002a48c0 (function)
            SetArmorGain                    	= function: 0x002a4c78 (function)
            SetMagicResistanceGain          	= function: 0x002a4d28 (function)
            SetDisableResistanceGain        	= function: 0x002a50e8 (function)
            SetAttackTimeGain               	= function: 0x002a51a8 (function)
            SetMoveSpeedGain                	= function: 0x002a5260 (function)
            IsReincarnating                 	= function: 0x002a3a30 (function)
            SetXPGain                       	= function: 0x002a53c8 (function)
            SetAggroOnOwnerOnDamage         	= function: 0x002a5478 (function)
            AddItemDrop                     	= function: 0x002a5530 (function)
            RemoveAllItemDrops              	= function: 0x002a55e0 (function)
            SetBountyGain                   	= function: 0x002a5318 (function)
            GetDisableResistance            	= function: 0x002a3f48 (function)
            SetAggroTarget                  	= function: 0x00259348 (function)
            AlertNearbyUnits                	= function: 0x002593f8 (function)
            GetAdditionalBattleMusicWeight  	= function: 0x002594b0 (function)
            SetAdditionalBattleMusicWeight  	= function: 0x00259570 (function)
            GetForceAttackTarget            	= function: 0x00259630 (function)
            SetForceAttackTarget            	= function: 0x002596e8 (function)
            SetForceAttackTargetAlly        	= function: 0x002597a0 (function)
            IsChanneling                    	= function: 0x00259860 (function)
            Interrupt                       	= function: 0x00259910 (function)
            InterruptChannel                	= function: 0x002599c0 (function)
            InterruptMotionControllers      	= function: 0x00259a78 (function)
            RemoveHorizontalMotionController	= function: 0x00259b38 (function)
            RemoveVerticalMotionController  	= function: 0x00259c00 (function)
            IsCurrentlyVerticalMotionControlled	= function: 0x00259cc0 (function)
            IsCurrentlyHorizontalMotionControlled	= function: 0x00259d88 (function)
            GetRangeToUnit                  	= function: 0x00259e50 (function)
            MoveToTargetToAttack            	= function: 0x0029e200 (function)
            PatrolToPosition                	= function: 0x0029e2b8 (function)
            DropItemAtPosition              	= function: 0x0029e370 (function)
            MoveToNPCToGiveItem             	= function: 0x0029e428 (function)
            PickupDroppedItem               	= function: 0x0029e4e0 (function)
            PickupRune                      	= function: 0x0029e598 (function)
            SellItem                        	= function: 0x0029e648 (function)
            DisassembleItem                 	= function: 0x0029e6f8 (function)
            EjectItemFromStash              	= function: 0x0029e7a8 (function)
            RemoveItem                      	= function: 0x0029e860 (function)
            TakeItem                        	= function: 0x0029e910 (function)
            SetCanSellItems                 	= function: 0x0029e9c0 (function)
            CanSellItems                    	= function: 0x0029ea70 (function)
            AddItemByName                   	= function: 0x0029eb20 (function)
            AddItem                         	= function: 0x0029ebd0 (function)
            AddAbility                      	= function: 0x0029ec50 (function)
            SwapItems                       	= function: 0x0029ed00 (function)
            RemoveAbility                   	= function: 0x0029edb0 (function)
            HasAbility                      	= function: 0x0029ee60 (function)
            RemoveAbilityByHandle           	= function: 0x0029ef10 (function)
            GetStatusResistance             	= function: 0x0029efc8 (function)
            GetEvasion                      	= function: 0x0029f080 (function)
            GetSpellAmplification           	= function: 0x0029f130 (function)
            IsInRangeOfShop                 	= function: 0x0029d540 (function)
            SetBaseMaxHealth                	= function: 0x0029d5f0 (function)
            GetBaseMaxHealth                	= function: 0x0029d6a8 (function)
            ModifyHealth                    	= function: 0x0029d760 (function)
            SetMana                         	= function: 0x0029d810 (function)
            SetMaxMana                      	= function: 0x0029d890 (function)
            GetMana                         	= function: 0x0029d940 (function)
            GetMaxMana                      	= function: 0x0029d9c0 (function)
            GetManaPercent                  	= function: 0x0029da70 (function)
            Script_ReduceMana               	= function: 0x0029db20 (function)
            GiveMana                        	= function: 0x0029dbd8 (function)
            SpendMana                       	= function: 0x0029dc88 (function)
            Heal                            	= function: 0x0029dd38 (function)
            AddNoDraw                       	= function: 0x002a31a8 (function)
            RemoveNoDraw                    	= function: 0x002a3258 (function)
            GetCreationTime                 	= function: 0x002a3128 (function)
            IsNull                          	= function: 0x00233fb8 (function)
            Kill                            	= function: 0x002a0e50 (function)
            SetOrigin                       	= function: 0x002a7160 (function)
            SetHealthBarOffsetOverride      	= function: 0x00234070 (function)
            GetBaseHealthBarOffset          	= function: 0x00234198 (function)
            SetNeverMoveToClearSpace        	= function: 0x0029bb30 (function)
            GetNeverMoveToClearSpace        	= function: 0x0029bce0 (function)
            IsIdle                          	= function: 0x0029bda0 (function)
            GetLastIdleChangeTime           	= function: 0x0029bc78 (function)
            FaceTowards                     	= function: 0x0029bf28 (function)
            StopFacing                      	= function: 0x0029bbf0 (function)
            SpeakConcept                    	= function: 0x0029c130 (function)
            QueueConcept                    	= function: 0x0029be20 (function)
            QueueTeamConcept                	= function: 0x0029c368 (function)
            QueueTeamConceptNoSpectators    	= function: 0x0029c420 (function)
            SetInitialGoalEntity            	= function: 0x0029c4e0 (function)
            GetInitialGoalEntity            	= function: 0x0029c598 (function)
            SetMustReachEachGoalEntity      	= function: 0x0029c650 (function)
            GetMustReachEachGoalEntity      	= function: 0x0029bfa8 (function)
            SetInitialGoalPosition          	= function: 0x0029c068 (function)
            GetInitialGoalPosition          	= function: 0x0029c1e0 (function)
            CalculateGenericBonuses         	= function: 0x0029c298 (function)
            ChangeTeam                      	= function: 0x0029cd20 (function)
            GetIdealSpeed                   	= function: 0x0029cdd0 (function)
            GetIdealSpeedNoSlows            	= function: 0x0029ce80 (function)
            GetLevel                        	= function: 0x0029cf38 (function)
            IsAncient                       	= function: 0x0029cfe8 (function)
            IsBossCreature                  	= function: 0x0029d098 (function)
            IsNeutralUnitType               	= function: 0x0029d148 (function)
            IsSummoned                      	= function: 0x0029d200 (function)
            GetCloneSource                  	= function: 0x0029d2b0 (function)
            IsClone                         	= function: 0x0029d360 (function)
            SetFollowRange                  	= function: 0x0029d3e0 (function)
            GetHullRadius                   	= function: 0x0029d490 (function)
            GetCollisionPadding             	= function: 0x0029c710 (function)
            GetPaddedCollisionRadius        	= function: 0x0029c7c8 (function)
            SetHullRadius                   	= function: 0x0029c888 (function)
            GetHealthPercent                	= function: 0x0029c938 (function)
            GetHealthDeficit                	= function: 0x0029ca58 (function)
            GetLastDamageTime               	= function: 0x0029cb10 (function)
            MoveToPosition                  	= function: 0x0029cbc8 (function)
            MoveToPositionAggressive        	= function: 0x0029cc78 (function)
            MoveToNPC                       	= function: 0x0029e150 (function)
            IsAlive                         	= function: 0x002a1aa0 (function)
            IsBaseNPC                       	= function: 0x00337b78 (function)
            IsHardDisarmed                  	= function: 0x00337b18 (function)
            IsSoftDisarmed                  	= function: 0x00337b48 (function)
            SetCustomHealthLabel            	= function: 0x002a3740 (function)
            SetShouldDoFlyHeightVisual      	= function: 0x002a3680 (function)
            SetCursorCastTarget             	= function: 0x002a35c8 (function)
            SetRevealRadius                 	= function: 0x002a3518 (function)
            IsMoving                        	= function: 0x002a3468 (function)
            RemoveAllModifiers              	= function: 0x002a33b0 (function)
            Purge                           	= function: 0x002a3308 (function)
            AngerNearbyUnits                	= function: 0x002a3070 (function)
            RespawnUnit                     	= function: 0x002a2fc0 (function)
            SetUnitCanRespawn               	= function: 0x002a2f08 (function)
            UnitCanRespawn                  	= function: 0x002a2e58 (function)
            NotifyWearablesOfModelChange    	= function: 0x002a2d98 (function)
            WasKilledPassively              	= function: 0x002a2ce0 (function)
            GetModelRadius                  	= function: 0x002a2c30 (function)
            DestroyAllSpeechBubbles         	= function: 0x002a2b78 (function)
            AddSpeechBubble                 	= function: 0x002a2ac8 (function)
            SetOriginalModel                	= function: 0x002a2a10 (function)
            ManageModelChanges              	= function: 0x002a2958 (function)
            IsPhantomBlocker                	= function: 0x002a28a0 (function)
            MakePhantomBlocker              	= function: 0x0025af90 (function)
            BoundingRadius2D                	= function: 0x0025aed8 (function)
            MakeVisibleDueToAttack          	= function: 0x0025ae20 (function)
            MakeVisibleToTeam               	= function: 0x0025ad68 (function)
            GetOpposingTeamNumber           	= function: 0x0025acb0 (function)
            CanBeSeenByAnyOpposingTeam      	= function: 0x0025abf0 (function)
            IsOpposingTeam                  	= function: 0x0025ab40 (function)
            DropItemAtPositionImmediate     	= function: 0x0025aa80 (function)
            SetModifierStackCount           	= function: 0x0025a9c8 (function)
            GetModifierStackCount           	= function: 0x0025a910 (function)
            HasModifier                     	= function: 0x0025a860 (function)
            FindAllModifiersByName          	= function: 0x0025a7a8 (function)
            FindAllModifiers                	= function: 0x0025a6f0 (function)
            FindModifierByNameAndCaster     	= function: 0x0025a630 (function)
            FindModifierByName              	= function: 0x0025a578 (function)
            RemoveModifierByNameAndCaster   	= function: 0x0025a4b8 (function)
            RemoveAllModifiersOfName        	= function: 0x0025a3f8 (function)
            RemoveModifierByName            	= function: 0x0025a340 (function)
            GetModifierNameByIndex          	= function: 0x0025a288 (function)
            GetModifierCount                	= function: 0x0025a1d0 (function)
            AddNewModifier                  	= function: 0x0025a120 (function)
            SetIdleAcquire                  	= function: 0x0025a070 (function)
            ShouldIdleAcquire               	= function: 0x00259fb8 (function)
            IsPositionInRange               	= function: 0x00259f00 (function)
            FDesc                           	= table: 0x00234028 (table, already seen)
            HealWithParams                  	= function: 0x0029ddb8 (function)
            GetAcquisitionRange             	= function: 0x0029de68 (function)
            SetAcquisitionRange             	= function: 0x0029df20 (function)
            Script_GetAttackRange           	= function: 0x0029dfd8 (function)
            GetAttackRangeBuffer            	= function: 0x0029e090 (function)
            GetBaseAttackRange              	= function: 0x002a09f8 (function)
            GetAttackDamage                 	= function: 0x002a0ab0 (function)
            GetAverageTrueAttackDamage      	= function: 0x002a0b60 (function)
            SetShouldComputeRemainingPathLength	= function: 0x002a0c20 (function)
            GetRemainingPathLength          	= function: 0x002a0ce8 (function)
            PerformAttack                   	= function: 0x002a0da0 (function)
            IsHero                          	= function: 0x002a0ed0 (function)
            IsRealHero                      	= function: 0x002a0f50 (function)
            IsConsideredHero                	= function: 0x002a1000 (function)
            IsCreepHero                     	= function: 0x002a10b8 (function)
            IsOther                         	= function: 0x002a1168 (function)
            IsTower                         	= function: 0x002a11e8 (function)
            IsBuilding                      	= function: 0x002a1268 (function)
            IsFort                          	= function: 0x002a1318 (function)
            IsBarracks                      	= function: 0x002a1398 (function)
            IsCreep                         	= function: 0x002a1448 (function)
            IsCourier                       	= function: 0x002a14c8 (function)
            IsBoss                          	= function: 0x002a1578 (function)
            IsCreature                      	= function: 0x002a15f8 (function)
            IsWard                          	= function: 0x002a16a8 (function)
            IsHeroWard                      	= function: 0x002a1728 (function)
            IsShrine                        	= function: 0x002a17d8 (function)
            IsPhantom                       	= function: 0x002a1888 (function)
            IsZombie                        	= function: 0x002a1938 (function)
            GetNeutralSpawnerName           	= function: 0x002a19e8 (function)
            CanEntityBeSeenByMyTeam         	= function: 0x002a1b20 (function)
            GetDayTimeVisionRange           	= function: 0x002a1bd8 (function)
            GetBaseDayTimeVisionRange       	= function: 0x002a1c90 (function)
            SetDayTimeVisionRange           	= function: 0x002a1d50 (function)
            GetNightTimeVisionRange         	= function: 0x002a1e08 (function)
            GetBaseNightTimeVisionRange     	= function: 0x002a1ec0 (function)
            SetNightTimeVisionRange         	= function: 0x002a1f80 (function)
            GetCurrentVisionRange           	= function: 0x002a2038 (function)
            SetDeathXP                      	= function: 0x002a20f0 (function)
            GetDeathXP                      	= function: 0x002a21a0 (function)
            SetMinimumGoldBounty            	= function: 0x002a2250 (function)
            GetMinimumGoldBounty            	= function: 0x002a2308 (function)
            SetMaximumGoldBounty            	= function: 0x002a23c0 (function)
            GetMaximumGoldBounty            	= function: 0x002a2478 (function)
            GetGoldBounty                   	= function: 0x002a2530 (function)
            GetTotalPurchasedUpgradeGoldCost	= function: 0x002a25e0 (function)
            IsControllableByAnyPlayer       	= function: 0x002a26a8 (function)
            IsOwnedByAnyPlayer              	= function: 0x002a2768 (function)
            GetMainControllingPlayer        	= function: 0x002a2820 (function)
            SetControllableByPlayer         	= function: 0x0029f1e8 (function)
            GetPlayerOwnerID                	= function: 0x0029f2a0 (function)
            GetPlayerOwner                  	= function: 0x0029f358 (function)
            GetBaseDamageMin                	= function: 0x0029f408 (function)
            GetBaseDamageMax                	= function: 0x0029f4c0 (function)
            SetBaseDamageMin                	= function: 0x0029f578 (function)
            SetBaseDamageMax                	= function: 0x0029f630 (function)
            GetDamageMin                    	= function: 0x0029f6e8 (function)
            GetDamageMax                    	= function: 0x0029f798 (function)
            GetPhysicalArmorValue           	= function: 0x0029f848 (function)
            Script_GetMagicalArmorValue     	= function: 0x0029f900 (function)
            SetPhysicalArmorBaseValue       	= function: 0x0029f9c0 (function)
            GetPhysicalArmorBaseValue       	= function: 0x0029fa80 (function)
            SetBaseMagicalResistanceValue   	= function: 0x0029fb40 (function)
            GetBaseMagicalResistanceValue   	= function: 0x0029fc00 (function)
            SetBaseManaRegen                	= function: 0x0029fcc0 (function)
            GetBonusManaRegen               	= function: 0x0029fd78 (function)
            GetManaRegen                    	= function: 0x0029fe30 (function)
            SetBaseHealthRegen              	= function: 0x0029fee0 (function)
            GetBaseHealthRegen              	= function: 0x0029ff98 (function)
            GetHealthRegen                  	= function: 0x002a0050 (function)
            SetBaseMoveSpeed                	= function: 0x002a0100 (function)
            GetBaseMoveSpeed                	= function: 0x002a01b8 (function)
            SetBaseAttackTime               	= function: 0x002a0270 (function)
            GetBaseAttackTime               	= function: 0x002a0328 (function)
            GetIncreasedAttackSpeed         	= function: 0x002a03e0 (function)
            GetAttacksPerSecond             	= function: 0x002a0498 (function)
            GetSecondsPerAttack             	= function: 0x002a0550 (function)
            GetHasteFactor                  	= function: 0x002a0608 (function)
            GetCastPoint                    	= function: 0x002a06b8 (function)
            GetAttackSpeed                  	= function: 0x002a0768 (function)
            GetDisplayAttackSpeed           	= function: 0x002a0818 (function)
            GetMoveSpeedModifier            	= function: 0x002a08d0 (function)
            GetCastRangeBonus               	= function: 0x002a58b0 (function)
            GetCooldownReduction            	= function: 0x002a5968 (function)
            IsIllusion                      	= function: 0x002a5a20 (function)
            MakeIllusion                    	= function: 0x002a5aa0 (function)
            IsStrongIllusion                	= function: 0x002a5b50 (function)
            IsTempestDouble                 	= function: 0x002a5c08 (function)
            IsReincarnating                 	= function: 0x002a5cb8 (function)
            ClearActivityModifiers          	= function: 0x002a5d68 (function)
            AddActivityModifier             	= function: 0x002a5e20 (function)
            StartGesture                    	= function: 0x002a5ed8 (function)
            StartGestureWithFade            	= function: 0x002a5f88 (function)
            StartGestureFadeWithSequenceSettings	= function: 0x002a6040 (function)
            StartGestureWithPlaybackRate    	= function: 0x002a6108 (function)
            StartGestureWithFadeAndPlaybackRate	= function: 0x002a61c8 (function)
            RemoveGesture                   	= function: 0x002a6290 (function)
            FadeGesture                     	= function: 0x002a6340 (function)
            PlayVCD                         	= function: 0x002a63f0 (function)
            ForcePlayActivityOnce           	= function: 0x002a6470 (function)
            OnCommandMoveToDirection        	= function: 0x002a6528 (function)
            TriggerSpellAbsorb              	= function: 0x002a65e8 (function)
            TriggerModifierDodge            	= function: 0x002a66a0 (function)
            TriggerSpellReflect             	= function: 0x002a6758 (function)
            SwapAbilities                   	= function: 0x002a6810 (function)
            UnHideAbilityToSlot             	= function: 0x002a68c0 (function)
            FindAbilityByName               	= function: 0x002a6978 (function)
            GetAbilityByIndex               	= function: 0x002a6a30 (function)
            GetAbilityCount                 	= function: 0x002a6ae8 (function)
            SetAbilityByIndex               	= function: 0x002a6b98 (function)
            RemoveAbilityFromIndexByName    	= function: 0x002a6c50 (function)
            GetCurrentActiveAbility         	= function: 0x002a6d10 (function)
            CastAbilityOnPosition           	= function: 0x002a6dc8 (function)
            CastAbilityOnTarget             	= function: 0x002a6e80 (function)
            CastAbilityNoTarget             	= function: 0x002a6f38 (function)
            CastAbilityToggle               	= function: 0x002a6ff0 (function)
            CastAbilityImmediately          	= function: 0x002a70a8 (function)
            Hold                            	= function: 0x002a71e0 (function)
            Stop                            	= function: 0x002a7260 (function)
            SetCursorPosition               	= function: 0x002a72e0 (function)
            SetCursorTargetingNothing       	= function: 0x002a7398 (function)
            GetCursorCastTarget             	= function: 0x002a7458 (function)
            GetCursorPosition               	= function: 0x002a7510 (function)
            GetCursorTargetingNothing       	= function: 0x00253098 (function)
            HasInventory                    	= function: 0x00253158 (function)
            SetHasInventory                 	= function: 0x00253208 (function)
            GetItemInSlot                   	= function: 0x002532b8 (function)
            IsRooted                        	= function: 0x00253368 (function)
            IsDisarmed                      	= function: 0x00253418 (function)
            IsAttackImmune                  	= function: 0x002534c8 (function)
            IsSilenced                      	= function: 0x00253578 (function)
            IsMuted                         	= function: 0x00253628 (function)
            IsStunned                       	= function: 0x002536a8 (function)
            IsHexed                         	= function: 0x00253758 (function)
            IsFeared                        	= function: 0x002537d8 (function)
            IsTaunted                       	= function: 0x00253888 (function)
            IsInvisible                     	= function: 0x00253938 (function)
            IsInvulnerable                  	= function: 0x002539e8 (function)
            IsMagicImmune                   	= function: 0x00253a98 (function)
            IsDebuffImmune                  	= function: 0x00253b48 (function)
            NoUnitCollision                 	= function: 0x00253bf8 (function)
            ProvidesVision                  	= function: 0x00253ca8 (function)
            IsNightmared                    	= function: 0x00253d58 (function)
            IsBlockDisabled                 	= function: 0x00253e08 (function)
            IsEvadeDisabled                 	= function: 0x00253eb8 (function)
            IsUnselectable                  	= function: 0x00253f68 (function)
            IsUnableToMiss                  	= function: 0x00254018 (function)
            IsSpeciallyDeniable             	= function: 0x002540c8 (function)
            IsSpeciallyUndeniable           	= function: 0x00254180 (function)
            IsCommandRestricted             	= function: 0x00254238 (function)
            NotOnMinimap                    	= function: 0x002542f0 (function)
            NotOnMinimapForEnemies          	= function: 0x002543a0 (function)
            IsLowAttackPriority             	= function: 0x00254458 (function)
            NoHealthBar                     	= function: 0x00254510 (function)
            NoTeamSelect                    	= function: 0x002545c0 (function)
            PassivesDisabled                	= function: 0x00254670 (function)
            IsDominated                     	= function: 0x00254728 (function)
            IsBlind                         	= function: 0x002547d8 (function)
            IsOutOfGame                     	= function: 0x00254858 (function)
            IsUntargetableFrom              	= function: 0x00254908 (function)
            IsFrozen                        	= function: 0x002549c0 (function)
            NoTeamMoveTo                    	= function: 0x00254a70 (function)
            IsPhased                        	= function: 0x00254b20 (function)
            Script_IsDeniable               	= function: 0x00254bd0 (function)
            IsMovementImpaired              	= function: 0x00254c88 (function)
            HasItemInInventory              	= function: 0x00254d40 (function)
            FindItemInInventory             	= function: 0x00254df8 (function)
            HasScepter                      	= function: 0x00254eb0 (function)
            SetStolenScepter                	= function: 0x00254f60 (function)
            GetAttackCapability             	= function: 0x00255018 (function)
            SetAttackCapability             	= function: 0x002550d0 (function)
            SetMoveCapability               	= function: 0x00255188 (function)
            HasGroundMovementCapability     	= function: 0x00255240 (function)
            HasFlyMovementCapability        	= function: 0x00255300 (function)
            HasMovementCapability           	= function: 0x002553c0 (function)
            HasAttackCapability             	= function: 0x00255478 (function)
            HasAnyActiveAbilities           	= function: 0x00258538 (function)
            HasFlyingVision                 	= function: 0x002585f0 (function)
            IsRangedAttacker                	= function: 0x002586a0 (function)
            GetProjectileSpeed              	= function: 0x00258758 (function)
            SetRangedProjectileName         	= function: 0x00258810 (function)
            GetRangedProjectileName         	= function: 0x002588c8 (function)
            SetUnitName                     	= function: 0x00258980 (function)
            GetUnitName                     	= function: 0x00258a30 (function)
            GetUnitLabel                    	= function: 0x00258ae0 (function)
            ForceKill                       	= function: 0x00258b90 (function)
            AttackReady                     	= function: 0x00258c40 (function)
            AttackNoEarlierThan             	= function: 0x00258cf0 (function)
            TimeUntilNextAttack             	= function: 0x00258da8 (function)
            GetLastAttackTime               	= function: 0x00258e60 (function)
            GetAttackAnimationPoint         	= function: 0x00258f18 (function)
            IsAttackingEntity               	= function: 0x00258fd0 (function)
            IsAttacking                     	= function: 0x00259088 (function)
            SetAttacking                    	= function: 0x00259138 (function)
            GetAttackTarget                 	= function: 0x002591e8 (function)
            GetAggroTarget                  	= function: 0x00259298 (function)
            IsNull                          	= function: 0x0029b088 (function)
            GetCurrentScene                 	= function: 0x0029b258 (function)
            GetSceneByIndex                 	= function: 0x0029b308 (function)
            FDesc                           	= table: 0x0029b0f8 (table, already seen)
            ScriptPlayScene                 	= function: 0x0029b140 (function)
            IsNull                          	= function: 0x0029a400 (function)
            IsSequenceFinished              	= function: 0x0029a8a8 (function)
            GetSequence                     	= function: 0x0029a7c0 (function)
            SetSequence                     	= function: 0x0029aa98 (function)
            ResetSequence                   	= function: 0x0029a738 (function)
            FDesc                           	= table: 0x0029a470 (table, already seen)
            SequenceDuration                	= function: 0x0029a960 (function)
            ActiveSequenceDuration          	= function: 0x0029acd0 (function)
            GetCycle                        	= function: 0x0029a828 (function)
            SetPoseParameter                	= function: 0x0029a4b8 (function)
            StopAnimation                   	= function: 0x0029a5d8 (function)
            SetCycle                        	= function: 0x0029a688 (function)
            IsNull                          	= function: 0x00298c90 (function)
            SetMaterialGroup                	= function: 0x00299950 (function)
            FDesc                           	= table: 0x00298d00 (table, already seen)
            GetModelScale                   	= function: 0x00298d48 (function)
            SetModelScale                   	= function: 0x00298e30 (function)
            ScriptLookupAttachment          	= function: 0x00298ee0 (function)
            GetAttachmentOrigin             	= function: 0x00299088 (function)
            GetAttachmentAngles             	= function: 0x00299108 (function)
            GetAttachmentForward            	= function: 0x00299020 (function)
            SetSize                         	= function: 0x00299300 (function)
            SetModel                        	= function: 0x00298f98 (function)
            GetRenderAlpha                  	= function: 0x00299508 (function)
            SetRenderAlpha                  	= function: 0x002991c0 (function)
            SetRenderMode                   	= function: 0x00299740 (function)
            SetRenderColor                  	= function: 0x002997f0 (function)
            GetRenderColor                  	= function: 0x002998a0 (function)
            SetMaterialGroupHash            	= function: 0x002999d0 (function)
            GetMaterialGroupHash            	= function: 0x00299380 (function)
            SetSingleMeshGroup              	= function: 0x00299438 (function)
            SetMaterialGroupMask            	= function: 0x002995b8 (function)
            GetMaterialGroupMask            	= function: 0x00299670 (function)
            SetBodygroup                    	= function: 0x0029a098 (function)
            SetBodygroupByName              	= function: 0x0029a148 (function)
            SetSkin                         	= function: 0x0029a200 (function)
            GetChildren                     	= function: 0x0023f1f0 (function)
            SetParent                       	= function: 0x0023f2a0 (function)
            SetConstraint                   	= function: 0x0023f350 (function)
            EyePosition                     	= function: 0x0023f400 (function)
            SetAngles                       	= function: 0x0023ed80 (function)
            SetAbsAngles                    	= function: 0x0023ee30 (function)
            GetAnglesAsVector               	= function: 0x0023efb8 (function)
            EyeAngles                       	= function: 0x0023f070 (function)
            SetOrigin                       	= function: 0x0023fac0 (function)
            SetLocalAngles                  	= function: 0x0023fb70 (function)
            GetLocalAngles                  	= function: 0x0023fc20 (function)
            SetLocalOrigin                  	= function: 0x0023fcd0 (function)
            GetLocalOrigin                  	= function: 0x0023fd80 (function)
            TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
            TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
            SetForwardVector                	= function: 0x0023ffb0 (function)
            GetBoundingMins                 	= function: 0x00240068 (function)
            GetBoundingMaxs                 	= function: 0x00240118 (function)
            GetBounds                       	= function: 0x002401c8 (function)
            GetAngularVelocity              	= function: 0x00240278 (function)
            SetAngularVelocity              	= function: 0x0023f4b0 (function)
            AddEffects                      	= function: 0x0023f568 (function)
            RemoveEffects                   	= function: 0x0023f618 (function)
            Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
            Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
            Attribute_SetIntValue           	= function: 0x0023f878 (function)
            Attribute_GetIntValue           	= function: 0x0023f930 (function)
            HasAttribute                    	= function: 0x0023f9e8 (function)
            DeleteAttribute                 	= function: 0x00240f00 (function)
            ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
            GetOwner                        	= function: 0x00241070 (function)
            SetOwner                        	= function: 0x00241120 (function)
            SetEntityName                   	= function: 0x002411d0 (function)
            GetMass                         	= function: 0x00241280 (function)
            SetMass                         	= function: 0x00241300 (function)
            GetSpawnGroupHandle             	= function: 0x00241380 (function)
            GetAbsOrigin                    	= function: 0x00241438 (function)
            GetAngles                       	= function: 0x002414e8 (function)
            GetAbsScale                     	= function: 0x00241598 (function)
            SetAbsScale                     	= function: 0x00241648 (function)
            GetLocalScale                   	= function: 0x002416f8 (function)
            SetLocalScale                   	= function: 0x002417a8 (function)
            SetAbsOrigin                    	= function: 0x00241858 (function)
            GetCenter                       	= function: 0x00241908 (function)
            GetTeamNumber                   	= function: 0x002419b8 (function)
            GetTeam                         	= function: 0x00241a68 (function)
            SetTeam                         	= function: 0x00241ae8 (function)
            FollowEntity                    	= function: 0x00241b68 (function)
            FollowEntityMerge               	= function: 0x00241c18 (function)
            Trigger                         	= function: 0x00241cd0 (function)
            SetContextThink                 	= function: 0x00241d78 (function)
            SetContext                      	= function: 0x00241e28 (function)
            SetContextNum                   	= function: 0x00240330 (function)
            GetContext                      	= function: 0x002403e0 (function)
            GatherCriteria                  	= function: 0x00240490 (function)
            TakeDamage                      	= function: 0x00240540 (function)
            IsAlive                         	= function: 0x002405f0 (function)
            IsPlayerPawn                    	= function: 0x00240698 (function)
            IsPlayerController              	= function: 0x00240748 (function)
            IsNPC                           	= function: 0x00240800 (function)
            IsDOTANPC                       	= function: 0x002408a8 (function)
            GetMaxHealth                    	= function: 0x00240958 (function)
            SetMaxHealth                    	= function: 0x00240a08 (function)
            SetHealth                       	= function: 0x00240ab8 (function)
            GetHealth                       	= function: 0x00240b68 (function)
            SetGravity                      	= function: 0x00240c18 (function)
            SetFriction                     	= function: 0x00240cc8 (function)
            SetVelocity                     	= function: 0x00240d78 (function)
            GetLocalVelocity                	= function: 0x00240e28 (function)
            GetVelocity                     	= function: 0x002436a8 (function)
            ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
            ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
            GetLocalAngularVelocity         	= function: 0x002438d8 (function)
            GetBaseVelocity                 	= function: 0x00243990 (function)
            OverrideFriction                	= function: 0x00243a40 (function)
            EmitSound                       	= function: 0x00243af8 (function)
            EmitSoundParams                 	= function: 0x00243ba8 (function)
            StopSound                       	= function: 0x00243c58 (function)
            GetSoundDuration                	= function: 0x00243d08 (function)
            PrecacheScriptSound             	= function: 0x00243dc0 (function)
            IsPlayer                        	= function: 0x00243e78 (function)
            GetOrigin                       	= function: 0x00243f28 (function)
            IsNull                          	= function: 0x0023e670 (function)
            SetThink                        	= function: 0x00308700 (function)
            FDesc                           	= table: 0x0023e6e0 (table, already seen)
            StopThink                       	= function: 0x00308730 (function)
            IsInstance                      	= function: 0x00308760 (function)
            IsBaseNPC                       	= function: 0x00337ae8 (function)
            Kill                            	= function: 0x0023e728 (function)
            GetForwardVector                	= function: 0x0023e810 (function)
            GetRightVector                  	= function: 0x0023e8c8 (function)
            GetLeftVector                   	= function: 0x0023ea68 (function)
            GetUpVector                     	= function: 0x0023eae8 (function)
            GetModelName                    	= function: 0x0023ea00 (function)
            GetMoveParent                   	= function: 0x0023ecd0 (function)
            GetRootMoveParent               	= function: 0x0023e978 (function)
            FirstMoveChild                  	= function: 0x0023ef08 (function)
            NextMovePeer                    	= function: 0x0023eb98 (function)
            GetOwnerEntity                  	= function: 0x0023f140 (function)
            IsNull                          	= function: 0x0023d458 (function)
            FireOutput                      	= function: 0x0023d570 (function)
            RemoveSelf                      	= function: 0x0023d688 (function)
            GetIntAttr                      	= function: 0x0023d738 (function)
            SetIntAttr                      	= function: 0x0023d870 (function)
            FDesc                           	= table: 0x0023d4f0 (table, already seen)
            GetDebugName                    	= function: 0x0023d5e0 (function)
            ConnectOutput                   	= function: 0x0023dad0 (function)
            RedirectOutput                  	= function: 0x0023d7a8 (function)
            DisconnectOutput                	= function: 0x00214310 (function)
            DisconnectRedirectedOutput      	= function: 0x00214988 (function)
            GetEntityIndex                  	= function: 0x0023d998 (function)
            entindex                        	= function: 0x0023da18 (function)
            GetClassname                    	= function: 0x0023de90 (function)
            GetEntityHandle                 	= function: 0x0023df10 (function)
            Destroy                         	= function: 0x0023df90 (function)
            GetPublicScriptScope            	= function: 0x0023db80 (function)
            GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
            GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
            GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
            GetName                         	= function: 0x0023d8f0 (function)
         }
         IsNull                          	= function: 0x002c2328 (function)
         IsHornAlive                     	= function: 0x002c23e0 (function)
         IsTailAlive                     	= function: 0x002c24f8 (function)
         FDesc                           	= table: 0x002c2398 (table)
         {
            IsTailAlive                     	= bool IsTailAlive()
Is the Nian's tail broken? (userdata)
            GetHorn                         	= handle GetHorn()
Is the Nian horn? (userdata)
            GetTail                         	= handle GetTail()
Is the Nian's tail broken? (userdata)
            IsHornAlive                     	= bool IsHornAlive()
Is the Nian's horn broken? (userdata)
         }
         GetTail                         	= function: 0x002ec468 (function)
         GetHorn                         	= function: 0x002c25a8 (function)
      }
      CDOTA_ShopTrigger               	= table: 0x002bbc20 (table)
      {
         metatable = table: 0x002bb6f0
         {
            IsNull                          	= function: 0x002bb738 (function)
            Enable                          	= function: 0x002bb908 (function)
            Disable                         	= function: 0x002bb988 (function)
            FDesc                           	= table: 0x002bb7a8 (table)
            {
               IsTouching                      	= bool IsTouching(handle hEnt)
Checks whether the passed entity is touching the trigger. (userdata)
               Enable                          	= void Enable()
Enable the trigger (userdata)
               Disable                         	= void Disable()
Disable's the trigger (userdata)
            }
            IsTouching                      	= function: 0x002bb7f0 (function)
            GetChildren                     	= function: 0x0023f1f0 (function)
            SetParent                       	= function: 0x0023f2a0 (function)
            SetConstraint                   	= function: 0x0023f350 (function)
            EyePosition                     	= function: 0x0023f400 (function)
            SetAngles                       	= function: 0x0023ed80 (function)
            SetAbsAngles                    	= function: 0x0023ee30 (function)
            GetAnglesAsVector               	= function: 0x0023efb8 (function)
            EyeAngles                       	= function: 0x0023f070 (function)
            SetOrigin                       	= function: 0x0023fac0 (function)
            SetLocalAngles                  	= function: 0x0023fb70 (function)
            GetLocalAngles                  	= function: 0x0023fc20 (function)
            SetLocalOrigin                  	= function: 0x0023fcd0 (function)
            GetLocalOrigin                  	= function: 0x0023fd80 (function)
            TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
            TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
            SetForwardVector                	= function: 0x0023ffb0 (function)
            GetBoundingMins                 	= function: 0x00240068 (function)
            GetBoundingMaxs                 	= function: 0x00240118 (function)
            GetBounds                       	= function: 0x002401c8 (function)
            GetAngularVelocity              	= function: 0x00240278 (function)
            SetAngularVelocity              	= function: 0x0023f4b0 (function)
            AddEffects                      	= function: 0x0023f568 (function)
            RemoveEffects                   	= function: 0x0023f618 (function)
            Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
            Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
            Attribute_SetIntValue           	= function: 0x0023f878 (function)
            Attribute_GetIntValue           	= function: 0x0023f930 (function)
            HasAttribute                    	= function: 0x0023f9e8 (function)
            DeleteAttribute                 	= function: 0x00240f00 (function)
            ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
            GetOwner                        	= function: 0x00241070 (function)
            SetOwner                        	= function: 0x00241120 (function)
            SetEntityName                   	= function: 0x002411d0 (function)
            GetMass                         	= function: 0x00241280 (function)
            SetMass                         	= function: 0x00241300 (function)
            GetSpawnGroupHandle             	= function: 0x00241380 (function)
            GetAbsOrigin                    	= function: 0x00241438 (function)
            GetAngles                       	= function: 0x002414e8 (function)
            GetAbsScale                     	= function: 0x00241598 (function)
            SetAbsScale                     	= function: 0x00241648 (function)
            GetLocalScale                   	= function: 0x002416f8 (function)
            SetLocalScale                   	= function: 0x002417a8 (function)
            SetAbsOrigin                    	= function: 0x00241858 (function)
            GetCenter                       	= function: 0x00241908 (function)
            GetTeamNumber                   	= function: 0x002419b8 (function)
            GetTeam                         	= function: 0x00241a68 (function)
            SetTeam                         	= function: 0x00241ae8 (function)
            FollowEntity                    	= function: 0x00241b68 (function)
            FollowEntityMerge               	= function: 0x00241c18 (function)
            Trigger                         	= function: 0x00241cd0 (function)
            SetContextThink                 	= function: 0x00241d78 (function)
            SetContext                      	= function: 0x00241e28 (function)
            SetContextNum                   	= function: 0x00240330 (function)
            GetContext                      	= function: 0x002403e0 (function)
            GatherCriteria                  	= function: 0x00240490 (function)
            TakeDamage                      	= function: 0x00240540 (function)
            IsAlive                         	= function: 0x002405f0 (function)
            IsPlayerPawn                    	= function: 0x00240698 (function)
            IsPlayerController              	= function: 0x00240748 (function)
            IsNPC                           	= function: 0x00240800 (function)
            IsDOTANPC                       	= function: 0x002408a8 (function)
            GetMaxHealth                    	= function: 0x00240958 (function)
            SetMaxHealth                    	= function: 0x00240a08 (function)
            SetHealth                       	= function: 0x00240ab8 (function)
            GetHealth                       	= function: 0x00240b68 (function)
            SetGravity                      	= function: 0x00240c18 (function)
            SetFriction                     	= function: 0x00240cc8 (function)
            SetVelocity                     	= function: 0x00240d78 (function)
            GetLocalVelocity                	= function: 0x00240e28 (function)
            GetVelocity                     	= function: 0x002436a8 (function)
            ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
            ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
            GetLocalAngularVelocity         	= function: 0x002438d8 (function)
            GetBaseVelocity                 	= function: 0x00243990 (function)
            OverrideFriction                	= function: 0x00243a40 (function)
            EmitSound                       	= function: 0x00243af8 (function)
            EmitSoundParams                 	= function: 0x00243ba8 (function)
            StopSound                       	= function: 0x00243c58 (function)
            GetSoundDuration                	= function: 0x00243d08 (function)
            PrecacheScriptSound             	= function: 0x00243dc0 (function)
            IsPlayer                        	= function: 0x00243e78 (function)
            GetOrigin                       	= function: 0x00243f28 (function)
            IsNull                          	= function: 0x0023e670 (function)
            SetThink                        	= function: 0x00308700 (function)
            FDesc                           	= table: 0x0023e6e0 (table, already seen)
            StopThink                       	= function: 0x00308730 (function)
            IsInstance                      	= function: 0x00308760 (function)
            IsBaseNPC                       	= function: 0x00337ae8 (function)
            Kill                            	= function: 0x0023e728 (function)
            GetForwardVector                	= function: 0x0023e810 (function)
            GetRightVector                  	= function: 0x0023e8c8 (function)
            GetLeftVector                   	= function: 0x0023ea68 (function)
            GetUpVector                     	= function: 0x0023eae8 (function)
            GetModelName                    	= function: 0x0023ea00 (function)
            GetMoveParent                   	= function: 0x0023ecd0 (function)
            GetRootMoveParent               	= function: 0x0023e978 (function)
            FirstMoveChild                  	= function: 0x0023ef08 (function)
            NextMovePeer                    	= function: 0x0023eb98 (function)
            GetOwnerEntity                  	= function: 0x0023f140 (function)
            IsNull                          	= function: 0x0023d458 (function)
            FireOutput                      	= function: 0x0023d570 (function)
            RemoveSelf                      	= function: 0x0023d688 (function)
            GetIntAttr                      	= function: 0x0023d738 (function)
            SetIntAttr                      	= function: 0x0023d870 (function)
            FDesc                           	= table: 0x0023d4f0 (table, already seen)
            GetDebugName                    	= function: 0x0023d5e0 (function)
            ConnectOutput                   	= function: 0x0023dad0 (function)
            RedirectOutput                  	= function: 0x0023d7a8 (function)
            DisconnectOutput                	= function: 0x00214310 (function)
            DisconnectRedirectedOutput      	= function: 0x00214988 (function)
            GetEntityIndex                  	= function: 0x0023d998 (function)
            entindex                        	= function: 0x0023da18 (function)
            GetClassname                    	= function: 0x0023de90 (function)
            GetEntityHandle                 	= function: 0x0023df10 (function)
            Destroy                         	= function: 0x0023df90 (function)
            GetPublicScriptScope            	= function: 0x0023db80 (function)
            GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
            GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
            GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
            GetName                         	= function: 0x0023d8f0 (function)
         }
         IsNull                          	= function: 0x002bbc68 (function)
         FDesc                           	= table: 0x002bbcd8 (table)
         {
            GetShopType                     	= int GetShopType()
Get the DOTA_SHOP_TYPE (userdata)
            SetShopType                     	= void SetShopType(int eShopType)
Set the DOTA_SHOP_TYPE. (userdata)
         }
         GetShopType                     	= function: 0x002bbe08 (function)
         SetShopType                     	= function: 0x002bbd20 (function)
      }
      CDOTA_BaseNPC_NeutralItemStash  	= table: 0x002bbfc8 (table)
      {
         metatable                       	= table: 0x002baef8 (table, already seen)
         IsNull                          	= function: 0x002bc010 (function)
         FDesc                           	= table: 0x002bc080 (table)
         {
         }
      }
      CDOTA_BaseNPC_Hero              	= table: 0x002bc200 (table)
      {
         metatable                       	= table: 0x00233f70 (table, already seen)
         GetRespawnsDisabled             	= function: 0x002be998 (function)
         SetRespawnsDisabled             	= function: 0x002c12e8 (function)
         HasRoomForItem                  	= function: 0x002c13a0 (function)
         HasAnyAvailableInventorySpace   	= function: 0x002c1420 (function)
         GetNumItemsInStash              	= function: 0x002c14e0 (function)
         GetNumItemsInInventory          	= function: 0x002c1598 (function)
         GetIncreasedAttackSpeed         	= function: 0x002bcc10 (function)
         SetPrimaryAttribute             	= function: 0x002c1708 (function)
         PerformTaunt                    	= function: 0x002c17c0 (function)
         GetCurrentXP                    	= function: 0x002c1870 (function)
         WillReincarnate                 	= function: 0x002c19a0 (function)
         HasOwnerAbandoned               	= function: 0x002c1a50 (function)
         GetReplicatingOtherHero         	= function: 0x002c1b08 (function)
         SetBotDifficulty                	= function: 0x002c1bc0 (function)
         CalculateStatBonus              	= function: 0x002bc300 (function)
         ShouldDoFlyHeightVisual         	= function: 0x002bc420 (function)
         GetTogglableWearable            	= function: 0x002bc648 (function)
         GetPlayerID                     	= function: 0x002bc6c8 (function)
         GetHeroID                       	= function: 0x002bc5e0 (function)
         SetPlayerID                     	= function: 0x002bc8b0 (function)
         GetDeathGoldCost                	= function: 0x002bc558 (function)
         HeroLevelUp                     	= function: 0x002bcae8 (function)
         AddExperience                   	= function: 0x00337ba8 (function)
         GetAbilityPoints                	= function: 0x002bcd20 (function)
         SetAbilityPoints                	= function: 0x002bcdd8 (function)
         SetCustomDeathXP                	= function: 0x002bce90 (function)
         RespawnHero                     	= function: 0x002bcf48 (function)
         GetBaseManaRegen                	= function: 0x002bca60 (function)
         UpgradeAbility                  	= function: 0x002bcc90 (function)
         Buyback                         	= function: 0x002bd688 (function)
         GetBuybackCost                  	= function: 0x002bd708 (function)
         GetBuybackCooldownTime          	= function: 0x002bd7b8 (function)
         SetBuybackCooldownTime          	= function: 0x002bd870 (function)
         GetBuybackGoldLimitTime         	= function: 0x002bd928 (function)
         SetBuybackGoldLimitTime         	= function: 0x002bd9e0 (function)
         CanEarnGold                     	= function: 0x002bda98 (function)
         SetBuyBackDisabledByReapersScythe	= function: 0x002bdb48 (function)
         IsBuybackDisabledByReapersScythe	= function: 0x002bdc10 (function)
         GetStrength                     	= function: 0x002bdcd8 (function)
         GetAgility                      	= function: 0x002bdd88 (function)
         GetIntellect                    	= function: 0x002bd078 (function)
         GetBaseStrength                 	= function: 0x002bd128 (function)
         GetBaseAgility                  	= function: 0x002bd1d8 (function)
         GetBaseIntellect                	= function: 0x002bd288 (function)
         SetBaseStrength                 	= function: 0x002bd340 (function)
         SetBaseAgility                  	= function: 0x002bd3f0 (function)
         SetBaseIntellect                	= function: 0x002bd4a0 (function)
         GetStrengthGain                 	= function: 0x002bd558 (function)
         GetAgilityGain                  	= function: 0x002bd608 (function)
         GetIntellectGain                	= function: 0x002bea78 (function)
         ModifyStrength                  	= function: 0x002beb30 (function)
         ModifyAgility                   	= function: 0x002bebe0 (function)
         ModifyIntellect                 	= function: 0x002bec90 (function)
         IncrementDeaths_Engine          	= function: 0x002bef58 (function)
         AddExperience_Engine            	= function: 0x002bc778 (function)
         IsStashEnabled                  	= function: 0x002c1de0 (function)
         SetStashEnabled                 	= function: 0x002c1d30 (function)
         SetRespawnPosition              	= function: 0x002c1c78 (function)
         IsReincarnating                 	= function: 0x002c1920 (function)
         GetPrimaryAttribute             	= function: 0x002c1650 (function)
         FDesc                           	= table: 0x002bc2b8 (table)
         {
            GetRespawnsDisabled             	= bool GetRespawnsDisabled()
Is this hero prevented from respawning? (userdata)
            SetRespawnsDisabled             	= void SetRespawnsDisabled(bool bDisableRespawns)
Prevent this hero from respawning. (userdata)
            HasRoomForItem                  	= int HasRoomForItem(string pItemName, bool bIncludeStashCombines, bool bAllowSelling)
Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling (userdata)
            HasAnyAvailableInventorySpace   	= bool HasAnyAvailableInventorySpace()
 (userdata)
            GetNumItemsInStash              	= int GetNumItemsInStash()
 (userdata)
            GetNumItemsInInventory          	= int GetNumItemsInInventory()
 (userdata)
            GetIncreasedAttackSpeed         	= float GetIncreasedAttackSpeed(bool bIgnoreTempAttackSpeed)
Hero attack speed is also affected by agility. (userdata)
            SetPrimaryAttribute             	= void SetPrimaryAttribute(int nPrimaryAttribute)
Set this hero's primary attribute value. (userdata)
            PerformTaunt                    	= void PerformTaunt()
 (userdata)
            GetCurrentXP                    	= int GetCurrentXP()
Returns the amount of XP  (userdata)
            WillReincarnate                 	= bool WillReincarnate()
 (userdata)
            HasOwnerAbandoned               	= bool HasOwnerAbandoned()
 (userdata)
            GetReplicatingOtherHero         	= handle GetReplicatingOtherHero()
 (userdata)
            SetBotDifficulty                	= void SetBotDifficulty(int nDifficulty)
 (userdata)
            CalculateStatBonus              	= void CalculateStatBonus(bool bForce)
Recalculate all stats after the hero gains stats. (userdata)
            ShouldDoFlyHeightVisual         	= bool ShouldDoFlyHeightVisual()
 (userdata)
            GetTogglableWearable            	= handle GetTogglableWearable(int nSlotType)
Get wearable entity in slot (slot) (userdata)
            GetPlayerID                     	= int GetPlayerID()
Returns player ID of the player owning this hero (userdata)
            GetHeroID                       	= int GetHeroID()
 (userdata)
            SetPlayerID                     	= void SetPlayerID(int iPlayerID)
 (userdata)
            GetDeathGoldCost                	= int GetDeathGoldCost()
 (userdata)
            HeroLevelUp                     	= void HeroLevelUp(bool bPlayEffects)
Levels up the hero, true or false to play effects. (userdata)
            AddExperience                   	= bool AddExperience(float flXP, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal)
Params: Float XP, Bool applyBotDifficultyScaling (userdata)
            GetAbilityPoints                	= int GetAbilityPoints()
Gets the current unspent ability points. (userdata)
            SetAbilityPoints                	= void SetAbilityPoints(int iPoints)
Sets the current unspent ability points. (userdata)
            SetCustomDeathXP                	= void SetCustomDeathXP(int iValue)
Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work! (userdata)
            RespawnHero                     	= void RespawnHero(bool bBuyBack, bool bRespawnPenalty)
Respawn this hero. (userdata)
            GetBaseManaRegen                	= float GetBaseManaRegen()
Returns the base mana regen. (userdata)
            UpgradeAbility                  	= void UpgradeAbility(handle hAbility)
This upgrades the passed ability if it exists and the hero has enough ability points. (userdata)
            Buyback                         	= void Buyback()
Spend the gold and buyback with this hero. (userdata)
            GetBuybackCost                  	= int GetBuybackCost(bool bReturnOldValues)
Return integer value for the gold cost of a buyback. (userdata)
            GetBuybackCooldownTime          	= float GetBuybackCooldownTime()
Return float value for the amount of time left on cooldown for this hero's buyback. (userdata)
            SetBuybackCooldownTime          	= void SetBuybackCooldownTime(float flTime)
Sets the buyback cooldown time. (userdata)
            GetBuybackGoldLimitTime         	= float GetBuybackGoldLimitTime()
Returns the amount of time gold gain is limited after buying back. (userdata)
            SetBuybackGoldLimitTime         	= void SetBuybackGoldLimitTime(float flTime)
Set the amount of time gold gain is limited after buying back. (userdata)
            CanEarnGold                     	= bool CanEarnGold()
Returns boolean value result of buyback gold limit time less than game time. (userdata)
            SetBuyBackDisabledByReapersScythe	= void SetBuyBackDisabledByReapersScythe(bool bBuybackDisabled)
 (userdata)
            IsBuybackDisabledByReapersScythe	= bool IsBuybackDisabledByReapersScythe()
 (userdata)
            GetStrength                     	= float GetStrength()
 (userdata)
            GetAgility                      	= float GetAgility()
 (userdata)
            GetIntellect                    	= float GetIntellect()
 (userdata)
            GetBaseStrength                 	= float GetBaseStrength()
 (userdata)
            GetBaseAgility                  	= float GetBaseAgility()
 (userdata)
            GetBaseIntellect                	= float GetBaseIntellect()
 (userdata)
            SetBaseStrength                 	= void SetBaseStrength(float flStrength)
 (userdata)
            SetBaseAgility                  	= void SetBaseAgility(float flAgility)
 (userdata)
            SetBaseIntellect                	= void SetBaseIntellect(float flIntellect)
 (userdata)
            GetStrengthGain                 	= float GetStrengthGain()
 (userdata)
            GetAgilityGain                  	= float GetAgilityGain()
 (userdata)
            GetIntellectGain                	= float GetIntellectGain()
 (userdata)
            ModifyStrength                  	= void ModifyStrength(float flNewStrength)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
            ModifyAgility                   	= void ModifyAgility(float flNewAgility)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
            ModifyIntellect                 	= void ModifyIntellect(float flNewIntellect)
Adds passed value to base attribute value, then calls CalculateStatBonus. (userdata)
            IsStashEnabled                  	= bool IsStashEnabled()
 (userdata)
            SetStashEnabled                 	= void SetStashEnabled(bool bEnabled)
 (userdata)
            SetRespawnPosition              	= void SetRespawnPosition(Vector vOrigin)
 (userdata)
            IsReincarnating                 	= bool IsReincarnating()
 (userdata)
            GetPrimaryAttribute             	= int GetPrimaryAttribute()
0 = strength, 1 = agility, 2 = intelligence. (userdata)
            HasFlyingVision                 	= bool HasFlyingVision()
 (userdata)
            GetBaseDamageMin                	= int GetBaseDamageMin()
Hero damage is also affected by attributes. (userdata)
            GetStreak                       	= int GetStreak()
Value is stored in PlayerResource. (userdata)
            GetBonusDamageFromPrimaryStat   	= int GetBonusDamageFromPrimaryStat()
 (userdata)
            GetGoldBounty                   	= int GetGoldBounty()
 (userdata)
            GetRespawnTime                  	= float GetRespawnTime()
 (userdata)
            GetAdditionalOwnedUnits         	= table GetAdditionalOwnedUnits()
 (userdata)
            IncrementKills                  	= void IncrementKills(int iVictimID)
Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource. (userdata)
            IncrementDeaths                 	= void IncrementDeaths(int iKillerID)
Value is stored in PlayerResource. (userdata)
            IncrementAssists                	= void IncrementAssists(int iKillerID)
Value is stored in PlayerResource. (userdata)
            IncrementLastHits               	= void IncrementLastHits()
Value is stored in PlayerResource. (userdata)
            IncrementDenies                 	= void IncrementDenies()
Value is stored in PlayerResource. (userdata)
            IncrementNearbyCreepDeaths      	= void IncrementNearbyCreepDeaths()
Value is stored in PlayerResource. (userdata)
            RecordLastHit                   	= void RecordLastHit()
 (userdata)
            IncrementLastHitStreak          	= void IncrementLastHitStreak()
Value is stored in PlayerResource. (userdata)
            ClearLastHitStreak              	= void ClearLastHitStreak()
Value is stored in PlayerResource. (userdata)
            IncrementLastHitMultikill       	= void IncrementLastHitMultikill()
Value is stored in PlayerResource. (userdata)
            ClearLastHitMultikill           	= void ClearLastHitMultikill()
Value is stored in PlayerResource. (userdata)
            GetKills                        	= int GetKills()
Value is stored in PlayerResource. (userdata)
            GetDeaths                       	= int GetDeaths()
Value is stored in PlayerResource. (userdata)
            GetAssists                      	= int GetAssists()
Value is stored in PlayerResource. (userdata)
            GetLastHits                     	= int GetLastHits()
Value is stored in PlayerResource. (userdata)
            GetDenies                       	= int GetDenies()
Value is stored in PlayerResource. (userdata)
            IncrementStreak                 	= void IncrementStreak()
Value is stored in PlayerResource. (userdata)
            ClearStreak                     	= void ClearStreak()
Value is stored in PlayerResource. (userdata)
            GetBaseDamageMax                	= int GetBaseDamageMax()
Hero damage is also affected by attributes. (userdata)
            GetMultipleKillCount            	= int GetMultipleKillCount()
 (userdata)
            KilledHero                      	= void KilledHero(handle hHero, handle hInflictor)
Args: Hero, Inflictor (userdata)
            ModifyGold                      	= int ModifyGold(int iGoldChange, bool bReliable, int iReason)
Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason (userdata)
            ModifyGoldFiltered              	= int ModifyGoldFiltered(int iGoldChange, bool bReliabe, int iReason)
Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason (userdata)
            SetGold                         	= void SetGold(int iGold, bool bReliable)
Sets the gold amount for the player owning this hero (userdata)
            SpendGold                       	= void SpendGold(int iCost, int iReason)
Args: int nGold, int nReason (userdata)
            GetGold                         	= int GetGold()
Returns gold amount for the player owning this hero (userdata)
            GetPhysicalArmorBaseValue       	= float GetPhysicalArmorBaseValue()
Hero armor is affected by attributes. (userdata)
            GetPrimaryStatValue             	= float GetPrimaryStatValue()
 (userdata)
            GetNumAttackers                 	= int GetNumAttackers()
 (userdata)
            GetAttacker                     	= int GetAttacker(int nIndex)
 (userdata)
            GetMostRecentDamageTime         	= float GetMostRecentDamageTime()
 (userdata)
            GetTimeUntilRespawn             	= float GetTimeUntilRespawn()
 (userdata)
            SetTimeUntilRespawn             	= void SetTimeUntilRespawn(float time)
 (userdata)
         }
         HasFlyingVision                 	= function: 0x002bc4d8 (function)
         IncrementDeaths                 	= function: 0x00337bd8 (function)
         ClearStreak                     	= function: 0x002bde38 (function)
         GetStreak                       	= function: 0x002bdee8 (function)
         GetGoldBounty                   	= function: 0x002be590 (function)
         GetBonusDamageFromPrimaryStat   	= function: 0x002be418 (function)
         GetRespawnTime                  	= function: 0x002bed40 (function)
         GetAdditionalOwnedUnits         	= function: 0x002bedf0 (function)
         IncrementKills                  	= function: 0x002beea8 (function)
         IsNull                          	= function: 0x002bc248 (function)
         IncrementAssists                	= function: 0x002bf008 (function)
         IncrementLastHits               	= function: 0x002bf0c0 (function)
         IncrementDenies                 	= function: 0x002bf178 (function)
         IncrementNearbyCreepDeaths      	= function: 0x002bf228 (function)
         RecordLastHit                   	= function: 0x002bf2e8 (function)
         IncrementLastHitStreak          	= function: 0x002bf398 (function)
         ClearLastHitStreak              	= function: 0x002bf450 (function)
         IncrementLastHitMultikill       	= function: 0x002bf508 (function)
         ClearLastHitMultikill           	= function: 0x002bf5c8 (function)
         GetKills                        	= function: 0x002bf680 (function)
         GetDeaths                       	= function: 0x002bf730 (function)
         GetAssists                      	= function: 0x002bf7e0 (function)
         GetLastHits                     	= function: 0x002bf890 (function)
         GetDenies                       	= function: 0x002bf940 (function)
         IncrementStreak                 	= function: 0x002bf9f0 (function)
         GetBaseDamageMin                	= function: 0x002bcff8 (function)
         GetBaseDamageMax                	= function: 0x002bc960 (function)
         GetMultipleKillCount            	= function: 0x002bdf98 (function)
         KilledHero                      	= function: 0x002be050 (function)
         ModifyGold                      	= function: 0x002be100 (function)
         ModifyGoldFiltered              	= function: 0x002be1b0 (function)
         SetGold                         	= function: 0x002be268 (function)
         SpendGold                       	= function: 0x002be2e8 (function)
         GetGold                         	= function: 0x002be398 (function)
         GetPhysicalArmorBaseValue       	= function: 0x002bc9e0 (function)
         GetPrimaryStatValue             	= function: 0x002be4d8 (function)
         GetNumAttackers                 	= function: 0x002be610 (function)
         GetAttacker                     	= function: 0x002be6c0 (function)
         GetMostRecentDamageTime         	= function: 0x002be770 (function)
         GetTimeUntilRespawn             	= function: 0x002be828 (function)
         SetTimeUntilRespawn             	= function: 0x002be8e0 (function)
      }
      Convars                         	= table: 0x0024c070 (table)
      {
         IsNull                          	= function: 0x0024c0b8 (function)
         GetFloat                        	= function: 0x0024c280 (function)
         GetBool                         	= function: 0x0024c330 (function)
         GetStr                          	= function: 0x0024c4c8 (function)
         SetInt                          	= function: 0x0024c548 (function)
         FDesc                           	= table: 0x0024c128 (table)
         {
            GetInt                          	= table GetInt(string)
GetInt(name) : returns the convar as an int. May return null if no such convar. (userdata)
            GetFloat                        	= table GetFloat(string)
GetFloat(name) : returns the convar as a float. May return null if no such convar. (userdata)
            GetBool                         	= table GetBool(string)
GetBool(name) : returns the convar as a boolean flag. (userdata)
            GetStr                          	= table GetStr(string)
GetStr(name) : returns the convar as a string. May return null if no such convar. (userdata)
            SetInt                          	= void SetInt(string, int)
SetInt(name, val) : sets the value of the convar to the int. (userdata)
            SetFloat                        	= void SetFloat(string, float)
SetFloat(name, val) : sets the value of the convar to the float. (userdata)
            SetBool                         	= void SetBool(string, bool)
SetBool(name, val) : sets the value of the convar to the bool. (userdata)
            SetStr                          	= void SetStr(string, string)
SetStr(name, val) : sets the value of the convar to the string. (userdata)
            RegisterCommand                 	= void RegisterCommand(string, handle, string, int)
RegisterCommand(name, fn, helpString, flags) : register a console command. (userdata)
            RegisterConvar                  	= void RegisterConvar(string, string, string, int)
RegisterConvar(name, defaultValue, helpString, flags): register a new console variable. (userdata)
            GetCommandClient                	= handle GetCommandClient()
GetCommandClient() : returns the player who issued this console command. (userdata)
            GetDOTACommandClient            	= handle GetDOTACommandClient()
GetDOTACommandClient() : returns the DOTA player who issued this console command. (userdata)
         }
         SetBool                         	= function: 0x0024c700 (function)
         SetStr                          	= function: 0x0024c3d8 (function)
         RegisterCommand                 	= function: 0x0024c908 (function)
         RegisterConvar                  	= function: 0x0024c5c8 (function)
         GetCommandClient                	= function: 0x0024cb40 (function)
         GetDOTACommandClient            	= function: 0x0024cbf8 (function)
         GetInt                          	= function: 0x0024c170 (function)
         SetFloat                        	= function: 0x0024c460 (function)
      }
      CInfoPlayerStartDota            	= table: 0x002c1fc8 (table, already seen)
      CDOTA_Unit_CustomGameAnnouncer  	= table: 0x002ecc60 (table)
      {
         metatable                       	= table: 0x00233f70 (table, already seen)
         IsNull                          	= function: 0x002ecca8 (function)
         FDesc                           	= table: 0x002ecd18 (table)
         {
            SetServerAuthoritative          	= void SetServerAuthoritative(bool bIsServerAuthoritative)
Determines whether response criteria is matched on server or client (userdata)
         }
         SetServerAuthoritative          	= function: 0x002ecd60 (function)
      }
      CDotaQuest                      	= table: 0x002c7fa8 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002c7ff0 (function)
         SetTextReplaceValue             	= function: 0x002c85e0 (function)
         SetTextReplaceString            	= function: 0x002c8660 (function)
         CompleteQuest                   	= function: 0x002c80a8 (function)
         AddSubquest                     	= function: 0x002c81c0 (function)
         RemoveSubquest                  	= function: 0x002c8270 (function)
         GetSubquestByName               	= function: 0x002c83e8 (function)
         GetSubquest                     	= function: 0x002c8468 (function)
         FDesc                           	= table: 0x002c8060 (table)
         {
            GetSubquest                     	= handle GetSubquest(int nIndex)
Finds a subquest from this quest by index (userdata)
            SetTextReplaceValue             	= void SetTextReplaceValue(int valueSlot, int value)
Set a quest value (userdata)
            SetTextReplaceString            	= void SetTextReplaceString(string pszString)
Set the text replace string for this quest (userdata)
            CompleteQuest                   	= void CompleteQuest()
Mark this quest complete (userdata)
            AddSubquest                     	= void AddSubquest(handle hSubquest)
Add a subquest to this quest (userdata)
            RemoveSubquest                  	= void RemoveSubquest(handle hSubquest)
Remove a subquest from this quest (userdata)
            GetSubquestByName               	= handle GetSubquestByName(string pszName)
Finds a subquest from this quest by name (userdata)
         }
      }
      CDOTA_BaseNPC_Watch_Tower       	= table: 0x002c26d0 (table, already seen)
      CDOTA_Item_Lua                  	= table: 0x002ed378 (table)
      {
         metatable = table: 0x002d8cd8
         {
            StacksWithOtherOwners           	= function: 0x002d9c90 (function)
            SetStacksWithOtherOwners        	= function: 0x002d9d48 (function)
            GetParent                       	= function: 0x002dbdb0 (function)
            GetItemSlot                     	= function: 0x002dbd00 (function)
            FDesc                           	= table: 0x002d8d90 (table)
            {
               StacksWithOtherOwners           	= bool StacksWithOtherOwners()
 (userdata)
               SetStacksWithOtherOwners        	= void SetStacksWithOtherOwners(bool bStacksWithOtherOwners)
 (userdata)
               GetParent                       	= handle GetParent()
Get the parent for this item. (userdata)
               IsRecipeGenerated               	= bool IsRecipeGenerated()
 (userdata)
               SetSellable                     	= void SetSellable(bool bSellable)
 (userdata)
               GetCost                         	= int GetCost()
 (userdata)
               GetItemState                    	= int GetItemState()
Gets whether item is unequipped or ready. (userdata)
               SetItemState                    	= void SetItemState(int iState)
Sets whether item is unequipped or ready. (userdata)
               GetContainer                    	= handle GetContainer()
Get the container for this item. (userdata)
               SetPurchaser                    	= void SetPurchaser(handle hPurchaser)
Set the purchaser of record for this item. (userdata)
               GetPurchaser                    	= handle GetPurchaser()
Get the purchaser for this item. (userdata)
               SetDroppable                    	= void SetDroppable(bool bDroppable)
 (userdata)
               IsPermanent                     	= bool IsPermanent()
Is this a permanent item? (userdata)
               IsCombineLocked                 	= bool IsCombineLocked()
 (userdata)
               SetCombineLocked                	= void SetCombineLocked(bool bCombineLocked)
 (userdata)
               LaunchLoot                      	= void LaunchLoot(bool bAutoUse, float flHeight, float flDuration, Vector vEndPoint, handle hTeleportOwner)
 (userdata)
               LaunchLootInitialHeight         	= void LaunchLootInitialHeight(bool bAutoUse, float flInitialHeight, float flLaunchHeight, float flDuration, Vector vEndPoint)
 (userdata)
               LaunchLootRequiredHeight        	= void LaunchLootRequiredHeight(bool bAutoUse, float flRequiredHeight, float flHeight, float flDuration, Vector vEndPoint)
 (userdata)
               SetCanBeUsedOutOfInventory      	= void SetCanBeUsedOutOfInventory(bool bValue)
 (userdata)
               CanBeUsedOutOfInventory         	= bool CanBeUsedOutOfInventory()
 (userdata)
               IsInBackpack                    	= bool IsInBackpack()
 (userdata)
               GetItemSlot                     	= int GetItemSlot()
 (userdata)
               IsItem                          	= bool IsItem()
 (userdata)
               Think                           	= void Think()
Think this item (userdata)
               OnEquip                         	= void OnEquip()
 (userdata)
               OnUnequip                       	= void OnUnequip()
 (userdata)
               SetPurchaseTime                 	= void SetPurchaseTime(float flTime)
Set the purchase time of this item (userdata)
               GetPurchaseTime                 	= float GetPurchaseTime()
Get the purchase time of this item (userdata)
               GetInitialCharges               	= int GetInitialCharges()
Get the initial number of charges this item has. (userdata)
               GetCurrentCharges               	= int GetCurrentCharges()
Get the number of charges this item currently has. (userdata)
               GetValuelessCharges             	= int GetValuelessCharges()
Get the number of valueless charges this item currently has. (userdata)
               GetSecondaryCharges             	= int GetSecondaryCharges()
Get the number of secondary charges this item currently has. (userdata)
               ModifyNumValuelessCharges       	= void ModifyNumValuelessCharges(int iCharges)
Modifies the number of valueless charges on this item (userdata)
               SetCurrentCharges               	= void SetCurrentCharges(int iCharges)
Set the number of charges on this item (userdata)
               SetSecondaryCharges             	= void SetSecondaryCharges(int iCharges)
Set the number of secondary charges on this item (userdata)
               SpendCharge                     	= void SpendCharge()
 (userdata)
               IsCombinable                    	= bool IsCombinable()
 (userdata)
               IsStackable                     	= bool IsStackable()
 (userdata)
               IsRecipe                        	= bool IsRecipe()
 (userdata)
               IsDroppable                     	= bool IsDroppable()
 (userdata)
               IsPurchasable                   	= bool IsPurchasable()
 (userdata)
               IsSellable                      	= bool IsSellable()
 (userdata)
               IsKillable                      	= bool IsKillable()
 (userdata)
               IsDisassemblable                	= bool IsDisassemblable()
 (userdata)
               IsAlertableItem                 	= bool IsAlertableItem()
 (userdata)
               RequiresCharges                 	= bool RequiresCharges()
 (userdata)
               GetShareability                 	= int GetShareability()
 (userdata)
               SetShareability                 	= void SetShareability(int iShareability)
 (userdata)
               IsNeutralDrop                   	= bool IsNeutralDrop()
 (userdata)
               IsCastOnPickup                  	= bool IsCastOnPickup()
 (userdata)
               SetCastOnPickup                 	= void SetCastOnPickup(bool bCastOnPickUp)
 (userdata)
               SetOnlyPlayerHeroPickup         	= void SetOnlyPlayerHeroPickup(bool bOnlyPlayerHero)
 (userdata)
               IsMuted                         	= bool IsMuted()
 (userdata)
            }
            IsRecipeGenerated               	= function: 0x002d9bd8 (function)
            SetSellable                     	= function: 0x002db698 (function)
            GetCost                         	= function: 0x002d9e08 (function)
            GetItemState                    	= function: 0x002d9e88 (function)
            SetItemState                    	= function: 0x002d9f38 (function)
            GetContainer                    	= function: 0x002d9fe8 (function)
            SetPurchaser                    	= function: 0x002da098 (function)
            GetPurchaser                    	= function: 0x002db538 (function)
            SetDroppable                    	= function: 0x002db5e8 (function)
            IsPermanent                     	= function: 0x002d9408 (function)
            IsCombineLocked                 	= function: 0x002db748 (function)
            SetCombineLocked                	= function: 0x002db7f8 (function)
            LaunchLoot                      	= function: 0x002db8b0 (function)
            LaunchLootInitialHeight         	= function: 0x002db960 (function)
            LaunchLootRequiredHeight        	= function: 0x002dba18 (function)
            SetCanBeUsedOutOfInventory      	= function: 0x002dbad8 (function)
            CanBeUsedOutOfInventory         	= function: 0x002dbb98 (function)
            IsInBackpack                    	= function: 0x002dbc50 (function)
            IsNull                          	= function: 0x002d8d20 (function)
            IsDisassemblable                	= function: 0x002da370 (function)
            Think                           	= function: 0x002d8dd8 (function)
            OnEquip                         	= function: 0x002d8ec0 (function)
            OnUnequip                       	= function: 0x002d8f40 (function)
            SetPurchaseTime                 	= function: 0x002d90e0 (function)
            GetPurchaseTime                 	= function: 0x002d9160 (function)
            GetInitialCharges               	= function: 0x002d9078 (function)
            GetCurrentCharges               	= function: 0x002d9350 (function)
            GetValuelessCharges             	= function: 0x002d8ff0 (function)
            GetSecondaryCharges             	= function: 0x002d9590 (function)
            ModifyNumValuelessCharges       	= function: 0x002d9210 (function)
            SetCurrentCharges               	= function: 0x002d97d0 (function)
            SetSecondaryCharges             	= function: 0x002d9888 (function)
            SpendCharge                     	= function: 0x002d9940 (function)
            IsCombinable                    	= function: 0x002d9a70 (function)
            IsStackable                     	= function: 0x002d9488 (function)
            IsRecipe                        	= function: 0x002d9648 (function)
            IsDroppable                     	= function: 0x002d9778 (function)
            IsPurchasable                   	= function: 0x002da160 (function)
            IsSellable                      	= function: 0x002da210 (function)
            IsKillable                      	= function: 0x002da2c0 (function)
            IsItem                          	= function: 0x002d99f0 (function)
            IsAlertableItem                 	= function: 0x002da428 (function)
            RequiresCharges                 	= function: 0x002da4d8 (function)
            GetShareability                 	= function: 0x002da588 (function)
            SetShareability                 	= function: 0x002da638 (function)
            IsNeutralDrop                   	= function: 0x002da6e8 (function)
            IsCastOnPickup                  	= function: 0x002da798 (function)
            SetCastOnPickup                 	= function: 0x002da848 (function)
            SetOnlyPlayerHeroPickup         	= function: 0x002d9b20 (function)
            IsMuted                         	= function: 0x002d96f8 (function)
            IsStolen                        	= function: 0x002ca6f8 (function)
            PlaysDefaultAnimWhenStolen      	= function: 0x002ca7a8 (function)
            GetStolenActivityModifier       	= function: 0x002c6f90 (function)
            RefreshCharges                  	= function: 0x002c7050 (function)
            SetCurrentAbilityCharges        	= function: 0x002c7100 (function)
            EnableAbilityChargesOnTalentUpgrade	= function: 0x002c71c0 (function)
            GetInitialAbilityCharges        	= function: 0x002c7288 (function)
            IsChanneling                    	= function: 0x002ca0c0 (function)
            GetAbilityChargeRestoreTime     	= function: 0x002c7400 (function)
            GetCurrentAbilityCharges        	= function: 0x002c74c0 (function)
            SetUpgradeRecommended           	= function: 0x002c7580 (function)
            GetUpgradeRecommended           	= function: 0x002c7638 (function)
            GetLevelSpecialValueFor         	= function: 0x002c76f0 (function)
            GetLevelSpecialValueNoOverride  	= function: 0x002c77a8 (function)
            GetSpecialValueFor              	= function: 0x002c7868 (function)
            GetAbilityKeyValues             	= function: 0x002c3800 (function)
            GetCursorTarget                 	= function: 0x002c39a0 (function)
            SetLevel                        	= function: 0x002c3d48 (function)
            IsTrained                       	= function: 0x002c3a50 (function)
            GetPlaybackRateOverride         	= function: 0x002c3f50 (function)
            GetAbilityName                  	= function: 0x002c3c40 (function)
            SetAbilityIndex                 	= function: 0x002c4190 (function)
            GetAbilityIndex                 	= function: 0x002c4240 (function)
            GetAbilityType                  	= function: 0x002c42f0 (function)
            OnAbilityPinged                 	= function: 0x002c4420 (function)
            CanAbilityBeUpgraded            	= function: 0x002c3dc8 (function)
            GetHeroLevelRequiredToUpgrade   	= function: 0x002c3e80 (function)
            IsPassive                       	= function: 0x002c4008 (function)
            IsToggle                        	= function: 0x002c40b8 (function)
            IsActivated                     	= function: 0x002c4b60 (function)
            IsRefreshable                   	= function: 0x002c4c10 (function)
            IsCosmetic                      	= function: 0x00337ab8 (function)
            IsSharedWithTeammates           	= function: 0x002c4d70 (function)
            SetHidden                       	= function: 0x002c4e28 (function)
            SetActivated                    	= function: 0x002c4ed8 (function)
            ToggleAutoCast                  	= function: 0x002c4f88 (function)
            GetAutoCastState                	= function: 0x002c5038 (function)
            IsItem                          	= function: 0x002c50f0 (function)
            GetChannelTime                  	= function: 0x002c5170 (function)
            GetDuration                     	= function: 0x002c5aa0 (function)
            EndChannel                      	= function: 0x002c44d0 (function)
            ToggleAbility                   	= function: 0x002c4580 (function)
            CastAbility                     	= function: 0x002c4630 (function)
            GetCastRange                    	= function: 0x00337a88 (function)
            GetEffectiveCastRange           	= function: 0x002c47d8 (function)
            GetCastPointModifier            	= function: 0x002c4910 (function)
            GetAOERadius                    	= function: 0x002c49c8 (function)
            ContinueCasting                 	= function: 0x002c4a78 (function)
            GetAnimationIgnoresModelScale   	= function: 0x002c5f18 (function)
            SetOverrideCastPoint            	= function: 0x002c5fd8 (function)
            GetModifierValue                	= function: 0x002c6090 (function)
            GetModifierValueBonus           	= function: 0x002c6148 (function)
            SetRefCountsModifiers           	= function: 0x002c6200 (function)
            RefCountsModifiers              	= function: 0x002c62b8 (function)
            IncrementModifierRefCount       	= function: 0x002c6370 (function)
            DecrementModifierRefCount       	= function: 0x002c6430 (function)
            NumModifiersUsingAbility        	= function: 0x002c64f0 (function)
            IsFullyCastable                 	= function: 0x002c65b0 (function)
            IsAttributeBonus                	= function: 0x002c6660 (function)
            ProcsMagicStick                 	= function: 0x002c6718 (function)
            StartCooldown                   	= function: 0x002c67c8 (function)
            EndCooldown                     	= function: 0x002c6878 (function)
            GetCooldown                     	= function: 0x002c6928 (function)
            GetEffectiveCooldown            	= function: 0x002c69d8 (function)
            IsNull                          	= function: 0x002c3748 (function)
            GetCastPoint                    	= function: 0x002c4890 (function)
            UpgradeAbility                  	= function: 0x002c43a0 (function)
            GetLevel                        	= function: 0x002c3ad8 (function)
            GetCloneSource                  	= function: 0x002c5b20 (function)
            IsCosmetic_Engine               	= function: 0x002c4cc0 (function)
            GetCursorPosition               	= function: 0x002c3b40 (function)
            GetCursorTargetingNothing       	= function: 0x002c3bc0 (function)
            GetCastRange_Engine             	= function: 0x002c46e0 (function)
            GetMaxAbilityCharges            	= function: 0x002c7348 (function)
            GetChannelStartTime             	= function: 0x002c5220 (function)
            GetCaster                       	= function: 0x002c3920 (function)
            IsHidden                        	= function: 0x002c4ae0 (function)
            FDesc                           	= table: 0x002c37b8 (table, already seen)
            IsCooldownReady                 	= function: 0x002c6a90 (function)
            GetSharedCooldownName           	= function: 0x002c6b40 (function)
            GetCooldownTime                 	= function: 0x002c6bf8 (function)
            GetCooldownTimeRemaining        	= function: 0x002c6ca8 (function)
            SetFrozenCooldown               	= function: 0x002c6d68 (function)
            ForceSetFrozenCooldown          	= function: 0x002c6e20 (function)
            ShouldUseResources              	= function: 0x002c6ed8 (function)
            UseResources                    	= function: 0x002c52d8 (function)
            PayManaCost                     	= function: 0x002c5388 (function)
            RefundManaCost                  	= function: 0x002c5438 (function)
            IsOwnersManaEnough              	= function: 0x002c54e8 (function)
            PayHealthCost                   	= function: 0x002c55a0 (function)
            RefundHealthCost                	= function: 0x002c5650 (function)
            PayGoldCost                     	= function: 0x002c5708 (function)
            IsOwnersGoldEnough              	= function: 0x002c57b8 (function)
            PayGoldCostForUpgrade           	= function: 0x002c5870 (function)
            IsOwnersGoldEnoughForUpgrade    	= function: 0x002c5928 (function)
            GetAbilityDamage                	= function: 0x002c59e8 (function)
            CreateVisibilityNode            	= function: 0x002c5ba0 (function)
            GetToggleState                  	= function: 0x002c5c58 (function)
            GetBehavior                     	= function: 0x002c5d08 (function)
            GetBehaviorInt                  	= function: 0x002c5db8 (function)
            GetAbilityTargetTeam            	= function: 0x002c5e68 (function)
            GetAbilityTargetType            	= function: 0x002c87d8 (function)
            GetAbilityTargetFlags           	= function: 0x002c8890 (function)
            GetAbilityDamageType            	= function: 0x002c8948 (function)
            GetMaxLevel                     	= function: 0x002c8a00 (function)
            RefreshIntrinsicModifier        	= function: 0x002c8ab0 (function)
            OnAbilityPhaseStart             	= function: 0x002c8b70 (function)
            OnAbilityPhaseInterrupted       	= function: 0x002c8c28 (function)
            OnSpellStart                    	= function: 0x002c8ce8 (function)
            OnChannelFinish                 	= function: 0x002c8d98 (function)
            OnUpgrade                       	= function: 0x002c8e48 (function)
            OnOwnerSpawned                  	= function: 0x002c8ef8 (function)
            OnToggle                        	= function: 0x002c8fa8 (function)
            OnOwnerDied                     	= function: 0x002c9058 (function)
            GetBackswingTime                	= function: 0x002c9108 (function)
            GetManaCost                     	= function: 0x002c91c0 (function)
            GetEffectiveManaCost            	= function: 0x002c9270 (function)
            GetChannelledManaCostPerSecond  	= function: 0x002c9328 (function)
            GetHealthCost                   	= function: 0x002c93e8 (function)
            GetEffectiveHealthCost          	= function: 0x002c9498 (function)
            GetChannelledHealthCostPerSecond	= function: 0x002c9550 (function)
            GetGoldCost                     	= function: 0x002c9618 (function)
            GetGoldCostForUpgrade           	= function: 0x002c96c8 (function)
            GetIntrinsicModifierName        	= function: 0x002c9780 (function)
            ResetToggleOnRespawn            	= function: 0x002c9840 (function)
            OnHeroLevelUp                   	= function: 0x002c98f8 (function)
            OnHeroCalculateStatBonus        	= function: 0x002c99a8 (function)
            HeroXPChange                    	= function: 0x002c9a68 (function)
            OnChannelThink                  	= function: 0x002c9b18 (function)
            MarkAbilityButtonDirty          	= function: 0x002c9bc8 (function)
            SpeakAbilityConcept             	= function: 0x002c9c80 (function)
            GetConceptRecipientType         	= function: 0x002c9d38 (function)
            SpeakTrigger                    	= function: 0x002c9df0 (function)
            SetInAbilityPhase               	= function: 0x002c9ea0 (function)
            IsInAbilityPhase                	= function: 0x002c9f58 (function)
            SetChanneling                   	= function: 0x002ca010 (function)
            RequiresFacing                  	= function: 0x002ca140 (function)
            GetAssociatedPrimaryAbilities   	= function: 0x002ca1f0 (function)
            GetAssociatedSecondaryAbilities 	= function: 0x002ca2b0 (function)
            SetStealable                    	= function: 0x002ca370 (function)
            IsStealable                     	= function: 0x002ca420 (function)
            IsHiddenWhenStolen              	= function: 0x002ca4d0 (function)
            IsHiddenAsSecondaryAbility      	= function: 0x002ca588 (function)
            SetStolen                       	= function: 0x002ca648 (function)
            GetChildren                     	= function: 0x0023f1f0 (function)
            SetParent                       	= function: 0x0023f2a0 (function)
            SetConstraint                   	= function: 0x0023f350 (function)
            EyePosition                     	= function: 0x0023f400 (function)
            SetAngles                       	= function: 0x0023ed80 (function)
            SetAbsAngles                    	= function: 0x0023ee30 (function)
            GetAnglesAsVector               	= function: 0x0023efb8 (function)
            EyeAngles                       	= function: 0x0023f070 (function)
            SetOrigin                       	= function: 0x0023fac0 (function)
            SetLocalAngles                  	= function: 0x0023fb70 (function)
            GetLocalAngles                  	= function: 0x0023fc20 (function)
            SetLocalOrigin                  	= function: 0x0023fcd0 (function)
            GetLocalOrigin                  	= function: 0x0023fd80 (function)
            TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
            TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
            SetForwardVector                	= function: 0x0023ffb0 (function)
            GetBoundingMins                 	= function: 0x00240068 (function)
            GetBoundingMaxs                 	= function: 0x00240118 (function)
            GetBounds                       	= function: 0x002401c8 (function)
            GetAngularVelocity              	= function: 0x00240278 (function)
            SetAngularVelocity              	= function: 0x0023f4b0 (function)
            AddEffects                      	= function: 0x0023f568 (function)
            RemoveEffects                   	= function: 0x0023f618 (function)
            Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
            Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
            Attribute_SetIntValue           	= function: 0x0023f878 (function)
            Attribute_GetIntValue           	= function: 0x0023f930 (function)
            HasAttribute                    	= function: 0x0023f9e8 (function)
            DeleteAttribute                 	= function: 0x00240f00 (function)
            ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
            GetOwner                        	= function: 0x00241070 (function)
            SetOwner                        	= function: 0x00241120 (function)
            SetEntityName                   	= function: 0x002411d0 (function)
            GetMass                         	= function: 0x00241280 (function)
            SetMass                         	= function: 0x00241300 (function)
            GetSpawnGroupHandle             	= function: 0x00241380 (function)
            GetAbsOrigin                    	= function: 0x00241438 (function)
            GetAngles                       	= function: 0x002414e8 (function)
            GetAbsScale                     	= function: 0x00241598 (function)
            SetAbsScale                     	= function: 0x00241648 (function)
            GetLocalScale                   	= function: 0x002416f8 (function)
            SetLocalScale                   	= function: 0x002417a8 (function)
            SetAbsOrigin                    	= function: 0x00241858 (function)
            GetCenter                       	= function: 0x00241908 (function)
            GetTeamNumber                   	= function: 0x002419b8 (function)
            GetTeam                         	= function: 0x00241a68 (function)
            SetTeam                         	= function: 0x00241ae8 (function)
            FollowEntity                    	= function: 0x00241b68 (function)
            FollowEntityMerge               	= function: 0x00241c18 (function)
            Trigger                         	= function: 0x00241cd0 (function)
            SetContextThink                 	= function: 0x00241d78 (function)
            SetContext                      	= function: 0x00241e28 (function)
            SetContextNum                   	= function: 0x00240330 (function)
            GetContext                      	= function: 0x002403e0 (function)
            GatherCriteria                  	= function: 0x00240490 (function)
            TakeDamage                      	= function: 0x00240540 (function)
            IsAlive                         	= function: 0x002405f0 (function)
            IsPlayerPawn                    	= function: 0x00240698 (function)
            IsPlayerController              	= function: 0x00240748 (function)
            IsNPC                           	= function: 0x00240800 (function)
            IsDOTANPC                       	= function: 0x002408a8 (function)
            GetMaxHealth                    	= function: 0x00240958 (function)
            SetMaxHealth                    	= function: 0x00240a08 (function)
            SetHealth                       	= function: 0x00240ab8 (function)
            GetHealth                       	= function: 0x00240b68 (function)
            SetGravity                      	= function: 0x00240c18 (function)
            SetFriction                     	= function: 0x00240cc8 (function)
            SetVelocity                     	= function: 0x00240d78 (function)
            GetLocalVelocity                	= function: 0x00240e28 (function)
            GetVelocity                     	= function: 0x002436a8 (function)
            ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
            ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
            GetLocalAngularVelocity         	= function: 0x002438d8 (function)
            GetBaseVelocity                 	= function: 0x00243990 (function)
            OverrideFriction                	= function: 0x00243a40 (function)
            EmitSound                       	= function: 0x00243af8 (function)
            EmitSoundParams                 	= function: 0x00243ba8 (function)
            StopSound                       	= function: 0x00243c58 (function)
            GetSoundDuration                	= function: 0x00243d08 (function)
            PrecacheScriptSound             	= function: 0x00243dc0 (function)
            IsPlayer                        	= function: 0x00243e78 (function)
            GetOrigin                       	= function: 0x00243f28 (function)
            IsNull                          	= function: 0x0023e670 (function)
            SetThink                        	= function: 0x00308700 (function)
            FDesc                           	= table: 0x0023e6e0 (table, already seen)
            StopThink                       	= function: 0x00308730 (function)
            IsInstance                      	= function: 0x00308760 (function)
            IsBaseNPC                       	= function: 0x00337ae8 (function)
            Kill                            	= function: 0x0023e728 (function)
            GetForwardVector                	= function: 0x0023e810 (function)
            GetRightVector                  	= function: 0x0023e8c8 (function)
            GetLeftVector                   	= function: 0x0023ea68 (function)
            GetUpVector                     	= function: 0x0023eae8 (function)
            GetModelName                    	= function: 0x0023ea00 (function)
            GetMoveParent                   	= function: 0x0023ecd0 (function)
            GetRootMoveParent               	= function: 0x0023e978 (function)
            FirstMoveChild                  	= function: 0x0023ef08 (function)
            NextMovePeer                    	= function: 0x0023eb98 (function)
            GetOwnerEntity                  	= function: 0x0023f140 (function)
            IsNull                          	= function: 0x0023d458 (function)
            FireOutput                      	= function: 0x0023d570 (function)
            RemoveSelf                      	= function: 0x0023d688 (function)
            GetIntAttr                      	= function: 0x0023d738 (function)
            SetIntAttr                      	= function: 0x0023d870 (function)
            FDesc                           	= table: 0x0023d4f0 (table, already seen)
            GetDebugName                    	= function: 0x0023d5e0 (function)
            ConnectOutput                   	= function: 0x0023dad0 (function)
            RedirectOutput                  	= function: 0x0023d7a8 (function)
            DisconnectOutput                	= function: 0x00214310 (function)
            DisconnectRedirectedOutput      	= function: 0x00214988 (function)
            GetEntityIndex                  	= function: 0x0023d998 (function)
            entindex                        	= function: 0x0023da18 (function)
            GetClassname                    	= function: 0x0023de90 (function)
            GetEntityHandle                 	= function: 0x0023df10 (function)
            Destroy                         	= function: 0x0023df90 (function)
            GetPublicScriptScope            	= function: 0x0023db80 (function)
            GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
            GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
            GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
            GetName                         	= function: 0x0023d8f0 (function)
         }
         ProcsMagicStick                 	= function: 0x002efb20 (function)
         GetPlaybackRateOverride         	= function: 0x002efd50 (function)
         OnProjectileHit                 	= function: 0x002ee8f0 (function)
         GetCooldown                     	= function: 0x002ed8d0 (function)
         OnProjectileThink               	= function: 0x002ee9a0 (function)
         GetCustomCastErrorLocation      	= function: 0x002ed9d8 (function)
         GetBehavior                     	= function: 0x002ed478 (function)
         IsHiddenAbilityCastable         	= function: 0x002efa68 (function)
         OnUnStolen                      	= function: 0x002ee328 (function)
         IsHiddenWhenStolen              	= function: 0x002ef968 (function)
         IsStealable                     	= function: 0x002ef8e8 (function)
         CastFilterResultTarget          	= function: 0x002edd68 (function)
         CastFilterResultLocation        	= function: 0x002edde8 (function)
         CastFilterResult                	= function: 0x002edea8 (function)
         OnAbilityPhaseStart             	= function: 0x002ee6f0 (function)
         OnAbilityPhaseInterrupted       	= function: 0x002ee770 (function)
         OnSpellStart                    	= function: 0x002ee670 (function)
         OnChannelFinish                 	= function: 0x002ee870 (function)
         OnUpgrade                       	= function: 0x002eeb58 (function)
         OnOwnerSpawned                  	= function: 0x002eea58 (function)
         IsNull                          	= function: 0x002ed3c0 (function)
         OnOwnerDied                     	= function: 0x002eead8 (function)
         OnStolen                        	= function: 0x002ee210 (function)
         GetManaCost                     	= function: 0x002ed750 (function)
         OnHeroDiedNearby                	= function: 0x002ee3d8 (function)
         FDesc                           	= table: 0x002ed430 (table)
         {
            ProcsMagicStick                 	= bool ProcsMagicStick()
Returns true if this ability will generate magic stick charges for nearby enemies. (userdata)
            GetCooldown                     	= float GetCooldown(int iLevel)
Return cooldown of this ability. (userdata)
            GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
Return the animation rate of the cast animation. (userdata)
            OnInventoryContentsChanged      	= void OnInventoryContentsChanged()
Caster inventory changed. (userdata)
            GetBehavior                     	= double GetBehavior()
Return cast behavior type of this ability. (userdata)
            OnItemEquipped                  	= void OnItemEquipped(handle hItem)
( HSCRIPT hItem ) Caster equipped item. (userdata)
            IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
Returns true if this ability is hidden when stolen by Spell Steal. (userdata)
            IsHiddenAbilityCastable         	= bool IsHiddenAbilityCastable()
Returns true if this ability can be used when not on the action panel. (userdata)
            GetCustomCastError              	= string GetCustomCastError()
Return the error string of a failed command with no target. (userdata)
            CastFilterResultTarget          	= int CastFilterResultTarget(handle hTarget)
(HSCRIPT hTarget) Determine whether an issued command on a target is valid. (userdata)
            CastFilterResultLocation        	= int CastFilterResultLocation(Vector vLocation)
(Vector vLocation) Determine whether an issued command on a location is valid. (userdata)
            CastFilterResult                	= int CastFilterResult()
Determine whether an issued command with no target is valid. (userdata)
            OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
Cast time begins (return true for successful cast). (userdata)
            OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
Cast time did not complete successfully. (userdata)
            OnSpellStart                    	= void OnSpellStart()
Cast time finished, spell effects begin. (userdata)
            OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
(bool bInterrupted) Channel finished. (userdata)
            OnUpgrade                       	= void OnUpgrade()
Ability gained a level. (userdata)
            OnOwnerSpawned                  	= void OnOwnerSpawned()
Caster respawned or spawned for the first time. (userdata)
            OnToggle                        	= void OnToggle()
Ability is toggled on/off. (userdata)
            OnOwnerDied                     	= void OnOwnerDied()
Caster died. (userdata)
            OnStolen                        	= void OnStolen(handle hSourceAbility)
( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal. (userdata)
            GetManaCost                     	= int GetManaCost(int iLevel)
Return mana cost at the given level (-1 is current). (userdata)
            OnHeroDiedNearby                	= void OnHeroDiedNearby(handle unit, handle attacker, handle table)
A hero has died in the vicinity (ie Urn), takes table of params. (userdata)
            GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
Return mana cost at the given level per second while channeling (-1 is current). (userdata)
            GetHealthCost                   	= int GetHealthCost(int iLevel)
Return health cost at the given level (-1 is current). (userdata)
            CanUnitPickUp                   	= bool CanUnitPickUp(handle hUnit)
Returns true if this item can be picked up by the target unit. (userdata)
            GetChannelledHealthCostPerSecond	= int GetChannelledHealthCostPerSecond(int iLevel)
Return health cost per second of channeling at the given level (-1 is current). (userdata)
            GetGoldCost                     	= int GetGoldCost(int iLevel)
Return gold cost at the given level (-1 is current). (userdata)
            IsStealable                     	= bool IsStealable()
Returns true if this ability can be stolen by Spell Steal. (userdata)
            GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
Returns the name of the modifier applied passively by this ability. (userdata)
            GetCustomCastErrorLocation      	= string GetCustomCastErrorLocation(Vector vLocation)
(Vector vLocation) Return the error string of a failed command on a location. (userdata)
            OnHeroLevelUp                   	= void OnHeroLevelUp()
Caster gained a level. (userdata)
            OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
Caster (hero only) gained a level, skilled an ability, or received a new stat bonus. (userdata)
            IsRefreshable                   	= bool IsRefreshable()
Returns true if this ability is refreshed by Refresher Orb. (userdata)
            OnChannelThink                  	= void OnChannelThink(float flInterval)
(float flInterval) Channeling is taking place. (userdata)
            OnChargeCountChanged            	= void OnChargeCountChanged()
Runs when item's charge count changes. (userdata)
            OnUnStolen                      	= void OnUnStolen()
Special behavior when lost by Spell Steal. (userdata)
            GetConceptRecipientType         	= int GetConceptRecipientType()
Return who hears speech when this spell is cast. (userdata)
            SpeakTrigger                    	= int SpeakTrigger()
Return the type of speech used. (userdata)
            OnProjectileHit                 	= bool OnProjectileHit(handle hTarget, Vector vLocation)
(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
            GetCustomHudErrorMessage        	= string GetCustomHudErrorMessage(int nReason)
(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order. (userdata)
            GetChannelTime                  	= float GetChannelTime()
Return the channel time of this ability. (userdata)
            GetChannelStartTime             	= float GetChannelStartTime()
Return the channel start time of this ability. (userdata)
            GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
Returns abilities that are stolen simultaneously, or otherwise related in functionality. (userdata)
            GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities. (userdata)
            GetCustomCastErrorTarget        	= string GetCustomCastErrorTarget(handle hTarget)
(HSCRIPT hTarget) Return the error string of a failed command on a target. (userdata)
            GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability. (userdata)
            GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability, taking modifiers into account. (userdata)
            OnProjectileThink               	= void OnProjectileThink(Vector vLocation)
(Vector vLocation) Projectile is actively moving. (userdata)
            IsMuted                         	= bool IsMuted()
Returns whether this item is muted or not. (userdata)
         }
         GetHealthCost                   	= function: 0x002edb20 (function)
         CanUnitPickUp                   	= function: 0x002efba0 (function)
         GetChannelledHealthCostPerSecond	= function: 0x002ed850 (function)
         GetGoldCost                     	= function: 0x002ed660 (function)
         GetCustomCastErrorTarget        	= function: 0x002edf60 (function)
         GetIntrinsicModifierName        	= function: 0x002ef868 (function)
         OnChargeCountChanged            	= function: 0x002ee490 (function)
         OnHeroLevelUp                   	= function: 0x002eebd8 (function)
         OnHeroCalculateStatBonus        	= function: 0x002ee190 (function)
         IsRefreshable                   	= function: 0x002ef9e8 (function)
         OnChannelThink                  	= function: 0x002ee7f0 (function)
         OnItemEquipped                  	= function: 0x002ee0e0 (function)
         OnInventoryContentsChanged      	= function: 0x002ee020 (function)
         GetConceptRecipientType         	= function: 0x002efc50 (function)
         SpeakTrigger                    	= function: 0x002efcd0 (function)
         GetCustomHudErrorMessage        	= function: 0x002edba0 (function)
         GetCustomCastError              	= function: 0x002eda98 (function)
         GetChannelTime                  	= function: 0x002ed7d0 (function)
         GetChannelStartTime             	= function: 0x002ed6e8 (function)
         GetAssociatedPrimaryAbilities   	= function: 0x002ee548 (function)
         GetAssociatedSecondaryAbilities 	= function: 0x002ee5c8 (function)
         GetChannelledManaCostPerSecond  	= function: 0x002ed958 (function)
         GetCastRange                    	= function: 0x002ed560 (function)
         GetEffectiveCastRange           	= function: 0x002ed5e0 (function)
         OnToggle                        	= function: 0x002edce0 (function)
         IsMuted                         	= function: 0x002edc60 (function)
      }
      CDOTA_BaseNPC_MangoTree         	= table: 0x002c2ae0 (table, already seen)
      CDotaTutorialNPCBlocker         	= table: 0x002c2d18 (table, already seen)
      CDOTA_PlayerResource            	= table: 0x002c8360 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         GetCreepDamageTaken             	= function: 0x00337c08 (function)
         GetHeroDamageTaken              	= function: 0x00337c38 (function)
         GetDamageDoneToHero             	= function: 0x002d1040 (function)
         GetKillsDoneToHero              	= function: 0x002cf3c8 (function)
         SetCanRepick                    	= function: 0x002cf480 (function)
         CanRepick                       	= function: 0x002cf530 (function)
         SetHasRandomed                  	= function: 0x002cf5e0 (function)
         HasRandomed                     	= function: 0x002cf690 (function)
         GetSelectedHeroName             	= function: 0x002cf740 (function)
         GetSelectedHeroID               	= function: 0x002cf7f8 (function)
         IsHeroSelected                  	= function: 0x002cf8b0 (function)
         WhoSelectedHero                 	= function: 0x002cf960 (function)
         GetSelectedHeroEntity           	= function: 0x002cfa10 (function)
         GetTotalEarnedGold              	= function: 0x002ce778 (function)
         GetTotalGoldSpent               	= function: 0x002ce830 (function)
         AddGoldSpentOnSupport           	= function: 0x002ce8e8 (function)
         GetGoldSpentOnSupport           	= function: 0x002cea08 (function)
         GetGoldSpentOnConsumables       	= function: 0x002ceac0 (function)
         GetGoldSpentOnItems             	= function: 0x002ceb80 (function)
         GetGoldLostToDeath              	= function: 0x002cec38 (function)
         GetGoldSpentOnBuybacks          	= function: 0x002cffd8 (function)
         GetGoldPerMin                   	= function: 0x002d0090 (function)
         GetXPPerMin                     	= function: 0x002d0140 (function)
         GetAegisPickups                 	= function: 0x002d01f0 (function)
         AddAegisPickup                  	= function: 0x002d02a0 (function)
         GetMisses                       	= function: 0x002d3100 (function)
         IsValidTeamPlayer               	= function: 0x002cda78 (function)
         NumTeamPlayers                  	= function: 0x002cdb98 (function)
         IsValidPlayer                   	= function: 0x002cdc18 (function)
         NumPlayers                      	= function: 0x002cddb8 (function)
         GetNumConnectedHumanPlayers     	= function: 0x002cde38 (function)
         GetTeamPlayerCount              	= function: 0x002cdd50 (function)
         GetPlayerCountForTeam           	= function: 0x002ce038 (function)
         GetPlayerCount                  	= function: 0x002cdcc8 (function)
         SetCustomIntParam               	= function: 0x002ce0f0 (function)
         GetStuns                        	= function: 0x002ce1a8 (function)
         GetHealing                      	= function: 0x002ce2f8 (function)
         GetTowerKills                   	= function: 0x002ce3a8 (function)
         GetRoshanKills                  	= function: 0x002cecd0 (function)
         GetTeamKills                    	= function: 0x002ced80 (function)
         GetNetWorth                     	= function: 0x002cf1b0 (function)
         GetReliableGold                 	= function: 0x002cf260 (function)
         GetUnreliableGold               	= function: 0x002cf310 (function)
         ResetTotalEarnedGold            	= function: 0x002ce6c0 (function)
         GetUnitShareMaskForPlayer       	= function: 0x002d3ef8 (function)
         IsHeroSharedWithPlayerID        	= function: 0x002d3fb8 (function)
         AreUnitsSharedWithPlayerID      	= function: 0x002d4078 (function)
         IsDisableHelpSetForPlayerID     	= function: 0x002d4138 (function)
         SetUnitShareMaskForPlayer       	= function: 0x002d41f8 (function)
         GetNumCouriersForTeam           	= function: 0x002d42b8 (function)
         GetPreferredCourierForPlayer    	= function: 0x002d4370 (function)
         GetNthCourierForTeam            	= function: 0x002d4430 (function)
         ResetBuybackCostTime            	= function: 0x002d45e8 (function)
         SetCustomBuybackCooldown        	= function: 0x002d46a0 (function)
         GetCustomBuybackCooldown        	= function: 0x002d4760 (function)
         SetCustomBuybackCost            	= function: 0x002d10f8 (function)
         GetCustomBuybackCost            	= function: 0x002d11b0 (function)
         SetCustomTeamAssignment         	= function: 0x002d1268 (function)
         GetCustomTeamAssignment         	= function: 0x002d1320 (function)
         HasCustomGameTicketForPlayerID  	= function: 0x002d13d8 (function)
         ReplaceHeroWith                 	= function: 0x002d1498 (function)
         ReplaceHeroWithNoTransfer       	= function: 0x002d1548 (function)
         SetCameraTarget                 	= function: 0x002d1608 (function)
         SetOverrideSelectionEntity      	= function: 0x002d16b8 (function)
         SetCustomPlayerColor            	= function: 0x002d1778 (function)
         HasSetNetworkedEventActionClaimCount	= function: 0x002d1830 (function)
         GetLabyrinthEventGameHeroUnlocks	= function: 0x002d18f8 (function)
         GetEventGameUpgrades            	= function: 0x002d19c0 (function)
         GetNetworkedEventActionClaimCount	= function: 0x002d1a78 (function)
         GetNetworkedEventActionClaimCountByName	= function: 0x002d1b40 (function)
         RecordConsumableAbilityChargeChange	= function: 0x002d1c08 (function)
         RecordEventActionGrant          	= function: 0x002d1cd0 (function)
         RecordEventActionGrantForPrimaryEvent	= function: 0x002d1d88 (function)
         AddNeutralItemToStash           	= function: 0x002d1e50 (function)
         IsValidTeamPlayerID             	= function: 0x002d1f08 (function)
         IsValidPlayerID                 	= function: 0x002d1fc0 (function)
         IsNull                          	= function: 0x002cd9c0 (function)
         HeroLevelUp                     	= function: 0x00337cf8 (function)
         SetBuybackCooldownTime          	= function: 0x002d44e8 (function)
         SetBuybackGoldLimitTime         	= function: 0x002d4568 (function)
         GetLevel                        	= function: 0x002ce278 (function)
         GetTeam                         	= function: 0x002d3260 (function)
         IncrementTotalEarnedXP_Engine   	= function: 0x002d0918 (function)
         GetEventRankGranted             	= function: 0x002d3e48 (function)
         IsFakeClient                    	= function: 0x002d3728 (function)
         IncrementDeaths_Engine          	= function: 0x002ce4c0 (function)
         GetTowerDamageTaken_Engine      	= function: 0x002d0e18 (function)
         GetSteamID                      	= function: 0x002d35c0 (function)
         GetCreepDamageTaken_Engine      	= function: 0x002d0ed0 (function)
         GetEventRanks                   	= function: 0x002d3e48 (function)
         GetEventPremiumPoints           	= function: 0x002d3d90 (function)
         GetEventPointsForPlayerID       	= function: 0x002d3cd0 (function)
         AddCandyEvent                   	= function: 0x002d3c20 (function)
         GetPlayerName                   	= function: 0x002d3b70 (function)
         SetLastBuybackTime              	= function: 0x002d3ab8 (function)
         GetConnectionState              	= function: 0x002d3a00 (function)
         IncrementTotalEarnedXP          	= function: 0x00337cc8 (function)
         HaveAllPlayersJoined            	= function: 0x002d3888 (function)
         GetPartyID                      	= function: 0x002d37d8 (function)
         GetPlayerLoadedCompletely       	= function: 0x002d3940 (function)
         GetRunePickups                  	= function: 0x002d0350 (function)
         AddRunePickup                   	= function: 0x002d0400 (function)
         GetNumConsumablesPurchased      	= function: 0x002d04b0 (function)
         GetNumItemsPurchased            	= function: 0x002d0570 (function)
         GetTimeOfLastItemPurchase       	= function: 0x002d0628 (function)
         GetTimeOfLastConsumablePurchase 	= function: 0x002d06e8 (function)
         GetTimeOfLastDeath              	= function: 0x002d07a8 (function)
         GetRespawnSeconds               	= function: 0x002d0860 (function)
         GetSteamAccountID               	= function: 0x002d3670 (function)
         GetBroadcasterChannel           	= function: 0x002d3448 (function)
         IsBroadcaster                   	= function: 0x002d3398 (function)
         GetLiveSpectatorTeam            	= function: 0x002d32e0 (function)
         UpdateTeamSlot                  	= function: 0x002d31b0 (function)
         IncrementMisses                 	= function: 0x002d3050 (function)
         GetClaimedDenies                	= function: 0x002d2f98 (function)
         IncrementClaimedDenies          	= function: 0x002d2ee0 (function)
         GetClaimedMisses                	= function: 0x002d2e28 (function)
         IncrementClaimedMisses          	= function: 0x002d2d70 (function)
         HasSelectedHero                 	= function: 0x002cfac8 (function)
         GetLastHitStreak                	= function: 0x002d28c8 (function)
         GetNearbyCreepDeaths            	= function: 0x002d2bb8 (function)
         ClearPlayer                     	= function: 0x002cfb78 (function)
         GetLastHitMultikill             	= function: 0x002d2a80 (function)
         GetPlayer                       	= function: 0x002cfc28 (function)
         GetNthPlayerIDOnTeam            	= function: 0x002cfcd8 (function)
         IncrementKills                  	= function: 0x002cdef8 (function)
         IncrementDeaths                 	= function: 0x00337c98 (function)
         IncrementAssists                	= function: 0x002cdf78 (function)
         IncrementLastHits               	= function: 0x002cfd90 (function)
         IncrementDenies                 	= function: 0x002d2c70 (function)
         IncrementNearbyCreepDeaths      	= function: 0x002d2b38 (function)
         FDesc                           	= table: 0x002cda30 (table)
         {
            GetCreepDamageTaken             	= int GetCreepDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
            GetHeroDamageTaken              	= int GetHeroDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
            GetDamageDoneToHero             	= int GetDamageDoneToHero(int iPlayerID, int iVictimID)
 (userdata)
            GetKillsDoneToHero              	= int GetKillsDoneToHero(int iPlayerID, int iVictimID)
 (userdata)
            SetCanRepick                    	= void SetCanRepick(int iPlayerID, bool bCanRepick)
 (userdata)
            CanRepick                       	= bool CanRepick(int iPlayerID)
 (userdata)
            SetHasRandomed                  	= void SetHasRandomed(int iPlayerID)
 (userdata)
            HasRandomed                     	= bool HasRandomed(int iPlayerID)
 (userdata)
            GetSelectedHeroName             	= string GetSelectedHeroName(int iPlayerID)
 (userdata)
            GetSelectedHeroID               	= int GetSelectedHeroID(int iPlayerID)
 (userdata)
            IsHeroSelected                  	= bool IsHeroSelected(string pHeroname, bool bIgnoreUnrevealedPick)
 (userdata)
            WhoSelectedHero                 	= int WhoSelectedHero(string pHeroFilename, bool bIgnoreUnrevealedPick)
 (userdata)
            GetSelectedHeroEntity           	= handle GetSelectedHeroEntity(int iPlayerID)
 (userdata)
            GetTotalEarnedGold              	= int GetTotalEarnedGold(int iPlayerID)
 (userdata)
            GetTotalGoldSpent               	= int GetTotalGoldSpent(int iPlayerID)
 (userdata)
            AddGoldSpentOnSupport           	= void AddGoldSpentOnSupport(int iPlayerID, int iCost)
 (userdata)
            GetGoldSpentOnSupport           	= int GetGoldSpentOnSupport(int iPlayerID)
 (userdata)
            GetGoldSpentOnConsumables       	= int GetGoldSpentOnConsumables(int iPlayerID)
 (userdata)
            GetGoldSpentOnItems             	= int GetGoldSpentOnItems(int iPlayerID)
 (userdata)
            GetGoldLostToDeath              	= int GetGoldLostToDeath(int iPlayerID)
 (userdata)
            GetGoldSpentOnBuybacks          	= int GetGoldSpentOnBuybacks(int iPlayerID)
 (userdata)
            GetGoldPerMin                   	= float GetGoldPerMin(int iPlayerID)
 (userdata)
            GetXPPerMin                     	= float GetXPPerMin(int iPlayerID)
 (userdata)
            GetAegisPickups                 	= int GetAegisPickups(int iPlayerID)
 (userdata)
            AddAegisPickup                  	= void AddAegisPickup(int iPlayerID)
 (userdata)
            GetMisses                       	= int GetMisses(int iPlayerID)
 (userdata)
            IsValidTeamPlayer               	= bool IsValidTeamPlayer(int iPlayerID)
 (userdata)
            NumTeamPlayers                  	= int NumTeamPlayers()
 (userdata)
            IsValidPlayer                   	= bool IsValidPlayer(int iPlayerID)
 (userdata)
            NumPlayers                      	= int NumPlayers()
 (userdata)
            GetNumConnectedHumanPlayers     	= int GetNumConnectedHumanPlayers()
Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game (userdata)
            GetTeamPlayerCount              	= int GetTeamPlayerCount()
(Deprecated: use GetNumConnectedHumanPlayers) Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game (userdata)
            GetPlayerCountForTeam           	= int GetPlayerCountForTeam(int iTeam)
 (userdata)
            GetPlayerCount                  	= int GetPlayerCount()
Includes spectators and players not assigned to a team (userdata)
            SetCustomIntParam               	= void SetCustomIntParam(int iPlayerID, int iParam)
 (userdata)
            HaveAllPlayersJoined            	= bool HaveAllPlayersJoined()
 (userdata)
            GetHealing                      	= float GetHealing(int iPlayerID)
 (userdata)
            GetTowerKills                   	= int GetTowerKills(int iPlayerID)
 (userdata)
            GetRoshanKills                  	= int GetRoshanKills(int iPlayerID)
 (userdata)
            GetTeamKills                    	= int GetTeamKills(int iTeam)
 (userdata)
            GetNetWorth                     	= int GetNetWorth(int iPlayerID)
 (userdata)
            GetReliableGold                 	= int GetReliableGold(int iPlayerID)
 (userdata)
            GetUnreliableGold               	= int GetUnreliableGold(int iPlayerID)
 (userdata)
            ResetTotalEarnedGold            	= void ResetTotalEarnedGold(int iPlayerID)
 (userdata)
            GetUnitShareMaskForPlayer       	= int GetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID)
 (userdata)
            IsHeroSharedWithPlayerID        	= bool IsHeroSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)
 (userdata)
            AreUnitsSharedWithPlayerID      	= bool AreUnitsSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)
 (userdata)
            IsDisableHelpSetForPlayerID     	= bool IsDisableHelpSetForPlayerID(int nPlayerID, int nOtherPlayerID)
 (userdata)
            SetUnitShareMaskForPlayer       	= void SetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID, int nFlag, bool bState)
 (userdata)
            GetNumCouriersForTeam           	= int GetNumCouriersForTeam(int nTeamNumber)
 (userdata)
            GetPreferredCourierForPlayer    	= handle GetPreferredCourierForPlayer(int nPlayerId)
 (userdata)
            GetNthCourierForTeam            	= handle GetNthCourierForTeam(int nCourierIndex, int nTeamNumber)
 (userdata)
            ResetBuybackCostTime            	= void ResetBuybackCostTime(int nPlayerID)
 (userdata)
            SetCustomBuybackCooldown        	= void SetCustomBuybackCooldown(int iPlayerID, float flCooldownTime)
Set the buyback cooldown for this player. (userdata)
            GetCustomBuybackCooldown        	= float GetCustomBuybackCooldown(int iPlayerID)
 (userdata)
            SetCustomBuybackCost            	= void SetCustomBuybackCost(int iPlayerID, int iGoldCost)
Set the buyback cost for this player. (userdata)
            GetCustomBuybackCost            	= int GetCustomBuybackCost(int iPlayerID)
 (userdata)
            SetCustomTeamAssignment         	= void SetCustomTeamAssignment(int iPlayerID, int iTeamAssignment)
Set custom team assignment for this player. (userdata)
            GetCustomTeamAssignment         	= int GetCustomTeamAssignment(int iPlayerID)
Get the current custom team assignment for this player. (userdata)
            HasCustomGameTicketForPlayerID  	= bool HasCustomGameTicketForPlayerID(int iPlayerID)
Does this player have a custom game ticket for this game? (userdata)
            ReplaceHeroWith                 	= handle ReplaceHeroWith(int iPlayerID, string pszHeroClass, int nGold, int nXP)
(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP (userdata)
            ReplaceHeroWithNoTransfer       	= handle ReplaceHeroWithNoTransfer(int iPlayerID, string pszHeroClass, int nGold, int nXP)
(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP, without transferring items/abilities if same hero (userdata)
            SetCameraTarget                 	= void SetCameraTarget(int nPlayerID, handle hTarget)
(playerID, entity) - force the given player's camera to follow the given entity (userdata)
            SetOverrideSelectionEntity      	= void SetOverrideSelectionEntity(int nPlayerID, handle hEntity)
Set the forced selection entity for a player. (userdata)
            SetCustomPlayerColor            	= void SetCustomPlayerColor(int iPlayerID, int r, int g, int b)
Set custom color for player (minimap, scoreboard, etc) (userdata)
            HasSetNetworkedEventActionClaimCount	= bool HasSetNetworkedEventActionClaimCount()
 (userdata)
            GetLabyrinthEventGameHeroUnlocks	= handle GetLabyrinthEventGameHeroUnlocks(int nPlayerID)
(nPlayerID) (userdata)
            GetEventGameUpgrades            	= handle GetEventGameUpgrades(int nPlayerID)
(nPlayerID) (userdata)
            GetNetworkedEventActionClaimCount	= int GetNetworkedEventActionClaimCount(int nPlayerID, int nEventID, unsigned unActionID)
(nPlayerID, eEvent, nActionID) (userdata)
            GetNetworkedEventActionClaimCountByName	= int GetNetworkedEventActionClaimCountByName(int nPlayerID, int nEventID, string pActionName)
(nPlayerID, eEvent, pActionName) (userdata)
            RecordConsumableAbilityChargeChange	= void RecordConsumableAbilityChargeChange(int iPlayerID, int item_definition_index, int nChargeIncrementOrDecrement)
Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement) (userdata)
            RecordEventActionGrant          	= void RecordEventActionGrant(int iPlayerID, int eEvent, int unActionID, int unAudit, unsigned unQuantity, unsigned unAuditData)
 (userdata)
            RecordEventActionGrantForPrimaryEvent	= void RecordEventActionGrantForPrimaryEvent(int iPlayerID, string pszActionName, int unAudit, unsigned unQuantity, unsigned unAuditData)
 (userdata)
            AddNeutralItemToStash           	= void AddNeutralItemToStash(int iPlayerID, int nTeamNumber, handle hItem)
 (userdata)
            IsValidTeamPlayerID             	= bool IsValidTeamPlayerID(int nPlayerID)
 (userdata)
            IsValidPlayerID                 	= bool IsValidPlayerID(int iPlayerID)
 (userdata)
            SetBuybackCooldownTime          	= void SetBuybackCooldownTime(int nPlayerID, float flBuybackCooldown)
 (userdata)
            SetBuybackGoldLimitTime         	= void SetBuybackGoldLimitTime(int nPlayerID, float flBuybackCooldown)
 (userdata)
            GetLevel                        	= int GetLevel(int iPlayerID)
 (userdata)
            GetTeam                         	= int GetTeam(int iPlayerID)
 (userdata)
            GetEventRanks                   	= <unknown> GetEventRanks(int nPlayerID)
 (userdata)
            GetEventPremiumPoints           	= unsigned GetEventPremiumPoints(int nPlayerID)
 (userdata)
            GetEventPointsForPlayerID       	= unsigned GetEventPointsForPlayerID(int nPlayerID)
 (userdata)
            AddCandyEvent                   	= void AddCandyEvent(int iPlayerID, int nReason)
 (userdata)
            GetPlayerName                   	= string GetPlayerName(int iPlayerID)
 (userdata)
            SetLastBuybackTime              	= void SetLastBuybackTime(int iPlayerID, float flLastBuybackTime)
 (userdata)
            GetConnectionState              	= <unknown> GetConnectionState(int iPlayerID)
 (userdata)
            IncrementTotalEarnedXP          	= void IncrementTotalEarnedXP(int iPlayerID, int iXP, int nReason)
 (userdata)
            GetPartyID                      	= uint64 GetPartyID(int iPlayerID)
 (userdata)
            IsFakeClient                    	= bool IsFakeClient(int iPlayerID)
 (userdata)
            GetRunePickups                  	= int GetRunePickups(int iPlayerID)
 (userdata)
            AddRunePickup                   	= void AddRunePickup(int iPlayerID, int nRunes)
 (userdata)
            GetNumConsumablesPurchased      	= int GetNumConsumablesPurchased(int iPlayerID)
 (userdata)
            GetNumItemsPurchased            	= int GetNumItemsPurchased(int iPlayerID)
 (userdata)
            GetTimeOfLastItemPurchase       	= float GetTimeOfLastItemPurchase(int iPlayerID)
 (userdata)
            GetTimeOfLastConsumablePurchase 	= float GetTimeOfLastConsumablePurchase(int iPlayerID)
 (userdata)
            GetTimeOfLastDeath              	= float GetTimeOfLastDeath(int iPlayerID)
 (userdata)
            GetRespawnSeconds               	= int GetRespawnSeconds(int iPlayerID)
 (userdata)
            GetPlayerLoadedCompletely       	= bool GetPlayerLoadedCompletely(int iPlayerID)
 (userdata)
            GetSteamID                      	= uint64 GetSteamID(int iPlayerID)
Get the 64 bit steam ID for a given player. (userdata)
            GetStuns                        	= float GetStuns(int iPlayerID)
 (userdata)
            HasSelectedHero                 	= bool HasSelectedHero(int iPlayerID)
 (userdata)
            IsBroadcaster                   	= bool IsBroadcaster(int iPlayerID)
 (userdata)
            GetLiveSpectatorTeam            	= <unknown> GetLiveSpectatorTeam(int iPlayerID)
 (userdata)
            UpdateTeamSlot                  	= void UpdateTeamSlot(int iPlayerID, int iTeamNumber, int desiredSlot)
 (userdata)
            IncrementMisses                 	= void IncrementMisses(int iPlayerID, int nValue)
 (userdata)
            GetClaimedDenies                	= int GetClaimedDenies(int iPlayerID)
 (userdata)
            IncrementClaimedDenies          	= void IncrementClaimedDenies(int iPlayerID, int nValue)
 (userdata)
            GetClaimedMisses                	= int GetClaimedMisses(int iPlayerID)
 (userdata)
            IncrementClaimedMisses          	= void IncrementClaimedMisses(int iPlayerID, int nValue)
 (userdata)
            ClearPlayer                     	= void ClearPlayer(int iPlayerID)
 (userdata)
            GetNthPlayerIDOnTeam            	= int GetNthPlayerIDOnTeam(int iTeamNumber, int iNthPlayer)
 (userdata)
            GetNearbyCreepDeaths            	= int GetNearbyCreepDeaths(int iPlayerID)
 (userdata)
            GetPlayer                       	= handle GetPlayer(int iPlayerID)
 (userdata)
            GetLastHitStreak                	= int GetLastHitStreak(int iPlayerID)
 (userdata)
            IncrementKills                  	= void IncrementKills(int iPlayerID, int iVictimID)
 (userdata)
            IncrementDeaths                 	= void IncrementDeaths(int iPlayerID, int iKillerID)
 (userdata)
            IncrementAssists                	= void IncrementAssists(int iPlayerID, int iVictimID)
 (userdata)
            IncrementLastHits               	= void IncrementLastHits(int iPlayerID, int nCount)
 (userdata)
            IncrementDenies                 	= void IncrementDenies(int iPlayerID, int nValue)
 (userdata)
            IncrementNearbyCreepDeaths      	= void IncrementNearbyCreepDeaths(int iPlayerID, int nCreeps)
 (userdata)
            GetLastHitMultikill             	= int GetLastHitMultikill(int iPlayerID)
 (userdata)
            IncrementLastHitStreak          	= void IncrementLastHitStreak(int iPlayerID, int nCount)
 (userdata)
            ClearLastHitStreak              	= void ClearLastHitStreak(int iPlayerID)
 (userdata)
            IncrementLastHitMultikill       	= void IncrementLastHitMultikill(int iPlayerID, int nCount)
 (userdata)
            ClearLastHitMultikill           	= void ClearLastHitMultikill(int iPlayerID)
 (userdata)
            GetKills                        	= int GetKills(int iPlayerID)
 (userdata)
            GetDeaths                       	= int GetDeaths(int iPlayerID)
 (userdata)
            GetAssists                      	= int GetAssists(int iPlayerID)
 (userdata)
            GetLastHits                     	= int GetLastHits(int iPlayerID)
 (userdata)
            GetDenies                       	= int GetDenies(int iPlayerID)
 (userdata)
            IncrementStreak                 	= void IncrementStreak(int iPlayerID, int nCount)
 (userdata)
            ClearStreak                     	= void ClearStreak(int iPlayerID)
 (userdata)
            GetStreak                       	= int GetStreak(int iPlayerID)
 (userdata)
            GetBroadcasterChannel           	= unsigned GetBroadcasterChannel(int iPlayerID)
 (userdata)
            GetBroadcasterChannelSlot       	= unsigned GetBroadcasterChannelSlot(int iPlayerID)
 (userdata)
            ModifyGold                      	= int ModifyGold(int iPlayerID, int iGoldChange, bool bReliable, int nReason)
 (userdata)
            GetSteamAccountID               	= unsigned GetSteamAccountID(int iPlayerID)
 (userdata)
            SetGold                         	= void SetGold(int iPlayerID, int iGold, bool bReliable)
 (userdata)
            SpendGold                       	= void SpendGold(int iPlayerID, int iCost, int iReason)
 (userdata)
            GetGold                         	= int GetGold(int iPlayerID)
 (userdata)
            GetTotalEarnedXP                	= int GetTotalEarnedXP(int iPlayerID)
 (userdata)
            AddClaimedFarm                  	= void AddClaimedFarm(int iPlayerID, float flFarmValue, bool bEarnedValue)
 (userdata)
            GetClaimedFarm                  	= float GetClaimedFarm(int iPlayerID, bool bOnlyEarned)
 (userdata)
            GetRawPlayerDamage              	= int GetRawPlayerDamage(int iPlayerID)
 (userdata)
            ClearRawPlayerDamageMatrix      	= void ClearRawPlayerDamageMatrix(int iPlayerID)
 (userdata)
            ClearKillsMatrix                	= void ClearKillsMatrix(int iPlayerID)
 (userdata)
            GetTowerDamageTaken             	= int GetTowerDamageTaken(int iPlayerID, bool bTotal)
 (userdata)
         }
         IncrementLastHitStreak          	= function: 0x002cfe90 (function)
         ClearLastHitStreak              	= function: 0x002cff10 (function)
         IncrementLastHitMultikill       	= function: 0x002d2980 (function)
         ClearLastHitMultikill           	= function: 0x002d2a00 (function)
         GetKills                        	= function: 0x002ce540 (function)
         GetDeaths                       	= function: 0x002ce640 (function)
         GetAssists                      	= function: 0x002ce5c0 (function)
         GetLastHits                     	= function: 0x002cfe10 (function)
         GetDenies                       	= function: 0x002d2cf0 (function)
         IncrementStreak                 	= function: 0x002cee30 (function)
         ClearStreak                     	= function: 0x002ceeb0 (function)
         GetStreak                       	= function: 0x002cef30 (function)
         GetBroadcasterChannelSlot       	= function: 0x002d3500 (function)
         GetHeroDamageTaken_Engine       	= function: 0x002d0f88 (function)
         ModifyGold                      	= function: 0x002cefb0 (function)
         GetEventPremiumPointsGranted    	= function: 0x002d3d90 (function)
         SetGold                         	= function: 0x002cf030 (function)
         SpendGold                       	= function: 0x002cf0b0 (function)
         GetGold                         	= function: 0x002cf130 (function)
         GetTotalEarnedXP                	= function: 0x002d09d0 (function)
         AddClaimedFarm                  	= function: 0x002d0a88 (function)
         GetClaimedFarm                  	= function: 0x002d0b38 (function)
         GetRawPlayerDamage              	= function: 0x002d0be8 (function)
         ClearRawPlayerDamageMatrix      	= function: 0x002d0ca0 (function)
         ClearKillsMatrix                	= function: 0x002d0d60 (function)
         GetTowerDamageTaken             	= function: 0x00337c68 (function)
      }
      CDOTA_MapTree                   	= table: 0x002c30e0 (table, already seen)
      GlobalSys                       	= table: 0x0024ceb8 (table)
      {
         IsNull                          	= function: 0x0024cf00 (function)
         CommandLineCheck                	= function: 0x0024d3b0 (function)
         CommandLineInt                  	= function: 0x0024a740 (function)
         FDesc                           	= table: 0x0024cf70 (table)
         {
            CommandLineCheck                	= table CommandLineCheck(string)
CommandLineCheck(name) : returns true if the command line param was used, otherwise false. (userdata)
            CommandLineInt                  	= table CommandLineInt(string, int)
CommandLineInt(name) : returns the command line param as an int. (userdata)
            CommandLineFloat                	= table CommandLineFloat(string, float)
CommandLineFloat(name) : returns the command line param as a float. (userdata)
            CommandLineStr                  	= table CommandLineStr(string, string)
CommandLineStr(name) : returns the command line param as a string. (userdata)
         }
         CommandLineFloat                	= function: 0x0024d158 (function)
         CommandLineStr                  	= function: 0x0024d210 (function)
      }
      CDOTABaseAbility                	= table: 0x002c3700 (table, already seen)
      SteamInfo                       	= table: 0x0024d638 (table)
      {
         IsNull                          	= function: 0x0024d680 (function)
         FDesc                           	= table: 0x0024d6f0 (table)
         {
            IsPublicUniverse                	= bool IsPublicUniverse()
Is the script connected to the public Steam universe (userdata)
         }
         IsPublicUniverse                	= function: 0x0024d738 (function)
      }
      CDOTA_Item_BagOfGold            	= table: 0x002dc380 (table)
      {
         metatable                       	= table: 0x002d8cd8 (table, already seen)
         IsNull                          	= function: 0x002dc3c8 (function)
         FDesc                           	= table: 0x002dc438 (table)
         {
            SetLifeTime                     	= void SetLifeTime(float flTime)
Set the life time of this item (userdata)
         }
         SetLifeTime                     	= function: 0x002dc480 (function)
      }
      CDOTA_Ability_Aghanim_Spear     	= table: 0x002dc6d8 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002dc720 (function)
         FDesc                           	= table: 0x002dc790 (table)
         {
            LaunchSpear                     	= void LaunchSpear(Vector vTarget, Vector vStart)
Launch Spear to a target position from a source position (userdata)
         }
         LaunchSpear                     	= function: 0x002dc7d8 (function)
      }
      CDOTA_Unit_CustomGameAnnouncerAghanim	= table: 0x002dca38 (table)
      {
         metatable                       	= table: 0x00233f70 (table, already seen)
         IsNull                          	= function: 0x002dca80 (function)
         FDesc                           	= table: 0x002dcaf0 (table)
         {
            SetServerAuthoritative          	= void SetServerAuthoritative(bool bIsServerAuthoritative)
Determines whether response criteria is matched on server or client (userdata)
            SetAnimation                    	= void SetAnimation(string pAnimation)
Set the animation sequence for this entity. (userdata)
         }
         SetServerAuthoritative          	= function: 0x002dcc20 (function)
         SetAnimation                    	= function: 0x002dcb38 (function)
      }
      CSceneEntity                    	= table: 0x002dce08 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002dce50 (function)
         RemoveBroadcastTeamTarget       	= function: 0x002dd478 (function)
         FindNamedEntity                 	= function: 0x002dd180 (function)
         LoadSceneFromString             	= function: 0x002dd6c0 (function)
         FDesc                           	= table: 0x002dcec0 (table)
         {
            AddBroadcastTeamTarget          	= void AddBroadcastTeamTarget(int)
Adds a team (by index) to the broadcast list (userdata)
            RemoveBroadcastTeamTarget       	= void RemoveBroadcastTeamTarget(int)
Removes a team (by index) from the broadcast list (userdata)
            FindNamedEntity                 	= handle FindNamedEntity(string)
given an entity reference, such as !target, get actual entity from scene object (userdata)
            LoadSceneFromString             	= bool LoadSceneFromString(string, string)
given a dummy scene name and a vcd string, load the scene (userdata)
            EstimateLength                  	= float EstimateLength()
Returns length of this scene in seconds. (userdata)
            IsPlayingBack                   	= bool IsPlayingBack()
If this scene is currently playing. (userdata)
            IsPaused                        	= bool IsPaused()
If this scene is currently paused. (userdata)
            Start                           	= void Start(handle)
Start scene playback, takes activatorEntity as param (userdata)
            Cancel                          	= void Cancel()
Cancel scene playback (userdata)
         }
         AddBroadcastTeamTarget          	= function: 0x002dd208 (function)
         EstimateLength                  	= function: 0x002dcf08 (function)
         IsPlayingBack                   	= function: 0x002dd020 (function)
         IsPaused                        	= function: 0x002dd0d0 (function)
         Start                           	= function: 0x002dd270 (function)
         Cancel                          	= function: 0x002dd2f0 (function)
      }
      CDOTA_Buff                      	= table: 0x00237240 (table, already seen)
      CPointWorldText                 	= table: 0x002dd980 (table)
      {
         metatable                       	= table: 0x00298c48 (table, already seen)
         IsNull                          	= function: 0x002dd9c8 (function)
         FDesc                           	= table: 0x002dda38 (table)
         {
            SetMessage                      	= void SetMessage(string pMessage)
Set the message on this entity. (userdata)
         }
         SetMessage                      	= function: 0x002dda80 (function)
      }
      CPhysicsProp                    	= table: 0x002f1f70 (table)
      {
         metatable                       	= table: 0x0029a3b8 (table, already seen)
         IsNull                          	= function: 0x002f3da0 (function)
         SetDynamicVsDynamicContinuous   	= function: 0x002f4020 (function)
         FDesc                           	= table: 0x002f3e10 (table)
         {
            SetDynamicVsDynamicContinuous   	= void SetDynamicVsDynamicContinuous(bool bIsDynamicVsDynamicContinuousEnabled)
Enable/disable dynamic vs dynamic continuous collision traces (userdata)
            EnableMotion                    	= void EnableMotion()
Enable motion for the prop (userdata)
            DisableMotion                   	= void DisableMotion()
Disable motion for the prop (userdata)
         }
         EnableMotion                    	= function: 0x002f3e58 (function)
         DisableMotion                   	= function: 0x002f3f70 (function)
      }
      CBaseAnimGraph                  	= table: 0x002ddcc8 (table)
      {
         metatable                       	= table: 0x00298c48 (table, already seen)
         IsNull                          	= function: 0x002ddd10 (function)
         FDesc                           	= table: 0x002ddd80 (table)
         {
            SetGraphParameterBool           	= void SetGraphParameterBool(string szName, bool bValue)
Set the specific param on or off (userdata)
            SetGraphParameterFloat          	= void SetGraphParameterFloat(string szName, float flValue)
Pass the float value to the specified param (userdata)
            SetGraphParameterInt            	= void SetGraphParameterInt(string szName, int nValue)
Pass the int value to the specified param (userdata)
            SetGraphParameterEnum           	= void SetGraphParameterEnum(string szName, int nValue)
Pass the enum (int) value to the specified param (userdata)
            SetGraphParameterVector         	= void SetGraphParameterVector(string szName, Vector vValue)
Pass the vector value to the specified param in the graph (userdata)
            SetGraphLookTarget              	= void SetGraphLookTarget(Vector vValue)
Pass the desired look target in world space to the graph (userdata)
            GetGraphParameter               	= table GetGraphParameter(string pszParam)
Get the value of the given animGraph parameter (userdata)
            SetGraphParameter               	= void SetGraphParameter(string pszParam, table svArg)
Set the specific param value, type is inferred from the type in script (userdata)
         }
         SetGraphParameter               	= function: 0x002dddc8 (function)
         SetGraphParameterBool           	= function: 0x002ddee8 (function)
         SetGraphParameterFloat          	= function: 0x002ddfa0 (function)
         SetGraphParameterInt            	= function: 0x002de148 (function)
         SetGraphParameterEnum           	= function: 0x002de1c8 (function)
         SetGraphParameterVector         	= function: 0x002de0e0 (function)
         SetGraphLookTarget              	= function: 0x002de3c0 (function)
         GetGraphParameter               	= function: 0x002de058 (function)
      }
      CLogicRelay                     	= table: 0x002f42c8 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002f4310 (function)
         FDesc                           	= table: 0x002f4380 (table)
         {
            Trigger                         	= void Trigger(handle hActivator, handle hCaller)
Trigger( hActivator, hCaller ) : Triggers the logic_relay (userdata)
         }
         Trigger                         	= function: 0x002f43c8 (function)
      }
      CInfoData                       	= table: 0x002f45e0 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002f4628 (function)
         QueryString                     	= function: 0x002f49e0 (function)
         QueryNumber                     	= function: 0x002f48a8 (function)
         QueryFloat                      	= function: 0x002f46e0 (function)
         QueryInt                        	= function: 0x002f47f8 (function)
         FDesc                           	= table: 0x002f4698 (table)
         {
            QueryString                     	= string QueryString(utlstringtoken tok, string pDefault)
Query string data for this key (userdata)
            QueryFloat                      	= float QueryFloat(utlstringtoken tok, float flDefault)
Query float data for this key (userdata)
            QueryInt                        	= int QueryInt(utlstringtoken tok, int nDefault)
Query int data for this key (userdata)
            QueryNumber                     	= float QueryNumber(utlstringtoken tok, float flDefault)
Query number data for this key (userdata)
            QueryColor                      	= Vector QueryColor(utlstringtoken tok, Vector vDefault)
Query color data for this key (userdata)
            QueryVector                     	= Vector QueryVector(utlstringtoken tok, Vector vDefault)
Query vector data for this key (userdata)
         }
         QueryColor                      	= function: 0x002f4a48 (function)
         QueryVector                     	= function: 0x002f4ac8 (function)
      }
      CMarkupVolumeTagged             	= table: 0x002de738 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002de780 (function)
         FDesc                           	= table: 0x002de7f0 (table)
         {
            HasTag                          	= bool HasTag(string pszTagName)
Does this volume have the given tag. (userdata)
         }
         HasTag                          	= function: 0x002de838 (function)
      }
      CLogicScript                    	= table: 0x002dea50 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002dea98 (function)
         FDesc                           	= table: 0x002deb08 (table)
         {
         }
      }
      CEnvEntityMaker                 	= table: 0x002dec80 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002decc8 (function)
         SpawnEntity                     	= function: 0x002ded80 (function)
         SpawnEntityAtEntityOrigin       	= function: 0x002dee98 (function)
         FDesc                           	= table: 0x002ded38 (table)
         {
            SpawnEntityAtEntityOrigin       	= void SpawnEntityAtEntityOrigin(handle hEntity)
Create an entity at the location of a specified entity instance (userdata)
            SpawnEntityAtNamedEntityOrigin  	= void SpawnEntityAtNamedEntityOrigin(string pszName)
Create an entity at the location of a named entity (userdata)
            SpawnEntityAtLocation           	= void SpawnEntityAtLocation(Vector vecAlternateOrigin, Vector vecAlternateAngles)
Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll) (userdata)
            SpawnEntity                     	= void SpawnEntity()
Create an entity at the location of the maker (userdata)
         }
         SpawnEntityAtLocation           	= function: 0x002df108 (function)
         SpawnEntityAtNamedEntityOrigin  	= function: 0x002def58 (function)
      }
      CScriptHeroList                 	= table: 0x00232b50 (table)
      {
         IsNull                          	= function: 0x00232b98 (function)
         GetHero                         	= function: 0x00232c50 (function)
         FDesc                           	= table: 0x00232c08 (table)
         {
            GetHero                         	= handle GetHero(int)
Get the Nth hero in the Hero List (userdata)
            GetHeroCount                    	= int GetHeroCount()
Returns the number of heroes in the world (userdata)
            GetAllHeroes                    	= table GetAllHeroes()
Returns all the heroes in the world (userdata)
         }
         GetHeroCount                    	= function: 0x00232d38 (function)
         GetAllHeroes                    	= function: 0x00232db8 (function)
      }
      CParticleSystem                 	= table: 0x002ba618 (table)
      {
         metatable                       	= table: 0x00298c48 (table, already seen)
         IsNull                          	= function: 0x002ba660 (function)
         FDesc                           	= table: 0x002ba6d0 (table)
         {
         }
      }
      CBasePlayerController           	= table: 0x002ba850 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002ba898 (function)
         FDesc                           	= table: 0x002ba908 (table)
         {
            GetPawn                         	= handle GetPawn()
GetPawn() : Returns the pawn for this controller (userdata)
         }
         GetPawn                         	= function: 0x002ba950 (function)
      }
      CDOTA_Modifier_Lua              	= table: 0x002394a8 (table, already seen)
      CDOTABaseGameMode               	= table: 0x002dfe40 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         SetOverrideSelectionEntity      	= function: 0x002e2280 (function)
         SetCanSellAnywhere              	= function: 0x002dff40 (function)
         AddItemToCustomShop             	= function: 0x002e0060 (function)
         RemoveItemFromCustomShop        	= function: 0x002e0118 (function)
         SetTPScrollSlotItemOverride     	= function: 0x002e02c8 (function)
         EnableAbilityUpgradeWhitelist   	= function: 0x002e0388 (function)
         AddAbilityUpgradeToWhitelist    	= function: 0x002e0260 (function)
         RemoveAbilityUpgradeFromWhitelist	= function: 0x002e0590 (function)
         IsAbilityUpgradeWhitelisted     	= function: 0x002e01d8 (function)
         GetAlwaysShowPlayerInventory    	= function: 0x002e07e0 (function)
         GetGoldSoundDisabled            	= function: 0x002e0448 (function)
         GetRecommendedItemsDisabled     	= function: 0x002e04c8 (function)
         GetStashPurchasingDisabled      	= function: 0x002e0aa8 (function)
         GetStickyItemDisabled           	= function: 0x002e0b68 (function)
         GetFogOfWarDisabled             	= function: 0x002e0c20 (function)
         GetCustomBuybackCostEnabled     	= function: 0x002e0cd8 (function)
         GetCustomBuybackCooldownEnabled 	= function: 0x002e0658 (function)
         IsBuybackEnabled                	= function: 0x002e0718 (function)
         GetAlwaysShowPlayerNames        	= function: 0x002e08a0 (function)
         GetCameraDistanceOverride       	= function: 0x002e0960 (function)
         SetTopBarTeamValuesOverride     	= function: 0x002e13a8 (function)
         GetTopBarTeamValuesOverride     	= function: 0x002e1468 (function)
         IsNull                          	= function: 0x002dfe88 (function)
         GetTopBarTeamValuesVisible      	= function: 0x002e15e8 (function)
         SetTopBarTeamValue              	= function: 0x002e16a8 (function)
         GetUseCustomHeroLevels          	= function: 0x002e1760 (function)
         GetCustomHeroMaxLevel           	= function: 0x002e1818 (function)
         GetTowerBackdoorProtectionEnabled	= function: 0x002e18d0 (function)
         GetAnnouncerDisabled            	= function: 0x002e1998 (function)
         GetAnnouncerGameModeAnnounceDisabled	= function: 0x002e1a50 (function)
         GetFixedRespawnTime             	= function: 0x002e1b18 (function)
         SetRespawnTimeScale             	= function: 0x002e1bd0 (function)
         GetRespawnTimeScale             	= function: 0x002e0d98 (function)
         GetMinimumAttackSpeed           	= function: 0x002e0e50 (function)
         GetMaximumAttackSpeed           	= function: 0x002e0f08 (function)
         IsDaynightCycleDisabled         	= function: 0x002e0fc0 (function)
         GetDaynightCycleAdvanceRate     	= function: 0x002e10e0 (function)
         ShouldGiveFreeTPOnDeath         	= function: 0x002e11a0 (function)
         SetDaynightCycleDisabled        	= function: 0x002e1258 (function)
         SetDaynightCycleAdvanceRate     	= function: 0x002e1318 (function)
         SetGiveFreeTPOnDeath            	= function: 0x002e2898 (function)
         AreWeatherEffectsDisabled       	= function: 0x002e2950 (function)
         SetWeatherEffectsDisabled       	= function: 0x002e2a10 (function)
         GetHUDVisible                   	= function: 0x002e2ad0 (function)
         GetCustomAttributeDerivedStatValue	= function: 0x002e2b50 (function)
         GetCustomScanCooldown           	= function: 0x002e2c18 (function)
         GetCustomGlyphCooldown          	= function: 0x002e2cd0 (function)
         GetCustomBackpackSwapCooldown   	= function: 0x002e2d88 (function)
         GetCustomBackpackCooldownPercent	= function: 0x002e2e48 (function)
         SetDefaultStickyItem            	= function: 0x002e2f10 (function)
         GetWaterRuneLastSpawnTime       	= function: 0x002e2fc8 (function)
         SetWaterRuneLastSpawnTime       	= function: 0x002e3088 (function)
         GetCustomRadiantScore           	= function: 0x002e3148 (function)
         GetCustomDireScore              	= function: 0x002e3200 (function)
         SetLuaGameMode                  	= function: 0x002e32b8 (function)
         SetAlwaysShowPlayerInventory    	= function: 0x002e3368 (function)
         SetGoldSoundDisabled            	= function: 0x002e3428 (function)
         SetRecommendedItemsDisabled     	= function: 0x002e34e0 (function)
         SetStashPurchasingDisabled      	= function: 0x002e35a0 (function)
         SetStickyItemDisabled           	= function: 0x002e3660 (function)
         SetFogOfWarDisabled             	= function: 0x002e3718 (function)
         SetUnseenFogOfWarEnabled        	= function: 0x002e37d0 (function)
         SetForceRightClickAttackDisabled	= function: 0x002e3890 (function)
         SetCameraZRange                 	= function: 0x002e3958 (function)
         DisableClumpingBehaviorByDefault	= function: 0x002e1c88 (function)
         AllocateFowBlockerRegion        	= function: 0x002e1d50 (function)
         SetCustomBuybackCostEnabled     	= function: 0x002e1e10 (function)
         SetCustomBuybackCooldownEnabled 	= function: 0x002e1ed0 (function)
         SetUseTurboCouriers             	= function: 0x002e1f90 (function)
         SetBuybackEnabled               	= function: 0x002e2048 (function)
         SetCameraDistanceOverride       	= function: 0x002e2100 (function)
         SetCameraSmoothCountOverride    	= function: 0x002e21c0 (function)
         SetAlwaysShowPlayerNames        	= function: 0x002e2300 (function)
         SetUseCustomHeroLevels          	= function: 0x002e23c0 (function)
         SetCustomHeroMaxLevel           	= function: 0x002e2478 (function)
         SetCustomXPRequiredToReachNextLevel	= function: 0x002e2530 (function)
         SetPauseEnabled                 	= function: 0x002e25f8 (function)
         SetFreeCourierModeEnabled       	= function: 0x002e26a8 (function)
         SetAllowNeutralItemDrops        	= function: 0x002e2768 (function)
         SetDraftingBanningTimeOverride  	= function: 0x002e51d8 (function)
         SetDraftingHeroPickSelectTimeOverride	= function: 0x002e5298 (function)
         SetRuneEnabled                  	= function: 0x002e5360 (function)
         DisableHudFlip                  	= function: 0x002e53e0 (function)
         SetFriendlyBuildingMoveToEnabled	= function: 0x002e5490 (function)
         SetDeathOverlayDisabled         	= function: 0x002e5558 (function)
         SetHudCombatEventsDisabled      	= function: 0x002e5610 (function)
         SetRemoveIllusionsOnDeath       	= function: 0x002e56d0 (function)
         SetForcedHUDSkin                	= function: 0x002e5790 (function)
         SetRandomHeroBonusItemGrantDisabled	= function: 0x002e5848 (function)
         SetLoseGoldOnDeath              	= function: 0x002e5910 (function)
         SetKillableTombstones           	= function: 0x002e59c8 (function)
         SetCustomScanMaxCharges         	= function: 0x002e5a80 (function)
         SetCustomScanCooldown           	= function: 0x002e5b38 (function)
         SetCustomGlyphCooldown          	= function: 0x002e5bf0 (function)
         SetCustomBackpackCooldownPercent	= function: 0x002e5ca8 (function)
         SetSelectionGoldPenaltyEnabled  	= function: 0x002e5d70 (function)
         SetTowerBackdoorProtectionEnabled	= function: 0x002e5e30 (function)
         SetBotThinkingEnabled           	= function: 0x002e5ef8 (function)
         SetBotsInLateGame               	= function: 0x002e5fb0 (function)
         SetBotsMaxPushTier              	= function: 0x002e6068 (function)
         SetBotsAlwaysPushWithHuman      	= function: 0x002e6120 (function)
         SetCustomGameForceHero          	= function: 0x002e61e0 (function)
         SetAnnouncerDisabled            	= function: 0x002e6298 (function)
         SetAnnouncerGameModeAnnounceDisabled	= function: 0x002e6350 (function)
         SetDeathTipsDisabled            	= function: 0x002e6418 (function)
         SetKillingSpreeAnnouncerDisabled	= function: 0x002e64d0 (function)
         SetPlayerHeroAvailabilityFiltered	= function: 0x002e6598 (function)
         SetFixedRespawnTime             	= function: 0x002e6660 (function)
         SetFountainPercentageHealthRegen	= function: 0x002e6718 (function)
         SetFountainPercentageManaRegen  	= function: 0x002e67e0 (function)
         SetFountainConstantManaRegen    	= function: 0x002e68a0 (function)
         SetHUDVisible                   	= function: 0x002e6960 (function)
         SetMinimumAttackSpeed           	= function: 0x002e6a10 (function)
         SetMaximumAttackSpeed           	= function: 0x002e6ac8 (function)
         SetCustomBackpackSwapCooldown   	= function: 0x002e6b80 (function)
         SetCustomAttributeDerivedStatValue	= function: 0x002e6c40 (function)
         SetUseDefaultDOTARuneSpawnLogic 	= function: 0x002e6d08 (function)
         SetPowerRuneSpawnInterval       	= function: 0x002e6dc8 (function)
         SetBountyRuneSpawnInterval      	= function: 0x002e6e88 (function)
         SetXPRuneSpawnInterval          	= function: 0x002e6f48 (function)
         SetTrackingProjectileFilter     	= function: 0x002e7000 (function)
         ClearTrackingProjectileFilter   	= function: 0x002e70c0 (function)
         SetRuneSpawnFilter              	= function: 0x002e7180 (function)
         ClearRuneSpawnFilter            	= function: 0x002e7238 (function)
         SetExecuteOrderFilter           	= function: 0x002e72f0 (function)
         ClearExecuteOrderFilter         	= function: 0x002e73a8 (function)
         SetDamageFilter                 	= function: 0x002e7460 (function)
         ClearDamageFilter               	= function: 0x002e3a08 (function)
         SetHealingFilter                	= function: 0x002e3ac0 (function)
         ClearHealingFilter              	= function: 0x002e3b78 (function)
         SetBountyRunePickupFilter       	= function: 0x002e3c30 (function)
         ClearBountyRunePickupFilter     	= function: 0x002e3cf0 (function)
         SetModifyGoldFilter             	= function: 0x002e3db0 (function)
         ClearModifyGoldFilter           	= function: 0x002e3e68 (function)
         SetModifyExperienceFilter       	= function: 0x002e3f20 (function)
         ClearModifyExperienceFilter     	= function: 0x002e3fe0 (function)
         SetAbilityTuningValueFilter     	= function: 0x002e40a0 (function)
         SetModifierGainedFilter         	= function: 0x002e4160 (function)
         ClearModifierGainedFilter       	= function: 0x002e4218 (function)
         SetItemAddedToInventoryFilter   	= function: 0x002e42d8 (function)
         ClearItemAddedToInventoryFilter 	= function: 0x002e4398 (function)
         SetCustomTerrainWeatherEffect   	= function: 0x002e4458 (function)
         ListenForQueryProgressChanged   	= function: 0x002e4518 (function)
         ListenForQueryFailed            	= function: 0x002e45d8 (function)
         ListenForQuerySucceeded         	= function: 0x002e4690 (function)
         AddRealTimeCombatAnalyzerQuery  	= function: 0x002e4748 (function)
         RemoveRealTimeCombatAnalyzerQuery	= function: 0x002e4808 (function)
         SetNeutralStashEnabled          	= function: 0x002e48d0 (function)
         SetSendToStashEnabled           	= function: 0x002e4988 (function)
         SetNeutralStashTeamViewOnlyEnabled	= function: 0x002e4a40 (function)
         SetNeutralItemHideUndiscoveredEnabled	= function: 0x002e4b08 (function)
         GetEventGameSeed                	= function: 0x002e4bd0 (function)
         GetEventWindowStartTime         	= function: 0x002e4c88 (function)
         SetCustomRadiantScore           	= function: 0x002e4d40 (function)
         FDesc                           	= table: 0x002dfef8 (table)
         {
            SetOverrideSelectionEntity      	= void SetOverrideSelectionEntity(handle hOverrideEntity)
Set an override for the default selection entity, instead of each player's hero. (userdata)
            SetCanSellAnywhere              	= void SetCanSellAnywhere(bool bAllow)
bool bAllow (userdata)
            AddItemToCustomShop             	= void AddItemToCustomShop(string pszItemName, string pszShopName, string pszCategory)
( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop. (userdata)
            RemoveItemFromCustomShop        	= void RemoveItemFromCustomShop(string pszItemName, string pszShopName)
( pszItem, pszShop ) Remove an item to purchase at a custom shop. (userdata)
            SetTPScrollSlotItemOverride     	= void SetTPScrollSlotItemOverride(string pItemName)
Sets the item which goes in the TP scroll slot (userdata)
            EnableAbilityUpgradeWhitelist   	= void EnableAbilityUpgradeWhitelist(bool bEnabled)
bool bEnabled (userdata)
            AddAbilityUpgradeToWhitelist    	= void AddAbilityUpgradeToWhitelist(string pszAbilityName)
const char* pszAbilityName (userdata)
            RemoveAbilityUpgradeFromWhitelist	= void RemoveAbilityUpgradeFromWhitelist(string pszAbilityName)
const char* pszAbilityName (userdata)
            IsAbilityUpgradeWhitelisted     	= bool IsAbilityUpgradeWhitelisted(string pszAbilityName)
const char* pszAbilityName (userdata)
            GetAlwaysShowPlayerInventory    	= bool GetAlwaysShowPlayerInventory()
Show the player hero's inventory in the HUD, regardless of what unit is selected. (userdata)
            GetGoldSoundDisabled            	= bool GetGoldSoundDisabled()
Turn the sound when gold is acquired off/on. (userdata)
            GetRecommendedItemsDisabled     	= bool GetRecommendedItemsDisabled()
Turn the panel for showing recommended items at the shop off/on. (userdata)
            GetStashPurchasingDisabled      	= bool GetStashPurchasingDisabled()
Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items. (userdata)
            GetStickyItemDisabled           	= bool GetStickyItemDisabled()
Hide the sticky item in the quickbuy. (userdata)
            GetFogOfWarDisabled             	= bool GetFogOfWarDisabled()
Turn the fog of war on or off. (userdata)
            GetCustomBuybackCostEnabled     	= bool GetCustomBuybackCostEnabled()
Turns on capability to define custom buyback costs. (userdata)
            GetCustomBuybackCooldownEnabled 	= bool GetCustomBuybackCooldownEnabled()
Turns on capability to define custom buyback cooldowns. (userdata)
            IsBuybackEnabled                	= bool IsBuybackEnabled()
Enables or disables buyback completely. (userdata)
            GetAlwaysShowPlayerNames        	= bool GetAlwaysShowPlayerNames()
Get whether player names are always shown, regardless of client setting. (userdata)
            GetCameraDistanceOverride       	= float GetCameraDistanceOverride()
Set a different camera distance; dota default is 1134. (userdata)
            SetTopBarTeamValuesOverride     	= void SetTopBarTeamValuesOverride(bool bOverride)
Override the values of the team values on the top game bar. (userdata)
            GetTopBarTeamValuesOverride     	= bool GetTopBarTeamValuesOverride()
Override the values of the team values on the top game bar. (userdata)
            SetTopBarTeamValuesVisible      	= void SetTopBarTeamValuesVisible(bool bVisible)
Turning on/off the team values on the top game bar. (userdata)
            GetTopBarTeamValuesVisible      	= bool GetTopBarTeamValuesVisible()
Turning on/off the team values on the top game bar. (userdata)
            SetTopBarTeamValue              	= void SetTopBarTeamValue(int iTeam, int nValue)
Set the team values on the top game bar. (userdata)
            GetUseCustomHeroLevels          	= bool GetUseCustomHeroLevels()
Are custom-defined XP values for hero level ups in use? (userdata)
            GetCustomHeroMaxLevel           	= int GetCustomHeroMaxLevel()
Allows definition of the max level heroes can achieve (default is 25). (userdata)
            GetTowerBackdoorProtectionEnabled	= bool GetTowerBackdoorProtectionEnabled()
Gets whether tower backdoor protection is enabled or not. (userdata)
            GetAnnouncerDisabled            	= bool GetAnnouncerDisabled()
Are in-game announcers disabled? (userdata)
            GetAnnouncerGameModeAnnounceDisabled	= bool GetAnnouncerGameModeAnnounceDisabled()
Is the announcer announcing the mode / saying Choose Your Hero on start of custom games disabled? (userdata)
            GetFixedRespawnTime             	= float GetFixedRespawnTime()
Gets the fixed respawn time. (userdata)
            SetRespawnTimeScale             	= void SetRespawnTimeScale(float flValue)
Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations. (userdata)
            GetRespawnTimeScale             	= float GetRespawnTimeScale()
Returns the scale applied to non-fixed respawn times. (userdata)
            GetMinimumAttackSpeed           	= int GetMinimumAttackSpeed()
Get the minimum attack speed for units. (userdata)
            GetMaximumAttackSpeed           	= int GetMaximumAttackSpeed()
Get the maximum attack speed for units. (userdata)
            IsDaynightCycleDisabled         	= bool IsDaynightCycleDisabled()
Is the day/night cycle disabled? (userdata)
            GetDaynightCycleAdvanceRate     	= float GetDaynightCycleAdvanceRate()
Get the rate at which the day/night cycle advances (1.0 = default). (userdata)
            ShouldGiveFreeTPOnDeath         	= bool ShouldGiveFreeTPOnDeath()
 (userdata)
            SetDaynightCycleDisabled        	= void SetDaynightCycleDisabled(bool bDisable)
Enable or disable the day/night cycle. (userdata)
            SetDaynightCycleAdvanceRate     	= void SetDaynightCycleAdvanceRate(float flRate)
Sets the rate at which the day/night cycle advances (1.0 = default). (userdata)
            SetGiveFreeTPOnDeath            	= void SetGiveFreeTPOnDeath(bool bGive)
bool bGive (userdata)
            AreWeatherEffectsDisabled       	= bool AreWeatherEffectsDisabled()
Get if weather effects are disabled on the client. (userdata)
            SetWeatherEffectsDisabled       	= void SetWeatherEffectsDisabled(bool bDisable)
Set if weather effects are disabled. (userdata)
            GetHUDVisible                   	= bool GetHUDVisible(int iElement)
Returns the HUD element visibility. (userdata)
            GetCustomAttributeDerivedStatValue	= float GetCustomAttributeDerivedStatValue(int nDerivedStatType)
Get current derived stat value constant. (userdata)
            GetCustomScanCooldown           	= float GetCustomScanCooldown()
Get the current custom scan cooldown. (userdata)
            GetCustomGlyphCooldown          	= float GetCustomGlyphCooldown()
Get the current custom glyph cooldown. (userdata)
            GetCustomBackpackSwapCooldown   	= float GetCustomBackpackSwapCooldown()
Get the current custom backpack swap cooldown. (userdata)
            GetCustomBackpackCooldownPercent	= float GetCustomBackpackCooldownPercent()
Get the current rate cooldown ticks down for items in the backpack. (userdata)
            SetDefaultStickyItem            	= void SetDefaultStickyItem(string pItem)
Sets the default sticky item in the quickbuy (userdata)
            GetWaterRuneLastSpawnTime       	= float GetWaterRuneLastSpawnTime()
Gets the time from game start during which water runes spawn (userdata)
            SetWaterRuneLastSpawnTime       	= void SetWaterRuneLastSpawnTime(float flValue)
Sets the time from game start during which water runes spawn (userdata)
            GetCustomRadiantScore           	= int GetCustomRadiantScore()
Get the topbar score display value for radiant. (userdata)
            GetCustomDireScore              	= int GetCustomDireScore()
Get the topbar score display value for dire. (userdata)
            SetLuaGameMode                  	= void SetLuaGameMode(handle hScript)
 (userdata)
            SetAlwaysShowPlayerInventory    	= void SetAlwaysShowPlayerInventory(bool bAlwaysShow)
Show the player hero's inventory in the HUD, regardless of what unit is selected. (userdata)
            SetGoldSoundDisabled            	= void SetGoldSoundDisabled(bool bDisabled)
Turn the sound when gold is acquired off/on. (userdata)
            SetRecommendedItemsDisabled     	= void SetRecommendedItemsDisabled(bool bDisabled)
Turn the panel for showing recommended items at the shop off/on. (userdata)
            SetStashPurchasingDisabled      	= void SetStashPurchasingDisabled(bool bDisabled)
Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items. (userdata)
            SetStickyItemDisabled           	= void SetStickyItemDisabled(bool bDisabled)
Hide the sticky item in the quickbuy. (userdata)
            SetFogOfWarDisabled             	= void SetFogOfWarDisabled(bool bDisabled)
Turn the fog of war on or off. (userdata)
            SetUnseenFogOfWarEnabled        	= void SetUnseenFogOfWarEnabled(bool bEnabled)
Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war. (userdata)
            SetForceRightClickAttackDisabled	= void SetForceRightClickAttackDisabled(bool bDisabled)
Prevent users from using the right click deny setting. (userdata)
            SetCameraZRange                 	= void SetCameraZRange(float flMinZ, float flMaxZ)
Sets the camera Z range (userdata)
            DisableClumpingBehaviorByDefault	= void DisableClumpingBehaviorByDefault(bool bDisabled)
Disable npc_dota_creature clumping behavior by default. (userdata)
            AllocateFowBlockerRegion        	= handle AllocateFowBlockerRegion(float flMinX, float flMinY, float flMaxX, float flMaxY, float flGridSize)
Allocates an entity which can be used by custom games to control FoW occlusion volumes (userdata)
            SetCustomBuybackCostEnabled     	= void SetCustomBuybackCostEnabled(bool bEnabled)
Turns on capability to define custom buyback costs. (userdata)
            SetCustomBuybackCooldownEnabled 	= void SetCustomBuybackCooldownEnabled(bool bEnabled)
Turns on capability to define custom buyback cooldowns. (userdata)
            SetUseTurboCouriers             	= void SetUseTurboCouriers(bool bEnabled)
Enables or disables turbo couriers. (userdata)
            SetBuybackEnabled               	= void SetBuybackEnabled(bool bEnabled)
Enables or disables buyback completely. (userdata)
            SetCameraDistanceOverride       	= void SetCameraDistanceOverride(float flCameraDistanceOverride)
Set a different camera distance; dota default is 1134. (userdata)
            SetCameraSmoothCountOverride    	= void SetCameraSmoothCountOverride(int nSmoothCount)
Set a different camera smooth count; dota default is 8. (userdata)
            SetAlwaysShowPlayerNames        	= void SetAlwaysShowPlayerNames(bool bEnabled)
Set whether player names are always shown, regardless of client setting. (userdata)
            SetUseCustomHeroLevels          	= void SetUseCustomHeroLevels(bool bEnabled)
Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on. (userdata)
            SetCustomHeroMaxLevel           	= void SetCustomHeroMaxLevel(int)
Allows definition of the max level heroes can achieve (default is 25). (userdata)
            SetCustomXPRequiredToReachNextLevel	= void SetCustomXPRequiredToReachNextLevel(handle hTable)
Allows definition of a table of hero XP values. (userdata)
            SetPauseEnabled                 	= void SetPauseEnabled(bool bEnabled)
Set pausing enabled/disabled (userdata)
            SetFreeCourierModeEnabled       	= void SetFreeCourierModeEnabled(bool bEnabled)
If set to true, enable 7.23 free courier mode. (userdata)
            SetAllowNeutralItemDrops        	= void SetAllowNeutralItemDrops(bool bEnabled)
If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped. (userdata)
            SetDraftingBanningTimeOverride  	= void SetDraftingBanningTimeOverride(float flValue)
Set drafting hero banning time (userdata)
            SetDraftingHeroPickSelectTimeOverride	= void SetDraftingHeroPickSelectTimeOverride(float flValue)
Set drafting hero pick time (userdata)
            SetRuneEnabled                  	= void SetRuneEnabled(int nRune, bool bEnabled)
Set if a given type of rune is enabled. (userdata)
            DisableHudFlip                  	= void DisableHudFlip(bool bDisable)
Use to disable hud flip for this mod (userdata)
            SetFriendlyBuildingMoveToEnabled	= void SetFriendlyBuildingMoveToEnabled(bool bEnabled)
Allows clicks on friendly buildings to be handled normally. (userdata)
            SetDeathOverlayDisabled         	= void SetDeathOverlayDisabled(bool bDisabled)
Specify whether the full screen death overlay effect plays when the selected hero dies. (userdata)
            SetHudCombatEventsDisabled      	= void SetHudCombatEventsDisabled(bool bDisabled)
Specify whether the default combat events will show in the HUD. (userdata)
            SetRemoveIllusionsOnDeath       	= void SetRemoveIllusionsOnDeath(bool bRemove)
Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds. (userdata)
            SetForcedHUDSkin                	= void SetForcedHUDSkin(string pValue)
Specify a HUD skin that is forced on for this game mode. (userdata)
            SetRandomHeroBonusItemGrantDisabled	= void SetRandomHeroBonusItemGrantDisabled(bool bDisabled)
Disables bonus items for randoming a hero. (userdata)
            SetLoseGoldOnDeath              	= void SetLoseGoldOnDeath(bool bEnabled)
Use to disable gold loss on death. (userdata)
            SetKillableTombstones           	= void SetKillableTombstones(bool bEnabled)
Set whether tombstones can be channeled to be removed by enemy heroes. (userdata)
            SetCustomScanMaxCharges         	= void SetCustomScanMaxCharges(int iMaxCharges)
Set a custom max charges for team Scan ability. (userdata)
            SetCustomScanCooldown           	= void SetCustomScanCooldown(float flCooldown)
Set a custom cooldown for team Scan ability. (userdata)
            SetCustomGlyphCooldown          	= void SetCustomGlyphCooldown(float flCooldown)
Set a custom cooldown for team Glyph ability. (userdata)
            SetCustomBackpackCooldownPercent	= void SetCustomBackpackCooldownPercent(float flPercent)
Set the rate cooldown ticks down for items in the backpack. (userdata)
            SetSelectionGoldPenaltyEnabled  	= void SetSelectionGoldPenaltyEnabled(bool bEnabled)
Enable/disable gold penalty for late picking. (userdata)
            SetTowerBackdoorProtectionEnabled	= void SetTowerBackdoorProtectionEnabled(bool bEnabled)
Enables/Disables tower backdoor protection. (userdata)
            SetBotThinkingEnabled           	= void SetBotThinkingEnabled(bool bEnabled)
Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map. (userdata)
            SetBotsInLateGame               	= void SetBotsInLateGame(bool bLateGame)
Set if bots should enable their late game behavior. (userdata)
            SetBotsMaxPushTier              	= void SetBotsMaxPushTier(int nMaxTier)
Set the max tier of tower that bots want to push. (-1 to disable) (userdata)
            SetBotsAlwaysPushWithHuman      	= void SetBotsAlwaysPushWithHuman(bool bAlwaysPush)
Set if the bots should try their best to push with a human player. (userdata)
            SetCustomGameForceHero          	= void SetCustomGameForceHero(string pHeroName)
Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection. (userdata)
            SetAnnouncerDisabled            	= void SetAnnouncerDisabled(bool bDisabled)
Mutes the in-game announcer. (userdata)
            SetAnnouncerGameModeAnnounceDisabled	= void SetAnnouncerGameModeAnnounceDisabled(bool bDisabled)
Disables the announcer announcing the mode / saying Choose Your Hero on start of custom games. (userdata)
            SetDeathTipsDisabled            	= void SetDeathTipsDisabled(bool bDisabled)
Disables chat tips on death. (userdata)
            SetKillingSpreeAnnouncerDisabled	= void SetKillingSpreeAnnouncerDisabled(bool bDisabled)
Mutes the in-game killing spree announcer. (userdata)
            SetPlayerHeroAvailabilityFiltered	= void SetPlayerHeroAvailabilityFiltered(bool bFilter)
bool bFilter (userdata)
            SetFixedRespawnTime             	= void SetFixedRespawnTime(float flFixedRespawnTime)
Set a fixed delay for all players to respawn after. (userdata)
            SetFountainPercentageHealthRegen	= void SetFountainPercentageHealthRegen(float flPercentageHealthRegen)
Set the percentage rate that the fountain will regen health. (-1 for default) (userdata)
            SetFountainPercentageManaRegen  	= void SetFountainPercentageManaRegen(float flPercentageManaRegen)
Set the percentage rate that the fountain will regen mana. (-1 for default) (userdata)
            SetFountainConstantManaRegen    	= void SetFountainConstantManaRegen(float flConstantManaRegen)
Set the constant rate that the fountain will regen mana. (-1 for default) (userdata)
            SetHUDVisible                   	= void SetHUDVisible(int iHUDElement, bool bVisible)
Set the HUD element visibility. (userdata)
            SetMinimumAttackSpeed           	= void SetMinimumAttackSpeed(int nMinSpeed)
Set the minimum attack speed for units. (userdata)
            SetMaximumAttackSpeed           	= void SetMaximumAttackSpeed(int nMaxSpeed)
Set the maximum attack speed for units. (userdata)
            SetCustomBackpackSwapCooldown   	= void SetCustomBackpackSwapCooldown(float flCooldown)
Set a custom cooldown for swapping items into the backpack. (userdata)
            SetCustomAttributeDerivedStatValue	= void SetCustomAttributeDerivedStatValue(int nStatType, float flNewValue)
Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue. (userdata)
            SetUseDefaultDOTARuneSpawnLogic 	= void SetUseDefaultDOTARuneSpawnLogic(bool bEnabled)
If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals. (userdata)
            SetPowerRuneSpawnInterval       	= void SetPowerRuneSpawnInterval(float flInterval)
Set power rune spawn rate (userdata)
            SetBountyRuneSpawnInterval      	= void SetBountyRuneSpawnInterval(float flInterval)
Set bounty rune spawn rate (userdata)
            SetXPRuneSpawnInterval          	= void SetXPRuneSpawnInterval(float flInterval)
Set xp rune spawn rate (userdata)
            SetTrackingProjectileFilter     	= void SetTrackingProjectileFilter(handle hFunction, handle hContext)
Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearTrackingProjectileFilter   	= void ClearTrackingProjectileFilter()
Clear the script filter that controls when tracking projectiles are launched. (userdata)
            SetRuneSpawnFilter              	= void SetRuneSpawnFilter(handle hFunction, handle hContext)
Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearRuneSpawnFilter            	= void ClearRuneSpawnFilter()
Clear the script filter that controls what rune spawns. (userdata)
            SetExecuteOrderFilter           	= void SetExecuteOrderFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearExecuteOrderFilter         	= void ClearExecuteOrderFilter()
Clear the script filter that controls when a unit picks up an item. (userdata)
            SetDamageFilter                 	= void SetDamageFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearDamageFilter               	= void ClearDamageFilter()
Clear the script filter that controls how a unit takes damage. (userdata)
            SetHealingFilter                	= void SetHealingFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearHealingFilter              	= void ClearHealingFilter()
Clear the script filter that controls how a unit heals. (userdata)
            SetBountyRunePickupFilter       	= void SetBountyRunePickupFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearBountyRunePickupFilter     	= void ClearBountyRunePickupFilter()
Clear the script filter that controls bounty rune pickup behavior. (userdata)
            SetModifyGoldFilter             	= void SetModifyGoldFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearModifyGoldFilter           	= void ClearModifyGoldFilter()
Clear the script filter that controls how hero gold is modified. (userdata)
            SetModifyExperienceFilter       	= void SetModifyExperienceFilter(handle hFunction, handle hContext)
Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event) (userdata)
            ClearModifyExperienceFilter     	= void ClearModifyExperienceFilter()
Clear the script filter that controls how hero experience is modified. (userdata)
            SetAbilityTuningValueFilter     	= void SetAbilityTuningValueFilter(handle hFunction, handle hContext)
Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values) (userdata)
            SetModifierGainedFilter         	= void SetModifierGainedFilter(handle hFunction, handle hContext)
Set a filter function to control modifiers that are gained, return false to destroy modifier. (userdata)
            ClearModifierGainedFilter       	= void ClearModifierGainedFilter()
Clear the script filter that controls the modifier filter. (userdata)
            SetItemAddedToInventoryFilter   	= void SetItemAddedToInventoryFilter(handle hFunction, handle hContext)
Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event (userdata)
            ClearItemAddedToInventoryFilter 	= void ClearItemAddedToInventoryFilter()
Clear the script filter that controls the item added to inventory filter. (userdata)
            SetCustomTerrainWeatherEffect   	= void SetCustomTerrainWeatherEffect(string pszEffectName)
Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode. (userdata)
            ListenForQueryProgressChanged   	= void ListenForQueryProgressChanged(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query progress changed. (userdata)
            ListenForQueryFailed            	= void ListenForQueryFailed(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query failed. (userdata)
            ListenForQuerySucceeded         	= void ListenForQuerySucceeded(handle hFunction, handle hContext)
Set function and context for real time combat analyzer query succeeded. (userdata)
            AddRealTimeCombatAnalyzerQuery  	= int AddRealTimeCombatAnalyzerQuery(handle hQueryTable, handle hPlayer, string pszQueryName)
Begin tracking a sequence of events using the real time combat analyzer. (userdata)
            RemoveRealTimeCombatAnalyzerQuery	= void RemoveRealTimeCombatAnalyzerQuery(int nQueryID)
Stop tracking a combat analyzer query. (userdata)
            SetNeutralStashEnabled          	= void SetNeutralStashEnabled(bool bEnable)
Allow items to be sent to the neutral stash. (userdata)
            SetSendToStashEnabled           	= void SetSendToStashEnabled(bool bEnable)
Allow items to be sent to the stash. (userdata)
            SetNeutralStashTeamViewOnlyEnabled	= void SetNeutralStashTeamViewOnlyEnabled(bool bEnable)
When enabled, the all neutral items tab cannot be viewed. (userdata)
            SetNeutralItemHideUndiscoveredEnabled	= void SetNeutralItemHideUndiscoveredEnabled(bool bEnable)
When enabled, undiscovered items in the neutral item stash are hidden. (userdata)
            GetEventGameSeed                	= int GetEventGameSeed()
Get the Game Seed passed from the GC. (userdata)
            GetEventWindowStartTime         	= unsigned GetEventWindowStartTime()
Get the Event Window Start Time passed from the GC. (userdata)
            SetCustomRadiantScore           	= void SetCustomRadiantScore(int nScore)
Sets the topbar score display value for radiant. (userdata)
            SetInnateMeleeDamageBlockPerLevelAmount	= void SetInnateMeleeDamageBlockPerLevelAmount(int nPerLevelAmount)
Set the amount innately blocked by melee heroes gained per level. (userdata)
            SetInnateMeleeDamageBlockAmount 	= void SetInnateMeleeDamageBlockAmount(int nAmount)
Set the amount blocked innately by melee heroes. (userdata)
            SetInnateMeleeDamageBlockPercent	= void SetInnateMeleeDamageBlockPercent(int nPercent)
Set the percent chance a melee hero will innately block damage. (userdata)
            SetCustomDireScore              	= void SetCustomDireScore(int nScore)
Sets the topbar score display value for dire. (userdata)
         }
         SetInnateMeleeDamageBlockPerLevelAmount	= function: 0x002e5038 (function)
         SetInnateMeleeDamageBlockAmount 	= function: 0x002e4f78 (function)
         SetInnateMeleeDamageBlockPercent	= function: 0x002e4eb0 (function)
         SetCustomDireScore              	= function: 0x002e4df8 (function)
         SetTopBarTeamValuesVisible      	= function: 0x002e1528 (function)
      }
      CBasePlayerPawn                 	= table: 0x002d21a0 (table)
      {
         metatable = table: 0x0029b5a8
         {
            IsNull                          	= function: 0x0029b5f0 (function)
            FDesc                           	= table: 0x0029b660 (table)
            {
            }
            IsNull                          	= function: 0x0029b088 (function)
            GetCurrentScene                 	= function: 0x0029b258 (function)
            GetSceneByIndex                 	= function: 0x0029b308 (function)
            FDesc                           	= table: 0x0029b0f8 (table, already seen)
            ScriptPlayScene                 	= function: 0x0029b140 (function)
            IsNull                          	= function: 0x0029a400 (function)
            IsSequenceFinished              	= function: 0x0029a8a8 (function)
            GetSequence                     	= function: 0x0029a7c0 (function)
            SetSequence                     	= function: 0x0029aa98 (function)
            ResetSequence                   	= function: 0x0029a738 (function)
            FDesc                           	= table: 0x0029a470 (table, already seen)
            SequenceDuration                	= function: 0x0029a960 (function)
            ActiveSequenceDuration          	= function: 0x0029acd0 (function)
            GetCycle                        	= function: 0x0029a828 (function)
            SetPoseParameter                	= function: 0x0029a4b8 (function)
            StopAnimation                   	= function: 0x0029a5d8 (function)
            SetCycle                        	= function: 0x0029a688 (function)
            IsNull                          	= function: 0x00298c90 (function)
            SetMaterialGroup                	= function: 0x00299950 (function)
            FDesc                           	= table: 0x00298d00 (table, already seen)
            GetModelScale                   	= function: 0x00298d48 (function)
            SetModelScale                   	= function: 0x00298e30 (function)
            ScriptLookupAttachment          	= function: 0x00298ee0 (function)
            GetAttachmentOrigin             	= function: 0x00299088 (function)
            GetAttachmentAngles             	= function: 0x00299108 (function)
            GetAttachmentForward            	= function: 0x00299020 (function)
            SetSize                         	= function: 0x00299300 (function)
            SetModel                        	= function: 0x00298f98 (function)
            GetRenderAlpha                  	= function: 0x00299508 (function)
            SetRenderAlpha                  	= function: 0x002991c0 (function)
            SetRenderMode                   	= function: 0x00299740 (function)
            SetRenderColor                  	= function: 0x002997f0 (function)
            GetRenderColor                  	= function: 0x002998a0 (function)
            SetMaterialGroupHash            	= function: 0x002999d0 (function)
            GetMaterialGroupHash            	= function: 0x00299380 (function)
            SetSingleMeshGroup              	= function: 0x00299438 (function)
            SetMaterialGroupMask            	= function: 0x002995b8 (function)
            GetMaterialGroupMask            	= function: 0x00299670 (function)
            SetBodygroup                    	= function: 0x0029a098 (function)
            SetBodygroupByName              	= function: 0x0029a148 (function)
            SetSkin                         	= function: 0x0029a200 (function)
            GetChildren                     	= function: 0x0023f1f0 (function)
            SetParent                       	= function: 0x0023f2a0 (function)
            SetConstraint                   	= function: 0x0023f350 (function)
            EyePosition                     	= function: 0x0023f400 (function)
            SetAngles                       	= function: 0x0023ed80 (function)
            SetAbsAngles                    	= function: 0x0023ee30 (function)
            GetAnglesAsVector               	= function: 0x0023efb8 (function)
            EyeAngles                       	= function: 0x0023f070 (function)
            SetOrigin                       	= function: 0x0023fac0 (function)
            SetLocalAngles                  	= function: 0x0023fb70 (function)
            GetLocalAngles                  	= function: 0x0023fc20 (function)
            SetLocalOrigin                  	= function: 0x0023fcd0 (function)
            GetLocalOrigin                  	= function: 0x0023fd80 (function)
            TransformPointEntityToWorld     	= function: 0x0023fe30 (function)
            TransformPointWorldToEntity     	= function: 0x0023fef0 (function)
            SetForwardVector                	= function: 0x0023ffb0 (function)
            GetBoundingMins                 	= function: 0x00240068 (function)
            GetBoundingMaxs                 	= function: 0x00240118 (function)
            GetBounds                       	= function: 0x002401c8 (function)
            GetAngularVelocity              	= function: 0x00240278 (function)
            SetAngularVelocity              	= function: 0x0023f4b0 (function)
            AddEffects                      	= function: 0x0023f568 (function)
            RemoveEffects                   	= function: 0x0023f618 (function)
            Attribute_SetFloatValue         	= function: 0x0023f6c8 (function)
            Attribute_GetFloatValue         	= function: 0x0023f7f8 (function)
            Attribute_SetIntValue           	= function: 0x0023f878 (function)
            Attribute_GetIntValue           	= function: 0x0023f930 (function)
            HasAttribute                    	= function: 0x0023f9e8 (function)
            DeleteAttribute                 	= function: 0x00240f00 (function)
            ValidatePrivateScriptScope      	= function: 0x00240fb0 (function)
            GetOwner                        	= function: 0x00241070 (function)
            SetOwner                        	= function: 0x00241120 (function)
            SetEntityName                   	= function: 0x002411d0 (function)
            GetMass                         	= function: 0x00241280 (function)
            SetMass                         	= function: 0x00241300 (function)
            GetSpawnGroupHandle             	= function: 0x00241380 (function)
            GetAbsOrigin                    	= function: 0x00241438 (function)
            GetAngles                       	= function: 0x002414e8 (function)
            GetAbsScale                     	= function: 0x00241598 (function)
            SetAbsScale                     	= function: 0x00241648 (function)
            GetLocalScale                   	= function: 0x002416f8 (function)
            SetLocalScale                   	= function: 0x002417a8 (function)
            SetAbsOrigin                    	= function: 0x00241858 (function)
            GetCenter                       	= function: 0x00241908 (function)
            GetTeamNumber                   	= function: 0x002419b8 (function)
            GetTeam                         	= function: 0x00241a68 (function)
            SetTeam                         	= function: 0x00241ae8 (function)
            FollowEntity                    	= function: 0x00241b68 (function)
            FollowEntityMerge               	= function: 0x00241c18 (function)
            Trigger                         	= function: 0x00241cd0 (function)
            SetContextThink                 	= function: 0x00241d78 (function)
            SetContext                      	= function: 0x00241e28 (function)
            SetContextNum                   	= function: 0x00240330 (function)
            GetContext                      	= function: 0x002403e0 (function)
            GatherCriteria                  	= function: 0x00240490 (function)
            TakeDamage                      	= function: 0x00240540 (function)
            IsAlive                         	= function: 0x002405f0 (function)
            IsPlayerPawn                    	= function: 0x00240698 (function)
            IsPlayerController              	= function: 0x00240748 (function)
            IsNPC                           	= function: 0x00240800 (function)
            IsDOTANPC                       	= function: 0x002408a8 (function)
            GetMaxHealth                    	= function: 0x00240958 (function)
            SetMaxHealth                    	= function: 0x00240a08 (function)
            SetHealth                       	= function: 0x00240ab8 (function)
            GetHealth                       	= function: 0x00240b68 (function)
            SetGravity                      	= function: 0x00240c18 (function)
            SetFriction                     	= function: 0x00240cc8 (function)
            SetVelocity                     	= function: 0x00240d78 (function)
            GetLocalVelocity                	= function: 0x00240e28 (function)
            GetVelocity                     	= function: 0x002436a8 (function)
            ApplyAbsVelocityImpulse         	= function: 0x00243758 (function)
            ApplyLocalAngularVelocityImpulse	= function: 0x00243810 (function)
            GetLocalAngularVelocity         	= function: 0x002438d8 (function)
            GetBaseVelocity                 	= function: 0x00243990 (function)
            OverrideFriction                	= function: 0x00243a40 (function)
            EmitSound                       	= function: 0x00243af8 (function)
            EmitSoundParams                 	= function: 0x00243ba8 (function)
            StopSound                       	= function: 0x00243c58 (function)
            GetSoundDuration                	= function: 0x00243d08 (function)
            PrecacheScriptSound             	= function: 0x00243dc0 (function)
            IsPlayer                        	= function: 0x00243e78 (function)
            GetOrigin                       	= function: 0x00243f28 (function)
            IsNull                          	= function: 0x0023e670 (function)
            SetThink                        	= function: 0x00308700 (function)
            FDesc                           	= table: 0x0023e6e0 (table, already seen)
            StopThink                       	= function: 0x00308730 (function)
            IsInstance                      	= function: 0x00308760 (function)
            IsBaseNPC                       	= function: 0x00337ae8 (function)
            Kill                            	= function: 0x0023e728 (function)
            GetForwardVector                	= function: 0x0023e810 (function)
            GetRightVector                  	= function: 0x0023e8c8 (function)
            GetLeftVector                   	= function: 0x0023ea68 (function)
            GetUpVector                     	= function: 0x0023eae8 (function)
            GetModelName                    	= function: 0x0023ea00 (function)
            GetMoveParent                   	= function: 0x0023ecd0 (function)
            GetRootMoveParent               	= function: 0x0023e978 (function)
            FirstMoveChild                  	= function: 0x0023ef08 (function)
            NextMovePeer                    	= function: 0x0023eb98 (function)
            GetOwnerEntity                  	= function: 0x0023f140 (function)
            IsNull                          	= function: 0x0023d458 (function)
            FireOutput                      	= function: 0x0023d570 (function)
            RemoveSelf                      	= function: 0x0023d688 (function)
            GetIntAttr                      	= function: 0x0023d738 (function)
            SetIntAttr                      	= function: 0x0023d870 (function)
            FDesc                           	= table: 0x0023d4f0 (table, already seen)
            GetDebugName                    	= function: 0x0023d5e0 (function)
            ConnectOutput                   	= function: 0x0023dad0 (function)
            RedirectOutput                  	= function: 0x0023d7a8 (function)
            DisconnectOutput                	= function: 0x00214310 (function)
            DisconnectRedirectedOutput      	= function: 0x00214988 (function)
            GetEntityIndex                  	= function: 0x0023d998 (function)
            entindex                        	= function: 0x0023da18 (function)
            GetClassname                    	= function: 0x0023de90 (function)
            GetEntityHandle                 	= function: 0x0023df10 (function)
            Destroy                         	= function: 0x0023df90 (function)
            GetPublicScriptScope            	= function: 0x0023db80 (function)
            GetOrCreatePublicScriptScope    	= function: 0x0023dc00 (function)
            GetPrivateScriptScope           	= function: 0x0023dcc8 (function)
            GetOrCreatePrivateScriptScope   	= function: 0x0023dd48 (function)
            GetName                         	= function: 0x0023d8f0 (function)
         }
         IsNull                          	= function: 0x002d21e8 (function)
         GetController                   	= function: 0x002d25e8 (function)
         IsNoclipping                    	= function: 0x002d22a0 (function)
         FDesc                           	= table: 0x002d2258 (table)
         {
            GetController                   	= handle GetController()
GetController() : Returns the controller for this pawn (userdata)
            IsNoclipping                    	= bool IsNoclipping()
Returns true if the player is in noclip mode. (userdata)
            GetWeaponCount                  	= int GetWeaponCount()
GetWeaponCount() : Gets the number of weapons currently equipped (userdata)
            GetEquippedWeapons              	= table GetEquippedWeapons()
GetEquippedWeapons() : Returns an array of all the equipped weapons (userdata)
         }
         GetWeaponCount                  	= function: 0x002d23b8 (function)
         GetEquippedWeapons              	= function: 0x002d2468 (function)
      }
      CPointClientUIWorldPanel        	= table: 0x002f5f78 (table)
      {
         metatable                       	= table: 0x00298c48 (table, already seen)
         IsNull                          	= function: 0x002f5fc0 (function)
         IgnoreUserInput                 	= function: 0x002f6190 (function)
         AcceptUserInput                 	= function: 0x002f6210 (function)
         AddCSSClasses                   	= function: 0x002f63b0 (function)
         RemoveCSSClasses                	= function: 0x002f6430 (function)
         FDesc                           	= table: 0x002f6030 (table)
         {
            IsGrabbable                     	= bool IsGrabbable()
Returns whether this entity is grabbable. (userdata)
            IgnoreUserInput                 	= void IgnoreUserInput()
Tells the panel to ignore user input. (userdata)
            AcceptUserInput                 	= void AcceptUserInput()
Tells the panel to accept user input. (userdata)
            AddCSSClasses                   	= void AddCSSClasses(string pszClasses)
Adds CSS class(es) to the panel (userdata)
            RemoveCSSClasses                	= void RemoveCSSClasses(string pszClasses)
Remove CSS class(es) from the panel (userdata)
         }
         IsGrabbable                     	= function: 0x002f6078 (function)
      }
      CDOTAPlayerController           	= table: 0x002d27a0 (table)
      {
         metatable                       	= table: 0x0029a3b8 (table, already seen)
         IsNull                          	= function: 0x002d27e8 (function)
         GetPlayerID                     	= function: 0x002d77f0 (function)
         GetAssignedHero                 	= function: 0x002d78d8 (function)
         CheckForCourierSpawning         	= function: 0x002d7988 (function)
         SpawnCourierAtPosition          	= function: 0x002d7b30 (function)
         FDesc                           	= table: 0x002d2858 (table)
         {
            GetPlayerID                     	= int GetPlayerID()
Get the player's official PlayerID; notably is -1 when the player isn't yet on a team. (userdata)
            GetAssignedHero                 	= handle GetAssignedHero()
Get the player's hero. (userdata)
            CheckForCourierSpawning         	= handle CheckForCourierSpawning(handle hHero)
Attempt to spawn the appropriate couriers for this mode. (userdata)
            SpawnCourierAtPosition          	= handle SpawnCourierAtPosition(Vector vLocation)
Spawn a courier for this player at the given position. (userdata)
            MakeRandomHeroSelection         	= void MakeRandomHeroSelection()
Randoms this player's hero. (userdata)
            SetSelectedHero                 	= void SetSelectedHero(string pszHeroName)
Sets this player's hero selection. (userdata)
            SetAssignedHeroEntity           	= void SetAssignedHeroEntity(handle hHero)
Sets this player's hero . (userdata)
            SetMusicStatus                  	= void SetMusicStatus(int nMusicStatus, float flIntensity)
(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off. (userdata)
            SetKillCamUnit                  	= void SetKillCamUnit(handle hEntity)
Set the kill cam unit for this hero. (userdata)
         }
         SetSelectedHero                 	= function: 0x002d7ac8 (function)
         SetAssignedHeroEntity           	= function: 0x002d7da0 (function)
         SetMusicStatus                  	= function: 0x002d7a40 (function)
         SetKillCamUnit                  	= function: 0x002d7fe0 (function)
         MakeRandomHeroSelection         	= function: 0x002d7bb0 (function)
      }
      CDebugOverlayScriptHelper       	= table: 0x0038ea70 (table)
      {
         Cross                           	= function: 0x0038f588 (function)
         Line                            	= function: 0x0038eb00 (function)
         Line2D                          	= function: 0x0038ebe8 (function)
         BoxAngles                       	= function: 0x0038ec68 (function)
         Box                             	= function: 0x0038edb0 (function)
         Sphere                          	= function: 0x0038ee30 (function)
         IsNull                          	= function: 0x00399578 (function)
         VectorText3D                    	= function: 0x0038eff8 (function)
         FilledRect2D                    	= function: 0x0038f200 (function)
         Texture                         	= function: 0x0038f280 (function)
         Text                            	= function: 0x0038f488 (function)
         FDesc                           	= table: 0x0038eab8 (table)
         {
            Cross                           	= void Cross(Vector, float, int, int, int, int, bool, float)
Draws a screen-aligned cross. Specify origin in world space. (userdata)
            Line                            	= void Line(Vector, Vector, int, int, int, int, bool, float)
Draws a line between two points (userdata)
            Line2D                          	= void Line2D(Vector2D, Vector2D, int, int, int, int, float)
Draws a line between two points in screenspace (userdata)
            BoxAngles                       	= void BoxAngles(Vector, Vector, Vector, <unknown>, int, int, int, int, bool, float)
Draws an oriented box at the origin. Specify bounds in local space. (userdata)
            Box                             	= void Box(Vector, Vector, int, int, int, int, bool, float)
Draws a world-space axis-aligned box. Specify bounds in world space. (userdata)
            Sphere                          	= void Sphere(Vector, float, int, int, int, int, bool, float)
Draws a wireframe sphere. Specify center in world space. (userdata)
            Capsule                         	= void Capsule(Vector, <unknown>, float, float, int, int, int, int, bool, float)
Draws a capsule. Specify base in world space. (userdata)
            VectorText3D                    	= void VectorText3D(Vector, <unknown>, string, int, int, int, int, bool, float)
Draws 3D text. Specify origin + orientation in world space. (userdata)
            FilledRect2D                    	= void FilledRect2D(Vector2D, Vector2D, int, int, int, int, float)
Draws a screen-space filled 2D rectangle. Coordinates are in pixels. (userdata)
            Texture                         	= void Texture(string, Vector2D, Vector2D, int, int, int, int, Vector2D, Vector2D, float)
Draws a screen-space texture. Coordinates are in pixels. (userdata)
            Text                            	= void Text(Vector, int, string, float, int, int, int, int, float)
Draws 2D text. Specify origin in world space. (userdata)
            Axis                            	= void Axis(Vector, <unknown>, float, bool, float)
Draws an axis. Specify origin + orientation in world space. (userdata)
            Cross3D                         	= void Cross3D(Vector, float, int, int, int, int, bool, float)
Draws a world-aligned cross. Specify origin in world space. (userdata)
            Cross3DOriented                 	= void Cross3DOriented(Vector, <unknown>, float, int, int, int, int, bool, float)
Draws an oriented cross. Specify origin in world space. (userdata)
            Triangle                        	= void Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)
Draws a filled triangle. Specify vertices in world space. (userdata)
            Circle                          	= void Circle(Vector, <unknown>, float, int, int, int, int, bool, float)
Draws a circle. Specify center in world space. (userdata)
            CircleScreenOriented            	= void CircleScreenOriented(Vector, float, int, int, int, int, bool, float)
Draws a circle oriented to the screen. Specify center in world space. (userdata)
            HorzArrow                       	= void HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)
Draws a horizontal arrow. Specify endpoints in world space. (userdata)
            YawArrow                        	= void YawArrow(Vector, float, float, float, int, int, int, int, bool, float)
Draws a arrow associated with a specific yaw. Specify endpoints in world space. (userdata)
            VertArrow                       	= void VertArrow(Vector, Vector, float, int, int, int, int, bool, float)
Draws a vertical arrow. Specify endpoints in world space. (userdata)
            Cone                            	= void Cone(Vector, Vector, float, float, int, int, int, int, bool, float)
Draws a wireframe cone. Specify endpoint and direction in world space. (userdata)
            SolidCone                       	= void SolidCone(Vector, Vector, float, float, int, int, int, int, bool, float)
Draws a solid cone. Specify endpoint and direction in world space. (userdata)
            DrawTickMarkedLine              	= void DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, int, bool, float)
Draws a dashed line. Specify endpoints in world space. (userdata)
            SweptBox                        	= void SweptBox(Vector, Vector, Vector, Vector, <unknown>, int, int, int, int, float)
Draws a swept box. Specify endpoints in world space and the bounds in local space. (userdata)
            PushAndClearDebugOverlayScope   	= void PushAndClearDebugOverlayScope(utlstringtoken)
Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id. (userdata)
            PushDebugOverlayScope           	= void PushDebugOverlayScope(utlstringtoken)
Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch. (userdata)
            PopDebugOverlayScope            	= void PopDebugOverlayScope()
Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch. (userdata)
            RemoveAllInScope                	= void RemoveAllInScope(utlstringtoken)
Removes all overlays marked with a specific identifier, regardless of their lifetime. (userdata)
            EntityText                      	= void EntityText(ehandle, int, string, int, int, int, int, float)
Draws text on an entity (userdata)
            EntityBounds                    	= void EntityBounds(ehandle, int, int, int, int, bool, float)
Draws bounds of an entity (userdata)
            EntityAxis                      	= void EntityAxis(ehandle, float, bool, float)
Draws the axis of the entity origin (userdata)
            EntitySkeleton                  	= void EntitySkeleton(ehandle, float)
Draws the skeleton of the entity (userdata)
            EntityAttachments               	= void EntityAttachments(ehandle, float, float)
Draws the attachments of the entity (userdata)
         }
         Cross3D                         	= function: 0x0038f608 (function)
         Cross3DOriented                 	= function: 0x0038f688 (function)
         Triangle                        	= function: 0x0038f708 (function)
         Circle                          	= function: 0x0038fa90 (function)
         CircleScreenOriented            	= function: 0x0038fb10 (function)
         HorzArrow                       	= function: 0x0038fe98 (function)
         YawArrow                        	= function: 0x0038ff18 (function)
         VertArrow                       	= function: 0x0038ff98 (function)
         Cone                            	= function: 0x00390018 (function)
         SolidCone                       	= function: 0x00390098 (function)
         DrawTickMarkedLine              	= function: 0x00390118 (function)
         SweptBox                        	= function: 0x00390198 (function)
         PushAndClearDebugOverlayScope   	= function: 0x00390218 (function)
         PushDebugOverlayScope           	= function: 0x003902d8 (function)
         PopDebugOverlayScope            	= function: 0x00390358 (function)
         RemoveAllInScope                	= function: 0x003903d8 (function)
         EntityText                      	= function: 0x00390458 (function)
         EntityBounds                    	= function: 0x003904d8 (function)
         EntityAxis                      	= function: 0x00390558 (function)
         EntitySkeleton                  	= function: 0x00390be0 (function)
         EntityAttachments               	= function: 0x00390c60 (function)
         Capsule                         	= function: 0x0038ef78 (function)
         Axis                            	= function: 0x0038f508 (function)
      }
      CDOTA_CustomUIManager           	= table: 0x0034e898 (table, already seen)
      CNativeOutputs                  	= table: 0x002f6698 (table)
      {
         IsNull                          	= function: 0x002f66e0 (function)
         FDesc                           	= table: 0x002f6750 (table)
         {
            Init                            	= void Init(int)
Initialize with number of outputs (userdata)
            AddOutput                       	= void AddOutput(string, string)
Add an output (userdata)
         }
         Init                            	= function: 0x002f6798 (function)
         AddOutput                       	= function: 0x002f6880 (function)
      }
      ProjectileManager               	= table: 0x002342c0 (table, already seen)
      CCustomNetTableManager          	= table: 0x0034e390 (table, already seen)
      CCustomGameEventManager         	= table: 0x0034db10 (table, already seen)
      CScriptKeyValues                	= table: 0x002f6b98 (table)
      {
         IsNull                          	= function: 0x002f6be0 (function)
         FDesc                           	= table: 0x002f6c50 (table)
         {
            GetValue                        	= table GetValue(string)
Reads a spawn key (userdata)
         }
         GetValue                        	= function: 0x002f6c98 (function)
      }
      CDOTA_ItemSpawner               	= table: 0x002d8298 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002d82e0 (function)
         FDesc                           	= table: 0x002d8350 (table)
         {
            GetItemName                     	= string GetItemName()
Returns the item name (userdata)
         }
         GetItemName                     	= function: 0x002d8398 (function)
      }
      CScriptPrecacheContext          	= table: 0x002f6eb0 (table)
      {
         IsNull                          	= function: 0x002f6ef8 (function)
         FDesc                           	= table: 0x002f6f68 (table)
         {
            GetValue                        	= table GetValue(string)
Reads a spawn key (userdata)
            AddResource                     	= void AddResource(string)
Precaches a specific resource (userdata)
         }
         GetValue                        	= function: 0x002f6fb0 (function)
         AddResource                     	= function: 0x002f7098 (function)
      }
      CDOTA_Item_Physical             	= table: 0x002d85e8 (table)
      {
         metatable                       	= table: 0x0029a3b8 (table, already seen)
         IsNull                          	= function: 0x002d8630 (function)
         GetCreationTime                 	= function: 0x002d8aa8 (function)
         GetContainedItem                	= function: 0x002d8a28 (function)
         IsLoot                          	= function: 0x002d86e8 (function)
         FDesc                           	= table: 0x002d86a0 (table)
         {
            GetContainedItem                	= handle GetContainedItem()
Returned the contained item. (userdata)
            GetCreationTime                 	= float GetCreationTime()
Returns the game time when this item was created in the world (userdata)
            IsLoot                          	= bool IsLoot()
Is this drop flagged as a loot drop? (userdata)
            SetIsLoot                       	= void SetIsLoot(bool bIsLoot)
Set if this drop is flagged as a loot drop (userdata)
            SetContainedItem                	= void SetContainedItem(handle hItem)
Set the contained item. (userdata)
         }
         SetIsLoot                       	= function: 0x002d87d0 (function)
         SetContainedItem                	= function: 0x002d8880 (function)
      }
      CEntityScriptFramework          	= table: 0x002f7248 (table)
      {
         IsNull                          	= function: 0x002f7290 (function)
         FDesc                           	= table: 0x002f7300 (table)
         {
         }
      }
      CDOTAVoteSystem                 	= table: 0x0034d6b8 (table, already seen)
      CEntityInstance                 	= table: 0x0021a0a0 (table, already seen)
      CBodyComponent                  	= table: 0x00298198 (table, already seen)
      CDOTA_Item                      	= table: 0x002d8cd8 (table, already seen)
      CDOTA_BaseNPC_Creature          	= table: 0x002a3930 (table, already seen)
      CDOTAGameManager                	= table: 0x00235188 (table, already seen)
      CInfoWorldLayer                 	= table: 0x002f5b70 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002f5bb8 (function)
         FDesc                           	= table: 0x002f5c28 (table)
         {
            HideWorldLayer                  	= void HideWorldLayer()
Hides this layer (userdata)
            ShowWorldLayer                  	= void ShowWorldLayer()
Shows this layer (userdata)
         }
         HideWorldLayer                  	= function: 0x002f5d88 (function)
         ShowWorldLayer                  	= function: 0x002f5c70 (function)
      }
      CPointTemplate                  	= table: 0x002f5540 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002f5588 (function)
         SetSpawnCallback                	= function: 0x002f5760 (function)
         ForceSpawn                      	= function: 0x002f5818 (function)
         DeleteCreatedSpawnGroups        	= function: 0x002f59b8 (function)
         FDesc                           	= table: 0x002f55f8 (table)
         {
            GetSpawnedEntities              	= handle GetSpawnedEntities()
GetSpawnedEntities() : Get the list of the most recent spawned entities (userdata)
            SetSpawnCallback                	= void SetSpawnCallback(handle hCallbackFunc, handle hCallbackScope)
SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array. (userdata)
            ForceSpawn                      	= void ForceSpawn()
ForceSpawn() : Spawns all of the entities the point_template is pointing at. (userdata)
            DeleteCreatedSpawnGroups        	= void DeleteCreatedSpawnGroups()
DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this. (userdata)
         }
         GetSpawnedEntities              	= function: 0x002f5640 (function)
      }
      CBaseModelEntity                	= table: 0x00298c48 (table, already seen)
      CEnvProjectedTexture            	= table: 0x002f4de8 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002f4e30 (function)
         SetLinearAttenuation            	= function: 0x002f4ee8 (function)
         SetQuadraticAttenuation         	= function: 0x002f5008 (function)
         SetNearRange                    	= function: 0x002f50c0 (function)
         FDesc                           	= table: 0x002f4ea0 (table)
         {
            SetLinearAttenuation            	= void SetLinearAttenuation(float flAtten)
Set light linear attenuation value (userdata)
            SetQuadraticAttenuation         	= void SetQuadraticAttenuation(float flAtten)
Set light quadratic attenuation value (userdata)
            SetNearRange                    	= void SetNearRange(float flRange)
Set light minimum range (userdata)
            SetFarRange                     	= void SetFarRange(float flRange)
Set light maximum range (userdata)
            SetVolumetrics                  	= void SetVolumetrics(bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset)
Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset (userdata)
         }
         SetVolumetrics                  	= function: 0x002f52e0 (function)
         SetFarRange                     	= function: 0x002f5260 (function)
      }
      CDOTA_Ability_DataDriven        	= table: 0x002f1bd8 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002f1c20 (function)
         FDesc                           	= table: 0x002f1c90 (table)
         {
            ApplyDataDrivenThinker          	= handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)
Applies a data driven thinker at the location (userdata)
            ApplyDataDrivenModifier         	= handle ApplyDataDrivenModifier(handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable)
Applies a data driven modifier to the target (userdata)
         }
         ApplyDataDrivenThinker          	= function: 0x002f1dc0 (function)
         ApplyDataDrivenModifier         	= function: 0x002f1cd8 (function)
      }
      CDOTA_Ability_Lua               	= table: 0x002f0318 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         GetAbilityChargeRestoreTime     	= function: 0x002f1618 (function)
         GetCastPoint                    	= function: 0x002f06f0 (function)
         GetCastRangeBonus               	= function: 0x002f0688 (function)
         CastFilterResultTarget          	= function: 0x002f0978 (function)
         CastFilterResultLocation        	= function: 0x002f09f8 (function)
         CastFilterResult                	= function: 0x00337d28 (function)
         GetCustomCastErrorTarget        	= function: 0x002f0c00 (function)
         GetCustomCastErrorLocation      	= function: 0x002f0c80 (function)
         GetCustomCastError              	= function: 0x00337d58 (function)
         GetCustomHudErrorMessage        	= function: 0x002f1598 (function)
         OnProjectileHit                 	= function: 0x002f1998 (function)
         OnProjectileThink               	= function: 0x002f1048 (function)
         OnInventoryContentsChanged      	= function: 0x002f1440 (function)
         OnItemEquipped                  	= function: 0x002f25e8 (function)
         OnStolen                        	= function: 0x002f26e8 (function)
         OnUnStolen                      	= function: 0x002f2768 (function)
         OnHeroDiedNearby                	= function: 0x002f27e8 (function)
         IsHiddenAbilityCastable         	= function: 0x002f0b80 (function)
         OnAbilityPinged                 	= function: 0x002f2868 (function)
         OnProjectileHit_ExtraData       	= function: 0x002f0f08 (function)
         OnProjectileHitHandle           	= function: 0x002f0fc8 (function)
         OnProjectileThinkHandle         	= function: 0x002f10c8 (function)
         IsRefreshable                   	= function: 0x002f2d90 (function)
         IsCosmetic                      	= function: 0x002f2f90 (function)
         GetCastAnimation                	= function: 0x002f29a0 (function)
         GetChannelAnimation             	= function: 0x002f2a58 (function)
         OtherAbilitiesAlwaysInterruptChanneling	= function: 0x002f3010 (function)
         GetChannelTime                  	= function: 0x002f0ac0 (function)
         GetChannelStartTime             	= function: 0x002f07f0 (function)
         GetCastRange                    	= function: 0x002f0770 (function)
         GetEffectiveCastRange           	= function: 0x002f08f8 (function)
         GetAOERadius                    	= function: 0x002f0418 (function)
         IsAttributeBonus                	= function: 0x002f0580 (function)
         ProcsMagicStick                 	= function: 0x002f2e10 (function)
         GetCooldown                     	= function: 0x002f0e88 (function)
         GetBehavior                     	= function: 0x002f0500 (function)
         OnAbilityPhaseStart             	= function: 0x002f1798 (function)
         OnAbilityPhaseInterrupted       	= function: 0x002f1818 (function)
         OnSpellStart                    	= function: 0x002f1718 (function)
         OnChannelFinish                 	= function: 0x002f1918 (function)
         OnUpgrade                       	= function: 0x002f1340 (function)
         OnOwnerSpawned                  	= function: 0x002f1240 (function)
         IsNull                          	= function: 0x002f0360 (function)
         OnOwnerDied                     	= function: 0x002f12c0 (function)
         GetManaCost                     	= function: 0x002f0600 (function)
         GetChannelledManaCostPerSecond  	= function: 0x002f0870 (function)
         GetHealthCost                   	= function: 0x002f0d88 (function)
         GetChannelledHealthCostPerSecond	= function: 0x002f0e08 (function)
         GetGoldCost                     	= function: 0x002f0d08 (function)
         GetIntrinsicModifierName        	= function: 0x002f2c10 (function)
         ResetToggleOnRespawn            	= function: 0x002f2e90 (function)
         OnHeroLevelUp                   	= function: 0x002f13c0 (function)
         OnHeroCalculateStatBonus        	= function: 0x002f2668 (function)
         OnChannelThink                  	= function: 0x002f1898 (function)
         OnToggle                        	= function: 0x002f1698 (function)
         GetConceptRecipientType         	= function: 0x002f30d8 (function)
         SpeakTrigger                    	= function: 0x002f3158 (function)
         CastFilterResult_Engine         	= function: 0x002f0a78 (function)
         GetPlaybackRateOverride         	= function: 0x002f1a18 (function)
         FDesc                           	= table: 0x002f03d0 (table)
         {
            GetPlaybackRateOverride         	= float GetPlaybackRateOverride()
Return the animation rate of the cast animation. (userdata)
            OnUpgrade                       	= void OnUpgrade()
Ability gained a level. (userdata)
            GetConceptRecipientType         	= int GetConceptRecipientType()
Return who hears speech when this spell is cast. (userdata)
            OnHeroLevelUp                   	= void OnHeroLevelUp()
Caster gained a level. (userdata)
            IsCosmetic                      	= bool IsCosmetic(handle hEntity)
Is this a cosmetic only ability? (userdata)
            RequiresFacing                  	= bool RequiresFacing()
Does this ability need the caster to face the target before executing? (userdata)
            ResetToggleOnRespawn            	= bool ResetToggleOnRespawn()
Returns true if this ability should return to the default toggle state when its parent respawns. (userdata)
            IsHiddenWhenStolen              	= bool IsHiddenWhenStolen()
Returns true if this ability is hidden when stolen by Spell Steal. (userdata)
            GetAbilityChargeRestoreTime     	= float GetAbilityChargeRestoreTime(int iLevel)
 (userdata)
            IsRefreshable                   	= bool IsRefreshable()
Returns true if this ability is refreshed by Refresher Orb. (userdata)
            GetCastPoint                    	= float GetCastPoint()
Return cast point of this ability. (userdata)
            IsAttributeBonus                	= bool IsAttributeBonus()
Is this ability an Attribute Bonus. (userdata)
            ProcsMagicStick                 	= bool ProcsMagicStick()
Returns true if this ability will generate magic stick charges for nearby enemies. (userdata)
            IsStealable                     	= bool IsStealable()
Returns true if this ability can be stolen by Spell Steal. (userdata)
            GetCastRangeBonus               	= int GetCastRangeBonus(handle hTarget, int iPseudoCastRange)
 (userdata)
            GetCooldown                     	= float GetCooldown(int iLevel)
Return cooldown of this ability. (userdata)
            OnHeroCalculateStatBonus        	= void OnHeroCalculateStatBonus()
Caster (hero only) gained a level, skilled an ability, or received a new stat bonus. (userdata)
            GetCustomCastErrorTarget        	= string GetCustomCastErrorTarget(handle hTarget)
(HSCRIPT hTarget) Return the error string of a failed command on a target. (userdata)
            GetBehavior                     	= uint64 GetBehavior()
Return cast behavior type of this ability. (userdata)
            IsHiddenAbilityCastable         	= bool IsHiddenAbilityCastable()
Returns true if this ability can be used when not on the action panel. (userdata)
            OnInventoryContentsChanged      	= void OnInventoryContentsChanged()
Caster inventory changed. (userdata)
            OnItemEquipped                  	= void OnItemEquipped(handle hItem)
( HSCRIPT hItem ) Caster equipped item. (userdata)
            OnAbilityUpgrade                	= void OnAbilityUpgrade(handle hUpgradeAbility)
 (userdata)
            CastFilterResultTarget          	= int CastFilterResultTarget(handle hTarget)
(HSCRIPT hTarget) Determine whether an issued command on a target is valid. (userdata)
            CastFilterResultLocation        	= int CastFilterResultLocation(Vector vLocation)
(Vector vLocation) Determine whether an issued command on a location is valid. (userdata)
            CastFilterResult                	= int CastFilterResult()
Determine whether an issued command with no target is valid. (userdata)
            OnAbilityPhaseStart             	= bool OnAbilityPhaseStart()
Cast time begins (return true for successful cast). (userdata)
            OnAbilityPhaseInterrupted       	= void OnAbilityPhaseInterrupted()
Cast time did not complete successfully. (userdata)
            OnSpellStart                    	= void OnSpellStart()
Cast time finished, spell effects begin. (userdata)
            OnChannelFinish                 	= void OnChannelFinish(bool bInterrupted)
(bool bInterrupted) Channel finished. (userdata)
            OnProjectileHit                 	= bool OnProjectileHit(handle hTarget, Vector vLocation)
(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
            OnProjectileThink               	= void OnProjectileThink(Vector vLocation)
(Vector vLocation) Projectile is actively moving. (userdata)
            OnToggle                        	= void OnToggle()
Ability is toggled on/off. (userdata)
            OnOwnerDied                     	= void OnOwnerDied()
Caster died. (userdata)
            OnStolen                        	= void OnStolen(handle hSourceAbility)
( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal. (userdata)
            GetManaCost                     	= int GetManaCost(int iLevel)
Return mana cost at the given level (-1 is current). (userdata)
            OnHeroDiedNearby                	= void OnHeroDiedNearby(handle unit, handle attacker, handle table)
A hero has died in the vicinity (ie Urn), takes table of params. (userdata)
            GetChannelledManaCostPerSecond  	= int GetChannelledManaCostPerSecond(int iLevel)
Return mana cost at the given level per second while channeling (-1 is current). (userdata)
            GetHealthCost                   	= int GetHealthCost(int iLevel)
Return health cost at the given level (-1 is current). (userdata)
            OnAbilityPinged                 	= void OnAbilityPinged(int nPlayerID, bool bCtrlHeld)
The ability was pinged (nPlayerID, bCtrlHeld). (userdata)
            GetChannelledHealthCostPerSecond	= int GetChannelledHealthCostPerSecond(int iLevel)
Return health cost per second of channeling at the given level (-1 is current). (userdata)
            GetGoldCost                     	= int GetGoldCost(int iLevel)
Return gold cost at the given level (-1 is current). (userdata)
            OnUnStolen                      	= void OnUnStolen()
Special behavior when lost by Spell Steal. (userdata)
            GetIntrinsicModifierName        	= string GetIntrinsicModifierName()
Returns the name of the modifier applied passively by this ability. (userdata)
            OnProjectileHit_ExtraData       	= bool OnProjectileHit_ExtraData(handle hTarget, Vector vLocation, handle table)
(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
            OnProjectileHitHandle           	= bool OnProjectileHitHandle(handle hTarget, Vector vLocation, int iProjectileHandle)
(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid). (userdata)
            OnProjectileThinkHandle         	= void OnProjectileThinkHandle(int iProjectileHandle)
(int nProjectileHandle) Projectile is actively moving. (userdata)
            OnProjectileThink_ExtraData     	= void OnProjectileThink_ExtraData(Vector vLocation, handle table)
(Vector vLocation, table kv ) Projectile is actively moving. (userdata)
            OnChannelThink                  	= void OnChannelThink(float flInterval)
(float flInterval) Channeling is taking place. (userdata)
            GetCastAnimation                	= int GetCastAnimation()
Return casting animation of this ability. (userdata)
            GetChannelAnimation             	= int GetChannelAnimation()
Return channel animation of this ability. (userdata)
            OtherAbilitiesAlwaysInterruptChanneling	= bool OtherAbilitiesAlwaysInterruptChanneling()
 (userdata)
            SpeakTrigger                    	= int SpeakTrigger()
Return the type of speech used. (userdata)
            OnOwnerSpawned                  	= void OnOwnerSpawned()
Caster respawned or spawned for the first time. (userdata)
            GetCustomHudErrorMessage        	= string GetCustomHudErrorMessage(int nReason)
(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order. (userdata)
            GetChannelTime                  	= float GetChannelTime()
Return the channel time of this ability. (userdata)
            GetChannelStartTime             	= float GetChannelStartTime()
Return the channel start time of this ability. (userdata)
            GetAssociatedPrimaryAbilities   	= string GetAssociatedPrimaryAbilities()
Returns abilities that are stolen simultaneously, or otherwise related in functionality. (userdata)
            GetAssociatedSecondaryAbilities 	= string GetAssociatedSecondaryAbilities()
Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities. (userdata)
            GetCustomCastErrorLocation      	= string GetCustomCastErrorLocation(Vector vLocation)
(Vector vLocation) Return the error string of a failed command on a location. (userdata)
            GetCastRange                    	= int GetCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability. (userdata)
            GetEffectiveCastRange           	= int GetEffectiveCastRange(Vector vLocation, handle hTarget)
Return cast range of this ability, accounting for modifiers. (userdata)
            GetCustomCastError              	= string GetCustomCastError()
Return the error string of a failed command with no target. (userdata)
            GetAOERadius                    	= float GetAOERadius()
Controls the size of the AOE casting cursor. (userdata)
         }
         RequiresFacing                  	= function: 0x002f2f10 (function)
         GetAssociatedPrimaryAbilities   	= function: 0x002f2b10 (function)
         GetAssociatedSecondaryAbilities 	= function: 0x002f2b90 (function)
         GetCustomCastError_Engine       	= function: 0x002f1518 (function)
         IsStealable                     	= function: 0x002f2c90 (function)
         IsHiddenWhenStolen              	= function: 0x002f2d10 (function)
         OnProjectileThink_ExtraData     	= function: 0x002f1180 (function)
         OnAbilityUpgrade                	= function: 0x002f28e8 (function)
      }
      CDOTA_Item_DataDriven           	= table: 0x002eff08 (table)
      {
         metatable                       	= table: 0x002d8cd8 (table, already seen)
         IsNull                          	= function: 0x002eff50 (function)
         FDesc                           	= table: 0x002effc0 (table)
         {
            ApplyDataDrivenThinker          	= handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)
Applies a data driven thinker at the location (userdata)
            ApplyDataDrivenModifier         	= void ApplyDataDrivenModifier(handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable)
Applies a data driven modifier to the target (userdata)
         }
         ApplyDataDrivenThinker          	= function: 0x002f0128 (function)
         ApplyDataDrivenModifier         	= function: 0x002f0008 (function)
      }
      CDOTA_Modifier_Lua_Horizontal_Motion	= table: 0x0023bca8 (table, already seen)
      CDOTA_Unit_Courier              	= table: 0x002ecf80 (table)
      {
         metatable                       	= table: 0x00233f70 (table, already seen)
         IsNull                          	= function: 0x002ecfc8 (function)
         FDesc                           	= table: 0x002ed038 (table)
         {
            RespawnCourier                  	= void RespawnCourier()
Respawn the courier. (userdata)
            UpgradeCourier                  	= void UpgradeCourier(int iLevel)
Upgrade the courier ( int param ) times. (userdata)
         }
         UpgradeCourier                  	= function: 0x002ed198 (function)
         RespawnCourier                  	= function: 0x002ed080 (function)
      }
      CDOTA_Ability_Nian_Dive         	= table: 0x002ec938 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002ec980 (function)
         FDesc                           	= table: 0x002ec9f0 (table)
         {
            SetPlaybackRate                 	= void SetPlaybackRate(float flRate)
Override playbackrate (userdata)
         }
         SetPlaybackRate                 	= function: 0x002eca38 (function)
      }
      CDOTA_Ability_Nian_Roar         	= table: 0x002ec5e8 (table)
      {
         metatable                       	= table: 0x002c3700 (table, already seen)
         IsNull                          	= function: 0x002ec630 (function)
         FDesc                           	= table: 0x002ec6a0 (table)
         {
            GetCastCount                    	= int GetCastCount()
Number of times Nian has used the roar (userdata)
         }
         GetCastCount                    	= function: 0x002ec6e8 (function)
      }
      CBaseTrigger                    	= table: 0x002bb6f0 (table, already seen)
      CDOTA_Modifier_Lua_Vertical_Motion	= table: 0x0023c220 (table, already seen)
      CDotaSubquestBase               	= table: 0x002c7a58 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002c7aa0 (function)
         SetTextReplaceValue             	= function: 0x002c7c78 (function)
         SetTextReplaceString            	= function: 0x002c7d30 (function)
         FDesc                           	= table: 0x002c7b10 (table)
         {
            CompleteSubquest                	= void CompleteSubquest()
Mark this subquest complete (userdata)
            SetTextReplaceValue             	= void SetTextReplaceValue(int valueSlot, int value)
Set a subquest value (userdata)
            SetTextReplaceString            	= void SetTextReplaceString(string pszString)
Set the text replace string for this subquest (userdata)
         }
         CompleteSubquest                	= function: 0x002c7b58 (function)
      }
      CPointEntity                    	= table: 0x002a43f8 (table, already seen)
      GridNav                         	= table: 0x00233100 (table, already seen)
      CEntities                       	= table: 0x0024a640 (table)
      {
         IsNull                          	= function: 0x0024a688 (function)
         FindByTarget                    	= function: 0x0024b328 (function)
         FindAllByTarget                 	= function: 0x0024b3d8 (function)
         FindByModel                     	= function: 0x0024b488 (function)
         FindAllByModel                  	= function: 0x0024ae08 (function)
         FDesc                           	= table: 0x0024a6f8 (table)
         {
            FindAllInSphere                 	= table FindAllInSphere(Vector, float)
Find entities within a radius. (userdata)
            FindByTarget                    	= handle FindByTarget(handle, string)
Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByTarget                 	= table FindAllByTarget(string)
Find entities by targetname. (userdata)
            FindByModel                     	= handle FindByModel(handle, string)
Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByModel                  	= table FindAllByModel(string)
Find entities by model name. (userdata)
            FindByModelWithin               	= handle FindByModelWithin(handle, string, Vector, float)
Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindByNameNearest               	= handle FindByNameNearest(string, Vector, float)
Find entities by name nearest to a point. (userdata)
            FindByNameWithin                	= handle FindByNameWithin(handle, string, Vector, float)
Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByNameWithin             	= table FindAllByNameWithin(string, Vector, float)
Find entities by name within a radius. (userdata)
            FindByClassnameNearest          	= handle FindByClassnameNearest(string, Vector, float)
Find entities by class name nearest to a point. (userdata)
            FindByClassnameWithin           	= handle FindByClassnameWithin(handle, string, Vector, float)
Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByClassnameWithin        	= table FindAllByClassnameWithin(string, Vector, float)
Find entities by class name within a radius. (userdata)
            First                           	= handle First()
Begin an iteration over the list of entities (userdata)
            Next                            	= handle Next(handle)
Continue an iteration over the list of entities, providing reference to a previously found entity (userdata)
            GetLocalPlayer                  	= handle GetLocalPlayer()
Get the local player controller (backcompat). (userdata)
            GetLocalPlayerPawn              	= handle GetLocalPlayerPawn()
Get the local player pawn. (userdata)
            GetLocalPlayerController        	= handle GetLocalPlayerController()
Get the local player controller. (userdata)
            CreateByClassname               	= handle CreateByClassname(string)
Creates an entity by classname (userdata)
            FindByClassname                 	= handle FindByClassname(handle, string)
Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByClassname              	= table FindAllByClassname(string)
Finds all entities by class name. Returns an array containing all the found entities. (userdata)
            FindByName                      	= handle FindByName(handle, string)
Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
            FindAllByName                   	= table FindAllByName(string)
Find all entities by name. Returns an array containing all the found entities in it. (userdata)
            FindInSphere                    	= handle FindInSphere(handle, Vector, float)
Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search (userdata)
         }
         FindByNameNearest               	= function: 0x0024b040 (function)
         FindByNameWithin                	= function: 0x0024b0f8 (function)
         FindAllByNameWithin             	= function: 0x0024bb48 (function)
         FindByClassnameNearest          	= function: 0x0024bc00 (function)
         FindByClassnameWithin           	= function: 0x0024bcb8 (function)
         FindAllByClassnameWithin        	= function: 0x0024bd70 (function)
         FindByModelWithin               	= function: 0x0024aeb8 (function)
         FindAllInSphere                 	= function: 0x0024b278 (function)
         First                           	= function: 0x0024a7a8 (function)
         Next                            	= function: 0x0024a890 (function)
         GetLocalPlayer                  	= function: 0x0024a938 (function)
         GetLocalPlayerPawn              	= function: 0x0024aad8 (function)
         GetLocalPlayerController        	= function: 0x0024ab58 (function)
         CreateByClassname               	= function: 0x0024aa70 (function)
         FindByClassname                 	= function: 0x0024ad58 (function)
         FindAllByClassname              	= function: 0x0024a9e8 (function)
         FindByName                      	= function: 0x0024af90 (function)
         FindAllByName                   	= function: 0x0024ac18 (function)
         FindInSphere                    	= function: 0x0024b1c8 (function)
      }
      CDOTATutorial                   	= table: 0x00346b18 (table, already seen)
      CDOTA_Modifier_Lua_Motion_Both  	= table: 0x0023c960 (table, already seen)
      CBaseCombatCharacter            	= table: 0x0029b5a8 (table, already seen)
      CDOTA_BaseNPC                   	= table: 0x00233f70 (table, already seen)
      CDOTA_BaseNPC_Trap_Ward         	= table: 0x002a57d0 (table)
      {
         metatable                       	= table: 0x002a3930 (table, already seen)
         IsNull                          	= function: 0x002a5818 (function)
         FDesc                           	= table: 0x002a3a70 (table)
         {
            GetTrapTarget                   	= Vector GetTrapTarget()
Get the trap target for this entity. (userdata)
            SetAnimation                    	= void SetAnimation(string pAnimation)
Set the animation sequence for this entity. (userdata)
         }
         GetTrapTarget                   	= function: 0x002a3e80 (function)
         SetAnimation                    	= function: 0x002a5850 (function)
      }
      CBaseEntity                     	= table: 0x0023e628 (table, already seen)
      CScriptParticleManager          	= table: 0x002358d8 (table, already seen)
      CBaseAnimatingActivity          	= table: 0x0029a3b8 (table, already seen)
      CDOTA_NeutralSpawner            	= table: 0x0029b8d8 (table)
      {
         metatable                       	= table: 0x002a43f8 (table, already seen)
         IsNull                          	= function: 0x0029b920 (function)
         SpawnNextBatch                  	= function: 0x002bac58 (function)
         FDesc                           	= table: 0x0029b990 (table)
         {
            SpawnNextBatch                  	= void SpawnNextBatch(bool bIgnoreBlockers)
 (userdata)
            SelectSpawnType                 	= void SelectSpawnType()
 (userdata)
            CreatePendingUnits              	= void CreatePendingUnits()
 (userdata)
         }
         SelectSpawnType                 	= function: 0x0029b9d8 (function)
         CreatePendingUnits              	= function: 0x002baba0 (function)
      }
      CFoWBlockerRegion               	= table: 0x002dbf68 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         IsNull                          	= function: 0x002dbfb0 (function)
         FDesc                           	= table: 0x002dc020 (table)
         {
            AddRectangularBlocker           	= void AddRectangularBlocker(Vector vMins, Vector vMaxs, bool bClearRegion)
AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle (userdata)
            AddRectangularOutlineBlocker    	= void AddRectangularOutlineBlocker(Vector vMins, Vector vMaxs, bool bClearRegion)
AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline (userdata)
         }
         AddRectangularBlocker           	= function: 0x002dc068 (function)
         AddRectangularOutlineBlocker    	= function: 0x002dc188 (function)
      }
      CDOTA_Item_EmptyBottle          	= table: 0x002ea900 (table)
      {
         metatable                       	= table: 0x002d8cd8 (table, already seen)
         IsNull                          	= function: 0x002ea948 (function)
         OnRune                          	= function: 0x002eaa00 (function)
         SetStoredRune                   	= function: 0x002eaae8 (function)
         ClearStoredRune                 	= function: 0x002eab98 (function)
         FDesc                           	= table: 0x002ea9b8 (table)
         {
            ClearStoredRune                 	= void ClearStoredRune()
Clear the stored rune. (userdata)
            OnRune                          	= bool OnRune(int iRuneType)
Place a rune in the bottle. (userdata)
            SetStoredRune                   	= void SetStoredRune(int iRuneType)
Set the stored rune. (userdata)
         }
      }
   }
   RandomFloatWrapper              	= function: 0x00218c98 (function)
   ACT_RESET                       	= 0 (number)
   ACT_WALK                        	= 6 (number)
   ACT_WALK_CROUCH_AIM             	= 9 (number)
   ACT_RUN_PROTECTED               	= 14 (number)
   ACT_DIESIMPLE                   	= 20 (number)
   ACT_MP_ATTACK_STAND_GRENADE_MELEE	= 638 (number)
   ACT_MP_STAND_ITEM2              	= 659 (number)
   CPhysicsProp                    	= table: 0x002f1f70 (table, already seen)
   CDOTA_Ability_DataDriven        	= table: 0x002f1bd8 (table, already seen)
   CDOTA_Ability_Lua               	= table: 0x002f0318 (table, already seen)
   CDOTA_Item_DataDriven           	= table: 0x002eff08 (table, already seen)
   CDOTA_Item_Lua                  	= table: 0x002ed378 (table, already seen)
   CDOTA_Unit_Courier              	= table: 0x002ecf80 (table, already seen)
   CDOTA_Unit_CustomGameAnnouncer  	= table: 0x002ecc60 (table, already seen)
   CDOTA_Ability_Nian_Dive         	= table: 0x002ec938 (table, already seen)
   CDOTA_Ability_Nian_Roar         	= table: 0x002ec5e8 (table, already seen)
   CDOTA_Unit_Nian                 	= table: 0x002c22e0 (table, already seen)
   CDOTA_Ability_Animation_TailSpin	= table: 0x002eb6f8 (table, already seen)
   CDOTA_Ability_Animation_Attack  	= table: 0x002eb3c8 (table, already seen)
   CDOTA_Ability_Nian_Leap         	= table: 0x002eb070 (table, already seen)
   CDOTA_Unit_Scout                	= table: 0x002eae38 (table, already seen)
   CDOTA_Item_EmptyBottle          	= table: 0x002ea900 (table, already seen)
   CDOTA_SimpleObstruction         	= table: 0x002ea560 (table, already seen)
   CDOTABaseGameMode               	= table: 0x002dfe40 (table, already seen)
   CBasePlayerController           	= table: 0x002ba850 (table, already seen)
   CParticleSystem                 	= table: 0x002ba618 (table, already seen)
   CEnvEntityMaker                 	= table: 0x002dec80 (table, already seen)
   CLogicScript                    	= table: 0x002dea50 (table, already seen)
   CMarkupVolumeTagged             	= table: 0x002de738 (table, already seen)
   CBaseAnimGraph                  	= table: 0x002ddcc8 (table, already seen)
   MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED	= 202 (number)
   CPointWorldText                 	= table: 0x002dd980 (table, already seen)
   MODIFIER_EVENT_ON_ATTACKED      	= 203 (number)
   CSceneEntity                    	= table: 0x002dce08 (table, already seen)
   MODIFIER_EVENT_ON_DEATH         	= 204 (number)
   ACT_DOTA_TELEPORT_COOP_EXIT     	= 1694 (number)
   MODIFIER_EVENT_ON_DEATH_COMPLETED	= 205 (number)
   CDOTA_Ability_Aghanim_Spear     	= table: 0x002dc6d8 (table, already seen)
   MODIFIER_EVENT_ON_RESPAWN       	= 206 (number)
   CDOTA_Item_BagOfGold            	= table: 0x002dc380 (table, already seen)
   AE_DOTA_PLAY_SOUND_ATTACK       	= 50 (number)
   DMG_GENERIC                     	= 0 (number)
   DMG_CRUSH                       	= 1 (number)
   DMG_BULLET                      	= 2 (number)
   DMG_SLASH                       	= 4 (number)
   DMG_BURN                        	= 8 (number)
   DMG_VEHICLE                     	= 16 (number)
   DMG_FALL                        	= 32 (number)
   DMG_BLAST                       	= 64 (number)
   DMG_CLUB                        	= 128 (number)
   DMG_SHOCK                       	= 256 (number)
   DMG_SONIC                       	= 512 (number)
   DMG_ENERGYBEAM                  	= 1024 (number)
   DMG_PREVENT_PHYSICS_FORCE       	= 2048 (number)
   DMG_NEVERGIB                    	= 4096 (number)
   DMG_ALWAYSGIB                   	= 8192 (number)
   MODIFIER_EVENT_ON_HERO_KILLED   	= 215 (number)
   CFoWBlockerRegion               	= table: 0x002dbf68 (table, already seen)
   MODIFIER_EVENT_ON_HEAL_RECEIVED 	= 216 (number)
   CDOTA_Item                      	= table: 0x002d8cd8 (table, already seen)
   MODIFIER_EVENT_ON_BUILDING_KILLED	= 217 (number)
   CDOTA_Item_Physical             	= table: 0x002d85e8 (table, already seen)
   MODIFIER_EVENT_ON_MODEL_CHANGED 	= 218 (number)
   CDOTA_ItemSpawner               	= table: 0x002d8298 (table, already seen)
   MODIFIER_EVENT_ON_MODIFIER_ADDED	= 219 (number)
   MODIFIER_EVENT_ON_ATTACK_RECORD 	= 180 (number)
   MODIFIER_EVENT_ON_MODIFIER_REMOVED	= 220 (number)
   MODIFIER_EVENT_ON_ATTACK_START  	= 181 (number)
   MODIFIER_PROPERTY_TOOLTIP       	= 221 (number)
   MODIFIER_EVENT_ON_ATTACK        	= 182 (number)
   MODIFIER_PROPERTY_MODEL_CHANGE  	= 222 (number)
   MODIFIER_EVENT_ON_ATTACK_LANDED 	= 183 (number)
   MODIFIER_PROPERTY_MODEL_SCALE   	= 223 (number)
   MODIFIER_EVENT_ON_ATTACK_FAIL   	= 184 (number)
   MODIFIER_PROPERTY_MODEL_SCALE_ANIMATE_TIME	= 224 (number)
   MODIFIER_EVENT_ON_ATTACK_ALLIED 	= 185 (number)
   MODIFIER_PROPERTY_MODEL_SCALE_USE_IN_OUT_EASE	= 225 (number)
   MODIFIER_EVENT_ON_PROJECTILE_DODGE	= 186 (number)
   MODIFIER_PROPERTY_MODEL_SCALE_CONSTANT	= 226 (number)
   MODIFIER_EVENT_ON_ORDER         	= 187 (number)
   MODIFIER_PROPERTY_IS_SCEPTER    	= 227 (number)
   MODIFIER_EVENT_ON_UNIT_MOVED    	= 188 (number)
   MODIFIER_PROPERTY_IS_SHARD      	= 228 (number)
   MODIFIER_EVENT_ON_ABILITY_START 	= 189 (number)
   MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION	= 229 (number)
   MODIFIER_EVENT_ON_ABILITY_EXECUTED	= 190 (number)
   MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS	= 230 (number)
   MODIFIER_EVENT_ON_ABILITY_FULLY_CAST	= 191 (number)
   MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND	= 231 (number)
   MODIFIER_EVENT_ON_BREAK_INVISIBILITY	= 192 (number)
   MODIFIER_PROPERTY_LIFETIME_FRACTION	= 232 (number)
   MODIFIER_EVENT_ON_ABILITY_END_CHANNEL	= 193 (number)
   MODIFIER_EVENT_ON_PROCESS_UPGRADE	= 194 (number)
   MODIFIER_EVENT_ON_REFRESH       	= 195 (number)
   MODIFIER_PROPERTY_SPELLS_REQUIRE_HP	= 234 (number)
   MODIFIER_EVENT_ON_TAKEDAMAGE    	= 196 (number)
   MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP	= 235 (number)
   MODIFIER_EVENT_ON_DEATH_PREVENTED	= 197 (number)
   MODIFIER_PROPERTY_DISABLE_TURNING	= 236 (number)
   MODIFIER_EVENT_ON_STATE_CHANGED 	= 198 (number)
   MODIFIER_EVENT_ON_ORB_EFFECT    	= 199 (number)
   CDOTAPlayerController           	= table: 0x002d27a0 (table, already seen)
   MODIFIER_EVENT_ON_PROCESS_CLEAVE	= 200 (number)
   CBasePlayerPawn                 	= table: 0x002d21a0 (table, already seen)
   MODIFIER_EVENT_ON_DAMAGE_CALCULATED	= 201 (number)
   ACT_WALK_AIM_AUTOGUN            	= 876 (number)
   MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE	= 240 (number)
   ACT_DOTA_FLEE                   	= 1685 (number)
   MODIFIER_PROPERTY_ABILITY_LAYOUT	= 241 (number)
   ACT_DOTA_ARCTIC_BURN_END        	= 1682 (number)
   MODIFIER_EVENT_ON_DOMINATED     	= 242 (number)
   CDOTA_BaseNPC_Hero              	= table: 0x002bc200 (table, already seen)
   MODIFIER_EVENT_ON_KILL          	= 243 (number)
   CDOTA_BaseNPC_NeutralItemStash  	= table: 0x002bbfc8 (table, already seen)
   MODIFIER_EVENT_ON_ASSIST        	= 244 (number)
   CDOTA_ShopTrigger               	= table: 0x002bbc20 (table, already seen)
   MODIFIER_PROPERTY_TEMPEST_DOUBLE	= 245 (number)
   CBaseTrigger                    	= table: 0x002bb6f0 (table, already seen)
   MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE	= 246 (number)
   CDOTA_BaseNPC_Shop              	= table: 0x002bb2f8 (table, already seen)
   MODIFIER_EVENT_ON_ATTACK_FINISHED	= 247 (number)
   CDOTA_BaseNPC_Building          	= table: 0x002baef8 (table, already seen)
   MODIFIER_PROPERTY_IGNORE_COOLDOWN	= 248 (number)
   CDOTA_NeutralSpawner            	= table: 0x0029b8d8 (table, already seen)
   MODIFIER_PROPERTY_CAN_ATTACK_TREES	= 249 (number)
   CPointEntity                    	= table: 0x002a43f8 (table, already seen)
   MODIFIER_PROPERTY_VISUAL_Z_DELTA	= 250 (number)
   ACT_DOTA_FLAIL_STATUE           	= 1780 (number)
   MODIFIER_PROPERTY_VISUAL_Z_SPEED_BASE_OVERRIDE	= 251 (number)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION	= 252 (number)
   StartSoundEventFromPositionUnreliable	= function: 0x002483f0 (function)
   MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER	= 253 (number)
   CBaseCombatCharacter            	= table: 0x0029b5a8 (table, already seen)
   MODIFIER_PROPERTY_TOOLTIP2      	= 254 (number)
   CBaseFlex                       	= table: 0x0029b040 (table, already seen)
   MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY	= 255 (number)
   DoIncludeScript                 	= function: 0x00298038 (function)
   MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT	= 256 (number)
   GetUnitKeyValuesByName          	= function: 0x00297f80 (function)
   MODIFIER_PROPERTY_SUPPRESS_TELEPORT	= 257 (number)
   GetAbilityKeyValuesByName       	= function: 0x00297ec0 (function)
   MODIFIER_EVENT_ON_ATTACK_CANCELLED	= 258 (number)
   GetAbilityTextureNameForAbility 	= function: 0x00297e00 (function)
   MODIFIER_PROPERTY_SUPPRESS_CLEAVE	= 259 (number)
   CreateHTTPRequestScriptVM       	= function: 0x00297d40 (function)
   MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS	= 260 (number)
   CreateHTTPRequest               	= function: 0x00297c88 (function)
   MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE	= 261 (number)
   UnitFilter                      	= function: 0x00297bd8 (function)
   MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE	= 262 (number)
   MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET	= 263 (number)
   LinkLuaModifier                 	= function: 0x00337d88 (function)
   MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE	= 264 (number)
   DOTA_MAX_ABILITIES              	= 35 (number)
   MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE	= 265 (number)
   SPAWN_GROUP_HANDLE_INVALID      	= 0 (number)
   MODIFIER_EVENT_ON_PREDEBUFF_APPLIED	= 266 (number)
   k_ECustomCameraEventFlags_LetterboxOff	= 4096 (number)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING	= 267 (number)
   k_ECustomCameraEventFlags_LetterboxOn	= 2048 (number)
   MODIFIER_PROPERTY_SPELL_REDIRECT_TARGET	= 268 (number)
   k_ECustomCameraEventFlags_FadeIn	= 1024 (number)
   MODIFIER_PROPERTY_TURN_RATE_CONSTANT	= 269 (number)
   k_ECustomCameraEventFlags_FadeOut	= 512 (number)
   MODIFIER_PROPERTY_RAT_PACK      	= 270 (number)
   k_ECustomCameraEventFlags_SpecificPlayer	= 256 (number)
   MODIFIER_PROPERTY_PHYSICALDAMAGEOUTGOING_PERCENTAGE	= 271 (number)
   k_ECustomCameraEventFlags_ResetDefault	= 128 (number)
   MODIFIER_PROPERTY_KNOCKBACK_AMPLIFICATION_PERCENTAGE	= 272 (number)
   k_ECustomCameraEventFlags_Unlock	= 64 (number)
   MODIFIER_PROPERTY_HEALTHBAR_PIPS	= 273 (number)
   k_ECustomCameraEventFlags_Lock  	= 32 (number)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_CONSTANT	= 274 (number)
   k_ECustomCameraEventFlags_Yaw   	= 16 (number)
   MODIFIER_EVENT_SPELL_APPLIED_SUCCESSFULLY	= 275 (number)
   k_ECustomCameraEventFlags_Pitch 	= 8 (number)
   MODIFIER_PROPERTY_AVOID_DAMAGE_AFTER_REDUCTIONS	= 276 (number)
   k_ECustomCameraEventFlags_PositionPlayerHero	= 4 (number)
   MODIFIER_PROPERTY_FAIL_ATTACK   	= 277 (number)
   k_ECustomCameraEventFlags_Position	= 2 (number)
   MODIFIER_PROPERTY_PREREDUCE_INCOMING_DAMAGE_MULT	= 278 (number)
   k_ECustomCameraEventFlags_Zoom  	= 1 (number)
   MODIFIER_PROPERTY_SUPPRESS_FULLSCREEN_DEATH_FX	= 279 (number)
   MODIFIER_PROPERTY_INCOMING_DAMAGE_CONSTANT_POST	= 280 (number)
   DOTA_CLICK_BEHAVIOR_LAST        	= 12 (number)
   MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_MULTIPLICATIVE	= 281 (number)
   DOTA_CLICK_BEHAVIOR_RADAR       	= 11 (number)
   MODIFIER_PROPERTY_TICK_GOLD_MULTIPLIER	= 282 (number)
   DOTA_CLICK_BEHAVIOR_UNUSED      	= 10 (number)
   MODIFIER_PROPERTY_SLOW_RESISTANCE	= 283 (number)
   DOTA_CLICK_BEHAVIOR_VECTOR_CAST 	= 9 (number)
   MODIFIER_PROPERTY_AOE_BONUS_PERCENTAGE	= 284 (number)
   DOTA_CLICK_BEHAVIOR_PATROL      	= 8 (number)
   MODIFIER_PROPERTY_PROJECTILE_SPEED	= 285 (number)
   DOTA_CLICK_BEHAVIOR_LEARN_ABILITY	= 7 (number)
   MODIFIER_PROPERTY_BECOME_UNIVERSAL	= 286 (number)
   DOTA_CLICK_BEHAVIOR_DRAG        	= 6 (number)
   MODIFIER_EVENT_ON_FORCE_PROC_MAGIC_STICK	= 287 (number)
   DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM	= 5 (number)
   MODIFIER_EVENT_ON_DAMAGE_HPLOSS 	= 288 (number)
   DOTA_CLICK_BEHAVIOR_DROP_ITEM   	= 4 (number)
   MODIFIER_PROPERTY_FORCE_MAX_HEALTH	= 289 (number)
   DOTA_CLICK_BEHAVIOR_CAST        	= 3 (number)
   MODIFIER_PROPERTY_AOE_BONUS_CONSTANT	= 290 (number)
   DOTA_CLICK_BEHAVIOR_ATTACK      	= 2 (number)
   MODIFIER_EVENT_ON_TAKEDAMAGE_POST_UNAVOIDABLE_BLOCK	= 291 (number)
   DOTA_CLICK_BEHAVIOR_MOVE        	= 1 (number)
   MODIFIER_EVENT_ON_MUTE_DAMAGE_ABILITIES	= 292 (number)
   DOTA_CLICK_BEHAVIOR_NONE        	= 0 (number)
   MODIFIER_PROPERTY_SUPPRESS_CRIT 	= 293 (number)
   MODIFIER_FUNCTION_LAST          	= 294 (number)
   MODIFIER_FUNCTION_INVALID       	= 65535 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GENERIC	= 76 (number)
   MODIFIER_STATE_ROOTED           	= 0 (number)
   MODIFIER_STATE_DISARMED         	= 1 (number)
   MODIFIER_STATE_ATTACK_IMMUNE    	= 2 (number)
   MODIFIER_STATE_SILENCED         	= 3 (number)
   MODIFIER_STATE_MUTED            	= 4 (number)
   MODIFIER_STATE_STUNNED          	= 5 (number)
   MODIFIER_STATE_HEXED            	= 6 (number)
   MODIFIER_STATE_INVISIBLE        	= 7 (number)
   MODIFIER_STATE_INVULNERABLE     	= 8 (number)
   MODIFIER_STATE_MAGIC_IMMUNE     	= 9 (number)
   MODIFIER_STATE_PROVIDES_VISION  	= 10 (number)
   MODIFIER_STATE_NIGHTMARED       	= 11 (number)
   MODIFIER_STATE_BLOCK_DISABLED   	= 12 (number)
   MODIFIER_STATE_EVADE_DISABLED   	= 13 (number)
   MODIFIER_STATE_UNSELECTABLE     	= 14 (number)
   MODIFIER_STATE_CANNOT_TARGET_ENEMIES	= 15 (number)
   MODIFIER_STATE_CANNOT_TARGET_BUILDINGS	= 16 (number)
   MODIFIER_STATE_CANNOT_MISS      	= 17 (number)
   MODIFIER_STATE_SPECIALLY_DENIABLE	= 18 (number)
   MODIFIER_STATE_FROZEN           	= 19 (number)
   MODIFIER_STATE_COMMAND_RESTRICTED	= 20 (number)
   MODIFIER_STATE_NOT_ON_MINIMAP   	= 21 (number)
   MODIFIER_STATE_LOW_ATTACK_PRIORITY	= 22 (number)
   MODIFIER_STATE_NO_HEALTH_BAR    	= 23 (number)
   MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES	= 24 (number)
   MODIFIER_STATE_NO_HEALTH_BAR_FOR_OTHER_PLAYERS	= 25 (number)
   MODIFIER_STATE_FLYING           	= 26 (number)
   MODIFIER_STATE_NO_UNIT_COLLISION	= 27 (number)
   MODIFIER_STATE_NO_TEAM_MOVE_TO  	= 28 (number)
   MODIFIER_STATE_NO_TEAM_SELECT   	= 29 (number)
   MODIFIER_STATE_PASSIVES_DISABLED	= 30 (number)
   MODIFIER_STATE_DOMINATED        	= 31 (number)
   MODIFIER_STATE_BLIND            	= 32 (number)
   MODIFIER_STATE_OUT_OF_GAME      	= 33 (number)
   MODIFIER_STATE_FAKE_ALLY        	= 34 (number)
   MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY	= 35 (number)
   MODIFIER_STATE_TRUESIGHT_IMMUNE 	= 36 (number)
   MODIFIER_STATE_UNTARGETABLE     	= 37 (number)
   MODIFIER_STATE_UNTARGETABLE_ALLIED	= 38 (number)
   MODIFIER_STATE_UNTARGETABLE_ENEMY	= 39 (number)
   MODIFIER_STATE_UNTARGETABLE_SELF	= 40 (number)
   MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS	= 41 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES	= 42 (number)
   MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES	= 43 (number)
   MODIFIER_STATE_UNSLOWABLE       	= 44 (number)
   MODIFIER_STATE_TETHERED         	= 45 (number)
   MODIFIER_STATE_IGNORING_STOP_ORDERS	= 46 (number)
   DOTA_PSEUDO_RANDOM_TROLL_FERVOR_SHARD	= 75 (number)
   DOTA_PSEUDO_RANDOM_MUERTA_GUNSLINGER	= 74 (number)
   DOTA_PSEUDO_RANDOM_MARS_BULWARK 	= 73 (number)
   DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER5	= 72 (number)
   DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER4	= 71 (number)
   DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER3	= 70 (number)
   DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER2	= 69 (number)
   DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER1	= 68 (number)
   DOTA_PSEUDO_RANDOM_ANTIMAGE_SILENT	= 67 (number)
   DOTA_PSEUDO_RANDOM_MARS_SHIELD  	= 66 (number)
   DOTA_PSEUDO_RANDOM_ARMADILLO_HEARTPIERCER	= 65 (number)
   DOTA_PSEUDO_RANDOM_GENERIC_MISS 	= 64 (number)
   DOTA_PSEUDO_RANDOM_GENERIC_HEIGHT_MISS	= 63 (number)
   DOTA_PSEUDO_RANDOM_GENERIC_EVASION	= 62 (number)
   DOTA_PSEUDO_RANDOM_CHAOS_TRIPLE_CRIT	= 61 (number)
   DOTA_PSEUDO_RANDOM_CHAOS_DOUBLE_CRIT	= 60 (number)
   DOTA_PSEUDO_RANDOM_RIKI_SMOKE_SCREEN	= 59 (number)
   DOTA_PSEUDO_RANDOM_TROLL_BASH   	= 58 (number)
   DOTA_PSEUDO_RANDOM_ITEM_NAGINATA	= 57 (number)
   DOTA_PSEUDO_RANDOM_ITEM_SILVER_EDGE	= 56 (number)
   DOTA_PSEUDO_RANDOM_ITEM_MKB     	= 55 (number)
   DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC	= 54 (number)
   DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR	= 53 (number)
   DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM	= 52 (number)
   DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY	= 51 (number)
   DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM	= 50 (number)
   DOTA_PSEUDO_RANDOM_ITEM_SANGEKAYA_MAIM	= 49 (number)
   DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM	= 48 (number)
   DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM	= 47 (number)
   DOTA_PSEUDO_RANDOM_ITEM_PMS     	= 46 (number)
   DOTA_PSEUDO_RANDOM_ITEM_CRIMSON_GUARD	= 45 (number)
   DOTA_PSEUDO_RANDOM_ITEM_VANGUARD	= 44 (number)
   DOTA_PSEUDO_RANDOM_ITEM_STOUT   	= 43 (number)
   DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL_BLOCK	= 42 (number)
   DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL 	= 41 (number)
   DOTA_PSEUDO_RANDOM_ITEM_TRIDENT 	= 40 (number)
   DOTA_PSEUDO_RANDOM_ITEM_JAVELIN_ACCURACY	= 39 (number)
   DOTA_PSEUDO_RANDOM_ITEM_SOLAR_CREST	= 38 (number)
   DOTA_PSEUDO_RANDOM_ITEM_BASHER  	= 37 (number)
   DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT	= 36 (number)
   DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT	= 35 (number)
   DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT_MORTAL	= 34 (number)
   DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT	= 33 (number)
   DOTA_PSEUDO_RANDOM_GENERIC_BASHER	= 32 (number)
   DOTA_PSEUDO_RANDOM_CM_FREEZING_FIELD	= 31 (number)
   DOTA_PSEUDO_RANDOM_TUSK_CRIT    	= 30 (number)
   DOTA_PSEUDO_RANDOM_LYCAN_CRIT   	= 29 (number)
   DOTA_PSEUDO_RANDOM_CHAOS_CRIT   	= 28 (number)
   DOTA_PSEUDO_RANDOM_DAZZLE_SCEPTER	= 27 (number)
   DOTA_PSEUDO_RANDOM_JUGG_CRIT    	= 26 (number)
   DOTA_PSEUDO_RANDOM_ATOS         	= 25 (number)
   DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT	= 24 (number)
   DOTA_PSEUDO_RANDOM_BREWMASTER_CINDER_BREW	= 23 (number)
   DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT	= 22 (number)
   DOTA_PSEUDO_RANDOM_FACELESS_VOID_BACKTRACK	= 21 (number)
   DOTA_PSEUDO_RANDOM_FACELESS_EVADE_ATTACK	= 20 (number)
   DOTA_PSEUDO_RANDOM_FACELESS_EVADE_SPELL	= 19 (number)
   DOTA_PSEUDO_RANDOM_FACELESS_BASH	= 18 (number)
   DOTA_PSEUDO_RANDOM_LONE_DRUID_ENTANGLE	= 17 (number)
   DOTA_PSEUDO_RANDOM_SPIRITBREAKER_GREATERBASH	= 16 (number)
   DOTA_PSEUDO_RANDOM_OGRE_ITEM_MULTICAST	= 15 (number)
   DOTA_MAX_SPECTATOR_TEAM_SIZE    	= 40 (number)
   DOTA_PSEUDO_RANDOM_OGRE_MAGI_FIREBLAST	= 14 (number)
   DOTA_MAX_SPECTATOR_LOBBY_SIZE   	= 15 (number)
   DOTA_PSEUDO_RANDOM_DROW_MARKSMANSHIP	= 13 (number)
   DOTA_DEFAULT_MAX_TEAM           	= 5 (number)
   DOTA_PSEUDO_RANDOM_OD_ESSENCE   	= 12 (number)
   DOTA_DEFAULT_MAX_TEAM_PLAYERS   	= 10 (number)
   DOTA_PSEUDO_RANDOM_SLARDAR_BASH 	= 11 (number)
   ABILITY_CAN_BE_UPGRADED         	= 0 (number)
   ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE	= 1 (number)
   ABILITY_CANNOT_BE_UPGRADED_AT_MAX	= 2 (number)
   ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL	= 3 (number)
   ABILITY_NOT_LEARNABLE           	= 4 (number)
   DOTA_PSEUDO_RANDOM_LEGION_MOMENT	= 10 (number)
   ABILITY_TYPE_BASIC              	= 0 (number)
   ABILITY_TYPE_ULTIMATE           	= 1 (number)
   ABILITY_TYPE_ATTRIBUTES         	= 2 (number)
   ABILITY_TYPE_HIDDEN             	= 3 (number)
   DOTA_PSEUDO_RANDOM_AXE_HELIX_ATTACK	= 9 (number)
   DOTA_ORDER_SUCCESS              	= -1 (number)
   DOTA_INVALID_ORDER_NOT_CONTROLLABLE_BY_PLAYER	= 0 (number)
   DOTA_INVALID_ORDER_UNIT_IS_NOT_NPC	= 1 (number)
   DOTA_INVALID_ORDER_BAD_ABILITY_ENTITY	= 2 (number)
   DOTA_INVALID_ORDER_UNRECOGNIZED_ORDER	= 3 (number)
   DOTA_INVALID_ORDER_ABILITY_REQUIRED	= 4 (number)
   DOTA_INVALID_ORDER_NPC_TARGET_REQUIRED	= 5 (number)
   DOTA_INVALID_ORDER_TARGET_TREE_INDEX_NOT_A_TREE	= 6 (number)
   DOTA_INVALID_ORDER_TARGET_ENTITY_INDEX_OUT_OF_RANGE	= 7 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_AN_ITEM	= 8 (number)
   DOTA_INVALID_ORDER_PHYSICAL_ITEM_TARGET_REQUIRED	= 9 (number)
   DOTA_INVALID_ORDER_RUNE_TARGET_REQUIRED	= 10 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_OWNED_BY_UNIT	= 11 (number)
   DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED	= 12 (number)
   DOTA_INVALID_ORDER_NO_POINTS_FOR_ABILITY_UPGRADE	= 13 (number)
   DOTA_INVALID_ORDER_NOT_ENOUGH_MANA	= 14 (number)
   DOTA_INVALID_ORDER_ABILITY_IN_COOLDOWN	= 15 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_LEARNED	= 16 (number)
   DOTA_INVALID_ORDER_CANT_CAST_PASSIVE_ABILITY	= 17 (number)
   DOTA_INVALID_ORDER_PHANTOM_TARGET	= 18 (number)
   DOTA_INVALID_ORDER_DEAD_TARGET  	= 19 (number)
   DOTA_INVALID_ORDER_UNIT_IS_DEAD 	= 20 (number)
   DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ENEMY	= 21 (number)
   DOTA_INVALID_ORDER_TARGET_INVULNERABLE	= 22 (number)
   DOTA_INVALID_ORDER_TARGET_ATTACK_IMMUNE	= 23 (number)
   DOTA_INVALID_ORDER_UNIT_SILENCED	= 24 (number)
   DOTA_INVALID_ORDER_ABILITY_CANT_BE_TOGGLED	= 25 (number)
   DOTA_INVALID_ORDER_TARGET_CANT_BE_SEEN	= 26 (number)
   DOTA_INVALID_ORDER_TARGET_INVISIBLE	= 27 (number)
   DOTA_INVALID_ORDER_HERO_CANT_BE_DENIED	= 28 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_TEAMMATE	= 29 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_ENEMY	= 30 (number)
   DOTA_INVALID_ORDER_UNIT_CANT_MOVE	= 31 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_ATTACK_IMMUNE	= 32 (number)
   DOTA_INVALID_ORDER_PURCHASE_INVALID_ITEM	= 33 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_IN_INVENTORY	= 34 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_IN_UNIT_INVENTORY	= 35 (number)
   DOTA_INVALID_ORDER_TARGET_UNSELECTABLE	= 36 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_IN_ACTIVE_INVENTORY	= 37 (number)
   DOTA_INVALID_ORDER_UNIT_CANT_PICK_UP_RUNES	= 38 (number)
   DOTA_INVALID_ORDER_UNIT_CANT_MANIPULATE_ITEMS	= 39 (number)
   DOTA_INVALID_ORDER_UNIT_IS_ILLUSION	= 40 (number)
   DOTA_INVALID_ORDER_UNIT_CANT_ATTACK	= 41 (number)
   DOTA_INVALID_ORDER_ITEM_CANT_BE_DROPPED	= 42 (number)
   DOTA_INVALID_ORDER_TARGET_TREE_NOT_ACTIVE	= 43 (number)
   DOTA_INVALID_ORDER_ABILITY_CANT_AUTO_CAST	= 44 (number)
   DOTA_INVALID_ORDER_TARGET_POSITION_OFF_MAP	= 45 (number)
   DOTA_INVALID_ORDER_UNIT_CANT_MOVE_TARGET_OUT_OF_RANGE	= 46 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_HERO	= 47 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_OTHER	= 48 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_BUILDING	= 49 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_ANCIENT	= 50 (number)
   DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_STASH	= 51 (number)
   DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_SLOT	= 52 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_MECHANICAL	= 53 (number)
   DOTA_INVALID_ORDER_CANT_ACCEPT_ATTACK_TARGET	= 54 (number)
   DOTA_INVALID_ORDER_CANT_CAST_NO_CHARGES	= 55 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_CREEP	= 56 (number)
   DOTA_INVALID_ORDER_TARGET_CANT_TAKE_ITEMS	= 57 (number)
   DOTA_INVALID_ORDER_CANT_GIVE_ITEM_TO_ENEMY	= 58 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_COURIER	= 59 (number)
   DOTA_INVALID_ORDER_ABILITY_IS_HIDDEN	= 60 (number)
   DOTA_INVALID_ORDER_ITEM_IN_COOLDOWN	= 61 (number)
   DOTA_INVALID_ORDER_SECRET_SHOP_NOT_IN_RANGE	= 62 (number)
   DOTA_INVALID_ORDER_NOT_ENOUGH_GOLD	= 63 (number)
   DOTA_INVALID_ORDER_PURCHASE_AUTOCOMBINE_RECIPE	= 64 (number)
   DOTA_INVALID_ORDER_CANT_DENY_HEALTH_TOO_HIGH	= 65 (number)
   DOTA_INVALID_ORDER_SIDE_SHOP_NOT_IN_RANGE	= 66 (number)
   DOTA_INVALID_ORDER_HOME_SHOP_NOT_IN_RANGE	= 67 (number)
   DOTA_INVALID_ORDER_CANT_PICK_UP_ITEM	= 68 (number)
   DOTA_INVALID_ORDER_CANT_SELL_NO_SHOP_IN_RANGE	= 69 (number)
   DOTA_INVALID_ORDER_CANT_SELL_ITEM	= 70 (number)
   DOTA_INVALID_ORDER_CANT_SELL_ITEM_WHILE_DEAD	= 71 (number)
   DOTA_INVALID_ORDER_TARGET_CANT_BE_DENIED	= 72 (number)
   DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_ROOT	= 73 (number)
   DOTA_INVALID_ORDER_UNIT_COMMAND_RESTRICTED	= 74 (number)
   DOTA_INVALID_ORDER_UNIT_MUTED   	= 75 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_SUMMONED	= 76 (number)
   DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ALLY	= 77 (number)
   DOTA_INVALID_ORDER_CANT_PURCHASE_DISALLOWED_ITEM	= 78 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_DOMINATED	= 79 (number)
   DOTA_INVALID_ORDER_CAST_CUSTOM  	= 80 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_DISASSEMBLABLE	= 81 (number)
   DOTA_INVALID_ORDER_ITEM_OUT_OF_STOCK	= 82 (number)
   DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED_AT_MAX	= 83 (number)
   DOTA_INVALID_ORDER_ABILITY_INACTIVE	= 84 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_IN_MAIN_INVENTORY	= 85 (number)
   DOTA_INVALID_ORDER_CANT_GLYPH   	= 86 (number)
   DOTA_INVALID_ORDER_CANT_DRAG_CHANNELING_ITEM	= 87 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_A_HERO	= 88 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_DEAD	= 89 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_NOT_ENOUGH_GOLD	= 90 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_IN_COOLDOWN	= 91 (number)
   DOTA_INVALID_ORDER_CANT_DISASSEMBLE_STASH_OUT_OF_RANGE	= 92 (number)
   DOTA_INVALID_ORDER_CANT_EJECT_ITEM_NOT_IN_STASH	= 93 (number)
   DOTA_INVALID_ORDER_GAME_IS_PAUSED	= 94 (number)
   DOTA_INVALID_ORDER_CANT_CAST_ON_CONSIDERED_HERO	= 95 (number)
   DOTA_INVALID_ORDER_CANT_SHOP_AUTO_BUY_ENABLED	= 96 (number)
   DOTA_INVALID_ORDER_ONLY_DELIBERATE_CHANNELING_CANCEL	= 97 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_REAPERS_SCYTHE	= 98 (number)
   DOTA_INVALID_ORDER_CANT_BUYBACK_DISABLED_BY_GAME_MODE	= 99 (number)
   DOTA_INVALID_ORDER_CANT_ABILITY_PING_BAD_TEAM	= 100 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_POSITIONED	= 101 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_TARGETTED	= 102 (number)
   DOTA_INVALID_ORDER_ABILITY_REQUIRES_TARGET	= 103 (number)
   DOTA_INVALID_ORDER_CANT_RADAR   	= 104 (number)
   DOTA_INVALID_ORDER_NO_COURIER   	= 105 (number)
   DOTA_INVALID_ORDER_CUSTOM_SHOP_NOT_IN_RANGE	= 106 (number)
   DOTA_INVALID_ORDER_CANT_CAST_RIVER_PAINT	= 107 (number)
   DOTA_INVALID_ORDER_UNIT_OBSTRUCTED	= 108 (number)
   DOTA_INVALID_ORDER_CANT_CAST_DRAG_REQUIRED	= 109 (number)
   DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_TETHER	= 110 (number)
   DOTA_INVALID_ORDER_ABILITY_NOT_UNLOCKED	= 111 (number)
   DOTA_INVALID_ORDER_CANT_FOUNTAIN_DROP_UNIT_NOT_DEAD	= 112 (number)
   DOTA_INVALID_ORDER_ITEM_NOT_IN_NEUTRAL_ITEM_STASH	= 113 (number)
   DOTA_INVALID_ORDER_ITEM_ALREADY_PURCHASED	= 114 (number)
   DOTA_INVALID_ORDER_BEYOND_PHYSICAL_ITEM_LIMIT	= 115 (number)
   DOTA_INVALID_ORDER_ABILITY_PING_DEAD_ALLY	= 116 (number)
   DOTA_INVALID_ORDER_CANT_LOCKCOMBINE_NEUTRAL_ITEMS	= 117 (number)
   DOTA_INVALID_ORDER_ABILITY_CANT_ALT_CAST	= 118 (number)
   DOTA_INVALID_ORDER_COUNT        	= 119 (number)
   FIND_UNITS_EVERYWHERE           	= -1 (number)
   FIND_CLOSEST                    	= 1 (number)
   FIND_FARTHEST                   	= 2 (number)
   FIND_ANY_ORDER                  	= 0 (number)
   DOTA_PSEUDO_RANDOM_AXE_HELIX    	= 8 (number)
   DOTA_SHOP_HOME                  	= 0 (number)
   DOTA_SHOP_SIDE                  	= 1 (number)
   DOTA_SHOP_SECRET                	= 2 (number)
   DOTA_SHOP_GROUND                	= 3 (number)
   DOTA_SHOP_SIDE2                 	= 4 (number)
   DOTA_SHOP_SECRET2               	= 5 (number)
   DOTA_SHOP_CUSTOM                	= 6 (number)
   DOTA_SHOP_NEUTRALS              	= 7 (number)
   DOTA_SHOP_NONE                  	= 8 (number)
   DOTA_PSEUDO_RANDOM_WOLF_CRIT    	= 7 (number)
   DOTA_PSEUDO_RANDOM_COLD_REBUKE  	= 6 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE	= 0 (number)
   DOTA_PSEUDO_RANDOM_TINY_CRAGGY  	= 5 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET	= 1 (number)
   DOTA_PSEUDO_RANDOM_PHANTOMLANCER_JUXTAPOSE	= 4 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC	= 2 (number)
   DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_DAGGER	= 3 (number)
   MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT	= 3 (number)
   DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT	= 2 (number)
   MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE	= 4 (number)
   DOTA_PSEUDO_RANDOM_MAGNUS_SHARD 	= 1 (number)
   UF_FAIL_OBSTRUCTED              	= 28 (number)
   UF_FAIL_NIGHTMARED              	= 27 (number)
   UF_FAIL_OUT_OF_WORLD            	= 26 (number)
   UF_FAIL_DISABLE_HELP            	= 25 (number)
   UF_FAIL_INVALID_LOCATION        	= 24 (number)
   UF_FAIL_CUSTOM                  	= 23 (number)
   UF_FAIL_ATTACK_IMMUNE           	= 22 (number)
   UF_FAIL_NOT_PLAYER_CONTROLLED   	= 21 (number)
   UF_FAIL_INVISIBLE               	= 20 (number)
   UF_FAIL_IN_FOW                  	= 19 (number)
   UF_FAIL_INVULNERABLE            	= 18 (number)
   UF_FAIL_MAGIC_IMMUNE_ENEMY      	= 17 (number)
   UF_FAIL_MAGIC_IMMUNE_ALLY       	= 16 (number)
   UF_FAIL_DEAD                    	= 15 (number)
   UF_FAIL_RANGED                  	= 14 (number)
   UF_FAIL_MELEE                   	= 13 (number)
   UF_FAIL_DOMINATED               	= 12 (number)
   UF_FAIL_SUMMONED                	= 11 (number)
   UF_FAIL_ILLUSION                	= 10 (number)
   UF_FAIL_ANCIENT                 	= 9 (number)
   UF_FAIL_OTHER                   	= 8 (number)
   UF_FAIL_COURIER                 	= 7 (number)
   UF_FAIL_BUILDING                	= 6 (number)
   UF_FAIL_CREEP                   	= 5 (number)
   UF_FAIL_CONSIDERED_HERO         	= 4 (number)
   UF_FAIL_HERO                    	= 3 (number)
   UF_FAIL_ENEMY                   	= 2 (number)
   UF_FAIL_FRIENDLY                	= 1 (number)
   UF_SUCCESS                      	= 0 (number)
   DOTA_ABILITY_SPEAK_CAST         	= 1 (number)
   DOTA_ABILITY_SPEAK_START_ACTION_PHASE	= 0 (number)
   DOTA_SPEECH_RECIPIENT_TYPE_MAX  	= 10 (number)
   DOTA_SPEECH_USER_TEAM_NOSPECTATOR	= 9 (number)
   DOTA_SPEECH_SPECTATOR           	= 8 (number)
   DOTA_SPEECH_BAD_TEAM            	= 7 (number)
   DOTA_SPEECH_GOOD_TEAM           	= 6 (number)
   DOTA_SPEECH_USER_ALL            	= 5 (number)
   DOTA_SPEECH_USER_NEARBY         	= 4 (number)
   DOTA_SPEECH_USER_TEAM_NEARBY    	= 3 (number)
   DOTA_SPEECH_USER_TEAM           	= 2 (number)
   DOTA_SPEECH_USER_SINGLE         	= 1 (number)
   DOTA_SPEECH_USER_INVALID        	= 0 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_ULTRA	= 5 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST	= 4 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_HIGH	= 3 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM	= 2 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_LOW	= 1 (number)
   DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST	= 0 (number)
   LUA_MODIFIER_INVALID            	= 4 (number)
   LUA_MODIFIER_MOTION_BOTH        	= 3 (number)
   LUA_MODIFIER_MOTION_VERTICAL    	= 2 (number)
   LUA_MODIFIER_MOTION_HORIZONTAL  	= 1 (number)
   LUA_MODIFIER_MOTION_NONE        	= 0 (number)
   PATTACH_HEALTHBAR               	= 15 (number)
   PATTACH_CUSTOM_GAME_STATE_1     	= 14 (number)
   PATTACH_CENTER_FOLLOW           	= 13 (number)
   PATTACH_WATERWAKE               	= 12 (number)
   PATTACH_MAIN_VIEW               	= 11 (number)
   PATTACH_INVALID                 	= -1 (number)
   DOTA_ATTRIBUTE_ALL_DAMAGE       	= 10 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_MAGIC_RESIST	= 9 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN	= 8 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_MANA	= 7 (number)
   DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE	= 6 (number)
   DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED	= 5 (number)
   DOTA_ATTRIBUTE_AGILITY_ARMOR    	= 4 (number)
   DOTA_ATTRIBUTE_AGILITY_DAMAGE   	= 3 (number)
   DOTA_ATTRIBUTE_STRENGTH_HP_REGEN	= 2 (number)
   DOTA_ATTRIBUTE_STRENGTH_HP      	= 1 (number)
   DOTA_ATTRIBUTE_STRENGTH_DAMAGE  	= 0 (number)
   DOTA_ATTRIBUTE_INVALID          	= -1 (number)
   DOTA_ATTRIBUTE_MAX              	= 4 (number)
   DOTA_ATTRIBUTE_ALL              	= 3 (number)
   DOTA_ATTRIBUTE_INTELLECT        	= 2 (number)
   DOTA_ATTRIBUTE_AGILITY          	= 1 (number)
   DOTA_ATTRIBUTE_STRENGTH         	= 0 (number)
   ACT_VR_PISTOL_BURST_TOGGLE      	= 984 (number)
   ACT_VR_PISTOL_LOW_KICK          	= 985 (number)
   ACT_VR_PISTOL_BURST_ATTACK      	= 986 (number)
   ACT_VR_SHOTGUN_GRENADE_TWIST    	= 987 (number)
   ACT_DIE_STAND                   	= 988 (number)
   ACT_DIE_STAND_HEADSHOT          	= 989 (number)
   ACT_DIE_CROUCH_HEADSHOT         	= 991 (number)
   ACT_CSGO_NULL                   	= 992 (number)
   ACT_CSGO_DEFUSE                 	= 993 (number)
   ACT_CSGO_FLASHBANG_REACTION     	= 995 (number)
   ACT_CSGO_FIRE_PRIMARY           	= 996 (number)
   ACT_CSGO_FIRE_PRIMARY_OPT_1     	= 997 (number)
   ACT_CSGO_FIRE_PRIMARY_OPT_2     	= 998 (number)
   ACT_CSGO_FIRE_SECONDARY         	= 999 (number)
   ACT_CSGO_FIRE_SECONDARY_OPT_2   	= 1001 (number)
   ACT_CSGO_RELOAD                 	= 1002 (number)
   ACT_CSGO_RELOAD_START           	= 1003 (number)
   ACT_CSGO_RELOAD_LOOP            	= 1004 (number)
   ACT_CSGO_RELOAD_END             	= 1005 (number)
   ACT_CSGO_OPERATE                	= 1006 (number)
   ACT_CSGO_DEPLOY                 	= 1007 (number)
   ACT_CSGO_CATCH                  	= 1008 (number)
   ACT_CSGO_SILENCER_DETACH        	= 1009 (number)
   ACT_CSGO_SILENCER_ATTACH        	= 1010 (number)
   ACT_CSGO_TWITCH                 	= 1011 (number)
   ACT_CSGO_TWITCH_BUYZONE         	= 1012 (number)
   ACT_CSGO_PLANT_BOMB             	= 1013 (number)
   ACT_CSGO_IDLE_TURN_BALANCEADJUST	= 1014 (number)
   MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL	= 239 (number)
   MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE	= 238 (number)
   MODIFIER_PROPERTY_IGNORE_CAST_ANGLE	= 237 (number)
   MODIFIER_PROPERTY_PROVIDES_FOW_POSITION	= 233 (number)
   MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT	= 214 (number)
   MODIFIER_EVENT_ON_MANA_GAINED   	= 213 (number)
   MODIFIER_EVENT_ON_HEALTH_GAINED 	= 212 (number)
   MODIFIER_EVENT_ON_SET_LOCATION  	= 211 (number)
   MODIFIER_EVENT_ON_TELEPORTED    	= 210 (number)
   MODIFIER_EVENT_ON_TELEPORTING   	= 209 (number)
   MODIFIER_EVENT_ON_SPENT_HEALTH  	= 208 (number)
   MODIFIER_EVENT_ON_SPENT_MANA    	= 207 (number)
   MODIFIER_EVENT_ON_SPELL_TARGET_READY	= 179 (number)
   MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION	= 178 (number)
   MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW	= 177 (number)
   MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER	= 176 (number)
   MODIFIER_PROPERTY_MAX_DEBUFF_DURATION	= 175 (number)
   MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK	= 174 (number)
   MODIFIER_PROPERTY_DODGE_PROJECTILE	= 173 (number)
   MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING	= 172 (number)
   MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER	= 171 (number)
   MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER	= 170 (number)
   MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH	= 169 (number)
   MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL	= 168 (number)
   MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK	= 167 (number)
   MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK	= 166 (number)
   MODIFIER_PROPERTY_DISABLE_HEALING	= 165 (number)
   MODIFIER_PROPERTY_TURN_RATE_OVERRIDE	= 164 (number)
   MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE	= 163 (number)
   MODIFIER_PROPERTY_XP_DURING_DEATH	= 162 (number)
   MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE	= 161 (number)
   MODIFIER_PROPERTY_SUPER_ILLUSION	= 160 (number)
   MODIFIER_PROPERTY_STRONG_ILLUSION	= 159 (number)
   MODIFIER_PROPERTY_ILLUSION_LABEL	= 158 (number)
   MODIFIER_PROPERTY_IS_ILLUSION   	= 157 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE	= 156 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL	= 155 (number)
   MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL	= 154 (number)
   MODIFIER_PROPERTY_MIN_HEALTH    	= 153 (number)
   MODIFIER_PROPERTY_FIXED_NIGHT_VISION	= 152 (number)
   MODIFIER_PROPERTY_FIXED_DAY_VISION	= 151 (number)
   ACT_OPEN_DOOR                   	= 412 (number)
   ACT_DI_ALYX_ANTLION             	= 416 (number)
   ACT_DI_ALYX_ZOMBIE_SHOTGUN26    	= 418 (number)
   ACT_SCRIPT_CUSTOM_27            	= 938 (number)
   ACT_READINESS_STIMULATED_TO_RELAXED	= 422 (number)
   ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED	= 425 (number)
   ACT_IDLE_CARRY                  	= 427 (number)
   ACT_DYINGLOOP                   	= 430 (number)
   ACT_VM_SPRINT_ENTER             	= 433 (number)
   ACT_SHIELD_KNOCKBACK            	= 454 (number)
   ACT_SCRIPT_CUSTOM_20            	= 931 (number)
   ACT_SHIELD_DOWN                 	= 451 (number)
   ACT_SHIELD_ATTACK               	= 453 (number)
   ACT_MP_STAND_PRIMARY            	= 555 (number)
   ACT_MP_RUN_PRIMARY              	= 557 (number)
   ACT_MP_AIRWALK_PRIMARY          	= 559 (number)
   ACT_MP_JUMP_PRIMARY             	= 561 (number)
   ACT_MP_JUMP_FLOAT_PRIMARY       	= 563 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY	= 772 (number)
   ACT_MP_GESTURE_VC_NODNO_SECONDARY	= 774 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_MELEE	= 776 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_MELEE	= 778 (number)
   ACT_MP_GESTURE_VC_NODNO_MELEE   	= 780 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1	= 782 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_ITEM1	= 784 (number)
   ACT_MP_GESTURE_VC_NODNO_ITEM1   	= 786 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2	= 788 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_ITEM2	= 790 (number)
   ACT_MP_GESTURE_VC_NODNO_ITEM2   	= 792 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING	= 794 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_BUILDING	= 796 (number)
   ACT_MP_GESTURE_VC_NODNO_BUILDING	= 798 (number)
   ACT_MP_GESTURE_VC_FINGERPOINT_PDA	= 800 (number)
   ACT_MP_GESTURE_VC_THUMBSUP_PDA  	= 802 (number)
   ACT_MP_GESTURE_VC_NODNO_PDA     	= 804 (number)
   ACT_PRIMARY_VM_PULLBACK         	= 811 (number)
   ACT_PRIMARY_VM_SECONDARYATTACK  	= 813 (number)
   ACT_PRIMARY_VM_DRYFIRE          	= 815 (number)
   ACT_PRIMARY_VM_IDLE_LOWERED     	= 817 (number)
   ACT_SECONDARY_VM_DRAW           	= 819 (number)
   ACT_SECONDARY_VM_IDLE           	= 821 (number)
   ACT_SECONDARY_VM_PRIMARYATTACK  	= 823 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET	= 108 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE	= 107 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS	= 106 (number)
   MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE	= 105 (number)
   MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE	= 104 (number)
   MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE	= 103 (number)
   MODIFIER_PROPERTY_STATS_INTELLECT_BONUS	= 102 (number)
   MODIFIER_PROPERTY_STATS_AGILITY_BONUS	= 101 (number)
   MODIFIER_PROPERTY_STATS_STRENGTH_BONUS	= 100 (number)
   MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE	= 99 (number)
   MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE	= 98 (number)
   MODIFIER_PROPERTY_EXTRA_MANA_BONUS_PERCENTAGE	= 97 (number)
   MODIFIER_PROPERTY_EXTRA_MANA_BONUS	= 96 (number)
   MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS	= 95 (number)
   MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS	= 94 (number)
   MODIFIER_PROPERTY_MANA_BONUS    	= 93 (number)
   MODIFIER_PROPERTY_HEALTH_BONUS  	= 92 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE	= 91 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE	= 90 (number)
   MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT	= 89 (number)
   MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE	= 88 (number)
   MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE	= 87 (number)
   MODIFIER_PROPERTY_MANA_REGEN_CONSTANT	= 86 (number)
   MODIFIER_PROPERTY_BASE_MANA_REGEN	= 85 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE	= 84 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_UNIQUE	= 83 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS	= 82 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS	= 81 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION	= 80 (number)
   MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION	= 79 (number)
   MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR	= 78 (number)
   MODIFIER_PROPERTY_MIN_PHYSICAL_ARMOR	= 77 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST	= 76 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE	= 75 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE	= 74 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS	= 73 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE	= 72 (number)
   MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE	= 71 (number)
   DOTA_MAX_TEAM_PLAYERS           	= 24 (number)
   DOTA_MAX_PLAYER_TEAMS           	= 10 (number)
   DOTA_MAX_TEAM                   	= 24 (number)
   DOTA_MAX_PLAYERS                	= 64 (number)
   DOTA_ABILITY_BEHAVIOR_SKIP_FOR_KEYBINDS	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_BREAK_DISABLES	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_ALT_CASTABLE	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_MUTED	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_OVERSHOOT 	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST	= 0 (number)
   DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT	= -2147483648 (number)
   DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING	= 1073741824 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL	= 536870912 (number)
   DOTA_ABILITY_BEHAVIOR_RUNE_TARGET	= 268435456 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING	= 134217728 (number)
   DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN	= 67108864 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK	= 33554432 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET	= 16777216 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT	= 8388608 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL	= 4194304 (number)
   DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE	= 2097152 (number)
   DOTA_ABILITY_BEHAVIOR_UNRESTRICTED	= 1048576 (number)
   DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES	= 524288 (number)
   DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT	= 262144 (number)
   DOTA_ABILITY_BEHAVIOR_ATTACK    	= 131072 (number)
   DOTA_ABILITY_BEHAVIOR_AURA      	= 65536 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET	= 32768 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT	= 16384 (number)
   DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET	= 8192 (number)
   DOTA_ABILITY_BEHAVIOR_AUTOCAST  	= 4096 (number)
   DOTA_ABILITY_BEHAVIOR_IMMEDIATE 	= 2048 (number)
   DOTA_ABILITY_BEHAVIOR_DIRECTIONAL	= 1024 (number)
   DOTA_ABILITY_BEHAVIOR_TOGGLE    	= 512 (number)
   DOTA_ABILITY_BEHAVIOR_ITEM      	= 256 (number)
   DOTA_ABILITY_BEHAVIOR_CHANNELLED	= 128 (number)
   DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE	= 64 (number)
   DOTA_ABILITY_BEHAVIOR_AOE       	= 32 (number)
   DOTA_ABILITY_BEHAVIOR_POINT     	= 16 (number)
   DOTA_ABILITY_BEHAVIOR_UNIT_TARGET	= 8 (number)
   DOTA_ABILITY_BEHAVIOR_NO_TARGET 	= 4 (number)
   DOTA_ABILITY_BEHAVIOR_PASSIVE   	= 2 (number)
   DOTA_ABILITY_BEHAVIOR_HIDDEN    	= 1 (number)
   DOTA_ABILITY_BEHAVIOR_NONE      	= 0 (number)
   DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS	= 2097152 (number)
   DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES	= 1048576 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED	= 524288 (number)
   DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD	= 262144 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO	= 131072 (number)
   DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP	= 65536 (number)
   DOTA_UNIT_TARGET_FLAG_MANA_ONLY 	= 32768 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE	= 16384 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS	= 8192 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED	= 4096 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED	= 2048 (number)
   DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED	= 1024 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS	= 512 (number)
   DOTA_UNIT_TARGET_FLAG_NO_INVIS  	= 256 (number)
   DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE	= 128 (number)
   DOTA_UNIT_TARGET_FLAG_INVULNERABLE	= 64 (number)
   DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES	= 32 (number)
   DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES	= 16 (number)
   DOTA_UNIT_TARGET_FLAG_DEAD      	= 8 (number)
   DOTA_UNIT_TARGET_FLAG_MELEE_ONLY	= 4 (number)
   DOTA_UNIT_TARGET_FLAG_RANGED_ONLY	= 2 (number)
   DOTA_UNIT_TARGET_FLAG_NONE      	= 0 (number)
   DOTA_UNIT_TARGET_HEROES_AND_CREEPS	= 19 (number)
   DOTA_UNIT_TARGET_ALL            	= 55 (number)
   DOTA_UNIT_TARGET_BASIC          	= 18 (number)
   DOTA_UNIT_TARGET_SELF           	= 256 (number)
   DOTA_UNIT_TARGET_CUSTOM         	= 128 (number)
   DOTA_UNIT_TARGET_TREE           	= 64 (number)
   DOTA_UNIT_TARGET_OTHER          	= 32 (number)
   DOTA_UNIT_TARGET_COURIER        	= 16 (number)
   DOTA_UNIT_TARGET_BUILDING       	= 4 (number)
   DOTA_UNIT_TARGET_CREEP          	= 2 (number)
   DOTA_UNIT_TARGET_HERO           	= 1 (number)
   DOTA_UNIT_TARGET_NONE           	= 0 (number)
   DOTA_UNIT_TARGET_TEAM_BOTH      	= 3 (number)
   DOTA_UNIT_TARGET_TEAM_CUSTOM    	= 4 (number)
   DOTA_UNIT_TARGET_TEAM_ENEMY     	= 2 (number)
   DOTA_UNIT_TARGET_TEAM_FRIENDLY  	= 1 (number)
   DOTA_UNIT_TARGET_TEAM_NONE      	= 0 (number)
   DOTA_RUNE_COUNT                 	= 10 (number)
   DOTA_RUNE_SHIELD                	= 9 (number)
   DOTA_RUNE_XP                    	= 8 (number)
   DOTA_RUNE_WATER                 	= 7 (number)
   DOTA_RUNE_ARCANE                	= 6 (number)
   DOTA_RUNE_BOUNTY                	= 5 (number)
   DOTA_RUNE_REGENERATION          	= 4 (number)
   DOTA_RUNE_INVISIBILITY          	= 3 (number)
   DOTA_RUNE_ILLUSION              	= 2 (number)
   DOTA_RUNE_HASTE                 	= 1 (number)
   DOTA_RUNE_DOUBLEDAMAGE          	= 0 (number)
   DOTA_RUNE_INVALID               	= -1 (number)
   DOTA_TEAM_CUSTOM_COUNT          	= 8 (number)
   DOTA_TEAM_CUSTOM_MAX            	= 13 (number)
   DOTA_TEAM_CUSTOM_MIN            	= 6 (number)
   DOTA_TEAM_COUNT                 	= 15 (number)
   DOTA_TEAM_DRAFT_POOL            	= 14 (number)
   DOTA_TEAM_CUSTOM_8              	= 13 (number)
   DOTA_TEAM_CUSTOM_7              	= 12 (number)
   DOTA_TEAM_CUSTOM_6              	= 11 (number)
   DOTA_TEAM_CUSTOM_5              	= 10 (number)
   DOTA_TEAM_CUSTOM_4              	= 9 (number)
   DOTA_TEAM_CUSTOM_3              	= 8 (number)
   DOTA_TEAM_CUSTOM_2              	= 7 (number)
   DOTA_TEAM_CUSTOM_1              	= 6 (number)
   DOTA_TEAM_NOTEAM                	= 5 (number)
   DOTA_TEAM_NEUTRALS              	= 4 (number)
   DOTA_TEAM_BADGUYS               	= 3 (number)
   DOTA_TEAM_GOODGUYS              	= 2 (number)
   DOTA_TEAM_FIRST                 	= 2 (number)
   DOTA_HEROPICK_STATE_COUNT       	= 62 (number)
   DOTA_HEROPICK_STATE_SCENARIO_PICK	= 61 (number)
   DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES	= 60 (number)
   DOTA_HEROPICK_STATE_SELECT_PENALTY	= 59 (number)
   DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT	= 58 (number)
   DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT	= 57 (number)
   DOTA_HERO_PICK_STATE_ARDM_SELECT	= 56 (number)
   DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT	= 55 (number)
   DOTA_HEROPICK_STATE_BD_SELECT   	= 54 (number)
   DOTA_HEROPICK_STATE_CD_PICK     	= 53 (number)
   DOTA_HEROPICK_STATE_CD_SELECT10 	= 52 (number)
   DOTA_HEROPICK_STATE_CD_SELECT9  	= 51 (number)
   DOTA_HEROPICK_STATE_CD_SELECT8  	= 50 (number)
   DOTA_HEROPICK_STATE_CD_SELECT7  	= 49 (number)
   DOTA_HEROPICK_STATE_CD_SELECT6  	= 48 (number)
   DOTA_HEROPICK_STATE_CD_SELECT5  	= 47 (number)
   DOTA_HEROPICK_STATE_CD_SELECT4  	= 46 (number)
   DOTA_HEROPICK_STATE_CD_SELECT3  	= 45 (number)
   DOTA_HEROPICK_STATE_CD_SELECT2  	= 44 (number)
   DOTA_HEROPICK_STATE_CD_SELECT1  	= 43 (number)
   DOTA_HEROPICK_STATE_CD_BAN6     	= 42 (number)
   InstallMixins                   	= function: 0x00317620 (function)
   DOTA_HEROPICK_STATE_CD_BAN4     	= 40 (number)
   DOTA_HEROPICK_STATE_CD_BAN3     	= 39 (number)
   DOTA_HEROPICK_STATE_CD_BAN2     	= 38 (number)
   DOTA_HEROPICK_STATE_CD_BAN1     	= 37 (number)
   DOTA_HEROPICK_STATE_CD_CAPTAINPICK	= 36 (number)
   DOTA_HEROPICK_STATE_CD_INTRO    	= 35 (number)
   DOTA_HEROPICK_STATE_FH_SELECT   	= 34 (number)
   DOTA_HEROPICK_STATE_MO_SELECT   	= 33 (number)
   EntityMixins                    	= table: 0x00317650 (table)
   {
      EnableDisable                   	= table: 0x00328bf0 (table)
      {
         enabled                         	= true (boolean)
         Specification                   	= table: 0x00328c70 (table)
         {
            inputs                          	= table: 0x002135d8 (table)
            {
               Disable                         	= table: 0x00329088 (table)
               {
                  tags                            	= "publish" (string)
                  description                     	= "Disable the entity" (string)
               }
               Enable                          	= table: 0x00213658 (table)
               {
                  tags                            	= "publish" (string)
                  description                     	= "Enable the entity" (string)
               }
            }
            meta                            	= table: 0x00328210 (table)
            {
               enabled                         	= table: 0x00213528 (table)
               {
                  type                            	= "boolean" (string)
                  name                            	= "Is enabled" (string)
                  tags                            	= "publish" (string)
                  def                             	= true (boolean)
               }
            }
            description                     	= "Standard implementation for entities that can be enabled & disabled (logically)" (string)
            documentation                   	= "http://" (string)
         }
         Spawn                           	= function: 0x00328c38 (function)
         InstallMixin                    	= function: 0x00329140 (function)
         Disable                         	= function: 0x00329208 (function)
         Enable                          	= function: 0x003291d8 (function)
      }
   }
   EntityClasses                   	= table: 0x00317698 (table)
   {
      CBaseEntity                     	= table: 0x00327548 (table)
      {
         metatable                       	= table: 0x0023e628 (table, already seen)
         constructor                     	= function: 0x003273b8 (function)
         inspect                         	= function: 0x00327418 (function)
         __instanceof__                  	= function: 0x003276b8 (function)
         describe_R                      	= function: 0x003273e8 (function)
         __getclass__                    	= function: 0x00327590 (function)
         __getbase__                     	= function: 0x00327738 (function)
         Specification                   	= table: 0x003274c8 (table)
         {
            scriptclassname                 	= "CBaseEntity" (string)
         }
         __class__                       	= table: 0x00327548 (table, already seen)
         __initprops__                   	= table: 0x003276f0 (table)
         {
         }
      }
      CEntityInstance                 	= table: 0x0031d318 (table, already seen)
   }
   EntityLinkClasses               	= table: 0x003176e0 (table)
   {
   }
   EntityClassNameOverrides        	= table: 0x00317858 (table)
   {
   }
   EntityDesignerNameToClassname   	= table: 0x003178a0 (table)
   {
   }
   EntityFramework                 	= table: 0x003178e8 (table)
   {
      CreateCppClassProxy             	= function: 0x0031d4a8 (function)
      CreateEntity                    	= function: 0x0031d4d8 (function)
      CreateCppLinkClassProxyInstance 	= function: 0x0031d508 (function)
      GetClassNameOverride            	= function: 0x0031d538 (function)
      InstallClassMixinKeysToIgnore   	= table: 0x00317a28 (array table)
      [
         1                               	= "Specification" (string)
      ]
      GetScriptClassForDesignerName   	= function: 0x0031d568 (function)
      InstallClassMixinKeysToMakeUnique	= table: 0x00317a80 (array table)
      [
         1                               	= "Spawn" (string)
      ]
      InstallClassVisits              	= table: 0x00317ad8 (table)
      {
         CBaseEntity                     	= true (boolean)
         CEntityInstance                 	= true (boolean)
      }
      InputValueConverters            	= table: 0x0031ced0 (table)
      {
         float                           	= function: 0x0031cfe0 (function)
         string                          	= function: 0x0031d010 (function)
         number                          	= function: 0x0031cf80 (function)
         integer                         	= function: 0x0031cfb0 (function)
      }
      GetInputsForScriptClass         	= function: 0x0031d5c8 (function)
      InstallClasses                  	= function: 0x0031d0a8 (function)
      GetNativeClassForScriptClass    	= function: 0x0031d5f8 (function)
      InstallClass                    	= function: 0x0031d1a0 (function)
      GetNativeClassForDesignerName   	= function: 0x0031d628 (function)
      GetNativeOutputsForClass        	= function: 0x0031d658 (function)
      InstallClass_BuildCompleteSpecification	= function: 0x0031d200 (function)
      InstallClass_HandleEntityIO     	= function: 0x0031d230 (function)
      InstallClass_Publish            	= function: 0x0031d3e8 (function)
      InstallClass_MergeSpecifications	= function: 0x0031d1d0 (function)
      IsKeyValueUsed                  	= function: 0x00327a28 (function)
      UnserializeForPrecache          	= function: 0x00327a58 (function)
      PrecacheResource                	= function: 0x00327bd8 (function)
      GetEntityHandle                 	= function: 0x00327ba8 (function)
      AddClassToGameData              	= function: 0x0031d418 (function)
      UnserializeForSpawn             	= function: 0x00327a88 (function)
      LoadEntityClasses               	= function: 0x0031d448 (function)
      DispatchPrecache                	= function: 0x00327ab8 (function)
      DispatchSpawn                   	= function: 0x00327ae8 (function)
      DispatchActivate                	= function: 0x00327b18 (function)
      DispatchUpdateOnRemove          	= function: 0x00327b48 (function)
      DispatchInput                   	= function: 0x00327b78 (function)
      GetDesignerNameForScriptClass   	= function: 0x0031d598 (function)
      CreateScriptProxyClass          	= function: 0x0031d478 (function)
   }
   EntityUtils                     	= table: 0x00317930 (table)
   {
      GetRootScriptClass              	= function: 0x003277e8 (function)
      GetClassFieldType               	= function: 0x00327818 (function)
   }
   PRESIM                          	= 0 (number)
   PRESENSING                      	= 1 (number)
   POSTSENSING                     	= 2 (number)
   HeroList                        	= table: 0x00232f78 (table)
   {
      metatable                       	= table: 0x00232b50 (table, already seen)
      __self                          	= userdata: 0x00232ff0 (userdata)
   }
   CScriptHeroList                 	= table: 0x00232b50 (table, already seen)
   Script_RemapValClamped          	= function: 0x00232810 (function)
   SpawnMangoTree                  	= function: 0x00232760 (function)
   SpawnEffigyOfUnitOrModel        	= function: 0x002326a0 (function)
   FindSpawnEntityForTeam          	= function: 0x002325e8 (function)
   SendOverheadEventMessage        	= function: 0x00232528 (function)
   ShowCustomHeaderMessage         	= function: 0x00232470 (function)
   GetItemDefQuantity              	= function: 0x002323b8 (function)
   GetItemDefOwnedCount            	= function: 0x00232300 (function)
   ShowGenericPopupToPlayer        	= function: 0x00232240 (function)
   ShowGenericPopup                	= function: 0x00232188 (function)
   IsLocationVisible               	= function: 0x002320d0 (function)
   GetTreeIdForEntityIndex         	= function: 0x00232018 (function)
   GetEntityIndexForTreeId         	= function: 0x00231f60 (function)
   IsMangoTree                     	= function: 0x00231eb0 (function)
   CreateTempTreeWithModel         	= function: 0x0025f8b8 (function)
   CreateTempTree                  	= function: 0x0025f838 (function)
   CreateRune                      	= function: 0x0025fd68 (function)
   ApplyDamage                     	= function: 0x0025fcb8 (function)
   EF_NODRAW                       	= 32 (number)
   DOTA_STASH_SLOT_6               	= 14 (number)
   DOTA_STASH_SLOT_5               	= 13 (number)
   DOTA_STASH_SLOT_4               	= 12 (number)
   DOTA_STASH_SLOT_3               	= 11 (number)
   DOTA_STASH_SLOT_2               	= 10 (number)
   DOTA_STASH_SLOT_1               	= 9 (number)
   DOTA_ITEM_SLOT_9                	= 8 (number)
   DOTA_ITEM_SLOT_8                	= 7 (number)
   DOTA_ITEM_SLOT_7                	= 6 (number)
   DOTA_ITEM_SLOT_6                	= 5 (number)
   DOTA_ITEM_SLOT_5                	= 4 (number)
   DOTA_ITEM_SLOT_4                	= 3 (number)
   DOTA_ITEM_SLOT_3                	= 2 (number)
   DOTA_ITEM_SLOT_2                	= 1 (number)
   ACT_SECONDARY_VM_SECONDARYATTACK	= 824 (number)
   ACT_SECONDARY_VM_RELOAD         	= 825 (number)
   ACT_SECONDARY_VM_DRYFIRE        	= 826 (number)
   ACT_SECONDARY_VM_IDLE_TO_LOWERED	= 827 (number)
   ACT_SECONDARY_VM_IDLE_LOWERED   	= 828 (number)
   DOTA_LOADOUT_TYPE_ANCIENT       	= 97 (number)
   ACT_SECONDARY_VM_LOWERED_TO_IDLE	= 829 (number)
   ACT_MELEE_VM_DRAW               	= 830 (number)
   ACT_MELEE_VM_HOLSTER            	= 831 (number)
   ACT_MELEE_VM_IDLE               	= 832 (number)
   ACT_MELEE_VM_PULLBACK           	= 833 (number)
   DOTA_LOADOUT_TYPE_MAP_EFFECT    	= 91 (number)
   ACT_MELEE_VM_PRIMARYATTACK      	= 834 (number)
   ACT_MELEE_VM_SECONDARYATTACK    	= 835 (number)
   ACT_MELEE_VM_RELOAD             	= 836 (number)
   ACT_MELEE_VM_DRYFIRE            	= 837 (number)
   ACT_MELEE_VM_IDLE_TO_LOWERED    	= 838 (number)
   ACT_MELEE_VM_IDLE_LOWERED       	= 839 (number)
   DOTA_LOADOUT_TYPE_RADIANT_TOWER 	= 84 (number)
   DOTA_LOADOUT_TYPE_DIRE_CREEPS   	= 83 (number)
   ACT_MELEE_VM_LOWERED_TO_IDLE    	= 840 (number)
   ACT_PDA_VM_DRAW                 	= 841 (number)
   ACT_PDA_VM_HOLSTER              	= 842 (number)
   ACT_PDA_VM_IDLE                 	= 843 (number)
   ACT_PDA_VM_PULLBACK             	= 844 (number)
   ACT_PDA_VM_PRIMARYATTACK        	= 845 (number)
   ACT_DOTA_DEFEAT_LOOP            	= 1779 (number)
   ACT_DOTA_VICTORY_LOOP           	= 1778 (number)
   ACT_DOTA_TELEPORT_STATUE        	= 1777 (number)
   ACT_DOTA_CHANNEL_STATUE         	= 1776 (number)
   ACT_DOTA_FORCESTAFF_STATUE      	= 1775 (number)
   ACT_DOTA_STUN_STATUE            	= 1774 (number)
   ACT_DOTA_ATTACK_STATUE          	= 1773 (number)
   ACT_DOTA_RUN_STATUE             	= 1772 (number)
   ACT_DOTA_IDLE_STATUE            	= 1771 (number)
   ACT_DOTA_CAST4_STATUE           	= 1770 (number)
   ACT_DOTA_CAST3_STATUE           	= 1769 (number)
   ACT_DOTA_CAST2_STATUE           	= 1768 (number)
   ACT_DOTA_CAST1_STATUE           	= 1767 (number)
   ACT_DOTA_SPAWN_STATUE           	= 1766 (number)
   ACT_DOTA_TAUNT_STATUE           	= 1765 (number)
   ACT_DOTA_MK_STRIKE_END          	= 1764 (number)
   ACT_DOTA_VIPER_DIVE_END         	= 1763 (number)
   DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1	= 61 (number)
   DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1	= 60 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1	= 59 (number)
   CDebugOverlayScriptHelper       	= table: 0x0038ea70 (table, already seen)
   DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1	= 57 (number)
   DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1	= 56 (number)
   DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1	= 55 (number)
   DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1	= 54 (number)
   DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1	= 53 (number)
   DOTA_LOADOUT_TYPE_MISC_PERSONA_1	= 52 (number)
   DOTA_LOADOUT_TYPE_TAIL_PERSONA_1	= 51 (number)
   DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1	= 50 (number)
   DOTA_LOADOUT_TYPE_LEGS_PERSONA_1	= 49 (number)
   DOTA_LOADOUT_TYPE_BACK_PERSONA_1	= 48 (number)
   DOTA_LOADOUT_TYPE_NECK_PERSONA_1	= 47 (number)
   DOTA_LOADOUT_TYPE_BELT_PERSONA_1	= 46 (number)
   DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1	= 45 (number)
   DOTA_LOADOUT_TYPE_ARMS_PERSONA_1	= 44 (number)
   ACT_DOTA_VIPER_DIVE             	= 1762 (number)
   DOTA_LOADOUT_TYPE_HEAD_PERSONA_1	= 42 (number)
   ACT_DOTA_RUN_RARE               	= 1761 (number)
   ACT_DOTA_PET_LEVEL              	= 1701 (number)
   ACT_DOTA_PET_WARD_SENTRY        	= 1700 (number)
   ACT_DOTA_PET_WARD_OBSERVER      	= 1699 (number)
   ACT_DOTA_CAPTURE_PET            	= 1698 (number)
   ACT_DOTA_ITEM_DROP              	= 1697 (number)
   ACT_DOTA_ITEM_PICKUP            	= 1696 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_7	= 34 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_6	= 33 (number)
   VectorToAngles                  	= function: 0x00246f58 (function)
   RotatePosition                  	= function: 0x00247008 (function)
   RotateOrientation               	= function: 0x002470b8 (function)
   AngleDiff                       	= function: 0x002508f0 (function)
   EmitSoundOn                     	= function: 0x002458c8 (function)
   EmitSoundOnClient               	= function: 0x00245978 (function)
   StopSoundOn                     	= function: 0x00245a30 (function)
   debugoverlay                    	= table: 0x00391330 (table)
   {
      metatable                       	= table: 0x0038ea70 (table, already seen)
      __self                          	= userdata: 0x003913a8 (userdata)
   }
   PlayerResource                  	= table: 0x00391408 (table)
   {
      metatable                       	= table: 0x002c8360 (table, already seen)
      __self                          	= userdata: 0x00391480 (userdata)
   }
   MakeStringToken                 	= function: 0x002f74d0 (function)
   DOTA_GC_TEAM_GOOD_GUYS          	= 0 (number)
   DOTA_GAMERULES_STATE_PLAYER_DRAFT	= 3 (number)
   DOTA_GAMERULES_STATE_SCENARIO_SETUP	= 9 (number)
   DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD	= 7 (number)
   DOTA_GAMERULES_STATE_TEAM_SHOWCASE	= 6 (number)
   DOTA_GAMERULES_STATE_DISCONNECT 	= 12 (number)
   DOTA_GAMERULES_STATE_POST_GAME  	= 11 (number)
   DOTA_GAMERULES_STATE_GAME_IN_PROGRESS	= 10 (number)
   DOTA_GAMERULES_STATE_PRE_GAME   	= 8 (number)
   DOTA_GAMERULES_STATE_STRATEGY_TIME	= 5 (number)
   DOTA_GAMERULES_STATE_HERO_SELECTION	= 4 (number)
   DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD	= 1 (number)
   DOTA_GAMERULES_STATE_INIT       	= 0 (number)
   DOTA_INVENTORY_ALL_ACCESS       	= 3 (number)
   DOTA_INVENTORY_LIMIT_DROP_ON_GROUND	= 16 (number)
   DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN	= 8 (number)
   DOTA_INVENTORY_ALLOW_DROP_ON_GROUND	= 4 (number)
   DOTA_INVENTORY_ALLOW_STASH      	= 2 (number)
   DOTA_INVENTORY_ALLOW_MAIN       	= 1 (number)
   DOTA_INVENTORY_ALLOW_NONE       	= 0 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9	= 85 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8	= 84 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7	= 83 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6	= 82 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5	= 81 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4	= 80 (number)
   HasBaseClass                    	= function: 0x00340b08 (function)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2	= 78 (number)
   DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1	= 77 (number)
   PrecacheUnitByNameSync_Engine   	= function: 0x00247d58 (function)
   DOTA_ITEM_NEUTRAL_SLOT          	= 16 (number)
   DOTA_ITEM_TP_SCROLL             	= 15 (number)
   DOTA_ITEM_TRANSIENT_CAST_ITEM   	= 20 (number)
   PrecacheUnitByNameAsync_Engine  	= function: 0x0024fb58 (function)
   DOTA_ITEM_TRANSIENT_ITEM        	= 17 (number)
   DOTA_ITEM_STASH_MAX             	= 15 (number)
   DOTA_ITEM_STASH_SIZE            	= 6 (number)
   DOTA_ITEM_INVENTORY_SIZE        	= 9 (number)
   DOTA_ITEM_MAX                   	= 19 (number)
   SUBQUEST_NUM_TEXT_REPLACE_VALUES	= 2 (number)
   SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= 1 (number)
   SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= 0 (number)
   QUEST_TEXT_REPLACE_VALUE_REWARD 	= 3 (number)
   QUEST_TEXT_REPLACE_VALUE_ROUND  	= 2 (number)
   QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= 0 (number)
   ACT_SCRIPT_CUSTOM_11            	= 922 (number)
   ACT_SCRIPT_CUSTOM_10            	= 921 (number)
   ACT_SCRIPT_CUSTOM_9             	= 920 (number)
   ACT_SCRIPT_CUSTOM_8             	= 919 (number)
   ACT_SCRIPT_CUSTOM_7             	= 918 (number)
   ACT_SCRIPT_CUSTOM_6             	= 917 (number)
   ACT_SCRIPT_CUSTOM_5             	= 916 (number)
   ACT_SCRIPT_CUSTOM_4             	= 915 (number)
   ACT_SCRIPT_CUSTOM_3             	= 914 (number)
   ACT_SCRIPT_CUSTOM_2             	= 913 (number)
   ACT_SCRIPT_CUSTOM_1             	= 912 (number)
   ACT_SCRIPT_CUSTOM_0             	= 911 (number)
   ACT_EXPLODE                     	= 910 (number)
   ACT_PREP_EXPLODE                	= 909 (number)
   ACT_SPRAY                       	= 908 (number)
   ACT_FIRE_RECOVER                	= 907 (number)
   ACT_FIRE                        	= 906 (number)
   LinkLuaModifier_Engine          	= function: 0x00297b58 (function)
   ACT_SPINAROUND                  	= 904 (number)
   ACT_FLICK_RIGHT                 	= 903 (number)
   ACT_FLICK_RIGHT_MIDDLE          	= 902 (number)
   ACT_FLICK_LEFT_MIDDLE           	= 901 (number)
   ACT_FLICK_LEFT                  	= 900 (number)
   ACT_WAKE                        	= 899 (number)
   EmitAnnouncerSoundForPlayer     	= function: 0x00251230 (function)
   EmitAnnouncerSoundForTeamOnLocation	= function: 0x00251168 (function)
   EmitAnnouncerSoundForTeam       	= function: 0x002510a8 (function)
   json                            	= table: 0x003303b8 (table, already seen)
   EmitSoundOnLocationForAllies    	= function: 0x00250f30 (function)
   EmitSoundOnLocationWithCaster   	= function: 0x00250e70 (function)
   DebugCreateUnit                 	= function: 0x00250578 (function)
   FindClearRandomPositionAroundUnit	= function: 0x002504b0 (function)
   ACT_DOTA_THUNDER_STRIKE         	= 1678 (number)
   ACT_DOTA_KINETIC_FIELD          	= 1679 (number)
   ACT_DOTA_STATIC_STORM           	= 1680 (number)
   ACT_DOTA_MINI_TAUNT             	= 1681 (number)
   CDotaSubquestBase               	= table: 0x002c7a58 (table, already seen)
   CreateUnitByNameAsync           	= function: 0x00247ca0 (function)
   ACT_IDLE_AIM_PISTOL             	= 884 (number)
   ACT_DOTA_SWIM                   	= 1684 (number)
   CDotaQuest                      	= table: 0x002c7fa8 (table, already seen)
   ACT_DOTA_TROT                   	= 1686 (number)
   ACT_DOTA_SHAKE                  	= 1687 (number)
   ACT_DOTA_SWIM_IDLE              	= 1688 (number)
   PauseGame                       	= function: 0x002477a0 (function)
   ACT_DOTA_WAIT_IDLE              	= 1689 (number)
   CDOTA_PlayerResource            	= table: 0x002c8360 (table, already seen)
   ACT_DOTA_TELEPORT_COOP_START    	= 1691 (number)
   ACT_DOTA_TELEPORT_COOP_WAIT     	= 1692 (number)
   ACT_DOTA_TELEPORT_COOP_END      	= 1693 (number)
   OVERHEAD_ALERT_LAST_HIT_CLOSE   	= 14 (number)
   OVERHEAD_ALERT_LAST_HIT_MISS    	= 15 (number)
   OVERHEAD_ALERT_MAGICAL_BLOCK    	= 16 (number)
   OVERHEAD_ALERT_INCOMING_DAMAGE  	= 17 (number)
   OVERHEAD_ALERT_OUTGOING_DAMAGE  	= 18 (number)
   OVERHEAD_ALERT_DISABLE_RESIST   	= 19 (number)
   OVERHEAD_ALERT_DEATH            	= 20 (number)
   OVERHEAD_ALERT_BLOCKED          	= 21 (number)
   OVERHEAD_ALERT_ITEM_RECEIVED    	= 22 (number)
   OVERHEAD_ALERT_SHARD            	= 23 (number)
   OVERHEAD_ALERT_DEADLY_BLOW      	= 24 (number)
   CDOTA_Unit_CustomGameAnnouncerAghanim	= table: 0x002dca38 (table, already seen)
   DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK	= 2 (number)
   DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK	= 4 (number)
   DOTA_MINIMAP_EVENT_BASE_GLYPHED 	= 8 (number)
   DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK	= 16 (number)
   DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING	= 32 (number)
   DOTA_MINIMAP_EVENT_TEAMMATE_DIED	= 64 (number)
   DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE	= 128 (number)
   DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED	= 256 (number)
   DOTA_MINIMAP_EVENT_HINT_LOCATION	= 512 (number)
   DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING	= 1024 (number)
   DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING	= 2048 (number)
   DOTA_MINIMAP_EVENT_RADAR        	= 4096 (number)
   DOTA_MINIMAP_EVENT_RADAR_TARGET 	= 8192 (number)
   DOTA_MINIMAP_EVENT_MOVE_TO_TARGET	= 16384 (number)
   ACT_DOTA_SHOPKEEPER_PET_INTERACT	= 1695 (number)
   DOTA_LOADOUT_TYPE_INVALID       	= -1 (number)
   DOTA_LOADOUT_TYPE_WEAPON        	= 0 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON	= 1 (number)
   DOTA_LOADOUT_TYPE_WEAPON2       	= 2 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2	= 3 (number)
   DOTA_LOADOUT_TYPE_HEAD          	= 4 (number)
   DOTA_LOADOUT_TYPE_SHOULDER      	= 5 (number)
   DOTA_LOADOUT_TYPE_ARMS          	= 6 (number)
   DOTA_LOADOUT_TYPE_ARMOR         	= 7 (number)
   DOTA_LOADOUT_TYPE_BELT          	= 8 (number)
   DOTA_LOADOUT_TYPE_NECK          	= 9 (number)
   DOTA_LOADOUT_TYPE_BACK          	= 10 (number)
   DOTA_LOADOUT_TYPE_GLOVES        	= 11 (number)
   DOTA_LOADOUT_TYPE_LEGS          	= 12 (number)
   DOTA_LOADOUT_TYPE_TAIL          	= 13 (number)
   DOTA_LOADOUT_TYPE_MISC          	= 14 (number)
   DOTA_LOADOUT_TYPE_COSTUME       	= 15 (number)
   DOTA_LOADOUT_TYPE_BODY_HEAD     	= 16 (number)
   DOTA_LOADOUT_TYPE_MOUNT         	= 17 (number)
   DOTA_LOADOUT_TYPE_SUMMON        	= 18 (number)
   DOTA_LOADOUT_TYPE_SHAPESHIFT    	= 19 (number)
   DOTA_LOADOUT_TYPE_TAUNT         	= 20 (number)
   DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS	= 21 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ATTACK	= 22 (number)
   DOTA_LOADOUT_TYPE_ABILITY1      	= 23 (number)
   DOTA_LOADOUT_TYPE_ABILITY2      	= 24 (number)
   DOTA_LOADOUT_TYPE_ABILITY3      	= 25 (number)
   DOTA_LOADOUT_TYPE_ABILITY4      	= 26 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE	= 27 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_1	= 28 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_2	= 29 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_3	= 30 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_4	= 31 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_5	= 32 (number)
   _VERSION                        	= "Lua 5.1" (string)
   coroutine                       	= table: 0x002143d8 (table, already seen)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_8	= 35 (number)
   DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_9	= 36 (number)
   DOTA_LOADOUT_TYPE_VOICE         	= 37 (number)
   DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1	= 38 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1	= 39 (number)
   DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1	= 40 (number)
   DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1	= 41 (number)
   package                         	= table: 0x002148d8 (table, already seen)
   DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1	= 43 (number)
   CreateTrigger                   	= function: 0x00249ab0 (function)
   CreateTriggerRadiusApproximate  	= function: 0x00249b60 (function)
   UTIL_MessageTextAll             	= function: 0x00249c20 (function)
   UTIL_MessageText                	= function: 0x00249cd8 (function)
   UTIL_MessageTextAll_WithContext 	= function: 0x00249d90 (function)
   UTIL_MessageText_WithContext    	= function: 0x00249e50 (function)
   UTIL_ResetMessageTextAll        	= function: 0x00249f10 (function)
   UTIL_ResetMessageText           	= function: 0x00249fd0 (function)
   IsDedicatedServer               	= function: 0x0024a088 (function)
   IsServer                        	= function: 0x0024a140 (function)
   IsClient                        	= function: 0x0024a1f0 (function)
   IsInToolsMode                   	= function: 0x0024a2a0 (function)
   CalcClosestPointOnEntityOBB     	= function: 0x0024a350 (function)
   CalcDistanceBetweenEntityOBB    	= function: 0x0024a410 (function)
   CalcDistanceToLineSegment2D     	= function: 0x0024a4d0 (function)
   CEntities                       	= table: 0x0024a640 (table, already seen)
   module                          	= function: 0x00214d88 (function)
   require                         	= function: 0x00214de8 (function)
   DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1	= 62 (number)
   DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1	= 63 (number)
   DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1	= 64 (number)
   DOTA_LOADOUT_TYPE_VOICE_PERSONA_1	= 65 (number)
   DOTA_LOADOUT_PERSONA_1_START    	= 38 (number)
   DOTA_LOADOUT_PERSONA_1_END      	= 65 (number)
   DOTA_LOADOUT_TYPE_PERSONA_SELECTOR	= 66 (number)
   DOTA_LOADOUT_TYPE_COURIER       	= 67 (number)
   DOTA_LOADOUT_TYPE_ANNOUNCER     	= 68 (number)
   DOTA_LOADOUT_TYPE_MEGA_KILLS    	= 69 (number)
   DOTA_LOADOUT_TYPE_MUSIC         	= 70 (number)
   DOTA_LOADOUT_TYPE_WARD          	= 71 (number)
   DOTA_LOADOUT_TYPE_HUD_SKIN      	= 72 (number)
   DOTA_LOADOUT_TYPE_LOADING_SCREEN	= 73 (number)
   DOTA_LOADOUT_TYPE_WEATHER       	= 74 (number)
   DOTA_LOADOUT_TYPE_HEROIC_STATUE 	= 75 (number)
   DOTA_LOADOUT_TYPE_MULTIKILL_BANNER	= 76 (number)
   DOTA_LOADOUT_TYPE_CURSOR_PACK   	= 77 (number)
   DOTA_LOADOUT_TYPE_TELEPORT_EFFECT	= 78 (number)
   DOTA_LOADOUT_TYPE_BLINK_EFFECT  	= 79 (number)
   DOTA_LOADOUT_TYPE_EMBLEM        	= 80 (number)
   DOTA_LOADOUT_TYPE_TERRAIN       	= 81 (number)
   DOTA_LOADOUT_TYPE_RADIANT_CREEPS	= 82 (number)
   Entities                        	= table: 0x0024be78 (table)
   {
      metatable                       	= table: 0x0024a640 (table, already seen)
      __self                          	= userdata: 0x0024bef0 (userdata)
   }
   Convars                         	= table: 0x0024ccf8 (table)
   {
      metatable                       	= table: 0x0024c070 (table, already seen)
      __self                          	= userdata: 0x0024cd70 (userdata)
   }
   DOTA_LOADOUT_TYPE_DIRE_TOWER    	= 85 (number)
   DOTA_LOADOUT_TYPE_VERSUS_SCREEN 	= 86 (number)
   DOTA_LOADOUT_TYPE_STREAK_EFFECT 	= 87 (number)
   DOTA_LOADOUT_TYPE_KILL_EFFECT   	= 88 (number)
   DOTA_LOADOUT_TYPE_DEATH_EFFECT  	= 89 (number)
   DOTA_LOADOUT_TYPE_HEAD_EFFECT   	= 90 (number)
   math                            	= table: 0x002167a8 (table, already seen)
   DOTA_LOADOUT_TYPE_COURIER_EFFECT	= 92 (number)
   DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS	= 93 (number)
   DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS	= 94 (number)
   DOTA_LOADOUT_TYPE_ROSHAN        	= 95 (number)
   DOTA_LOADOUT_TYPE_TORMENTOR     	= 96 (number)
   GlobalSys                       	= table: 0x0024d478 (table)
   {
      metatable                       	= table: 0x0024ceb8 (table, already seen)
      __self                          	= userdata: 0x0024d4f0 (userdata)
   }
   DOTA_PLAYER_LOADOUT_START       	= 67 (number)
   DOTA_PLAYER_LOADOUT_END         	= 97 (number)
   DOTA_LOADOUT_TYPE_NONE          	= 98 (number)
   DOTA_LOADOUT_TYPE_COUNT         	= 99 (number)
   SteamInfo                       	= table: 0x0024d8a0 (table)
   {
      metatable                       	= table: 0x0024d638 (table, already seen)
      __self                          	= userdata: 0x0024d918 (userdata)
   }
   DOTA_ITEM_SLOT_1                	= 0 (number)
   FCVAR_NONE                      	= 0 (number)
   FCVAR_DEVELOPMENTONLY           	= 2 (number)
   FCVAR_HIDDEN                    	= 16 (number)
   FCVAR_PROTECTED                 	= 32 (number)
   FCVAR_SPONLY                    	= 64 (number)
   FCVAR_ARCHIVE                   	= 128 (number)
   FCVAR_NOTIFY                    	= 256 (number)
   FCVAR_USERINFO                  	= 512 (number)
   FCVAR_UNLOGGED                  	= 2048 (number)
   FCVAR_REPLICATED                	= 8192 (number)
   FCVAR_CHEAT                     	= 16384 (number)
   FCVAR_PER_USER                  	= 32768 (number)
   FCVAR_DEMO                      	= 65536 (number)
   FCVAR_DONTRECORD                	= 131072 (number)
   FCVAR_NOT_CONNECTED             	= 4194304 (number)
   FCVAR_VCONSOLE_SET_FOCUS        	= 134217728 (number)
   ACTIVATE_TYPE_INITIAL_CREATION  	= 0 (number)
   ACTIVATE_TYPE_DATAUPDATE_CREATION	= 1 (number)
   ACTIVATE_TYPE_ONRESTORE         	= 2 (number)
   PATTACH_ABSORIGIN               	= 0 (number)
   PATTACH_ABSORIGIN_FOLLOW        	= 1 (number)
   PATTACH_CUSTOMORIGIN            	= 2 (number)
   PATTACH_CUSTOMORIGIN_FOLLOW     	= 3 (number)
   PATTACH_POINT                   	= 4 (number)
   PATTACH_POINT_FOLLOW            	= 5 (number)
   PATTACH_EYES_FOLLOW             	= 6 (number)
   PATTACH_OVERHEAD_FOLLOW         	= 7 (number)
   PATTACH_WORLDORIGIN             	= 8 (number)
   PATTACH_ROOTBONE_FOLLOW         	= 9 (number)
   PATTACH_RENDERORIGIN_FOLLOW     	= 10 (number)
   MAX_PATTACH_TYPES               	= 16 (number)
   SERVER_DLL                      	= 1 (number)
   vec3_origin                     	= Vector 000000000024E0B0 [0.000000 0.000000 0.000000] (userdata)
   vec3_invalid                    	= Vector 000000000024E128 [340282346638528859811704183484516925440.000000 340282346638528859811704183484516925440.000000 34028234 (userdata)
   RandomFloat                     	= function: 0x0024e1f0 (function)
   RandomVector                    	= function: 0x0024e2a0 (function)
   RollPercentage                  	= function: 0x00252520 (function)
   GetWorldMinX                    	= function: 0x002472d0 (function)
   GetWorldMinY                    	= function: 0x00247380 (function)
   GetWorldMaxX                    	= function: 0x00247430 (function)
   GetWorldMaxY                    	= function: 0x002474e0 (function)
   GetSystemTime                   	= function: 0x00247590 (function)
   GetSystemTimeMS                 	= function: 0x00247640 (function)
   GetSystemDate                   	= function: 0x002476f0 (function)
   DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT	= 3 (number)
   EmitGlobalSound                 	= function: 0x00247850 (function)
   DOTA_UNIT_CAP_MOVE_NONE         	= 0 (number)
   DOTA_UNIT_CAP_MOVE_GROUND       	= 1 (number)
   DOTA_UNIT_CAP_MOVE_FLY          	= 2 (number)
   PrecacheUnitFromTableAsync      	= function: 0x00247b28 (function)
   ITEM_FULLY_SHAREABLE            	= 0 (number)
   ITEM_PARTIALLY_SHAREABLE        	= 1 (number)
   ITEM_NOT_SHAREABLE              	= 2 (number)
   PrecacheUnitByNameAsync         	= function: 0x00337a58 (function)
   DOTA_MUSIC_STATUS_NONE          	= 0 (number)
   DOTA_MUSIC_STATUS_EXPLORATION   	= 1 (number)
   DOTA_MUSIC_STATUS_BATTLE        	= 2 (number)
   DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION	= 3 (number)
   DOTA_MUSIC_STATUS_DEAD          	= 4 (number)
   DOTA_MUSIC_STATUS_LAST          	= 5 (number)
   GetItemCost                     	= function: 0x00250058 (function)
   DOTA_POST_GAME_LAYOUT_DOUBLE_COLUMN	= 0 (number)
   DOTA_POST_GAME_LAYOUT_SINGLE_COLUMN	= 1 (number)
   DOTA_POST_GAME_LAYOUT_MAX       	= 2 (number)
   GetClearSpaceForUnit            	= function: 0x00250340 (function)
   DOTA_POST_GAME_COLUMN_LEVEL     	= 0 (number)
   DOTA_POST_GAME_COLUMN_ITEMS     	= 1 (number)
   DOTA_POST_GAME_COLUMN_KILLS     	= 2 (number)
   DOTA_POST_GAME_COLUMN_DEATHS    	= 3 (number)
   DOTA_POST_GAME_COLUMN_ASSISTS   	= 4 (number)
   DOTA_POST_GAME_COLUMN_NET_WORTH 	= 5 (number)
   DOTA_POST_GAME_COLUMN_LAST_HITS 	= 6 (number)
   DOTA_POST_GAME_COLUMN_DENIES    	= 7 (number)
   DOTA_POST_GAME_COLUMN_DAMAGE    	= 8 (number)
   DOTA_POST_GAME_COLUMN_HEALING   	= 9 (number)
   DOTA_POST_GAME_COLUMN_MAX       	= 10 (number)
   DOTA_SHOWGENERICPOPUP_TINT_SCREEN	= 1 (number)
   DOTA_SHOWGENERICPOPUP_SHOW_NO_OTHER_DIALOGS	= 2 (number)
   ResolveNPCPositions             	= function: 0x00250db8 (function)
   DAMAGE_TYPE_NONE                	= 0 (number)
   DAMAGE_TYPE_PHYSICAL            	= 1 (number)
   DAMAGE_TYPE_MAGICAL             	= 2 (number)
   DAMAGE_TYPE_PURE                	= 4 (number)
   DAMAGE_TYPE_HP_REMOVAL          	= 8 (number)
   DAMAGE_TYPE_ABILITY_DEFINED     	= 22 (number)
   DAMAGE_TYPE_ALL                 	= 7 (number)
   EmitSoundOnLocationForPlayer    	= function: 0x002513b0 (function)
   DOTA_DAMAGE_FLAG_NONE           	= 0 (number)
   DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR	= 1 (number)
   DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR	= 2 (number)
   DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY	= 4 (number)
   DOTA_DAMAGE_FLAG_BYPASSES_BLOCK 	= 8 (number)
   DOTA_DAMAGE_FLAG_REFLECTION     	= 16 (number)
   DOTA_DAMAGE_FLAG_HPLOSS         	= 32 (number)
   DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT	= 64 (number)
   DOTA_DAMAGE_FLAG_NON_LETHAL     	= 128 (number)
   DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS	= 512 (number)
   DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION	= 1024 (number)
   DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN	= 2048 (number)
   DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL	= 4096 (number)
   DOTA_DAMAGE_FLAG_PROPERTY_FIRE  	= 8192 (number)
   DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR	= 16384 (number)
   DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK	= 32768 (number)
   DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION	= 65536 (number)
   DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK	= 131072 (number)
   DOTA_DAMAGE_FLAG_ATTACK_MODIFIER	= 262144 (number)
   GetTeamHeroKills                	= function: 0x00252238 (function)
   DOTA_ATTACK_RECORD_FAIL_NO      	= 0 (number)
   DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS	= 1 (number)
   DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS	= 2 (number)
   DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED	= 3 (number)
   DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE	= 4 (number)
   DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE	= 5 (number)
   DOTA_ATTACK_RECORD_CANNOT_FAIL  	= 6 (number)
   DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION	= 7 (number)
   QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= 1 (number)
   DOTA_DAMAGE_CATEGORY_SPELL      	= 0 (number)
   DOTA_DAMAGE_CATEGORY_ATTACK     	= 1 (number)
   QUEST_NUM_TEXT_REPLACE_VALUES   	= 4 (number)
   DOTA_PROJECTILE_ATTACHMENT_NONE 	= 0 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_1	= 1 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_2	= 2 (number)
   DOTA_PROJECTILE_ATTACHMENT_HITLOCATION	= 3 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_3	= 4 (number)
   DOTA_PROJECTILE_ATTACHMENT_ATTACK_4	= 5 (number)
   DOTA_PROJECTILE_ATTACHMENT_LAST 	= 6 (number)
   DOTA_ITEM_STASH_MIN             	= 9 (number)
   DOTA_HUD_VISIBILITY_INVALID     	= -1 (number)
   DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY	= 0 (number)
   DOTA_HUD_VISIBILITY_TOP_HEROES  	= 1 (number)
   DOTA_HUD_VISIBILITY_TOP_SCOREBOARD	= 2 (number)
   DOTA_HUD_VISIBILITY_ACTION_PANEL	= 3 (number)
   DOTA_HUD_VISIBILITY_ACTION_MINIMAP	= 4 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_PANEL	= 5 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_SHOP	= 6 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_ITEMS	= 7 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY	= 8 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_COURIER	= 9 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_PROTECT	= 10 (number)
   DOTA_HUD_VISIBILITY_INVENTORY_GOLD	= 11 (number)
   DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS	= 12 (number)
   DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS	= 13 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS	= 14 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME	= 15 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK	= 16 (number)
   DOTA_HUD_VISIBILITY_HERO_SELECTION_HEADER	= 17 (number)
   DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS	= 18 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND	= 19 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM	= 20 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM	= 21 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR_SCORE	= 22 (number)
   DOTA_HUD_VISIBILITY_ENDGAME     	= 23 (number)
   DOTA_HUD_VISIBILITY_ENDGAME_CHAT	= 24 (number)
   DOTA_HUD_VISIBILITY_QUICK_STATS 	= 25 (number)
   DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI	= 26 (number)
   DOTA_HUD_VISIBILITY_KILLCAM     	= 27 (number)
   DOTA_HUD_VISIBILITY_FIGHT_RECAP 	= 28 (number)
   DOTA_HUD_VISIBILITY_TOP_BAR     	= 29 (number)
   DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS	= 30 (number)
   DOTA_HUD_VISIBILITY_AGHANIMS_STATUS	= 31 (number)
   DOTA_HUD_VISIBILITY_COUNT       	= 32 (number)
   DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP	= 2 (number)
   DOTA_DEFAULT_UI_INVALID         	= -1 (number)
   DOTA_DEFAULT_UI_TOP_TIMEOFDAY   	= 0 (number)
   DOTA_DEFAULT_UI_TOP_HEROES      	= 1 (number)
   DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD	= 2 (number)
   DOTA_GC_TEAM_BAD_GUYS           	= 1 (number)
   DOTA_GC_TEAM_BROADCASTER        	= 2 (number)
   DOTA_GC_TEAM_SPECTATOR          	= 3 (number)
   DOTA_GC_TEAM_PLAYER_POOL        	= 4 (number)
   DOTA_GC_TEAM_NOTEAM             	= 5 (number)
   DOTA_GC_TEAM_CUSTOM_1           	= 6 (number)
   ACT_WAVEFORM_START              	= 1545 (number)
   ACT_WAVEFORM_END                	= 1546 (number)
   ACT_DOTA_CAST_ABILITY_ROT       	= 1547 (number)
   ACT_DOTA_DIE_SPECIAL            	= 1548 (number)
   ACT_DOTA_RATTLETRAP_BATTERYASSAULT	= 1549 (number)
   ACT_DOTA_RATTLETRAP_POWERCOGS   	= 1550 (number)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_START	= 1551 (number)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP	= 1552 (number)
   ACT_DOTA_RATTLETRAP_HOOKSHOT_END	= 1553 (number)
   ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE	= 1554 (number)
   ACT_DOTA_TINKER_REARM1          	= 1555 (number)
   ACT_DOTA_TINKER_REARM2          	= 1556 (number)
   ACT_DOTA_TINKER_REARM3          	= 1557 (number)
   ACT_TINY_AVALANCHE              	= 1558 (number)
   ACT_TINY_TOSS                   	= 1559 (number)
   ACT_TINY_GROWL                  	= 1560 (number)
   ACT_DOTA_WEAVERBUG_ATTACH       	= 1561 (number)
   ACT_DOTA_CAST_WILD_AXES_END     	= 1562 (number)
   ACT_DOTA_CAST_LIFE_BREAK_START  	= 1563 (number)
   ACT_DOTA_CAST_LIFE_BREAK_END    	= 1564 (number)
   ACT_DOTA_NIGHTSTALKER_TRANSITION	= 1565 (number)
   ACT_DOTA_LIFESTEALER_RAGE       	= 1566 (number)
   ACT_DOTA_LIFESTEALER_OPEN_WOUNDS	= 1567 (number)
   ACT_DOTA_SAND_KING_BURROW_IN    	= 1568 (number)
   ACT_DOTA_SAND_KING_BURROW_OUT   	= 1569 (number)
   ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK	= 1570 (number)
   ACT_DOTA_WHEEL_LAYER            	= 1571 (number)
   ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START	= 1572 (number)
   ACT_DOTA_ALCHEMIST_CONCOCTION   	= 1573 (number)
   ACT_DOTA_JAKIRO_LIQUIDFIRE_START	= 1574 (number)
   ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP 	= 1575 (number)
   ACT_DOTA_LIFESTEALER_INFEST     	= 1576 (number)
   ACT_DOTA_LIFESTEALER_INFEST_END 	= 1577 (number)
   ACT_DOTA_LASSO_LOOP             	= 1578 (number)
   MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING	= 109 (number)
   ACT_SECONDARY_VM_PULLBACK       	= 822 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE	= 110 (number)
   ACT_SECONDARY_VM_HOLSTER        	= 820 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS	= 111 (number)
   ACT_PRIMARY_VM_LOWERED_TO_IDLE  	= 818 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE	= 112 (number)
   ACT_PRIMARY_VM_IDLE_TO_LOWERED  	= 816 (number)
   MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE	= 113 (number)
   ACT_PRIMARY_VM_RELOAD           	= 814 (number)
   MODIFIER_PROPERTY_MAX_ATTACK_RANGE	= 114 (number)
   ACT_PRIMARY_VM_PRIMARYATTACK    	= 812 (number)
   MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS	= 115 (number)
   ACT_VM_UNUSABLE                 	= 805 (number)
   MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE	= 116 (number)
   ACT_MP_GESTURE_VC_NODYES_PDA    	= 803 (number)
   MODIFIER_PROPERTY_PROJECTILE_NAME	= 117 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_PDA  	= 801 (number)
   MODIFIER_PROPERTY_REINCARNATION 	= 118 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_PDA 	= 799 (number)
   MODIFIER_PROPERTY_REINCARNATION_SUPPRESS_FX	= 119 (number)
   ACT_MP_GESTURE_VC_NODYES_BUILDING	= 797 (number)
   MODIFIER_PROPERTY_RESPAWNTIME   	= 120 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_BUILDING	= 795 (number)
   MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE	= 121 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING	= 793 (number)
   MODIFIER_PROPERTY_RESPAWNTIME_STACKING	= 122 (number)
   ACT_MP_GESTURE_VC_NODYES_ITEM2  	= 791 (number)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE	= 123 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_ITEM2	= 789 (number)
   MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING	= 124 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2	= 787 (number)
   MODIFIER_PROPERTY_CASTTIME_PERCENTAGE	= 125 (number)
   ACT_MP_GESTURE_VC_NODYES_ITEM1  	= 785 (number)
   MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE	= 126 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_ITEM1	= 783 (number)
   MODIFIER_PROPERTY_MANACOST_PERCENTAGE	= 127 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1	= 781 (number)
   MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING	= 128 (number)
   ACT_MP_GESTURE_VC_NODYES_MELEE  	= 779 (number)
   MODIFIER_PROPERTY_HEALTHCOST_PERCENTAGE	= 129 (number)
   ACT_MP_GESTURE_VC_FISTPUMP_MELEE	= 777 (number)
   MODIFIER_PROPERTY_HEALTHCOST_PERCENTAGE_STACKING	= 130 (number)
   ACT_MP_GESTURE_VC_HANDMOUTH_MELEE	= 775 (number)
   MODIFIER_PROPERTY_DEATHGOLDCOST 	= 131 (number)
   ACT_MP_GESTURE_VC_NODYES_SECONDARY	= 773 (number)
   MODIFIER_PROPERTY_EXP_RATE_BOOST	= 132 (number)
   ACT_MP_JUMP_LAND_PRIMARY        	= 564 (number)
   MODIFIER_PROPERTY_GOLD_RATE_BOOST	= 133 (number)
   ACT_MP_JUMP_START_PRIMARY       	= 562 (number)
   MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE	= 134 (number)
   ACT_MP_CROUCHWALK_PRIMARY       	= 560 (number)
   MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE	= 135 (number)
   ACT_MP_WALK_PRIMARY             	= 558 (number)
   MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK	= 136 (number)
   ACT_MP_CROUCH_PRIMARY           	= 556 (number)
   MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK	= 137 (number)
   ACT_MP_ATTACK_SWIM_POSTFIRE     	= 554 (number)
   MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL	= 138 (number)
   ACT_SHIELD_UP_IDLE              	= 452 (number)
   MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR	= 139 (number)
   ACT_SHIELD_UP                   	= 450 (number)
   MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK	= 140 (number)
   ACT_READINESS_RELAXED_TO_STIMULATED_WALK	= 420 (number)
   MODIFIER_PROPERTY_OVERRIDE_ANIMATION	= 141 (number)
   ACT_VM_SPRINT_IDLE              	= 434 (number)
   MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE	= 142 (number)
   ACT_RIDE_MANNED_GUN             	= 432 (number)
   MODIFIER_PROPERTY_ABSORB_SPELL  	= 143 (number)
   ACT_STARTDYING                  	= 429 (number)
   MODIFIER_PROPERTY_REFLECT_SPELL 	= 144 (number)
   ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED	= 426 (number)
   MODIFIER_PROPERTY_DISABLE_AUTOATTACK	= 145 (number)
   ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED	= 423 (number)
   MODIFIER_PROPERTY_BONUS_DAY_VISION	= 146 (number)
   ACT_READINESS_AGITATED_TO_STIMULATED	= 421 (number)
   MODIFIER_PROPERTY_BONUS_DAY_VISION_PERCENTAGE	= 147 (number)
   ACT_READINESS_RELAXED_TO_STIMULATED	= 419 (number)
   MODIFIER_PROPERTY_BONUS_NIGHT_VISION	= 148 (number)
   ACT_DI_ALYX_ZOMBIE_SHOTGUN64    	= 417 (number)
   MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE	= 149 (number)
   ACT_DI_ALYX_HEADCRAB_MELEE      	= 415 (number)
   MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE	= 150 (number)
   ACT_GESTURE_TURN_LEFT90         	= 169 (number)
   ACT_GESTURE_TURN_RIGHT90        	= 170 (number)
   ACT_GESTURE_TURN_LEFT45_FLAT    	= 171 (number)
   ACT_GESTURE_TURN_RIGHT45_FLAT   	= 172 (number)
   ACT_GESTURE_TURN_LEFT90_FLAT    	= 173 (number)
   ACT_GESTURE_TURN_RIGHT90_FLAT   	= 174 (number)
   ACT_BARNACLE_HIT                	= 175 (number)
   ACT_BARNACLE_PULL               	= 176 (number)
   ACT_BARNACLE_CHOMP              	= 177 (number)
   ACT_BARNACLE_CHEW               	= 178 (number)
   ACT_DO_NOT_DISTURB              	= 179 (number)
   ACT_SPECIFIC_SEQUENCE           	= 180 (number)
   ACT_VM_DEPLOY                   	= 181 (number)
   ACT_VM_RELOAD_EMPTY             	= 182 (number)
   ACT_VM_DRAW                     	= 183 (number)
   ACT_VM_HOLSTER                  	= 184 (number)
   ACT_VM_IDLE                     	= 185 (number)
   ACT_VM_FIDGET                   	= 186 (number)
   ACT_VM_PULLBACK                 	= 187 (number)
   ACT_VM_PULLBACK_HIGH            	= 188 (number)
   ACT_VM_PULLBACK_LOW             	= 189 (number)
   ACT_VM_THROW                    	= 190 (number)
   ACT_VM_DROP                     	= 191 (number)
   ACT_VM_PULLPIN                  	= 192 (number)
   ACT_VM_PRIMARYATTACK            	= 193 (number)
   ACT_VM_SECONDARYATTACK          	= 194 (number)
   ACT_VM_RELOAD                   	= 195 (number)
   ACT_VM_DRYFIRE                  	= 196 (number)
   ACT_VM_HITLEFT                  	= 197 (number)
   ACT_VM_HITLEFT2                 	= 198 (number)
   ACT_VM_HITRIGHT                 	= 199 (number)
   ACT_VM_HITRIGHT2                	= 200 (number)
   ACT_VM_HITCENTER                	= 201 (number)
   ACT_VM_HITCENTER2               	= 202 (number)
   ACT_VM_MISSLEFT                 	= 203 (number)
   ACT_VM_MISSLEFT2                	= 204 (number)
   ACT_VM_MISSRIGHT                	= 205 (number)
   ACT_VM_MISSRIGHT2               	= 206 (number)
   ACT_VM_MISSCENTER               	= 207 (number)
   ACT_VM_MISSCENTER2              	= 208 (number)
   ACT_VM_HAULBACK                 	= 209 (number)
   ACT_VM_SWINGHARD                	= 210 (number)
   ACT_VM_SWINGMISS                	= 211 (number)
   ACT_VM_SWINGHIT                 	= 212 (number)
   ACT_VM_IDLE_TO_LOWERED          	= 213 (number)
   ACT_VM_IDLE_LOWERED             	= 214 (number)
   ACT_VM_LOWERED_TO_IDLE          	= 215 (number)
   ACT_VM_RECOIL1                  	= 216 (number)
   ACT_VM_RECOIL2                  	= 217 (number)
   ACT_VM_RECOIL3                  	= 218 (number)
   ACT_VM_PICKUP                   	= 219 (number)
   ACT_VM_RELEASE                  	= 220 (number)
   ACT_VM_MAUL_LOOP                	= 221 (number)
   ACT_VM_ATTACH_SILENCER          	= 222 (number)
   ACT_VM_DETACH_SILENCER          	= 223 (number)
   ACT_SLAM_STICKWALL_IDLE         	= 224 (number)
   ACT_SLAM_STICKWALL_ND_IDLE      	= 225 (number)
   ACT_SLAM_STICKWALL_ATTACH       	= 226 (number)
   ACT_SLAM_STICKWALL_ATTACH2      	= 227 (number)
   ACT_SLAM_STICKWALL_ND_ATTACH    	= 228 (number)
   ACT_SLAM_STICKWALL_ND_ATTACH2   	= 229 (number)
   ACT_SLAM_STICKWALL_DETONATE     	= 230 (number)
   ACT_SLAM_STICKWALL_DETONATOR_HOLSTER	= 231 (number)
   ACT_SLAM_STICKWALL_DRAW         	= 232 (number)
   ACT_SLAM_STICKWALL_ND_DRAW      	= 233 (number)
   ACT_SLAM_STICKWALL_TO_THROW     	= 234 (number)
   ACT_SLAM_STICKWALL_TO_THROW_ND  	= 235 (number)
   ACT_SLAM_STICKWALL_TO_TRIPMINE_ND	= 236 (number)
   ACT_SLAM_THROW_IDLE             	= 237 (number)
   ACT_SLAM_THROW_ND_IDLE          	= 238 (number)
   ACT_SLAM_THROW_THROW            	= 239 (number)
   ACT_SLAM_THROW_THROW2           	= 240 (number)
   ACT_SLAM_THROW_THROW_ND         	= 241 (number)
   ACT_SLAM_THROW_THROW_ND2        	= 242 (number)
   ACT_SLAM_THROW_DRAW             	= 243 (number)
   ACT_SLAM_THROW_ND_DRAW          	= 244 (number)
   ACT_SLAM_THROW_TO_STICKWALL     	= 245 (number)
   ACT_SLAM_THROW_TO_STICKWALL_ND  	= 246 (number)
   ACT_SLAM_THROW_DETONATE         	= 247 (number)
   ACT_SLAM_THROW_DETONATOR_HOLSTER	= 248 (number)
   ACT_SLAM_THROW_TO_TRIPMINE_ND   	= 249 (number)
   ACT_SLAM_TRIPMINE_IDLE          	= 250 (number)
   ACT_SLAM_TRIPMINE_DRAW          	= 251 (number)
   ACT_SLAM_TRIPMINE_ATTACH        	= 252 (number)
   ACT_SLAM_TRIPMINE_ATTACH2       	= 253 (number)
   ACT_SLAM_TRIPMINE_TO_STICKWALL_ND	= 254 (number)
   ACT_SLAM_TRIPMINE_TO_THROW_ND   	= 255 (number)
   ACT_SLAM_DETONATOR_IDLE         	= 256 (number)
   ACT_SLAM_DETONATOR_DRAW         	= 257 (number)
   ACT_SLAM_DETONATOR_DETONATE     	= 258 (number)
   ACT_SLAM_DETONATOR_HOLSTER      	= 259 (number)
   ACT_SLAM_DETONATOR_STICKWALL_DRAW	= 260 (number)
   ACT_SLAM_DETONATOR_THROW_DRAW   	= 261 (number)
   ACT_SHOTGUN_RELOAD_START        	= 262 (number)
   ACT_SHOTGUN_RELOAD_FINISH       	= 263 (number)
   ACT_SHOTGUN_PUMP                	= 264 (number)
   ACT_SMG2_IDLE2                  	= 265 (number)
   ACT_SMG2_FIRE2                  	= 266 (number)
   ACT_SMG2_DRAW2                  	= 267 (number)
   ACT_SMG2_RELOAD2                	= 268 (number)
   ACT_SMG2_DRYFIRE2               	= 269 (number)
   ACT_SMG2_TOAUTO                 	= 270 (number)
   ACT_SMG2_TOBURST                	= 271 (number)
   ACT_PHYSCANNON_UPGRADE          	= 272 (number)
   ACT_RANGE_ATTACK_AR1            	= 273 (number)
   ACT_RANGE_ATTACK_AR2            	= 274 (number)
   ACT_RANGE_ATTACK_AR2_LOW        	= 275 (number)
   ACT_RANGE_ATTACK_AR2_GRENADE    	= 276 (number)
   ACT_RANGE_ATTACK_HMG1           	= 277 (number)
   ACT_RANGE_ATTACK_ML             	= 278 (number)
   ACT_RANGE_ATTACK_SMG1           	= 279 (number)
   ACT_RANGE_ATTACK_SMG1_LOW       	= 280 (number)
   ACT_RANGE_ATTACK_SMG2           	= 281 (number)
   ACT_RANGE_ATTACK_SHOTGUN        	= 282 (number)
   ACT_RANGE_ATTACK_SHOTGUN_LOW    	= 283 (number)
   ACT_RANGE_ATTACK_PISTOL         	= 284 (number)
   ACT_RANGE_ATTACK_PISTOL_LOW     	= 285 (number)
   ACT_RANGE_ATTACK_SLAM           	= 286 (number)
   ACT_RANGE_ATTACK_TRIPWIRE       	= 287 (number)
   ACT_RANGE_ATTACK_THROW          	= 288 (number)
   ACT_RANGE_ATTACK_SNIPER_RIFLE   	= 289 (number)
   ACT_RANGE_ATTACK_RPG            	= 290 (number)
   ACT_MELEE_ATTACK_SWING          	= 291 (number)
   ACT_RANGE_AIM_LOW               	= 292 (number)
   ACT_RANGE_AIM_SMG1_LOW          	= 293 (number)
   ACT_RANGE_AIM_PISTOL_LOW        	= 294 (number)
   ACT_RANGE_AIM_AR2_LOW           	= 295 (number)
   ACT_COVER_PISTOL_LOW            	= 296 (number)
   ACT_COVER_SMG1_LOW              	= 297 (number)
   ACT_GESTURE_RANGE_ATTACK_AR1    	= 298 (number)
   ACT_GESTURE_RANGE_ATTACK_AR2    	= 299 (number)
   ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE	= 300 (number)
   ACT_GESTURE_RANGE_ATTACK_HMG1   	= 301 (number)
   ACT_GESTURE_RANGE_ATTACK_ML     	= 302 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG1   	= 303 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG1_LOW	= 304 (number)
   ACT_GESTURE_RANGE_ATTACK_SMG2   	= 305 (number)
   ACT_GESTURE_RANGE_ATTACK_SHOTGUN	= 306 (number)
   ACT_GESTURE_RANGE_ATTACK_PISTOL 	= 307 (number)
   ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW	= 308 (number)
   ACT_GESTURE_RANGE_ATTACK_SLAM   	= 309 (number)
   ACT_GESTURE_RANGE_ATTACK_TRIPWIRE	= 310 (number)
   ACT_GESTURE_RANGE_ATTACK_THROW  	= 311 (number)
   ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE	= 312 (number)
   ACT_GESTURE_MELEE_ATTACK_SWING  	= 313 (number)
   ACT_IDLE_RIFLE                  	= 314 (number)
   ACT_IDLE_SMG1                   	= 315 (number)
   ACT_IDLE_ANGRY_SMG1             	= 316 (number)
   ACT_IDLE_PISTOL                 	= 317 (number)
   ACT_IDLE_ANGRY_PISTOL           	= 318 (number)
   ACT_IDLE_ANGRY_SHOTGUN          	= 319 (number)
   ACT_IDLE_STEALTH_PISTOL         	= 320 (number)
   ACT_IDLE_PACKAGE                	= 321 (number)
   ACT_WALK_PACKAGE                	= 322 (number)
   ACT_IDLE_SUITCASE               	= 323 (number)
   ACT_WALK_SUITCASE               	= 324 (number)
   ACT_IDLE_SMG1_RELAXED           	= 325 (number)
   ACT_IDLE_SMG1_STIMULATED        	= 326 (number)
   ACT_WALK_RIFLE_RELAXED          	= 327 (number)
   ACT_RUN_RIFLE_RELAXED           	= 328 (number)
   ACT_WALK_RIFLE_STIMULATED       	= 329 (number)
   ACT_RUN_RIFLE_STIMULATED        	= 330 (number)
   ACT_IDLE_AIM_RIFLE_STIMULATED   	= 331 (number)
   ACT_WALK_AIM_RIFLE_STIMULATED   	= 332 (number)
   ACT_RUN_AIM_RIFLE_STIMULATED    	= 333 (number)
   ACT_IDLE_SHOTGUN_RELAXED        	= 334 (number)
   ACT_IDLE_SHOTGUN_STIMULATED     	= 335 (number)
   ACT_IDLE_SHOTGUN_AGITATED       	= 336 (number)
   ACT_WALK_ANGRY                  	= 337 (number)
   ACT_POLICE_HARASS1              	= 338 (number)
   ACT_POLICE_HARASS2              	= 339 (number)
   ACT_IDLE_MANNEDGUN              	= 340 (number)
   ACT_IDLE_MELEE                  	= 341 (number)
   ACT_IDLE_ANGRY_MELEE            	= 342 (number)
   ACT_IDLE_RPG_RELAXED            	= 343 (number)
   ACT_IDLE_RPG                    	= 344 (number)
   ACT_IDLE_ANGRY_RPG              	= 345 (number)
   ACT_COVER_LOW_RPG               	= 346 (number)
   ACT_WALK_RPG                    	= 347 (number)
   ACT_RUN_RPG                     	= 348 (number)
   ACT_WALK_CROUCH_RPG             	= 349 (number)
   ACT_RUN_CROUCH_RPG              	= 350 (number)
   ACT_WALK_RPG_RELAXED            	= 351 (number)
   ACT_RUN_RPG_RELAXED             	= 352 (number)
   ACT_WALK_RIFLE                  	= 353 (number)
   ACT_WALK_AIM_RIFLE              	= 354 (number)
   ACT_WALK_CROUCH_RIFLE           	= 355 (number)
   ACT_WALK_CROUCH_AIM_RIFLE       	= 356 (number)
   ACT_RUN_RIFLE                   	= 357 (number)
   ACT_RUN_AIM_RIFLE               	= 358 (number)
   ACT_RUN_CROUCH_RIFLE            	= 359 (number)
   ACT_RUN_CROUCH_AIM_RIFLE        	= 360 (number)
   ACT_RUN_STEALTH_PISTOL          	= 361 (number)
   ACT_WALK_AIM_SHOTGUN            	= 362 (number)
   ACT_RUN_AIM_SHOTGUN             	= 363 (number)
   ACT_WALK_PISTOL                 	= 364 (number)
   ACT_RUN_PISTOL                  	= 365 (number)
   ACT_WALK_AIM_PISTOL             	= 366 (number)
   ACT_RUN_AIM_PISTOL              	= 367 (number)
   ACT_WALK_STEALTH_PISTOL         	= 368 (number)
   ACT_WALK_AIM_STEALTH_PISTOL     	= 369 (number)
   ACT_RUN_AIM_STEALTH_PISTOL      	= 370 (number)
   ACT_RELOAD_PISTOL               	= 371 (number)
   ACT_RELOAD_PISTOL_LOW           	= 372 (number)
   ACT_RELOAD_SMG1                 	= 373 (number)
   ACT_RELOAD_SMG1_LOW             	= 374 (number)
   ACT_RELOAD_SHOTGUN              	= 375 (number)
   ACT_RELOAD_SHOTGUN_LOW          	= 376 (number)
   ACT_GESTURE_RELOAD              	= 377 (number)
   ACT_GESTURE_RELOAD_PISTOL       	= 378 (number)
   ACT_GESTURE_RELOAD_SMG1         	= 379 (number)
   ACT_GESTURE_RELOAD_SHOTGUN      	= 380 (number)
   ACT_BUSY_LEAN_LEFT              	= 381 (number)
   ACT_BUSY_LEAN_LEFT_ENTRY        	= 382 (number)
   ACT_BUSY_LEAN_LEFT_EXIT         	= 383 (number)
   ACT_BUSY_LEAN_BACK              	= 384 (number)
   ACT_BUSY_LEAN_BACK_ENTRY        	= 385 (number)
   ACT_BUSY_LEAN_BACK_EXIT         	= 386 (number)
   ACT_BUSY_SIT_GROUND             	= 387 (number)
   ACT_BUSY_SIT_GROUND_ENTRY       	= 388 (number)
   ACT_BUSY_SIT_GROUND_EXIT        	= 389 (number)
   ACT_BUSY_SIT_CHAIR              	= 390 (number)
   ACT_BUSY_SIT_CHAIR_ENTRY        	= 391 (number)
   ACT_BUSY_SIT_CHAIR_EXIT         	= 392 (number)
   ACT_BUSY_STAND                  	= 393 (number)
   ACT_BUSY_QUEUE                  	= 394 (number)
   ACT_DUCK_DODGE                  	= 395 (number)
   ACT_DIE_BARNACLE_SWALLOW        	= 396 (number)
   ACT_GESTURE_BARNACLE_STRANGLE   	= 397 (number)
   ACT_DIE_FRONTSIDE               	= 402 (number)
   ACT_DIE_RIGHTSIDE               	= 403 (number)
   ACT_DIE_BACKSIDE                	= 404 (number)
   ACT_DIE_LEFTSIDE                	= 405 (number)
   ACT_DIE_CROUCH_FRONTSIDE        	= 406 (number)
   ACT_DIE_CROUCH_RIGHTSIDE        	= 407 (number)
   ACT_DIE_CROUCH_BACKSIDE         	= 408 (number)
   ACT_DIE_CROUCH_LEFTSIDE         	= 409 (number)
   ACT_DIE_INCAP                   	= 410 (number)
   ACT_DIE_STANDING                	= 411 (number)
   ACT_SCRIPT_CUSTOM_14            	= 925 (number)
   ACT_SCRIPT_CUSTOM_15            	= 926 (number)
   ACT_SCRIPT_CUSTOM_16            	= 927 (number)
   ACT_SCRIPT_CUSTOM_17            	= 928 (number)
   ACT_SCRIPT_CUSTOM_18            	= 929 (number)
   ACT_SCRIPT_CUSTOM_19            	= 930 (number)
   ACT_SCRIPT_CUSTOM_21            	= 932 (number)
   ACT_SCRIPT_CUSTOM_22            	= 933 (number)
   ACT_SCRIPT_CUSTOM_23            	= 934 (number)
   ACT_SCRIPT_CUSTOM_24            	= 935 (number)
   ACT_SCRIPT_CUSTOM_25            	= 936 (number)
   ACT_SCRIPT_CUSTOM_26            	= 937 (number)
   ACT_SCRIPT_CUSTOM_28            	= 939 (number)
   ACT_SCRIPT_CUSTOM_29            	= 940 (number)
   ACT_SCRIPT_CUSTOM_30            	= 941 (number)
   ACT_SCRIPT_CUSTOM_31            	= 942 (number)
   ACT_VR_PISTOL_LAST_SHOT         	= 943 (number)
   ACT_VR_PISTOL_SLIDE_RELEASE     	= 944 (number)
   ACT_VR_PISTOL_CLIP_OUT_CHAMBERED	= 945 (number)
   ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK	= 946 (number)
   ACT_VR_PISTOL_CLIP_IN_CHAMBERED 	= 947 (number)
   ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK	= 948 (number)
   ACT_VR_PISTOL_IDLE_SLIDE_BACK   	= 949 (number)
   ACT_DI_ALYX_ZOMBIE_TORSO_MELEE  	= 414 (number)
   ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK	= 424 (number)
   ACT_WALK_CARRY                  	= 428 (number)
   ACT_DYINGTODEAD                 	= 431 (number)
   ACT_VM_SPRINT_LEAVE             	= 435 (number)
   ACT_FIRE_START                  	= 436 (number)
   ACT_MIRANA_LEAP_END             	= 1544 (number)
   ACT_DOTA_CAST_ABILITY_4_END     	= 1543 (number)
   ACT_DOTA_CAST_ABILITY_3_END     	= 1542 (number)
   ACT_DOTA_CAST_ABILITY_2_END     	= 1541 (number)
   ACT_DOTA_CAST_ABILITY_1_END     	= 1540 (number)
   ACT_DOTA_ECHO_SLAM              	= 1539 (number)
   ACT_DOTA_CAST_DRAGONBREATH      	= 1538 (number)
   ACT_DOTA_THIRST                 	= 1537 (number)
   ACT_DOTA_TAUNT                  	= 1536 (number)
   ACT_DOTA_KILLTAUNT              	= 1535 (number)
   ACT_DOTA_SPAWN                  	= 1534 (number)
   ACT_DOTA_CAPTURE                	= 1533 (number)
   ACT_DOTA_CONSTANT_LAYER         	= 1532 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_6  	= 1531 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_5  	= 1530 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_4  	= 1529 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_3  	= 1528 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_2  	= 1527 (number)
   ACT_DOTA_CHANNEL_END_ABILITY_1  	= 1526 (number)
   ACT_DOTA_CHANNEL_ABILITY_6      	= 1525 (number)
   ACT_DOTA_CHANNEL_ABILITY_5      	= 1524 (number)
   ACT_DOTA_CHANNEL_ABILITY_4      	= 1523 (number)
   ACT_DOTA_CHANNEL_ABILITY_3      	= 1522 (number)
   ACT_DOTA_CHANNEL_ABILITY_2      	= 1521 (number)
   ACT_DOTA_CHANNEL_ABILITY_1      	= 1520 (number)
   ACT_DOTA_OVERRIDE_ABILITY_4     	= 1519 (number)
   ACT_DOTA_OVERRIDE_ABILITY_3     	= 1518 (number)
   ACT_DOTA_OVERRIDE_ABILITY_2     	= 1517 (number)
   ACT_DOTA_OVERRIDE_ABILITY_1     	= 1516 (number)
   ACT_DOTA_CAST_ABILITY_6         	= 1515 (number)
   ACT_DOTA_CAST_ABILITY_5         	= 1514 (number)
   ACT_DOTA_CAST_ABILITY_4         	= 1513 (number)
   ACT_DOTA_CAST_ABILITY_3         	= 1512 (number)
   ACT_DOTA_CAST_ABILITY_2         	= 1511 (number)
   ACT_DOTA_CAST_ABILITY_1         	= 1510 (number)
   ACT_DOTA_DISABLED               	= 1509 (number)
   ACT_DOTA_FLAIL                  	= 1508 (number)
   ACT_DOTA_FLINCH                 	= 1507 (number)
   ACT_DOTA_DIE                    	= 1506 (number)
   ACT_DOTA_ATTACK_EVENT           	= 1505 (number)
   ACT_DOTA_ATTACK2                	= 1504 (number)
   ACT_DOTA_ATTACK                 	= 1503 (number)
   ACT_DOTA_RUN                    	= 1502 (number)
   ACT_DOTA_IDLE_RARE              	= 1501 (number)
   ACT_DOTA_IDLE                   	= 1500 (number)
   ACT_CSGO_TAUNT                  	= 1028 (number)
   ACT_CSGO_PARACHUTE              	= 1027 (number)
   ACT_CSGO_EXIT_LADDER_BOTTOM     	= 1026 (number)
   ACT_CSGO_EXIT_LADDER_TOP        	= 1025 (number)
   ACT_CSGO_LAND_HEAVY             	= 1024 (number)
   ACT_CSGO_LAND_LIGHT             	= 1023 (number)
   ACT_CSGO_CLIMB_LADDER           	= 1022 (number)
   ACT_CSGO_FALL                   	= 1021 (number)
   ACT_CSGO_JUMP                   	= 1020 (number)
   ACT_CSGO_FLINCH_MOLOTOV         	= 1019 (number)
   ACT_CSGO_FLINCH_HEAD            	= 1018 (number)
   ACT_CSGO_FLINCH                 	= 1017 (number)
   ACT_CSGO_ALIVE_LOOP             	= 1016 (number)
   ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING	= 1015 (number)
   MODIFIER_STATE_FEARED           	= 47 (number)
   MODIFIER_STATE_TAUNTED          	= 48 (number)
   MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED	= 49 (number)
   MODIFIER_STATE_FORCED_FLYING_VISION	= 50 (number)
   MODIFIER_STATE_ATTACK_ALLIES    	= 51 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS	= 52 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE	= 53 (number)
   MODIFIER_STATE_SPECIALLY_UNDENIABLE	= 54 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS	= 55 (number)
   MODIFIER_STATE_DEBUFF_IMMUNE    	= 56 (number)
   MODIFIER_STATE_NO_INVISIBILITY_VISUALS	= 57 (number)
   MODIFIER_STATE_ALLOW_PATHING_THROUGH_BASE_BLOCKER	= 58 (number)
   MODIFIER_STATE_IGNORING_MOVE_ORDERS	= 59 (number)
   MODIFIER_STATE_LAST             	= 60 (number)
   ACT_CSGO_FIRE_SECONDARY_OPT_1   	= 1000 (number)
   MODIFIER_PRIORITY_LOW           	= 0 (number)
   MODIFIER_PRIORITY_NORMAL        	= 1 (number)
   MODIFIER_PRIORITY_HIGH          	= 2 (number)
   MODIFIER_PRIORITY_ULTRA         	= 3 (number)
   MODIFIER_PRIORITY_SUPER_ULTRA   	= 4 (number)
   ACT_CSGO_DEFUSE_WITH_KIT        	= 994 (number)
   DOTA_BUFF_REMOVE_ALL            	= 0 (number)
   DOTA_BUFF_REMOVE_ENEMY          	= 1 (number)
   DOTA_BUFF_REMOVE_ALLY           	= 2 (number)
   ACT_DIE_CROUCH                  	= 990 (number)
   MODIFIER_ATTRIBUTE_NONE         	= 0 (number)
   MODIFIER_ATTRIBUTE_PERMANENT    	= 1 (number)
   MODIFIER_ATTRIBUTE_MULTIPLE     	= 2 (number)
   MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE	= 4 (number)
   MODIFIER_ATTRIBUTE_AURA_PRIORITY	= 8 (number)
   MODIFIER_ATTRIBUTE_IGNORE_DODGE 	= 16 (number)
   ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK	= 983 (number)
   ACT_GLIDE                       	= 27 (number)
   ACT_SWIM                        	= 28 (number)
   ACT_JUMP                        	= 29 (number)
   ACT_HOP                         	= 30 (number)
   ACT_LEAP                        	= 31 (number)
   ACT_LAND                        	= 32 (number)
   ACT_CLIMB_UP                    	= 33 (number)
   ACT_CLIMB_DOWN                  	= 34 (number)
   ACT_CLIMB_DISMOUNT              	= 35 (number)
   ACT_SHIPLADDER_UP               	= 36 (number)
   ACT_SHIPLADDER_DOWN             	= 37 (number)
   ACT_STRAFE_LEFT                 	= 38 (number)
   ACT_STRAFE_RIGHT                	= 39 (number)
   ACT_ROLL_LEFT                   	= 40 (number)
   ACT_ROLL_RIGHT                  	= 41 (number)
   ACT_TURN_LEFT                   	= 42 (number)
   ACT_TURN_RIGHT                  	= 43 (number)
   ACT_CROUCH                      	= 44 (number)
   ACT_CROUCHIDLE                  	= 45 (number)
   ACT_STAND                       	= 46 (number)
   ACT_USE                         	= 47 (number)
   ACT_ALIEN_BURROW_IDLE           	= 48 (number)
   ACT_ALIEN_BURROW_OUT            	= 49 (number)
   ACT_SIGNAL1                     	= 50 (number)
   ACT_SIGNAL2                     	= 51 (number)
   ACT_SIGNAL3                     	= 52 (number)
   ACT_SIGNAL_ADVANCE              	= 53 (number)
   ACT_SIGNAL_FORWARD              	= 54 (number)
   ACT_SIGNAL_GROUP                	= 55 (number)
   ACT_SIGNAL_HALT                 	= 56 (number)
   ACT_SIGNAL_LEFT                 	= 57 (number)
   ACT_SIGNAL_RIGHT                	= 58 (number)
   ACT_SIGNAL_TAKECOVER            	= 59 (number)
   ACT_LOOKBACK_RIGHT              	= 60 (number)
   ACT_LOOKBACK_LEFT               	= 61 (number)
   ACT_COWER                       	= 62 (number)
   ACT_SMALL_FLINCH                	= 63 (number)
   ACT_BIG_FLINCH                  	= 64 (number)
   ACT_MELEE_ATTACK1               	= 65 (number)
   ACT_MELEE_ATTACK2               	= 66 (number)
   ACT_RELOAD                      	= 67 (number)
   ACT_RELOAD_START                	= 68 (number)
   ACT_RELOAD_FINISH               	= 69 (number)
   ACT_RELOAD_LOW                  	= 70 (number)
   ACT_ARM                         	= 71 (number)
   ACT_DISARM                      	= 72 (number)
   ACT_DROP_WEAPON                 	= 73 (number)
   ACT_DROP_WEAPON_SHOTGUN         	= 74 (number)
   ACT_PICKUP_GROUND               	= 75 (number)
   ACT_PICKUP_RACK                 	= 76 (number)
   ACT_IDLE_ANGRY                  	= 77 (number)
   ACT_IDLE_RELAXED                	= 78 (number)
   ACT_IDLE_STIMULATED             	= 79 (number)
   ACT_IDLE_AGITATED               	= 80 (number)
   ACT_IDLE_STEALTH                	= 81 (number)
   ACT_IDLE_HURT                   	= 82 (number)
   ACT_WALK_RELAXED                	= 83 (number)
   ACT_WALK_STIMULATED             	= 84 (number)
   ACT_WALK_AGITATED               	= 85 (number)
   ACT_WALK_STEALTH                	= 86 (number)
   ACT_RUN_RELAXED                 	= 87 (number)
   ACT_RUN_STIMULATED              	= 88 (number)
   ACT_RUN_AGITATED                	= 89 (number)
   ACT_RUN_STEALTH                 	= 90 (number)
   ACT_IDLE_AIM_RELAXED            	= 91 (number)
   ACT_IDLE_AIM_STIMULATED         	= 92 (number)
   ACT_IDLE_AIM_AGITATED           	= 93 (number)
   ACT_IDLE_AIM_STEALTH            	= 94 (number)
   ACT_WALK_AIM_RELAXED            	= 95 (number)
   ACT_WALK_AIM_STIMULATED         	= 96 (number)
   ACT_WALK_AIM_AGITATED           	= 97 (number)
   ACT_WALK_AIM_STEALTH            	= 98 (number)
   ACT_RUN_AIM_RELAXED             	= 99 (number)
   ACT_RUN_AIM_STIMULATED          	= 100 (number)
   ACT_RUN_AIM_AGITATED            	= 101 (number)
   ACT_RUN_AIM_STEALTH             	= 102 (number)
   ACT_CROUCHIDLE_STIMULATED       	= 103 (number)
   ACT_CROUCHIDLE_AIM_STIMULATED   	= 104 (number)
   ACT_CROUCHIDLE_AGITATED         	= 105 (number)
   ACT_WALK_HURT                   	= 106 (number)
   ACT_RUN_HURT                    	= 107 (number)
   ACT_SPECIAL_ATTACK1             	= 108 (number)
   ACT_SPECIAL_ATTACK2             	= 109 (number)
   ACT_COMBAT_IDLE                 	= 110 (number)
   ACT_WALK_SCARED                 	= 111 (number)
   ACT_RUN_SCARED                  	= 112 (number)
   ACT_VICTORY_DANCE               	= 113 (number)
   ACT_DIE_HEADSHOT                	= 114 (number)
   ACT_DIE_CHESTSHOT               	= 115 (number)
   ACT_DIE_GUTSHOT                 	= 116 (number)
   ACT_DIE_BACKSHOT                	= 117 (number)
   ACT_FLINCH_HEAD                 	= 118 (number)
   ACT_FLINCH_CHEST                	= 119 (number)
   ACT_FLINCH_STOMACH              	= 120 (number)
   ACT_FLINCH_LEFTARM              	= 121 (number)
   ACT_FLINCH_RIGHTARM             	= 122 (number)
   ACT_FLINCH_LEFTLEG              	= 123 (number)
   ACT_FLINCH_RIGHTLEG             	= 124 (number)
   ACT_FLINCH_PHYSICS              	= 125 (number)
   ACT_FLINCH_HEAD_BACK            	= 126 (number)
   ACT_FLINCH_CHEST_BACK           	= 127 (number)
   ACT_FLINCH_STOMACH_BACK         	= 128 (number)
   ACT_FLINCH_CROUCH_FRONT         	= 129 (number)
   ACT_FLINCH_CROUCH_BACK          	= 130 (number)
   ACT_FLINCH_CROUCH_LEFT          	= 131 (number)
   ACT_FLINCH_CROUCH_RIGHT         	= 132 (number)
   ACT_IDLE_ON_FIRE                	= 133 (number)
   ACT_WALK_ON_FIRE                	= 134 (number)
   ACT_RUN_ON_FIRE                 	= 135 (number)
   ACT_180_LEFT                    	= 137 (number)
   ACT_180_RIGHT                   	= 138 (number)
   ACT_90_LEFT                     	= 139 (number)
   ACT_90_RIGHT                    	= 140 (number)
   ACT_STEP_LEFT                   	= 141 (number)
   ACT_STEP_RIGHT                  	= 142 (number)
   ACT_STEP_BACK                   	= 143 (number)
   ACT_STEP_FORE                   	= 144 (number)
   ACT_GESTURE_RANGE_ATTACK1       	= 145 (number)
   ACT_GESTURE_RANGE_ATTACK2       	= 146 (number)
   ACT_GESTURE_MELEE_ATTACK1       	= 147 (number)
   ACT_GESTURE_MELEE_ATTACK2       	= 148 (number)
   ACT_GESTURE_RANGE_ATTACK1_LOW   	= 149 (number)
   ACT_GESTURE_RANGE_ATTACK2_LOW   	= 150 (number)
   ACT_MELEE_ATTACK_SWING_GESTURE  	= 151 (number)
   ACT_GESTURE_SMALL_FLINCH        	= 152 (number)
   ACT_GESTURE_BIG_FLINCH          	= 153 (number)
   ACT_GESTURE_FLINCH_BLAST        	= 154 (number)
   ACT_GESTURE_FLINCH_BLAST_SHOTGUN	= 155 (number)
   ACT_GESTURE_FLINCH_BLAST_DAMAGED	= 156 (number)
   ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN	= 157 (number)
   ACT_GESTURE_FLINCH_HEAD         	= 158 (number)
   ACT_GESTURE_FLINCH_CHEST        	= 159 (number)
   ACT_GESTURE_FLINCH_STOMACH      	= 160 (number)
   ACT_GESTURE_FLINCH_LEFTARM      	= 161 (number)
   ACT_GESTURE_FLINCH_RIGHTARM     	= 162 (number)
   ACT_GESTURE_FLINCH_LEFTLEG      	= 163 (number)
   ACT_GESTURE_FLINCH_RIGHTLEG     	= 164 (number)
   ACT_GESTURE_TURN_LEFT           	= 165 (number)
   ACT_GESTURE_TURN_RIGHT          	= 166 (number)
   ACT_GESTURE_TURN_LEFT45         	= 167 (number)
   ACT_GESTURE_TURN_RIGHT45        	= 168 (number)
   ACT_DI_ALYX_ZOMBIE_MELEE        	= 413 (number)
   CLogicRelay                     	= table: 0x002f42c8 (table, already seen)
   CInfoData                       	= table: 0x002f45e0 (table, already seen)
   ACT_HOVER                       	= 26 (number)
   ACT_FLY                         	= 25 (number)
   ACT_DIERAGDOLL                  	= 24 (number)
   ACT_DIEVIOLENT                  	= 23 (number)
   ACT_DIEFORWARD                  	= 22 (number)
   ACT_DIEBACKWARD                 	= 21 (number)
   CEnvProjectedTexture            	= table: 0x002f4de8 (table, already seen)
   ACT_RANGE_ATTACK2_LOW           	= 19 (number)
   ACT_RANGE_ATTACK1_LOW           	= 18 (number)
   ACT_RANGE_ATTACK2               	= 17 (number)
   ACT_RANGE_ATTACK1               	= 16 (number)
   ACT_SCRIPT_CUSTOM_MOVE          	= 15 (number)
   CPointTemplate                  	= table: 0x002f5540 (table, already seen)
   ACT_RUN_CROUCH_AIM              	= 13 (number)
   ACT_RUN_CROUCH                  	= 12 (number)
   ACT_RUN_AIM                     	= 11 (number)
   ACT_RUN                         	= 10 (number)
   CInfoWorldLayer                 	= table: 0x002f5b70 (table, already seen)
   ACT_WALK_CROUCH                 	= 8 (number)
   ACT_WALK_AIM                    	= 7 (number)
   CPointClientUIWorldPanel        	= table: 0x002f5f78 (table, already seen)
   ACT_COVER_LOW                   	= 5 (number)
   ACT_COVER_MED                   	= 4 (number)
   ACT_COVER                       	= 3 (number)
   ACT_TRANSITION                  	= 2 (number)
   ACT_IDLE                        	= 1 (number)
   CNativeOutputs                  	= table: 0x002f6698 (table, already seen)
   Warning                         	= function: 0x00219f70 (function)
   Msg                             	= function: 0x00219e60 (function)
   RandomInt                       	= function: 0x0024e170 (function)
   CScriptKeyValues                	= table: 0x002f6b98 (table, already seen)
   EDesc                           	= table: 0x00219c40 (table)
   {
      DotaDefaultUIElement_t          	= table: 0x0025c220 (table)
      {
         DOTA_DEFAULT_UI_INVENTORY_COURIER	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_PROTECT	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_GOLD  	= "" (string)
         DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS	= "" (string)
         DOTA_DEFAULT_UI_SHOP_COMMONITEMS	= "" (string)
         DOTA_DEFAULT_UI_INVALID         	= "" (string)
         DOTA_DEFAULT_UI_TOP_TIMEOFDAY   	= "" (string)
         DOTA_DEFAULT_UI_TOP_HEROES      	= "" (string)
         DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD	= "" (string)
         DOTA_DEFAULT_UI_TOP_MENU_BUTTONS	= "" (string)
         DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND	= "" (string)
         DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM	= "" (string)
         DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM	= "" (string)
         DOTA_DEFAULT_UI_TOP_BAR_SCORE   	= "" (string)
         DOTA_DEFAULT_UI_ENDGAME         	= "" (string)
         DOTA_DEFAULT_UI_ENDGAME_CHAT    	= "" (string)
         DOTA_DEFAULT_UI_QUICK_STATS     	= "" (string)
         DOTA_DEFAULT_UI_PREGAME_STRATEGYUI	= "" (string)
         DOTA_DEFAULT_UI_KILLCAM         	= "" (string)
         DOTA_DEFAULT_UI_FIGHT_RECAP     	= "" (string)
         DOTA_DEFAULT_UI_TOP_BAR         	= "" (string)
         DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS	= "" (string)
         DOTA_DEFAULT_UI_AGHANIMS_STATUS 	= "" (string)
         DOTA_DEFAULT_UI_ELEMENT_COUNT   	= "" (string)
         DOTA_DEFAULT_UI_HERO_SELECTION_HEADER	= "" (string)
         DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK	= "" (string)
         DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME	= "" (string)
         DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS	= "" (string)
         DOTA_DEFAULT_UI_ACTION_PANEL    	= "" (string)
         DOTA_DEFAULT_UI_ACTION_MINIMAP  	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_PANEL 	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_SHOP  	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_ITEMS 	= "" (string)
         DOTA_DEFAULT_UI_INVENTORY_QUICKBUY	= "" (string)
      }
      DOTA_RUNES                      	= table: 0x0027cd10 (table)
      {
         DOTA_RUNE_SHIELD                	= "" (string)
         DOTA_RUNE_COUNT                 	= "" (string)
         DOTA_RUNE_INVALID               	= "" (string)
         DOTA_RUNE_DOUBLEDAMAGE          	= "" (string)
         DOTA_RUNE_HASTE                 	= "" (string)
         DOTA_RUNE_ILLUSION              	= "" (string)
         DOTA_RUNE_INVISIBILITY          	= "" (string)
         DOTA_RUNE_REGENERATION          	= "" (string)
         DOTA_RUNE_BOUNTY                	= "" (string)
         DOTA_RUNE_ARCANE                	= "" (string)
         DOTA_RUNE_WATER                 	= "" (string)
         DOTA_RUNE_XP                    	= "" (string)
      }
      CLICK_BEHAVIORS                 	= table: 0x00295dc0 (table)
      {
         DOTA_CLICK_BEHAVIOR_VECTOR_CAST 	= "" (string)
         DOTA_CLICK_BEHAVIOR_UNUSED      	= "" (string)
         DOTA_CLICK_BEHAVIOR_RADAR       	= "" (string)
         DOTA_CLICK_BEHAVIOR_LAST        	= "" (string)
         DOTA_CLICK_BEHAVIOR_NONE        	= "" (string)
         DOTA_CLICK_BEHAVIOR_MOVE        	= "" (string)
         DOTA_CLICK_BEHAVIOR_ATTACK      	= "" (string)
         DOTA_CLICK_BEHAVIOR_CAST        	= "" (string)
         DOTA_CLICK_BEHAVIOR_DROP_ITEM   	= "" (string)
         DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM	= "" (string)
         DOTA_CLICK_BEHAVIOR_DRAG        	= "" (string)
         DOTA_CLICK_BEHAVIOR_LEARN_ABILITY	= "" (string)
         DOTA_CLICK_BEHAVIOR_PATROL      	= "" (string)
      }
      DOTA_MOTION_CONTROLLER_PRIORITY 	= table: 0x00293b20 (table)
      {
         DOTA_MOTION_CONTROLLER_PRIORITY_ULTRA	= "" (string)
         DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST	= "" (string)
         DOTA_MOTION_CONTROLLER_PRIORITY_LOW	= "" (string)
         DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM	= "" (string)
         DOTA_MOTION_CONTROLLER_PRIORITY_HIGH	= "" (string)
         DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST	= "" (string)
      }
      attackfail                      	= table: 0x00230258 (table)
      {
         DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE	= "" (string)
         DOTA_ATTACK_RECORD_CANNOT_FAIL  	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_NO      	= "" (string)
         DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS	= "" (string)
      }
      DOTAUnitMoveCapability_t        	= table: 0x0022f218 (table)
      {
         DOTA_UNIT_CAP_MOVE_NONE         	= "" (string)
         DOTA_UNIT_CAP_MOVE_GROUND       	= "" (string)
         DOTA_UNIT_CAP_MOVE_FLY          	= "" (string)
      }
      DOTASpeechType_t                	= table: 0x00293e38 (table)
      {
         DOTA_SPEECH_USER_INVALID        	= "" (string)
         DOTA_SPEECH_USER_SINGLE         	= "" (string)
         DOTA_SPEECH_USER_TEAM           	= "" (string)
         DOTA_SPEECH_USER_TEAM_NEARBY    	= "" (string)
         DOTA_SPEECH_USER_NEARBY         	= "" (string)
         DOTA_SPEECH_USER_ALL            	= "" (string)
         DOTA_SPEECH_GOOD_TEAM           	= "" (string)
         DOTA_SPEECH_BAD_TEAM            	= "" (string)
         DOTA_SPEECH_SPECTATOR           	= "" (string)
         DOTA_SPEECH_USER_TEAM_NOSPECTATOR	= "" (string)
         DOTA_SPEECH_RECIPIENT_TYPE_MAX  	= "" (string)
      }
      DOTA_UNIT_TARGET_TEAM           	= table: 0x0027d5b0 (table)
      {
         DOTA_UNIT_TARGET_TEAM_NONE      	= "" (string)
         DOTA_UNIT_TARGET_TEAM_FRIENDLY  	= "" (string)
         DOTA_UNIT_TARGET_TEAM_ENEMY     	= "" (string)
         DOTA_UNIT_TARGET_TEAM_CUSTOM    	= "" (string)
         DOTA_UNIT_TARGET_TEAM_BOTH      	= "" (string)
      }
      EShareAbility                   	= table: 0x0022f310 (table)
      {
         ITEM_FULLY_SHAREABLE            	= "" (string)
         ITEM_PARTIALLY_SHAREABLE        	= "" (string)
         ITEM_NOT_SHAREABLE              	= "" (string)
      }
      DamageCategory_t                	= table: 0x00230528 (table)
      {
         DOTA_DAMAGE_CATEGORY_ATTACK     	= "" (string)
         DOTA_DAMAGE_CATEGORY_SPELL      	= "" (string)
      }
      DOTACustomCameraEventFlags_t    	= table: 0x00297550 (table)
      {
         k_ECustomCameraEventFlags_LetterboxOn	= "" (string)
         k_ECustomCameraEventFlags_LetterboxOff	= "" (string)
         k_ECustomCameraEventFlags_Zoom  	= "" (string)
         k_ECustomCameraEventFlags_Position	= "" (string)
         k_ECustomCameraEventFlags_PositionPlayerHero	= "" (string)
         k_ECustomCameraEventFlags_Pitch 	= "" (string)
         k_ECustomCameraEventFlags_Yaw   	= "" (string)
         k_ECustomCameraEventFlags_Lock  	= "" (string)
         k_ECustomCameraEventFlags_Unlock	= "" (string)
         k_ECustomCameraEventFlags_ResetDefault	= "" (string)
         k_ECustomCameraEventFlags_SpecificPlayer	= "" (string)
         k_ECustomCameraEventFlags_FadeOut	= "" (string)
         k_ECustomCameraEventFlags_FadeIn	= "" (string)
      }
      DOTA_UNIT_TARGET_TYPE           	= table: 0x0027d6f0 (table)
      {
         DOTA_UNIT_TARGET_CUSTOM         	= "" (string)
         DOTA_UNIT_TARGET_SELF           	= "" (string)
         DOTA_UNIT_TARGET_BASIC          	= "" (string)
         DOTA_UNIT_TARGET_ALL            	= "" (string)
         DOTA_UNIT_TARGET_HEROES_AND_CREEPS	= "" (string)
         DOTA_UNIT_TARGET_NONE           	= "" (string)
         DOTA_UNIT_TARGET_HERO           	= "" (string)
         DOTA_UNIT_TARGET_CREEP          	= "" (string)
         DOTA_UNIT_TARGET_BUILDING       	= "" (string)
         DOTA_UNIT_TARGET_COURIER        	= "" (string)
         DOTA_UNIT_TARGET_OTHER          	= "" (string)
         DOTA_UNIT_TARGET_TREE           	= "" (string)
      }
      DOTAProjectileAttachment_t      	= table: 0x0025b5c8 (table)
      {
         DOTA_PROJECTILE_ATTACHMENT_LAST 	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_NONE 	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_ATTACK_1	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_ATTACK_2	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_HITLOCATION	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_ATTACK_3	= "" (string)
         DOTA_PROJECTILE_ATTACHMENT_ATTACK_4	= "" (string)
      }
      subquest_text_replace_values_t  	= table: 0x00252b50 (table)
      {
         SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= "" (string)
         SUBQUEST_NUM_TEXT_REPLACE_VALUES	= "" (string)
         SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= "" (string)
      }
      DOTAScriptInventorySlot_t       	= table: 0x0025f238 (table)
      {
         DOTA_STASH_SLOT_6               	= "" (string)
         DOTA_ITEM_SLOT_1                	= "" (string)
         DOTA_ITEM_SLOT_2                	= "" (string)
         DOTA_ITEM_SLOT_3                	= "" (string)
         DOTA_ITEM_SLOT_4                	= "" (string)
         DOTA_ITEM_SLOT_5                	= "" (string)
         DOTA_ITEM_SLOT_6                	= "" (string)
         DOTA_ITEM_SLOT_7                	= "" (string)
         DOTA_ITEM_SLOT_8                	= "" (string)
         DOTA_ITEM_SLOT_9                	= "" (string)
         DOTA_STASH_SLOT_1               	= "" (string)
         DOTA_STASH_SLOT_2               	= "" (string)
         DOTA_STASH_SLOT_3               	= "" (string)
         DOTA_STASH_SLOT_4               	= "" (string)
         DOTA_STASH_SLOT_5               	= "" (string)
      }
      UnitFilterResult                	= table: 0x00294440 (table)
      {
         UF_SUCCESS                      	= "" (string)
         UF_FAIL_FRIENDLY                	= "" (string)
         UF_FAIL_ENEMY                   	= "" (string)
         UF_FAIL_HERO                    	= "" (string)
         UF_FAIL_CONSIDERED_HERO         	= "" (string)
         UF_FAIL_CREEP                   	= "" (string)
         UF_FAIL_BUILDING                	= "" (string)
         UF_FAIL_COURIER                 	= "" (string)
         UF_FAIL_OTHER                   	= "" (string)
         UF_FAIL_ANCIENT                 	= "" (string)
         UF_FAIL_ILLUSION                	= "" (string)
         UF_FAIL_SUMMONED                	= "" (string)
         UF_FAIL_DOMINATED               	= "" (string)
         UF_FAIL_MELEE                   	= "" (string)
         UF_FAIL_RANGED                  	= "" (string)
         UF_FAIL_DEAD                    	= "" (string)
         UF_FAIL_MAGIC_IMMUNE_ALLY       	= "" (string)
         UF_FAIL_MAGIC_IMMUNE_ENEMY      	= "" (string)
         UF_FAIL_INVULNERABLE            	= "" (string)
         UF_FAIL_IN_FOW                  	= "" (string)
         UF_FAIL_INVISIBLE               	= "" (string)
         UF_FAIL_NOT_PLAYER_CONTROLLED   	= "" (string)
         UF_FAIL_ATTACK_IMMUNE           	= "" (string)
         UF_FAIL_CUSTOM                  	= "" (string)
         UF_FAIL_INVALID_LOCATION        	= "" (string)
         UF_FAIL_DISABLE_HELP            	= "" (string)
         UF_FAIL_OUT_OF_WORLD            	= "" (string)
         UF_FAIL_NIGHTMARED              	= "" (string)
         UF_FAIL_OBSTRUCTED              	= "" (string)
      }
      DOTAAbilitySpeakTrigger_t       	= table: 0x00294308 (table)
      {
         DOTA_ABILITY_SPEAK_START_ACTION_PHASE	= "" (string)
         DOTA_ABILITY_SPEAK_CAST         	= "" (string)
      }
      LuaModifierType                 	= table: 0x00293548 (table)
      {
         LUA_MODIFIER_MOTION_BOTH        	= "" (string)
         LUA_MODIFIER_INVALID            	= "" (string)
         LUA_MODIFIER_MOTION_NONE        	= "" (string)
         LUA_MODIFIER_MOTION_HORIZONTAL  	= "" (string)
         LUA_MODIFIER_MOTION_VERTICAL    	= "" (string)
      }
      DOTAPostGameLayout_t            	= table: 0x0022f698 (table)
      {
         DOTA_POST_GAME_LAYOUT_DOUBLE_COLUMN	= "" (string)
         DOTA_POST_GAME_LAYOUT_SINGLE_COLUMN	= "" (string)
         DOTA_POST_GAME_LAYOUT_MAX       	= "" (string)
      }
      GameActivity_t                  	= table: 0x0025d2f8 (table)
      {
         ACT_DOTA_IDLE                   	= "" (string)
         ACT_DOTA_IDLE_RARE              	= "" (string)
         ACT_DOTA_RUN                    	= "" (string)
         ACT_DOTA_ATTACK                 	= "" (string)
         ACT_DOTA_ATTACK2                	= "" (string)
         ACT_DOTA_ATTACK_EVENT           	= "" (string)
         ACT_DOTA_DIE                    	= "" (string)
         ACT_DOTA_FLINCH                 	= "" (string)
         ACT_DOTA_FLAIL                  	= "" (string)
         ACT_DOTA_DISABLED               	= "" (string)
         ACT_DOTA_CAST_ABILITY_1         	= "" (string)
         ACT_DOTA_CAST_ABILITY_2         	= "" (string)
         ACT_DOTA_CAST_ABILITY_3         	= "" (string)
         ACT_DOTA_CAST_ABILITY_4         	= "" (string)
         ACT_DOTA_CAST_ABILITY_5         	= "" (string)
         ACT_DOTA_CAST_ABILITY_6         	= "" (string)
         ACT_DOTA_OVERRIDE_ABILITY_1     	= "" (string)
         ACT_DOTA_OVERRIDE_ABILITY_2     	= "" (string)
         ACT_DOTA_OVERRIDE_ABILITY_3     	= "" (string)
         ACT_DOTA_OVERRIDE_ABILITY_4     	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_1      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_2      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_3      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_4      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_5      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_6      	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_1  	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_2  	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_3  	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_4  	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_5  	= "" (string)
         ACT_DOTA_CHANNEL_END_ABILITY_6  	= "" (string)
         ACT_DOTA_CONSTANT_LAYER         	= "" (string)
         ACT_DOTA_CAPTURE                	= "" (string)
         ACT_DOTA_SPAWN                  	= "" (string)
         ACT_DOTA_KILLTAUNT              	= "" (string)
         ACT_DOTA_TAUNT                  	= "" (string)
         ACT_DOTA_THIRST                 	= "" (string)
         ACT_DOTA_CAST_DRAGONBREATH      	= "" (string)
         ACT_DOTA_ECHO_SLAM              	= "" (string)
         ACT_DOTA_CAST_ABILITY_1_END     	= "" (string)
         ACT_DOTA_CAST_ABILITY_2_END     	= "" (string)
         ACT_DOTA_CAST_ABILITY_3_END     	= "" (string)
         ACT_DOTA_CAST_ABILITY_4_END     	= "" (string)
         ACT_MIRANA_LEAP_END             	= "" (string)
         ACT_WAVEFORM_START              	= "" (string)
         ACT_WAVEFORM_END                	= "" (string)
         ACT_DOTA_CAST_ABILITY_ROT       	= "" (string)
         ACT_DOTA_DIE_SPECIAL            	= "" (string)
         ACT_DOTA_RATTLETRAP_BATTERYASSAULT	= "" (string)
         ACT_DOTA_RATTLETRAP_POWERCOGS   	= "" (string)
         ACT_DOTA_RATTLETRAP_HOOKSHOT_START	= "" (string)
         ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP	= "" (string)
         ACT_DOTA_RATTLETRAP_HOOKSHOT_END	= "" (string)
         ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE	= "" (string)
         ACT_DOTA_TINKER_REARM1          	= "" (string)
         ACT_DOTA_TINKER_REARM2          	= "" (string)
         ACT_DOTA_TINKER_REARM3          	= "" (string)
         ACT_TINY_AVALANCHE              	= "" (string)
         ACT_TINY_TOSS                   	= "" (string)
         ACT_TINY_GROWL                  	= "" (string)
         ACT_DOTA_WEAVERBUG_ATTACH       	= "" (string)
         ACT_DOTA_CAST_WILD_AXES_END     	= "" (string)
         ACT_DOTA_CAST_LIFE_BREAK_START  	= "" (string)
         ACT_DOTA_CAST_LIFE_BREAK_END    	= "" (string)
         ACT_DOTA_NIGHTSTALKER_TRANSITION	= "" (string)
         ACT_DOTA_LIFESTEALER_RAGE       	= "" (string)
         ACT_DOTA_LIFESTEALER_OPEN_WOUNDS	= "" (string)
         ACT_DOTA_SAND_KING_BURROW_IN    	= "" (string)
         ACT_DOTA_SAND_KING_BURROW_OUT   	= "" (string)
         ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK	= "" (string)
         ACT_DOTA_WHEEL_LAYER            	= "" (string)
         ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START	= "" (string)
         ACT_DOTA_ALCHEMIST_CONCOCTION   	= "" (string)
         ACT_DOTA_JAKIRO_LIQUIDFIRE_START	= "" (string)
         ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP 	= "" (string)
         ACT_DOTA_LIFESTEALER_INFEST     	= "" (string)
         ACT_DOTA_LIFESTEALER_INFEST_END 	= "" (string)
         ACT_DOTA_LASSO_LOOP             	= "" (string)
         ACT_DOTA_ALCHEMIST_CONCOCTION_THROW	= "" (string)
         ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END	= "" (string)
         ACT_DOTA_CAST_COLD_SNAP         	= "" (string)
         ACT_DOTA_CAST_GHOST_WALK        	= "" (string)
         ACT_DOTA_CAST_TORNADO           	= "" (string)
         ACT_DOTA_CAST_EMP               	= "" (string)
         ACT_DOTA_CAST_ALACRITY          	= "" (string)
         ACT_DOTA_CAST_CHAOS_METEOR      	= "" (string)
         ACT_DOTA_CAST_SUN_STRIKE        	= "" (string)
         ACT_DOTA_CAST_FORGE_SPIRIT      	= "" (string)
         ACT_DOTA_CAST_ICE_WALL          	= "" (string)
         ACT_DOTA_CAST_DEAFENING_BLAST   	= "" (string)
         ACT_DOTA_VICTORY                	= "" (string)
         ACT_DOTA_DEFEAT                 	= "" (string)
         ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE	= "" (string)
         ACT_DOTA_SPIRIT_BREAKER_CHARGE_END	= "" (string)
         ACT_DOTA_TELEPORT               	= "" (string)
         ACT_DOTA_TELEPORT_END           	= "" (string)
         ACT_DOTA_CAST_REFRACTION        	= "" (string)
         ACT_DOTA_CAST_ABILITY_7         	= "" (string)
         ACT_DOTA_CANCEL_SIREN_SONG      	= "" (string)
         ACT_DOTA_CHANNEL_ABILITY_7      	= "" (string)
         ACT_DOTA_LOADOUT                	= "" (string)
         ACT_DOTA_FORCESTAFF_END         	= "" (string)
         ACT_DOTA_POOF_END               	= "" (string)
         ACT_DOTA_SLARK_POUNCE           	= "" (string)
         ACT_DOTA_MAGNUS_SKEWER_START    	= "" (string)
         ACT_DOTA_MAGNUS_SKEWER_END      	= "" (string)
         ACT_DOTA_MEDUSA_STONE_GAZE      	= "" (string)
         ACT_DOTA_RELAX_START            	= "" (string)
         ACT_DOTA_RELAX_LOOP             	= "" (string)
         ACT_DOTA_RELAX_END              	= "" (string)
         ACT_DOTA_CENTAUR_STAMPEDE       	= "" (string)
         ACT_DOTA_BELLYACHE_START        	= "" (string)
         ACT_DOTA_BELLYACHE_LOOP         	= "" (string)
         ACT_DOTA_BELLYACHE_END          	= "" (string)
         ACT_DOTA_ROQUELAIRE_LAND        	= "" (string)
         ACT_DOTA_ROQUELAIRE_LAND_IDLE   	= "" (string)
         ACT_DOTA_GREEVIL_CAST           	= "" (string)
         ACT_DOTA_GREEVIL_OVERRIDE_ABILITY	= "" (string)
         ACT_DOTA_GREEVIL_HOOK_START     	= "" (string)
         ACT_DOTA_GREEVIL_HOOK_END       	= "" (string)
         ACT_DOTA_GREEVIL_BLINK_BONE     	= "" (string)
         ACT_DOTA_IDLE_SLEEPING          	= "" (string)
         ACT_DOTA_INTRO                  	= "" (string)
         ACT_DOTA_GESTURE_POINT          	= "" (string)
         ACT_DOTA_GESTURE_ACCENT         	= "" (string)
         ACT_DOTA_SLEEPING_END           	= "" (string)
         ACT_DOTA_AMBUSH                 	= "" (string)
         ACT_DOTA_ITEM_LOOK              	= "" (string)
         ACT_DOTA_STARTLE                	= "" (string)
         ACT_DOTA_FRUSTRATION            	= "" (string)
         ACT_DOTA_TELEPORT_REACT         	= "" (string)
         ACT_DOTA_TELEPORT_END_REACT     	= "" (string)
         ACT_DOTA_SHRUG                  	= "" (string)
         ACT_DOTA_RELAX_LOOP_END         	= "" (string)
         ACT_DOTA_PRESENT_ITEM           	= "" (string)
         ACT_DOTA_IDLE_IMPATIENT         	= "" (string)
         ACT_DOTA_SHARPEN_WEAPON         	= "" (string)
         ACT_DOTA_SHARPEN_WEAPON_OUT     	= "" (string)
         ACT_DOTA_IDLE_SLEEPING_END      	= "" (string)
         ACT_DOTA_BRIDGE_DESTROY         	= "" (string)
         ACT_DOTA_TAUNT_SNIPER           	= "" (string)
         ACT_DOTA_DEATH_BY_SNIPER        	= "" (string)
         ACT_DOTA_LOOK_AROUND            	= "" (string)
         ACT_DOTA_CAGED_CREEP_RAGE       	= "" (string)
         ACT_DOTA_CAGED_CREEP_RAGE_OUT   	= "" (string)
         ACT_DOTA_CAGED_CREEP_SMASH      	= "" (string)
         ACT_DOTA_CAGED_CREEP_SMASH_OUT  	= "" (string)
         ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP	= "" (string)
         ACT_DOTA_INTRO_LOOP             	= "" (string)
         ACT_DOTA_BRIDGE_THREAT          	= "" (string)
         ACT_DOTA_DAGON                  	= "" (string)
         ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START	= "" (string)
         ACT_DOTA_CAST_ABILITY_2_ES_ROLL 	= "" (string)
         ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END	= "" (string)
         ACT_DOTA_NIAN_PIN_START         	= "" (string)
         ACT_DOTA_NIAN_PIN_LOOP          	= "" (string)
         ACT_DOTA_NIAN_PIN_END           	= "" (string)
         ACT_DOTA_LEAP_STUN              	= "" (string)
         ACT_DOTA_LEAP_SWIPE             	= "" (string)
         ACT_DOTA_NIAN_INTRO_LEAP        	= "" (string)
         ACT_DOTA_AREA_DENY              	= "" (string)
         ACT_DOTA_NIAN_PIN_TO_STUN       	= "" (string)
         ACT_DOTA_RAZE_1                 	= "" (string)
         ACT_DOTA_RAZE_2                 	= "" (string)
         ACT_DOTA_RAZE_3                 	= "" (string)
         ACT_DOTA_UNDYING_DECAY          	= "" (string)
         ACT_DOTA_UNDYING_SOUL_RIP       	= "" (string)
         ACT_DOTA_UNDYING_TOMBSTONE      	= "" (string)
         ACT_DOTA_WHIRLING_AXES_RANGED   	= "" (string)
         ACT_DOTA_SHALLOW_GRAVE          	= "" (string)
         ACT_DOTA_COLD_FEET              	= "" (string)
         ACT_DOTA_ICE_VORTEX             	= "" (string)
         ACT_DOTA_CHILLING_TOUCH         	= "" (string)
         ACT_DOTA_ENFEEBLE               	= "" (string)
         ACT_DOTA_FATAL_BONDS            	= "" (string)
         ACT_DOTA_MIDNIGHT_PULSE         	= "" (string)
         ACT_DOTA_ANCESTRAL_SPIRIT       	= "" (string)
         ACT_DOTA_THUNDER_STRIKE         	= "" (string)
         ACT_DOTA_KINETIC_FIELD          	= "" (string)
         ACT_DOTA_STATIC_STORM           	= "" (string)
         ACT_DOTA_MINI_TAUNT             	= "" (string)
         ACT_DOTA_ARCTIC_BURN_END        	= "" (string)
         ACT_DOTA_LOADOUT_RARE           	= "" (string)
         ACT_DOTA_SWIM                   	= "" (string)
         ACT_DOTA_FLEE                   	= "" (string)
         ACT_DOTA_TROT                   	= "" (string)
         ACT_DOTA_SHAKE                  	= "" (string)
         ACT_DOTA_SWIM_IDLE              	= "" (string)
         ACT_DOTA_WAIT_IDLE              	= "" (string)
         ACT_DOTA_GREET                  	= "" (string)
         ACT_DOTA_TELEPORT_COOP_START    	= "" (string)
         ACT_DOTA_TELEPORT_COOP_WAIT     	= "" (string)
         ACT_DOTA_TELEPORT_COOP_END      	= "" (string)
         ACT_DOTA_TELEPORT_COOP_EXIT     	= "" (string)
         ACT_DOTA_SHOPKEEPER_PET_INTERACT	= "" (string)
         ACT_DOTA_ITEM_PICKUP            	= "" (string)
         ACT_DOTA_ITEM_DROP              	= "" (string)
         ACT_DOTA_CAPTURE_PET            	= "" (string)
         ACT_DOTA_PET_WARD_OBSERVER      	= "" (string)
         ACT_DOTA_PET_WARD_SENTRY        	= "" (string)
         ACT_DOTA_PET_LEVEL              	= "" (string)
         ACT_DOTA_CAST_BURROW_END        	= "" (string)
         ACT_DOTA_LIFESTEALER_ASSIMILATE 	= "" (string)
         ACT_DOTA_LIFESTEALER_EJECT      	= "" (string)
         ACT_DOTA_ATTACK_EVENT_BASH      	= "" (string)
         ACT_DOTA_CAPTURE_RARE           	= "" (string)
         ACT_DOTA_AW_MAGNETIC_FIELD      	= "" (string)
         ACT_DOTA_CAST_GHOST_SHIP        	= "" (string)
         ACT_DOTA_FXANIM                 	= "" (string)
         ACT_DOTA_VICTORY_START          	= "" (string)
         ACT_DOTA_DEFEAT_START           	= "" (string)
         ACT_DOTA_DP_SPIRIT_SIPHON       	= "" (string)
         ACT_DOTA_TRICKS_END             	= "" (string)
         ACT_DOTA_ES_STONE_CALLER        	= "" (string)
         ACT_DOTA_MK_STRIKE              	= "" (string)
         ACT_DOTA_VERSUS                 	= "" (string)
         ACT_DOTA_CAPTURE_CARD           	= "" (string)
         ACT_DOTA_MK_SPRING_SOAR         	= "" (string)
         ACT_DOTA_MK_SPRING_END          	= "" (string)
         ACT_DOTA_MK_TREE_SOAR           	= "" (string)
         ACT_DOTA_MK_TREE_END            	= "" (string)
         ACT_DOTA_MK_FUR_ARMY            	= "" (string)
         ACT_DOTA_MK_SPRING_CAST         	= "" (string)
         ACT_DOTA_NECRO_GHOST_SHROUD     	= "" (string)
         ACT_DOTA_OVERRIDE_ARCANA        	= "" (string)
         ACT_DOTA_SLIDE                  	= "" (string)
         ACT_DOTA_SLIDE_LOOP             	= "" (string)
         ACT_DOTA_GENERIC_CHANNEL_1      	= "" (string)
         ACT_DOTA_GS_SOUL_CHAIN          	= "" (string)
         ACT_DOTA_GS_INK_CREATURE        	= "" (string)
         ACT_DOTA_TRANSITION             	= "" (string)
         ACT_DOTA_BLINK_DAGGER           	= "" (string)
         ACT_DOTA_BLINK_DAGGER_END       	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_ATTACK    	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_IDLE      	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_DIE       	= "" (string)
         ACT_DOTA_CAST_COLD_SNAP_ORB     	= "" (string)
         ACT_DOTA_CAST_GHOST_WALK_ORB    	= "" (string)
         ACT_DOTA_CAST_TORNADO_ORB       	= "" (string)
         ACT_DOTA_CAST_EMP_ORB           	= "" (string)
         ACT_DOTA_CAST_ALACRITY_ORB      	= "" (string)
         ACT_DOTA_CAST_CHAOS_METEOR_ORB  	= "" (string)
         ACT_DOTA_CAST_SUN_STRIKE_ORB    	= "" (string)
         ACT_DOTA_CAST_FORGE_SPIRIT_ORB  	= "" (string)
         ACT_DOTA_CAST_ICE_WALL_ORB      	= "" (string)
         ACT_DOTA_CAST_DEAFENING_BLAST_ORB	= "" (string)
         ACT_DOTA_NOTICE                 	= "" (string)
         ACT_DOTA_CAST_ABILITY_2_ALLY    	= "" (string)
         ACT_DOTA_SHUFFLE_L              	= "" (string)
         ACT_DOTA_SHUFFLE_R              	= "" (string)
         ACT_DOTA_OVERRIDE_LOADOUT       	= "" (string)
         ACT_DOTA_TAUNT_SPECIAL          	= "" (string)
         ACT_DOTA_TELEPORT_START         	= "" (string)
         ACT_DOTA_GENERIC_CHANNEL_1_START	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_IDLE_RARE 	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_TAUNT     	= "" (string)
         ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE 	= "" (string)
         ACT_DOTA_ATTACK_SPECIAL         	= "" (string)
         ACT_DOTA_TRANSITION_IDLE        	= "" (string)
         ACT_DOTA_PIERCE_THE_VEIL        	= "" (string)
         ACT_DOTA_MK_STRIKE_END          	= "" (string)
         ACT_DOTA_VIPER_DIVE_END         	= "" (string)
         ACT_DOTA_VIPER_DIVE             	= "" (string)
         ACT_DOTA_RUN_RARE               	= "" (string)
      }
      DOTAHUDVisibility_t             	= table: 0x0025b918 (table)
      {
         DOTA_HUD_VISIBILITY_TOP_BAR     	= "" (string)
         DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS	= "" (string)
         DOTA_HUD_VISIBILITY_AGHANIMS_STATUS	= "" (string)
         DOTA_HUD_VISIBILITY_COUNT       	= "" (string)
         DOTA_HUD_VISIBILITY_INVALID     	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_HEROES  	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_SCOREBOARD	= "" (string)
         DOTA_HUD_VISIBILITY_ACTION_PANEL	= "" (string)
         DOTA_HUD_VISIBILITY_ACTION_MINIMAP	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_PANEL	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_SHOP	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_ITEMS	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_COURIER	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_PROTECT	= "" (string)
         DOTA_HUD_VISIBILITY_INVENTORY_GOLD	= "" (string)
         DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS	= "" (string)
         DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS	= "" (string)
         DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS	= "" (string)
         DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME	= "" (string)
         DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK	= "" (string)
         DOTA_HUD_VISIBILITY_HERO_SELECTION_HEADER	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM	= "" (string)
         DOTA_HUD_VISIBILITY_TOP_BAR_SCORE	= "" (string)
         DOTA_HUD_VISIBILITY_ENDGAME     	= "" (string)
         DOTA_HUD_VISIBILITY_ENDGAME_CHAT	= "" (string)
         DOTA_HUD_VISIBILITY_QUICK_STATS 	= "" (string)
         DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI	= "" (string)
         DOTA_HUD_VISIBILITY_KILLCAM     	= "" (string)
         DOTA_HUD_VISIBILITY_FIGHT_RECAP 	= "" (string)
      }
      EDOTA_ModifyXP_Reason           	= table: 0x0025d1c8 (table)
      {
         DOTA_ModifyXP_Unspecified       	= "" (string)
         DOTA_ModifyXP_HeroKill          	= "" (string)
         DOTA_ModifyXP_CreepKill         	= "" (string)
         DOTA_ModifyXP_RoshanKill        	= "" (string)
         DOTA_ModifyXP_TomeOfKnowledge   	= "" (string)
         DOTA_ModifyXP_Outpost           	= "" (string)
         DOTA_ModifyXP_MAX               	= "" (string)
      }
      DOTAPostGameColumn_t            	= table: 0x0022f7e8 (table)
      {
         DOTA_POST_GAME_COLUMN_LEVEL     	= "" (string)
         DOTA_POST_GAME_COLUMN_ITEMS     	= "" (string)
         DOTA_POST_GAME_COLUMN_KILLS     	= "" (string)
         DOTA_POST_GAME_COLUMN_DEATHS    	= "" (string)
         DOTA_POST_GAME_COLUMN_ASSISTS   	= "" (string)
         DOTA_POST_GAME_COLUMN_NET_WORTH 	= "" (string)
         DOTA_POST_GAME_COLUMN_LAST_HITS 	= "" (string)
         DOTA_POST_GAME_COLUMN_DENIES    	= "" (string)
         DOTA_POST_GAME_COLUMN_DAMAGE    	= "" (string)
         DOTA_POST_GAME_COLUMN_HEALING   	= "" (string)
         DOTA_POST_GAME_COLUMN_MAX       	= "" (string)
      }
      AttributeDerivedStats           	= table: 0x00292e90 (table)
      {
         DOTA_ATTRIBUTE_STRENGTH_DAMAGE  	= "" (string)
         DOTA_ATTRIBUTE_STRENGTH_HP      	= "" (string)
         DOTA_ATTRIBUTE_STRENGTH_HP_REGEN	= "" (string)
         DOTA_ATTRIBUTE_AGILITY_DAMAGE   	= "" (string)
         DOTA_ATTRIBUTE_AGILITY_ARMOR    	= "" (string)
         DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED	= "" (string)
         DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE	= "" (string)
         DOTA_ATTRIBUTE_INTELLIGENCE_MANA	= "" (string)
         DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN	= "" (string)
         DOTA_ATTRIBUTE_INTELLIGENCE_MAGIC_RESIST	= "" (string)
         DOTA_ATTRIBUTE_ALL_DAMAGE       	= "" (string)
      }
      DOTA_UNIT_TARGET_FLAGS          	= table: 0x0027dd60 (table)
      {
         DOTA_UNIT_TARGET_FLAG_NONE      	= "" (string)
         DOTA_UNIT_TARGET_FLAG_RANGED_ONLY	= "" (string)
         DOTA_UNIT_TARGET_FLAG_MELEE_ONLY	= "" (string)
         DOTA_UNIT_TARGET_FLAG_DEAD      	= "" (string)
         DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES	= "" (string)
         DOTA_UNIT_TARGET_FLAG_INVULNERABLE	= "" (string)
         DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NO_INVIS  	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS	= "" (string)
         DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE	= "" (string)
         DOTA_UNIT_TARGET_FLAG_MANA_ONLY 	= "" (string)
         DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO	= "" (string)
         DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD	= "" (string)
         DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED	= "" (string)
         DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES	= "" (string)
         DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS	= "" (string)
      }
      modifierremove                  	= table: 0x00292770 (table)
      {
         DOTA_BUFF_REMOVE_ALL            	= "" (string)
         DOTA_BUFF_REMOVE_ENEMY          	= "" (string)
         DOTA_BUFF_REMOVE_ALLY           	= "" (string)
      }
      DOTAModifierAttribute_t         	= table: 0x002928c8 (table)
      {
         MODIFIER_ATTRIBUTE_AURA_PRIORITY	= "" (string)
         MODIFIER_ATTRIBUTE_IGNORE_DODGE 	= "" (string)
         MODIFIER_ATTRIBUTE_NONE         	= "" (string)
         MODIFIER_ATTRIBUTE_PERMANENT    	= "" (string)
         MODIFIER_ATTRIBUTE_MULTIPLE     	= "" (string)
         MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE	= "" (string)
      }
      DOTAMinimapEvent_t              	= table: 0x0025e3d8 (table)
      {
         DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED	= "" (string)
         DOTA_MINIMAP_EVENT_HINT_LOCATION	= "" (string)
         DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING	= "" (string)
         DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING	= "" (string)
         DOTA_MINIMAP_EVENT_RADAR        	= "" (string)
         DOTA_MINIMAP_EVENT_RADAR_TARGET 	= "" (string)
         DOTA_MINIMAP_EVENT_MOVE_TO_TARGET	= "" (string)
         DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK	= "" (string)
         DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK	= "" (string)
         DOTA_MINIMAP_EVENT_BASE_GLYPHED 	= "" (string)
         DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK	= "" (string)
         DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING	= "" (string)
         DOTA_MINIMAP_EVENT_TEAMMATE_DIED	= "" (string)
         DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE	= "" (string)
      }
      DOTALimits_t                    	= table: 0x0027fa98 (table)
      {
         DOTA_DEFAULT_MAX_TEAM_PLAYERS   	= "Default number of non-spectator players supported." (string)
         DOTA_MAX_TEAM_PLAYERS           	= "Max number of non-spectator players supported." (string)
         DOTA_DEFAULT_MAX_TEAM           	= "Default number of players per team." (string)
         DOTA_MAX_PLAYERS                	= "Max number of players connected to the server including spectators." (string)
         DOTA_MAX_SPECTATOR_LOBBY_SIZE   	= "Max number of viewers in a spectator lobby." (string)
         DOTA_MAX_TEAM                   	= "Max number of players per team." (string)
         DOTA_MAX_SPECTATOR_TEAM_SIZE    	= "How many spectators can watch." (string)
         DOTA_MAX_PLAYER_TEAMS           	= "Max number of player teams supported." (string)
      }
      Attributes                      	= table: 0x00292bc0 (table)
      {
         DOTA_ATTRIBUTE_INVALID          	= "" (string)
         DOTA_ATTRIBUTE_STRENGTH         	= "" (string)
         DOTA_ATTRIBUTE_AGILITY          	= "" (string)
         DOTA_ATTRIBUTE_INTELLECT        	= "" (string)
         DOTA_ATTRIBUTE_ALL              	= "" (string)
         DOTA_ATTRIBUTE_MAX              	= "" (string)
      }
      DOTAUnitAttackCapability_t      	= table: 0x0022f010 (table)
      {
         DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT	= "" (string)
         DOTA_UNIT_CAP_NO_ATTACK         	= "" (string)
         DOTA_UNIT_CAP_MELEE_ATTACK      	= "" (string)
         DOTA_UNIT_CAP_RANGED_ATTACK     	= "" (string)
         DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL	= "" (string)
      }
      AbilityLearnResult_t            	= table: 0x0027ffd0 (table)
      {
         ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL	= "" (string)
         ABILITY_NOT_LEARNABLE           	= "" (string)
         ABILITY_CAN_BE_UPGRADED         	= "" (string)
         ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE	= "" (string)
         ABILITY_CANNOT_BE_UPGRADED_AT_MAX	= "" (string)
      }
      modifierpriority                	= table: 0x002924d0 (table)
      {
         MODIFIER_PRIORITY_LOW           	= "" (string)
         MODIFIER_PRIORITY_NORMAL        	= "" (string)
         MODIFIER_PRIORITY_HIGH          	= "" (string)
         MODIFIER_PRIORITY_ULTRA         	= "" (string)
         MODIFIER_PRIORITY_SUPER_ULTRA   	= "" (string)
      }
      DOTASlotType_t                  	= table: 0x0025eaf8 (table)
      {
         DOTA_LOADOUT_TYPE_MEGA_KILLS    	= "" (string)
         DOTA_LOADOUT_TYPE_MUSIC         	= "" (string)
         DOTA_LOADOUT_TYPE_WARD          	= "" (string)
         DOTA_LOADOUT_TYPE_HUD_SKIN      	= "" (string)
         DOTA_LOADOUT_TYPE_LOADING_SCREEN	= "" (string)
         DOTA_LOADOUT_TYPE_WEATHER       	= "" (string)
         DOTA_LOADOUT_TYPE_HEROIC_STATUE 	= "" (string)
         DOTA_LOADOUT_TYPE_MULTIKILL_BANNER	= "" (string)
         DOTA_LOADOUT_TYPE_CURSOR_PACK   	= "" (string)
         DOTA_LOADOUT_TYPE_TELEPORT_EFFECT	= "" (string)
         DOTA_LOADOUT_TYPE_BLINK_EFFECT  	= "" (string)
         DOTA_LOADOUT_TYPE_EMBLEM        	= "" (string)
         DOTA_LOADOUT_TYPE_TERRAIN       	= "" (string)
         DOTA_LOADOUT_TYPE_RADIANT_CREEPS	= "" (string)
         DOTA_LOADOUT_TYPE_DIRE_CREEPS   	= "" (string)
         DOTA_LOADOUT_TYPE_RADIANT_TOWER 	= "" (string)
         DOTA_LOADOUT_TYPE_DIRE_TOWER    	= "" (string)
         DOTA_LOADOUT_TYPE_VERSUS_SCREEN 	= "" (string)
         DOTA_LOADOUT_TYPE_STREAK_EFFECT 	= "" (string)
         DOTA_LOADOUT_TYPE_KILL_EFFECT   	= "" (string)
         DOTA_LOADOUT_TYPE_DEATH_EFFECT  	= "" (string)
         DOTA_LOADOUT_TYPE_HEAD_EFFECT   	= "" (string)
         DOTA_LOADOUT_TYPE_MAP_EFFECT    	= "" (string)
         DOTA_LOADOUT_TYPE_COURIER_EFFECT	= "" (string)
         DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS	= "" (string)
         DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS	= "" (string)
         DOTA_LOADOUT_TYPE_ROSHAN        	= "" (string)
         DOTA_LOADOUT_TYPE_TORMENTOR     	= "" (string)
         DOTA_LOADOUT_TYPE_ANCIENT       	= "" (string)
         DOTA_PLAYER_LOADOUT_START       	= "" (string)
         DOTA_PLAYER_LOADOUT_END         	= "" (string)
         DOTA_LOADOUT_TYPE_NONE          	= "" (string)
         DOTA_LOADOUT_TYPE_COUNT         	= "" (string)
         DOTA_LOADOUT_TYPE_INVALID       	= "" (string)
         DOTA_LOADOUT_TYPE_WEAPON        	= "" (string)
         DOTA_LOADOUT_TYPE_OFFHAND_WEAPON	= "" (string)
         DOTA_LOADOUT_TYPE_WEAPON2       	= "" (string)
         DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2	= "" (string)
         DOTA_LOADOUT_TYPE_HEAD          	= "" (string)
         DOTA_LOADOUT_TYPE_SHOULDER      	= "" (string)
         DOTA_LOADOUT_TYPE_ARMS          	= "" (string)
         DOTA_LOADOUT_TYPE_ARMOR         	= "" (string)
         DOTA_LOADOUT_TYPE_BELT          	= "" (string)
         DOTA_LOADOUT_TYPE_NECK          	= "" (string)
         DOTA_LOADOUT_TYPE_BACK          	= "" (string)
         DOTA_LOADOUT_TYPE_GLOVES        	= "" (string)
         DOTA_LOADOUT_TYPE_LEGS          	= "" (string)
         DOTA_LOADOUT_TYPE_TAIL          	= "" (string)
         DOTA_LOADOUT_TYPE_MISC          	= "" (string)
         DOTA_LOADOUT_TYPE_COSTUME       	= "" (string)
         DOTA_LOADOUT_TYPE_BODY_HEAD     	= "" (string)
         DOTA_LOADOUT_TYPE_MOUNT         	= "" (string)
         DOTA_LOADOUT_TYPE_SUMMON        	= "" (string)
         DOTA_LOADOUT_TYPE_SHAPESHIFT    	= "" (string)
         DOTA_LOADOUT_TYPE_TAUNT         	= "" (string)
         DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_ATTACK	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY1      	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY2      	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY3      	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY4      	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_2	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_3	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_4	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_5	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_6	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_7	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_8	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_9	= "" (string)
         DOTA_LOADOUT_TYPE_VOICE         	= "" (string)
         DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_HEAD_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ARMS_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_BELT_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_NECK_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_BACK_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_LEGS_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_TAIL_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_MISC_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1	= "" (string)
         DOTA_LOADOUT_TYPE_VOICE_PERSONA_1	= "" (string)
         DOTA_LOADOUT_PERSONA_1_START    	= "" (string)
         DOTA_LOADOUT_PERSONA_1_END      	= "" (string)
         DOTA_LOADOUT_TYPE_PERSONA_SELECTOR	= "" (string)
         DOTA_LOADOUT_TYPE_COURIER       	= "" (string)
         DOTA_LOADOUT_TYPE_ANNOUNCER     	= "" (string)
      }
      DOTAInventoryFlags_t            	= table: 0x0022ca10 (table)
      {
         DOTA_INVENTORY_LIMIT_DROP_ON_GROUND	= "" (string)
         DOTA_INVENTORY_ALL_ACCESS       	= "" (string)
         DOTA_INVENTORY_ALLOW_NONE       	= "" (string)
         DOTA_INVENTORY_ALLOW_MAIN       	= "" (string)
         DOTA_INVENTORY_ALLOW_STASH      	= "" (string)
         DOTA_INVENTORY_ALLOW_DROP_ON_GROUND	= "" (string)
         DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN	= "" (string)
      }
      DOTAMusicStatus_t               	= table: 0x0022f440 (table)
      {
         DOTA_MUSIC_STATUS_NONE          	= "" (string)
         DOTA_MUSIC_STATUS_EXPLORATION   	= "" (string)
         DOTA_MUSIC_STATUS_BATTLE        	= "" (string)
         DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION	= "" (string)
         DOTA_MUSIC_STATUS_DEAD          	= "" (string)
         DOTA_MUSIC_STATUS_LAST          	= "" (string)
      }
      DAMAGE_TYPES                    	= table: 0x0022fe78 (table)
      {
         DAMAGE_TYPE_ALL                 	= "" (string)
         DAMAGE_TYPE_NONE                	= "" (string)
         DAMAGE_TYPE_PHYSICAL            	= "" (string)
         DAMAGE_TYPE_MAGICAL             	= "" (string)
         DAMAGE_TYPE_PURE                	= "" (string)
         DAMAGE_TYPE_HP_REMOVAL          	= "" (string)
         DAMAGE_TYPE_ABILITY_DEFINED     	= "" (string)
      }
      DOTATeam_t                      	= table: 0x0027c9e0 (table)
      {
         DOTA_TEAM_DRAFT_POOL            	= "" (string)
         DOTA_TEAM_COUNT                 	= "" (string)
         DOTA_TEAM_CUSTOM_MIN            	= "" (string)
         DOTA_TEAM_CUSTOM_MAX            	= "" (string)
         DOTA_TEAM_CUSTOM_COUNT          	= "" (string)
         DOTA_TEAM_FIRST                 	= "" (string)
         DOTA_TEAM_GOODGUYS              	= "" (string)
         DOTA_TEAM_BADGUYS               	= "" (string)
         DOTA_TEAM_NEUTRALS              	= "" (string)
         DOTA_TEAM_NOTEAM                	= "" (string)
         DOTA_TEAM_CUSTOM_1              	= "" (string)
         DOTA_TEAM_CUSTOM_2              	= "" (string)
         DOTA_TEAM_CUSTOM_3              	= "" (string)
         DOTA_TEAM_CUSTOM_4              	= "" (string)
         DOTA_TEAM_CUSTOM_5              	= "" (string)
         DOTA_TEAM_CUSTOM_6              	= "" (string)
         DOTA_TEAM_CUSTOM_7              	= "" (string)
         DOTA_TEAM_CUSTOM_8              	= "" (string)
      }
      DOTA_INVALID_ORDERS             	= table: 0x0025baa8 (table)
      {
         DOTA_INVALID_ORDER_CANT_SELL_ITEM_WHILE_DEAD	= "" (string)
         DOTA_INVALID_ORDER_TARGET_CANT_BE_DENIED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_ROOT	= "" (string)
         DOTA_INVALID_ORDER_UNIT_COMMAND_RESTRICTED	= "" (string)
         DOTA_INVALID_ORDER_UNIT_MUTED   	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_SUMMONED	= "" (string)
         DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ALLY	= "" (string)
         DOTA_INVALID_ORDER_CANT_PURCHASE_DISALLOWED_ITEM	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_DOMINATED	= "" (string)
         DOTA_INVALID_ORDER_CAST_CUSTOM  	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_DISASSEMBLABLE	= "" (string)
         DOTA_INVALID_ORDER_ITEM_OUT_OF_STOCK	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED_AT_MAX	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_INACTIVE	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_IN_MAIN_INVENTORY	= "" (string)
         DOTA_INVALID_ORDER_CANT_GLYPH   	= "" (string)
         DOTA_INVALID_ORDER_CANT_DRAG_CHANNELING_ITEM	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_A_HERO	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_DEAD	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_NOT_ENOUGH_GOLD	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_IN_COOLDOWN	= "" (string)
         DOTA_INVALID_ORDER_CANT_DISASSEMBLE_STASH_OUT_OF_RANGE	= "" (string)
         DOTA_INVALID_ORDER_CANT_EJECT_ITEM_NOT_IN_STASH	= "" (string)
         DOTA_INVALID_ORDER_GAME_IS_PAUSED	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_CONSIDERED_HERO	= "" (string)
         DOTA_INVALID_ORDER_CANT_SHOP_AUTO_BUY_ENABLED	= "" (string)
         DOTA_INVALID_ORDER_ONLY_DELIBERATE_CHANNELING_CANCEL	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_REAPERS_SCYTHE	= "" (string)
         DOTA_INVALID_ORDER_CANT_BUYBACK_DISABLED_BY_GAME_MODE	= "" (string)
         DOTA_INVALID_ORDER_CANT_ABILITY_PING_BAD_TEAM	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_POSITIONED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_TARGETTED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_REQUIRES_TARGET	= "" (string)
         DOTA_INVALID_ORDER_CANT_RADAR   	= "" (string)
         DOTA_INVALID_ORDER_NO_COURIER   	= "" (string)
         DOTA_INVALID_ORDER_CUSTOM_SHOP_NOT_IN_RANGE	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_RIVER_PAINT	= "" (string)
         DOTA_INVALID_ORDER_UNIT_OBSTRUCTED	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_DRAG_REQUIRED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_TETHER	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_UNLOCKED	= "" (string)
         DOTA_INVALID_ORDER_CANT_FOUNTAIN_DROP_UNIT_NOT_DEAD	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_IN_NEUTRAL_ITEM_STASH	= "" (string)
         DOTA_INVALID_ORDER_ITEM_ALREADY_PURCHASED	= "" (string)
         DOTA_INVALID_ORDER_BEYOND_PHYSICAL_ITEM_LIMIT	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_PING_DEAD_ALLY	= "" (string)
         DOTA_INVALID_ORDER_CANT_LOCKCOMBINE_NEUTRAL_ITEMS	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_CANT_ALT_CAST	= "" (string)
         DOTA_INVALID_ORDER_COUNT        	= "" (string)
         DOTA_ORDER_SUCCESS              	= "" (string)
         DOTA_INVALID_ORDER_NOT_CONTROLLABLE_BY_PLAYER	= "" (string)
         DOTA_INVALID_ORDER_UNIT_IS_NOT_NPC	= "" (string)
         DOTA_INVALID_ORDER_BAD_ABILITY_ENTITY	= "" (string)
         DOTA_INVALID_ORDER_UNRECOGNIZED_ORDER	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_REQUIRED	= "" (string)
         DOTA_INVALID_ORDER_NPC_TARGET_REQUIRED	= "" (string)
         DOTA_INVALID_ORDER_TARGET_TREE_INDEX_NOT_A_TREE	= "" (string)
         DOTA_INVALID_ORDER_TARGET_ENTITY_INDEX_OUT_OF_RANGE	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_AN_ITEM	= "" (string)
         DOTA_INVALID_ORDER_PHYSICAL_ITEM_TARGET_REQUIRED	= "" (string)
         DOTA_INVALID_ORDER_RUNE_TARGET_REQUIRED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_OWNED_BY_UNIT	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED	= "" (string)
         DOTA_INVALID_ORDER_NO_POINTS_FOR_ABILITY_UPGRADE	= "" (string)
         DOTA_INVALID_ORDER_NOT_ENOUGH_MANA	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_IN_COOLDOWN	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_NOT_LEARNED	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_PASSIVE_ABILITY	= "" (string)
         DOTA_INVALID_ORDER_PHANTOM_TARGET	= "" (string)
         DOTA_INVALID_ORDER_DEAD_TARGET  	= "" (string)
         DOTA_INVALID_ORDER_UNIT_IS_DEAD 	= "" (string)
         DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ENEMY	= "" (string)
         DOTA_INVALID_ORDER_TARGET_INVULNERABLE	= "" (string)
         DOTA_INVALID_ORDER_TARGET_ATTACK_IMMUNE	= "" (string)
         DOTA_INVALID_ORDER_UNIT_SILENCED	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_CANT_BE_TOGGLED	= "" (string)
         DOTA_INVALID_ORDER_TARGET_CANT_BE_SEEN	= "" (string)
         DOTA_INVALID_ORDER_TARGET_INVISIBLE	= "" (string)
         DOTA_INVALID_ORDER_HERO_CANT_BE_DENIED	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_TEAMMATE	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_ENEMY	= "" (string)
         DOTA_INVALID_ORDER_UNIT_CANT_MOVE	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_ATTACK_IMMUNE	= "" (string)
         DOTA_INVALID_ORDER_PURCHASE_INVALID_ITEM	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_IN_INVENTORY	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_IN_UNIT_INVENTORY	= "" (string)
         DOTA_INVALID_ORDER_TARGET_UNSELECTABLE	= "" (string)
         DOTA_INVALID_ORDER_ITEM_NOT_IN_ACTIVE_INVENTORY	= "" (string)
         DOTA_INVALID_ORDER_UNIT_CANT_PICK_UP_RUNES	= "" (string)
         DOTA_INVALID_ORDER_UNIT_CANT_MANIPULATE_ITEMS	= "" (string)
         DOTA_INVALID_ORDER_UNIT_IS_ILLUSION	= "" (string)
         DOTA_INVALID_ORDER_UNIT_CANT_ATTACK	= "" (string)
         DOTA_INVALID_ORDER_ITEM_CANT_BE_DROPPED	= "" (string)
         DOTA_INVALID_ORDER_TARGET_TREE_NOT_ACTIVE	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_CANT_AUTO_CAST	= "" (string)
         DOTA_INVALID_ORDER_TARGET_POSITION_OFF_MAP	= "" (string)
         DOTA_INVALID_ORDER_UNIT_CANT_MOVE_TARGET_OUT_OF_RANGE	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_HERO	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_OTHER	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_BUILDING	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_ANCIENT	= "" (string)
         DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_STASH	= "" (string)
         DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_SLOT	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_MECHANICAL	= "" (string)
         DOTA_INVALID_ORDER_CANT_ACCEPT_ATTACK_TARGET	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_NO_CHARGES	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_CREEP	= "" (string)
         DOTA_INVALID_ORDER_TARGET_CANT_TAKE_ITEMS	= "" (string)
         DOTA_INVALID_ORDER_CANT_GIVE_ITEM_TO_ENEMY	= "" (string)
         DOTA_INVALID_ORDER_CANT_CAST_ON_COURIER	= "" (string)
         DOTA_INVALID_ORDER_ABILITY_IS_HIDDEN	= "" (string)
         DOTA_INVALID_ORDER_ITEM_IN_COOLDOWN	= "" (string)
         DOTA_INVALID_ORDER_SECRET_SHOP_NOT_IN_RANGE	= "" (string)
         DOTA_INVALID_ORDER_NOT_ENOUGH_GOLD	= "" (string)
         DOTA_INVALID_ORDER_PURCHASE_AUTOCOMBINE_RECIPE	= "" (string)
         DOTA_INVALID_ORDER_CANT_DENY_HEALTH_TOO_HIGH	= "" (string)
         DOTA_INVALID_ORDER_SIDE_SHOP_NOT_IN_RANGE	= "" (string)
         DOTA_INVALID_ORDER_HOME_SHOP_NOT_IN_RANGE	= "" (string)
         DOTA_INVALID_ORDER_CANT_PICK_UP_ITEM	= "" (string)
         DOTA_INVALID_ORDER_CANT_SELL_NO_SHOP_IN_RANGE	= "" (string)
         DOTA_INVALID_ORDER_CANT_SELL_ITEM	= "" (string)
      }
      ABILITY_TYPES                   	= table: 0x002802a0 (table)
      {
         ABILITY_TYPE_ULTIMATE           	= "" (string)
         ABILITY_TYPE_ATTRIBUTES         	= "" (string)
         ABILITY_TYPE_HIDDEN             	= "" (string)
         ABILITY_TYPE_BASIC              	= "" (string)
      }
      DOTA_SHOP_TYPE                  	= table: 0x00283950 (table)
      {
         DOTA_SHOP_HOME                  	= "" (string)
         DOTA_SHOP_SIDE                  	= "" (string)
         DOTA_SHOP_SECRET                	= "" (string)
         DOTA_SHOP_GROUND                	= "" (string)
         DOTA_SHOP_SIDE2                 	= "" (string)
         DOTA_SHOP_SECRET2               	= "" (string)
         DOTA_SHOP_CUSTOM                	= "" (string)
         DOTA_SHOP_NEUTRALS              	= "" (string)
         DOTA_SHOP_NONE                  	= "" (string)
      }
      quest_text_replace_values_t     	= table: 0x00252818 (table)
      {
         QUEST_TEXT_REPLACE_VALUE_REWARD 	= "" (string)
         QUEST_NUM_TEXT_REPLACE_VALUES   	= "" (string)
         QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE	= "" (string)
         QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE	= "" (string)
         QUEST_TEXT_REPLACE_VALUE_ROUND  	= "" (string)
      }
      DOTA_HeroPickState              	= table: 0x0023d070 (table)
      {
         DOTA_HEROPICK_STATE_CM_BAN2     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN3     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN4     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN5     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN6     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN7     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN8     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN9     	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN10    	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN11    	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN12    	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN13    	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN14    	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT1  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT2  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT3  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT4  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT5  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT6  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT7  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT8  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT9  	= "" (string)
         DOTA_HEROPICK_STATE_CM_SELECT10 	= "" (string)
         DOTA_HEROPICK_STATE_CD_CAPTAINPICK	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN1     	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN2     	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN3     	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN4     	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN5     	= "" (string)
         DOTA_HEROPICK_STATE_CD_BAN6     	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT1  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT2  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT3  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT4  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT5  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT6  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT7  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT8  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT9  	= "" (string)
         DOTA_HEROPICK_STATE_CD_SELECT10 	= "" (string)
         DOTA_HEROPICK_STATE_CD_PICK     	= "" (string)
         DOTA_HEROPICK_STATE_BD_SELECT   	= "" (string)
         DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT	= "" (string)
         DOTA_HERO_PICK_STATE_ARDM_SELECT	= "" (string)
         DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT	= "" (string)
         DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT	= "" (string)
         DOTA_HEROPICK_STATE_SELECT_PENALTY	= "" (string)
         DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES	= "" (string)
         DOTA_HEROPICK_STATE_SCENARIO_PICK	= "" (string)
         DOTA_HEROPICK_STATE_COUNT       	= "" (string)
         DOTA_HEROPICK_STATE_CD_INTRO    	= "" (string)
         DOTA_HEROPICK_STATE_FH_SELECT   	= "" (string)
         DOTA_HEROPICK_STATE_MO_SELECT   	= "" (string)
         DOTA_HEROPICK_STATE_AR_SELECT   	= "" (string)
         DOTA_HEROPICK_STATE_CM_PICK     	= "" (string)
         DOTA_HEROPICK_STATE_NONE        	= "" (string)
         DOTA_HEROPICK_STATE_AP_SELECT   	= "" (string)
         DOTA_HEROPICK_STATE_SD_SELECT   	= "" (string)
         DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED	= "" (string)
         DOTA_HEROPICK_STATE_RD_SELECT_UNUSED	= "" (string)
         DOTA_HEROPICK_STATE_CM_INTRO    	= "" (string)
         DOTA_HEROPICK_STATE_CM_CAPTAINPICK	= "" (string)
         DOTA_HEROPICK_STATE_CM_BAN1     	= "" (string)
      }
      modifierstate                   	= table: 0x0028aa68 (table)
      {
         MODIFIER_STATE_INVISIBLE        	= "" (string)
         MODIFIER_STATE_INVULNERABLE     	= "" (string)
         MODIFIER_STATE_MAGIC_IMMUNE     	= "" (string)
         MODIFIER_STATE_PROVIDES_VISION  	= "" (string)
         MODIFIER_STATE_NIGHTMARED       	= "" (string)
         MODIFIER_STATE_BLOCK_DISABLED   	= "" (string)
         MODIFIER_STATE_EVADE_DISABLED   	= "" (string)
         MODIFIER_STATE_UNSELECTABLE     	= "" (string)
         MODIFIER_STATE_CANNOT_TARGET_ENEMIES	= "" (string)
         MODIFIER_STATE_CANNOT_TARGET_BUILDINGS	= "" (string)
         MODIFIER_STATE_CANNOT_MISS      	= "" (string)
         MODIFIER_STATE_SPECIALLY_DENIABLE	= "" (string)
         MODIFIER_STATE_FROZEN           	= "" (string)
         MODIFIER_STATE_COMMAND_RESTRICTED	= "" (string)
         MODIFIER_STATE_NOT_ON_MINIMAP   	= "" (string)
         MODIFIER_STATE_LOW_ATTACK_PRIORITY	= "" (string)
         MODIFIER_STATE_NO_HEALTH_BAR    	= "" (string)
         MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES	= "" (string)
         MODIFIER_STATE_NO_HEALTH_BAR_FOR_OTHER_PLAYERS	= "" (string)
         MODIFIER_STATE_FLYING           	= "" (string)
         MODIFIER_STATE_NO_UNIT_COLLISION	= "" (string)
         MODIFIER_STATE_NO_TEAM_MOVE_TO  	= "" (string)
         MODIFIER_STATE_NO_TEAM_SELECT   	= "" (string)
         MODIFIER_STATE_PASSIVES_DISABLED	= "" (string)
         MODIFIER_STATE_DOMINATED        	= "" (string)
         MODIFIER_STATE_BLIND            	= "" (string)
         MODIFIER_STATE_OUT_OF_GAME      	= "" (string)
         MODIFIER_STATE_FAKE_ALLY        	= "" (string)
         MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY	= "" (string)
         MODIFIER_STATE_TRUESIGHT_IMMUNE 	= "" (string)
         MODIFIER_STATE_UNTARGETABLE     	= "" (string)
         MODIFIER_STATE_UNTARGETABLE_ALLIED	= "" (string)
         MODIFIER_STATE_UNTARGETABLE_ENEMY	= "" (string)
         MODIFIER_STATE_UNTARGETABLE_SELF	= "" (string)
         MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS	= "" (string)
         MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES	= "" (string)
         MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES	= "" (string)
         MODIFIER_STATE_UNSLOWABLE       	= "" (string)
         MODIFIER_STATE_TETHERED         	= "" (string)
         MODIFIER_STATE_IGNORING_STOP_ORDERS	= "" (string)
         MODIFIER_STATE_LAST             	= "" (string)
         MODIFIER_STATE_IGNORING_MOVE_ORDERS	= "" (string)
         MODIFIER_STATE_ALLOW_PATHING_THROUGH_BASE_BLOCKER	= "" (string)
         MODIFIER_STATE_NO_INVISIBILITY_VISUALS	= "" (string)
         MODIFIER_STATE_DEBUFF_IMMUNE    	= "" (string)
         MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS	= "" (string)
         MODIFIER_STATE_SPECIALLY_UNDENIABLE	= "" (string)
         MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE	= "" (string)
         MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS	= "" (string)
         MODIFIER_STATE_ATTACK_ALLIES    	= "" (string)
         MODIFIER_STATE_FORCED_FLYING_VISION	= "" (string)
         MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED	= "" (string)
         MODIFIER_STATE_TAUNTED          	= "" (string)
         MODIFIER_STATE_FEARED           	= "" (string)
         MODIFIER_STATE_ROOTED           	= "" (string)
         MODIFIER_STATE_DISARMED         	= "" (string)
         MODIFIER_STATE_ATTACK_IMMUNE    	= "" (string)
         MODIFIER_STATE_SILENCED         	= "" (string)
         MODIFIER_STATE_MUTED            	= "" (string)
         MODIFIER_STATE_STUNNED          	= "" (string)
         MODIFIER_STATE_HEXED            	= "" (string)
      }
      DOTADamageFlag_t                	= table: 0x00230080 (table)
      {
         DOTA_DAMAGE_FLAG_HPLOSS         	= "" (string)
         DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT	= "" (string)
         DOTA_DAMAGE_FLAG_NON_LETHAL     	= "" (string)
         DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS	= "" (string)
         DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION	= "" (string)
         DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN	= "" (string)
         DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL	= "" (string)
         DOTA_DAMAGE_FLAG_PROPERTY_FIRE  	= "" (string)
         DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR	= "" (string)
         DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK	= "" (string)
         DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION	= "" (string)
         DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK	= "" (string)
         DOTA_DAMAGE_FLAG_ATTACK_MODIFIER	= "" (string)
         DOTA_DAMAGE_FLAG_NONE           	= "" (string)
         DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR	= "" (string)
         DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR	= "" (string)
         DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY	= "" (string)
         DOTA_DAMAGE_FLAG_BYPASSES_BLOCK 	= "" (string)
         DOTA_DAMAGE_FLAG_REFLECTION     	= "" (string)
      }
      DOTA_GameState                  	= table: 0x0022cdc8 (table)
      {
         DOTA_GAMERULES_STATE_GAME_IN_PROGRESS	= "" (string)
         DOTA_GAMERULES_STATE_POST_GAME  	= "" (string)
         DOTA_GAMERULES_STATE_DISCONNECT 	= "" (string)
         DOTA_GAMERULES_STATE_TEAM_SHOWCASE	= "" (string)
         DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP	= "" (string)
         DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD	= "" (string)
         DOTA_GAMERULES_STATE_SCENARIO_SETUP	= "" (string)
         DOTA_GAMERULES_STATE_PLAYER_DRAFT	= "" (string)
         DOTA_GAMERULES_STATE_INIT       	= "" (string)
         DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD	= "" (string)
         DOTA_GAMERULES_STATE_HERO_SELECTION	= "" (string)
         DOTA_GAMERULES_STATE_STRATEGY_TIME	= "" (string)
         DOTA_GAMERULES_STATE_PRE_GAME   	= "" (string)
      }
      EDOTA_ModifyGold_Reason         	= table: 0x0022d958 (table)
      {
         DOTA_ModifyGold_PurchaseItem    	= "" (string)
         DOTA_ModifyGold_AbandonedRedistribute	= "" (string)
         DOTA_ModifyGold_SellItem        	= "" (string)
         DOTA_ModifyGold_AbilityCost     	= "" (string)
         DOTA_ModifyGold_CheatCommand    	= "" (string)
         DOTA_ModifyGold_SelectionPenalty	= "" (string)
         DOTA_ModifyGold_GameTick        	= "" (string)
         DOTA_ModifyGold_Building        	= "" (string)
         DOTA_ModifyGold_HeroKill        	= "" (string)
         DOTA_ModifyGold_CreepKill       	= "" (string)
         DOTA_ModifyGold_NeutralKill     	= "" (string)
         DOTA_ModifyGold_RoshanKill      	= "" (string)
         DOTA_ModifyGold_CourierKill     	= "" (string)
         DOTA_ModifyGold_BountyRune      	= "" (string)
         DOTA_ModifyGold_SharedGold      	= "" (string)
         DOTA_ModifyGold_AbilityGold     	= "" (string)
         DOTA_ModifyGold_WardKill        	= "" (string)
         DOTA_ModifyGold_CourierKilledByThisPlayer	= "" (string)
         DOTA_ModifyGold_Unspecified     	= "" (string)
         DOTA_ModifyGold_Death           	= "" (string)
         DOTA_ModifyGold_Buyback         	= "" (string)
         DOTA_ModifyGold_PurchaseConsumable	= "" (string)
      }
      DOTA_ABILITY_BEHAVIOR           	= table: 0x0027e780 (table)
      {
         DOTA_ABILITY_BEHAVIOR_NO_TARGET 	= "" (string)
         DOTA_ABILITY_BEHAVIOR_UNIT_TARGET	= "" (string)
         DOTA_ABILITY_BEHAVIOR_POINT     	= "" (string)
         DOTA_ABILITY_BEHAVIOR_AOE       	= "" (string)
         DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE	= "" (string)
         DOTA_ABILITY_BEHAVIOR_CHANNELLED	= "" (string)
         DOTA_ABILITY_BEHAVIOR_ITEM      	= "" (string)
         DOTA_ABILITY_BEHAVIOR_TOGGLE    	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DIRECTIONAL	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IMMEDIATE 	= "" (string)
         DOTA_ABILITY_BEHAVIOR_AUTOCAST  	= "" (string)
         DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET	= "" (string)
         DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT	= "" (string)
         DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET	= "" (string)
         DOTA_ABILITY_BEHAVIOR_AURA      	= "" (string)
         DOTA_ABILITY_BEHAVIOR_ATTACK    	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT	= "" (string)
         DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES	= "" (string)
         DOTA_ABILITY_BEHAVIOR_UNRESTRICTED	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK	= "" (string)
         DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING	= "" (string)
         DOTA_ABILITY_BEHAVIOR_RUNE_TARGET	= "" (string)
         DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL	= "" (string)
         DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING	= "" (string)
         DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT	= "" (string)
         DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST	= "" (string)
         DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES	= "" (string)
         DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX	= "" (string)
         DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE	= "" (string)
         DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE	= "" (string)
         DOTA_ABILITY_BEHAVIOR_OVERSHOOT 	= "" (string)
         DOTA_ABILITY_BEHAVIOR_IGNORE_MUTED	= "" (string)
         DOTA_ABILITY_BEHAVIOR_ALT_CASTABLE	= "" (string)
         DOTA_ABILITY_BEHAVIOR_BREAK_DISABLES	= "" (string)
         DOTA_ABILITY_BEHAVIOR_SKIP_FOR_KEYBINDS	= "" (string)
         DOTA_ABILITY_BEHAVIOR_NONE      	= "" (string)
         DOTA_ABILITY_BEHAVIOR_HIDDEN    	= "" (string)
         DOTA_ABILITY_BEHAVIOR_PASSIVE   	= "" (string)
      }
      ParticleAttachment_t            	= table: 0x002933e8 (table)
      {
         PATTACH_RENDERORIGIN_FOLLOW     	= "" (string)
         PATTACH_CENTER_FOLLOW           	= "" (string)
         PATTACH_CUSTOM_GAME_STATE_1     	= "" (string)
         PATTACH_HEALTHBAR               	= "" (string)
         MAX_PATTACH_TYPES               	= "" (string)
         PATTACH_ROOTBONE_FOLLOW         	= "" (string)
         PATTACH_INVALID                 	= "" (string)
         PATTACH_WATERWAKE               	= "" (string)
         PATTACH_ABSORIGIN               	= "" (string)
         PATTACH_ABSORIGIN_FOLLOW        	= "" (string)
         PATTACH_CUSTOMORIGIN            	= "" (string)
         PATTACH_CUSTOMORIGIN_FOLLOW     	= "" (string)
         PATTACH_POINT                   	= "" (string)
         PATTACH_POINT_FOLLOW            	= "" (string)
         PATTACH_EYES_FOLLOW             	= "" (string)
         PATTACH_OVERHEAD_FOLLOW         	= "" (string)
         PATTACH_WORLDORIGIN             	= "" (string)
         PATTACH_MAIN_VIEW               	= "" (string)
      }
      DotaPseudoRandomType            	= table: 0x00294de0 (table)
      {
         DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_DAGGER	= "" (string)
         DOTA_PSEUDO_RANDOM_PHANTOMLANCER_JUXTAPOSE	= "" (string)
         DOTA_PSEUDO_RANDOM_TINY_CRAGGY  	= "" (string)
         DOTA_PSEUDO_RANDOM_COLD_REBUKE  	= "" (string)
         DOTA_PSEUDO_RANDOM_WOLF_CRIT    	= "" (string)
         DOTA_PSEUDO_RANDOM_AXE_HELIX    	= "" (string)
         DOTA_PSEUDO_RANDOM_AXE_HELIX_ATTACK	= "" (string)
         DOTA_PSEUDO_RANDOM_LEGION_MOMENT	= "" (string)
         DOTA_PSEUDO_RANDOM_SLARDAR_BASH 	= "" (string)
         DOTA_PSEUDO_RANDOM_OD_ESSENCE   	= "" (string)
         DOTA_PSEUDO_RANDOM_DROW_MARKSMANSHIP	= "" (string)
         DOTA_PSEUDO_RANDOM_OGRE_MAGI_FIREBLAST	= "" (string)
         DOTA_PSEUDO_RANDOM_OGRE_ITEM_MULTICAST	= "" (string)
         DOTA_PSEUDO_RANDOM_SPIRITBREAKER_GREATERBASH	= "" (string)
         DOTA_PSEUDO_RANDOM_LONE_DRUID_ENTANGLE	= "" (string)
         DOTA_PSEUDO_RANDOM_FACELESS_BASH	= "" (string)
         DOTA_PSEUDO_RANDOM_FACELESS_EVADE_SPELL	= "" (string)
         DOTA_PSEUDO_RANDOM_FACELESS_EVADE_ATTACK	= "" (string)
         DOTA_PSEUDO_RANDOM_FACELESS_VOID_BACKTRACK	= "" (string)
         DOTA_PSEUDO_RANDOM_DAZZLE_SCEPTER	= "" (string)
         DOTA_PSEUDO_RANDOM_CHAOS_CRIT   	= "" (string)
         DOTA_PSEUDO_RANDOM_LYCAN_CRIT   	= "" (string)
         DOTA_PSEUDO_RANDOM_TUSK_CRIT    	= "" (string)
         DOTA_PSEUDO_RANDOM_CM_FREEZING_FIELD	= "" (string)
         DOTA_PSEUDO_RANDOM_GENERIC_BASHER	= "" (string)
         DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT_MORTAL	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_BASHER  	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_SOLAR_CREST	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_JAVELIN_ACCURACY	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_TRIDENT 	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL 	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL_BLOCK	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_STOUT   	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_VANGUARD	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_CRIMSON_GUARD	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_PMS     	= "" (string)
         DOTA_PSEUDO_RANDOM_NONE         	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_SANGEKAYA_MAIM	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_MKB     	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_SILVER_EDGE	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_NAGINATA	= "" (string)
         DOTA_PSEUDO_RANDOM_TROLL_BASH   	= "" (string)
         DOTA_PSEUDO_RANDOM_RIKI_SMOKE_SCREEN	= "" (string)
         DOTA_PSEUDO_RANDOM_CHAOS_DOUBLE_CRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_CHAOS_TRIPLE_CRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_GENERIC_EVASION	= "" (string)
         DOTA_PSEUDO_RANDOM_GENERIC_HEIGHT_MISS	= "" (string)
         DOTA_PSEUDO_RANDOM_GENERIC_MISS 	= "" (string)
         DOTA_PSEUDO_RANDOM_ARMADILLO_HEARTPIERCER	= "" (string)
         DOTA_PSEUDO_RANDOM_MARS_SHIELD  	= "" (string)
         DOTA_PSEUDO_RANDOM_ANTIMAGE_SILENT	= "" (string)
         DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER1	= "" (string)
         DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER2	= "" (string)
         DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER3	= "" (string)
         DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER4	= "" (string)
         DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER5	= "" (string)
         DOTA_PSEUDO_RANDOM_MARS_BULWARK 	= "" (string)
         DOTA_PSEUDO_RANDOM_MUERTA_GUNSLINGER	= "" (string)
         DOTA_PSEUDO_RANDOM_TROLL_FERVOR_SHARD	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GENERIC	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2	= "" (string)
         DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1	= "" (string)
         DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM	= "" (string)
         DOTA_PSEUDO_RANDOM_ATOS         	= "" (string)
         DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT	= "" (string)
         DOTA_PSEUDO_RANDOM_BREWMASTER_CINDER_BREW	= "" (string)
         DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT	= "" (string)
         DOTA_PSEUDO_RANDOM_JUGG_CRIT    	= "" (string)
         DOTA_PSEUDO_RANDOM_MAGNUS_SHARD 	= "" (string)
      }
      modifierfunction                	= table: 0x00283b38 (table)
      {
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE	= "GetModifierPhysicalArmorBase_Percentage" (string)
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE	= "GetModifierPhysicalArmorTotal_Percentage" (string)
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS	= "GetModifierPhysicalArmorBonus" (string)
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE	= "GetModifierPhysicalArmorBonusUnique" (string)
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE	= "GetModifierPhysicalArmorBonusUniqueActive" (string)
         MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST	= "GetModifierPhysicalArmorBonusPost" (string)
         MODIFIER_PROPERTY_MIN_PHYSICAL_ARMOR	= "GetModifierMinPhysicalArmor" (string)
         MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR	= "GetModifierIgnorePhysicalArmor" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION	= "GetModifierMagicalResistanceBaseReduction" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION	= "GetModifierMagicalResistanceDirectModification" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS	= "GetModifierMagicalResistanceBonus" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS	= "GetModifierMagicalResistanceBonusIllusions" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_UNIQUE	= "GetModifierMagicalResistanceBonusUnique" (string)
         MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE	= "GetModifierMagicalResistanceDecrepifyUnique" (string)
         MODIFIER_PROPERTY_BASE_MANA_REGEN	= "GetModifierBaseRegen" (string)
         MODIFIER_PROPERTY_MANA_REGEN_CONSTANT	= "GetModifierConstantManaRegen" (string)
         MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE	= "GetModifierConstantManaRegenUnique" (string)
         MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE	= "GetModifierTotalPercentageManaRegen" (string)
         MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT	= "GetModifierConstantHealthRegen" (string)
         MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE	= "GetModifierHealthRegenPercentage" (string)
         MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE	= "GetModifierHealthRegenPercentageUnique" (string)
         MODIFIER_PROPERTY_HEALTH_BONUS  	= "GetModifierHealthBonus" (string)
         MODIFIER_PROPERTY_MANA_BONUS    	= "GetModifierManaBonus" (string)
         MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS	= "GetModifierExtraStrengthBonus" (string)
         MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS	= "GetModifierExtraHealthBonus" (string)
         MODIFIER_PROPERTY_EXTRA_MANA_BONUS	= "GetModifierExtraManaBonus" (string)
         MODIFIER_PROPERTY_EXTRA_MANA_BONUS_PERCENTAGE	= "GetModifierExtraManaBonusPercentage" (string)
         MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE	= "GetModifierExtraHealthPercentage" (string)
         MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE	= "GetModifierExtraManaPercentage" (string)
         MODIFIER_PROPERTY_STATS_STRENGTH_BONUS	= "GetModifierBonusStats_Strength" (string)
         MODIFIER_PROPERTY_STATS_AGILITY_BONUS	= "GetModifierBonusStats_Agility" (string)
         MODIFIER_PROPERTY_STATS_INTELLECT_BONUS	= "GetModifierBonusStats_Intellect" (string)
         MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE	= "GetModifierBonusStats_Strength_Percentage" (string)
         MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE	= "GetModifierBonusStats_Agility_Percentage" (string)
         MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE	= "GetModifierBonusStats_Intellect_Percentage" (string)
         MODIFIER_PROPERTY_CAST_RANGE_BONUS	= "GetModifierCastRangeBonus" (string)
         MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE	= "GetModifierCastRangeBonusPercentage" (string)
         MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET	= "GetModifierCastRangeBonusTarget" (string)
         MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING	= "GetModifierCastRangeBonusStacking" (string)
         MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE	= "GetModifierAttackRangeOverride" (string)
         MODIFIER_PROPERTY_ATTACK_RANGE_BONUS	= "GetModifierAttackRangeBonus" (string)
         MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE	= "GetModifierAttackRangeBonusUnique" (string)
         MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE	= "GetModifierAttackRangeBonusPercentage" (string)
         MODIFIER_PROPERTY_MAX_ATTACK_RANGE	= "GetModifierMaxAttackRange" (string)
         MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS	= "GetModifierProjectileSpeedBonus" (string)
         MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE	= "GetModifierProjectileSpeedBonusPercentage" (string)
         MODIFIER_PROPERTY_PROJECTILE_NAME	= "GetModifierProjectileName" (string)
         MODIFIER_PROPERTY_REINCARNATION 	= "ReincarnateTime" (string)
         MODIFIER_PROPERTY_REINCARNATION_SUPPRESS_FX	= "ReincarnateSuppressFX" (string)
         MODIFIER_PROPERTY_RESPAWNTIME   	= "GetModifierConstantRespawnTime" (string)
         MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT	= "GetModifierBaseAttackTimeConstant" (string)
         MODIFIER_PROPERTY_RESPAWNTIME_STACKING	= "GetModifierStackingRespawnTime" (string)
         MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE	= "GetModifierPercentageCooldown" (string)
         MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING	= "GetModifierPercentageCooldownOngoing" (string)
         MODIFIER_PROPERTY_CASTTIME_PERCENTAGE	= "GetModifierPercentageCasttime" (string)
         MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE	= "GetModifierPercentageAttackAnimTime" (string)
         MODIFIER_PROPERTY_MANACOST_PERCENTAGE	= "GetModifierPercentageManacost" (string)
         MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY	= "GetModifierDamageOutgoing_Percentage_Illusion_Amplify" (string)
         MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE	= "GetModifierTotalDamageOutgoing_Percentage" (string)
         MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP	= "GetModifierSpellAmplify_PercentageCreep" (string)
         MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE	= "GetModifierSpellAmplify_Percentage" (string)
         MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE	= "GetModifierSpellAmplify_PercentageUnique" (string)
         MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE	= "GetModifierHealAmplify_PercentageSource" (string)
         MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET	= "GetModifierHealAmplify_PercentageTarget" (string)
         MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE	= "GetModifierHPRegen_CanBeNegative" (string)
         MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE	= "GetModifierHPRegenAmplify_Percentage" (string)
         MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE	= "GetModifierLifestealRegenAmplify_Percentage" (string)
         MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE	= "GetModifierSpellLifestealRegenAmplify_Percentage" (string)
         MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE	= "GetModifierMPRegenAmplify_Percentage" (string)
         MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE	= "GetModifierManaDrainAmplify_Percentage" (string)
         MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE	= "GetModifierMPRestoreAmplify_Percentage" (string)
         MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE	= "GetModifierBaseDamageOutgoing_Percentage" (string)
         MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE	= "GetModifierBaseDamageOutgoing_PercentageUnique" (string)
         MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE	= "GetModifierIncomingDamage_Percentage" (string)
         MODIFIER_PROPERTY_DISABLE_AUTOATTACK	= "GetDisableAutoAttack" (string)
         MODIFIER_PROPERTY_BONUS_DAY_VISION	= "GetBonusDayVision" (string)
         MODIFIER_PROPERTY_BONUS_DAY_VISION_PERCENTAGE	= "GetBonusDayVisionPercentage" (string)
         MODIFIER_PROPERTY_BONUS_NIGHT_VISION	= "GetBonusNightVision" (string)
         MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE	= "GetBonusNightVisionUnique" (string)
         MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE	= "GetBonusVisionPercentage" (string)
         MODIFIER_PROPERTY_FIXED_DAY_VISION	= "GetFixedDayVision" (string)
         MODIFIER_PROPERTY_FIXED_NIGHT_VISION	= "GetFixedNightVision" (string)
         MODIFIER_PROPERTY_MIN_HEALTH    	= "GetMinHealth" (string)
         MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL	= "GetAbsoluteNoDamagePhysical" (string)
         MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL	= "GetAbsoluteNoDamageMagical" (string)
         MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE	= "GetAbsoluteNoDamagePure" (string)
         MODIFIER_PROPERTY_IS_ILLUSION   	= "GetIsIllusion" (string)
         MODIFIER_PROPERTY_ILLUSION_LABEL	= "GetModifierIllusionLabel" (string)
         MODIFIER_PROPERTY_STRONG_ILLUSION	= "GetModifierStrongIllusion" (string)
         MODIFIER_PROPERTY_SUPER_ILLUSION	= "GetModifierSuperIllusion" (string)
         MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE	= "GetModifierSuperIllusionWithUltimate" (string)
         MODIFIER_PROPERTY_XP_DURING_DEATH	= "GetModifierXPDuringDeath" (string)
         MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE	= "GetModifierTurnRate_Percentage" (string)
         MODIFIER_PROPERTY_TURN_RATE_OVERRIDE	= "GetModifierTurnRate_Override" (string)
         MODIFIER_PROPERTY_DISABLE_HEALING	= "GetDisableHealing" (string)
         MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK	= "GetAlwaysAllowAttack" (string)
         MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK	= "GetAllowEtherealAttack" (string)
         MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL	= "GetOverrideAttackMagical" (string)
         MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH	= "GetModifierUnitStatsNeedsRefresh" (string)
         MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER	= "Unused" (string)
         MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER	= "Unused" (string)
         MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING	= "GetModifierUnitDisllowUpgrading" (string)
         MODIFIER_PROPERTY_DODGE_PROJECTILE	= "GetModifierDodgeProjectile" (string)
         MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK	= "GetTriggerCosmeticAndEndAttack" (string)
         MODIFIER_PROPERTY_MAX_DEBUFF_DURATION	= "GetModifierMaxDebuffDuration" (string)
         MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER	= "GetPrimaryStatDamageMultiplier" (string)
         MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW	= "GetModifierPreAttack_DeadlyBlow" (string)
         MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION	= "GetAlwaysAutoAttackWhileHoldPosition" (string)
         MODIFIER_EVENT_ON_SPELL_TARGET_READY	= "OnSpellTargetReady" (string)
         MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED	= "OnMagicDamageCalculated" (string)
         MODIFIER_EVENT_ON_ATTACKED      	= "OnAttacked" (string)
         MODIFIER_EVENT_ON_DEATH         	= "OnDeath" (string)
         MODIFIER_EVENT_ON_DEATH_COMPLETED	= "OnDeathCompleted" (string)
         MODIFIER_EVENT_ON_RESPAWN       	= "OnRespawn" (string)
         MODIFIER_EVENT_ON_SPENT_MANA    	= "OnSpentMana" (string)
         MODIFIER_EVENT_ON_SPENT_HEALTH  	= "OnSpentHealth" (string)
         MODIFIER_EVENT_ON_TELEPORTING   	= "OnTeleporting" (string)
         MODIFIER_EVENT_ON_TELEPORTED    	= "OnTeleported" (string)
         MODIFIER_EVENT_ON_SET_LOCATION  	= "OnSetLocation" (string)
         MODIFIER_EVENT_ON_HEALTH_GAINED 	= "OnHealthGained" (string)
         MODIFIER_EVENT_ON_MANA_GAINED   	= "OnManaGained" (string)
         MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT	= "OnTakeDamageKillCredit" (string)
         MODIFIER_EVENT_ON_HERO_KILLED   	= "OnHeroKilled" (string)
         MODIFIER_EVENT_ON_HEAL_RECEIVED 	= "OnHealReceived" (string)
         MODIFIER_EVENT_ON_BUILDING_KILLED	= "OnBuildingKilled" (string)
         MODIFIER_EVENT_ON_MODEL_CHANGED 	= "OnModelChanged" (string)
         MODIFIER_EVENT_ON_MODIFIER_ADDED	= "OnModifierAdded" (string)
         MODIFIER_EVENT_ON_ATTACK_RECORD 	= "OnAttackRecord" (string)
         MODIFIER_EVENT_ON_MODIFIER_REMOVED	= "OnModifierRemoved" (string)
         MODIFIER_EVENT_ON_ATTACK_START  	= "OnAttackStart" (string)
         MODIFIER_PROPERTY_TOOLTIP       	= "OnTooltip" (string)
         MODIFIER_EVENT_ON_ATTACK        	= "OnAttack" (string)
         MODIFIER_PROPERTY_MODEL_CHANGE  	= "GetModifierModelChange" (string)
         MODIFIER_EVENT_ON_ATTACK_LANDED 	= "OnAttackLanded" (string)
         MODIFIER_PROPERTY_MODEL_SCALE   	= "GetModifierModelScale" (string)
         MODIFIER_EVENT_ON_ATTACK_FAIL   	= "OnAttackFail" (string)
         MODIFIER_PROPERTY_MODEL_SCALE_ANIMATE_TIME	= "GetModifierModelScaleAnimateTime" (string)
         MODIFIER_EVENT_ON_ATTACK_ALLIED 	= "OnAttackAllied" (string)
         MODIFIER_PROPERTY_MODEL_SCALE_USE_IN_OUT_EASE	= "GetModifierModelScaleUseInOutEase" (string)
         MODIFIER_EVENT_ON_PROJECTILE_DODGE	= "OnProjectileDodge" (string)
         MODIFIER_PROPERTY_MODEL_SCALE_CONSTANT	= "GetModifierModelScaleConstant" (string)
         MODIFIER_EVENT_ON_ORDER         	= "OnOrder" (string)
         MODIFIER_PROPERTY_IS_SCEPTER    	= "GetModifierScepter" (string)
         MODIFIER_EVENT_ON_UNIT_MOVED    	= "OnUnitMoved" (string)
         MODIFIER_PROPERTY_IS_SHARD      	= "GetModifierShard" (string)
         MODIFIER_EVENT_ON_ABILITY_START 	= "OnAbilityStart" (string)
         MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION	= "GetModifierRadarCooldownReduction" (string)
         MODIFIER_EVENT_ON_ABILITY_EXECUTED	= "OnAbilityExecuted" (string)
         MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS	= "GetActivityTranslationModifiers" (string)
         MODIFIER_EVENT_ON_ABILITY_FULLY_CAST	= "OnAbilityFullyCast" (string)
         MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND	= "GetAttackSound" (string)
         MODIFIER_EVENT_ON_BREAK_INVISIBILITY	= "OnBreakInvisibility" (string)
         MODIFIER_PROPERTY_LIFETIME_FRACTION	= "GetUnitLifetimeFraction" (string)
         MODIFIER_EVENT_ON_ABILITY_END_CHANNEL	= "OnAbilityEndChannel" (string)
         MODIFIER_PROPERTY_PROVIDES_FOW_POSITION	= "GetModifierProvidesFOWVision" (string)
         MODIFIER_EVENT_ON_REFRESH       	= "Unused" (string)
         MODIFIER_PROPERTY_SPELLS_REQUIRE_HP	= "GetModifierSpellsRequireHP" (string)
         MODIFIER_EVENT_ON_TAKEDAMAGE    	= "OnTakeDamage" (string)
         MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP	= "GetForceDrawOnMinimap" (string)
         MODIFIER_EVENT_ON_DEATH_PREVENTED	= "OnDamagePrevented" (string)
         MODIFIER_PROPERTY_DISABLE_TURNING	= "GetModifierDisableTurning" (string)
         MODIFIER_EVENT_ON_STATE_CHANGED 	= "OnStateChanged" (string)
         MODIFIER_PROPERTY_IGNORE_CAST_ANGLE	= "GetModifierIgnoreCastAngle" (string)
         MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE	= "GetModifierChangeAbilityValue" (string)
         MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL	= "GetModifierOverrideAbilitySpecial" (string)
         MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE	= "GetModifierOverrideAbilitySpecialValue" (string)
         MODIFIER_PROPERTY_ABILITY_LAYOUT	= "GetModifierAbilityLayout" (string)
         MODIFIER_EVENT_ON_DOMINATED     	= "OnDominated" (string)
         MODIFIER_EVENT_ON_KILL          	= "OnKill" (string)
         MODIFIER_EVENT_ON_ASSIST        	= "OnAssist" (string)
         MODIFIER_PROPERTY_TEMPEST_DOUBLE	= "GetModifierTempestDouble" (string)
         MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE	= "PreserveParticlesOnModelChanged" (string)
         MODIFIER_EVENT_ON_ATTACK_FINISHED	= "OnAttackFinished" (string)
         MODIFIER_PROPERTY_IGNORE_COOLDOWN	= "GetModifierIgnoreCooldown" (string)
         MODIFIER_PROPERTY_CAN_ATTACK_TREES	= "GetModifierCanAttackTrees" (string)
         MODIFIER_PROPERTY_VISUAL_Z_DELTA	= "GetVisualZDelta" (string)
         MODIFIER_PROPERTY_VISUAL_Z_SPEED_BASE_OVERRIDE	= "GetVisualZSpeedBaseOverride" (string)
         MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION	= "" (string)
         MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER	= "GetModifierNoVisionOfAttacker" (string)
         MODIFIER_PROPERTY_TOOLTIP2      	= "OnTooltip2" (string)
         MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY	= "OnAttackRecordDestroy" (string)
         MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT	= "OnProjectileObstructionHit" (string)
         MODIFIER_PROPERTY_SUPPRESS_TELEPORT	= "GetSuppressTeleport" (string)
         MODIFIER_EVENT_ON_ATTACK_CANCELLED	= "OnAttackCancelled" (string)
         MODIFIER_PROPERTY_SUPPRESS_CLEAVE	= "GetSuppressCleave" (string)
         MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS	= "BotAttackScoreBonus" (string)
         MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE	= "GetModifierAttackSpeedReductionPercentage" (string)
         MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE	= "GetModifierMoveSpeedReductionPercentage" (string)
         MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET	= "" (string)
         MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE	= "GetModifierAttackSpeedPercentage" (string)
         MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE	= "OnAttemptProjectileDodge" (string)
         MODIFIER_EVENT_ON_PREDEBUFF_APPLIED	= "OnPreDebuffApplied" (string)
         MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING	= "GetModifierPercentageCooldownStacking" (string)
         MODIFIER_PROPERTY_SPELL_REDIRECT_TARGET	= "GetModifierSpellRedirectTarget" (string)
         MODIFIER_PROPERTY_TURN_RATE_CONSTANT	= "GetModifierTurnRateConstant" (string)
         MODIFIER_PROPERTY_RAT_PACK      	= "GetModifierIsRatPack" (string)
         MODIFIER_PROPERTY_PHYSICALDAMAGEOUTGOING_PERCENTAGE	= "GetModifierPhysicalDamageOutgoing_Percentage" (string)
         MODIFIER_PROPERTY_KNOCKBACK_AMPLIFICATION_PERCENTAGE	= "GetModifierKnockbackAmplification_Percentage" (string)
         MODIFIER_PROPERTY_HEALTHBAR_PIPS	= "GetModifierHealthBarPips" (string)
         MODIFIER_PROPERTY_INCOMING_DAMAGE_CONSTANT	= "GetModifierIncomingDamageConstant" (string)
         MODIFIER_EVENT_SPELL_APPLIED_SUCCESSFULLY	= "OnSpellAppliedSuccessfully" (string)
         MODIFIER_PROPERTY_AVOID_DAMAGE_AFTER_REDUCTIONS	= "GetModifierAvoidDamageAfterReductions" (string)
         MODIFIER_PROPERTY_FAIL_ATTACK   	= "GetModifierPropetyFailAttack" (string)
         MODIFIER_PROPERTY_PREREDUCE_INCOMING_DAMAGE_MULT	= "GetModifierPrereduceIncomingDamage_Mult" (string)
         MODIFIER_PROPERTY_SUPPRESS_FULLSCREEN_DEATH_FX	= "GetModifierSuppressFullscreenDeathFX" (string)
         MODIFIER_PROPERTY_INCOMING_DAMAGE_CONSTANT_POST	= "MODIFIER_PROPERTY_INCOMING_DAMAGE_CONSTANT_POST" (string)
         MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_MULTIPLICATIVE	= "GetModifierDamageOutgoing_PercentageMultiplicative" (string)
         MODIFIER_PROPERTY_TICK_GOLD_MULTIPLIER	= "GetModifierTickGold_Multiplier" (string)
         MODIFIER_PROPERTY_SLOW_RESISTANCE	= "GetModifierSlowResistance" (string)
         MODIFIER_PROPERTY_AOE_BONUS_PERCENTAGE	= "GetModifierAoEBonusPercentage" (string)
         MODIFIER_PROPERTY_PROJECTILE_SPEED	= "GetModifierProjectileSpeed" (string)
         MODIFIER_PROPERTY_BECOME_UNIVERSAL	= "GetModifierBecomeUniversal" (string)
         MODIFIER_EVENT_ON_FORCE_PROC_MAGIC_STICK	= "OnForceProcMagicStick" (string)
         MODIFIER_EVENT_ON_DAMAGE_HPLOSS 	= "OnDamageHPLoss" (string)
         MODIFIER_PROPERTY_FORCE_MAX_HEALTH	= "GetModifierForceMaxHealth" (string)
         MODIFIER_PROPERTY_AOE_BONUS_CONSTANT	= "GetModifierAoEBonusConstant" (string)
         MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE	= "GetModifierBaseAttackTimePercentage" (string)
         MODIFIER_EVENT_ON_TAKEDAMAGE_POST_UNAVOIDABLE_BLOCK	= "OnTakeDamagePostUnavoidableBlock" (string)
         MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE	= "GetModifierPercentageRespawnTime" (string)
         MODIFIER_EVENT_ON_MUTE_DAMAGE_ABILITIES	= "OnMuteDamageAbilities" (string)
         MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST	= "GetModifierBaseAttackTimeConstant_Adjust" (string)
         MODIFIER_PROPERTY_SUPPRESS_CRIT 	= "GetSuppressCrit" (string)
         MODIFIER_FUNCTION_LAST          	= "" (string)
         MODIFIER_FUNCTION_INVALID       	= "" (string)
         MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT	= "GetModifierAttackPointConstant" (string)
         MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE	= "GetModifierBonusDamageOutgoing_Percentage" (string)
         MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE	= "GetModifierDamageOutgoing_Percentage" (string)
         MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION	= "GetModifierDamageOutgoing_Percentage_Illusion" (string)
         MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL	= "GetModifierProcAttack_ConvertPhysicalToMagical" (string)
         MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE	= "GetModifierProcAttack_BonusDamage_Pure" (string)
         MODIFIER_PROPERTY_PROCATTACK_FEEDBACK	= "GetModifierProcAttack_Feedback" (string)
         MODIFIER_PROPERTY_PRE_ATTACK    	= "GetModifierPreAttack" (string)
         MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY	= "GetModifierPersistentInvisibility" (string)
         MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE	= "GetModifierMoveSpeedOverride" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE	= "GetModifierMoveSpeedBonus_Percentage_Unique" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2	= "GetModifierMoveSpeedBonus_Special_Boots_2" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2	= "GetModifierMoveSpeedBonus_Constant_Unique_2" (string)
         MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN	= "GetModifierMoveSpeed_AbsoluteMin" (string)
         MODIFIER_PROPERTY_AVOID_DAMAGE  	= "GetModifierAvoidDamage" (string)
         MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER	= "GetModifierStatusResistanceCaster" (string)
         MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING	= "GetModifierStatusResistanceStacking" (string)
         MODIFIER_PROPERTY_STATUS_RESISTANCE	= "GetModifierStatusResistance" (string)
         MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT	= "GetModifierNegativeEvasion_Constant" (string)
         MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING	= "GetModifierPercentageManacostStacking" (string)
         MODIFIER_PROPERTY_HEALTHCOST_PERCENTAGE_STACKING	= "GetModifierPercentageHealthcostStacking" (string)
         MODIFIER_PROPERTY_EXP_RATE_BOOST	= "GetModifierPercentageExpRateBoost" (string)
         MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE	= "GetModifierPreAttack_CriticalStrike" (string)
         MODIFIER_PROPERTY_MISS_PERCENTAGE	= "GetModifierMiss_Percentage" (string)
         MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE	= "GetModifierPreAttack_Target_CriticalStrike" (string)
         MODIFIER_PROPERTY_AVOID_SPELL   	= "GetModifierAvoidSpell" (string)
         MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK	= "GetModifierMagical_ConstantBlock" (string)
         MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE	= "GetModifierBaseAttack_BonusDamage" (string)
         MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK	= "GetModifierPhysical_ConstantBlock" (string)
         MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT	= "GetModifierPreAttack_BonusDamagePostCrit" (string)
         MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL	= "GetModifierPhysical_ConstantBlockSpecial" (string)
         MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC	= "GetModifierPreAttack_BonusDamage_Proc" (string)
         MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR	= "GetModifierPhysical_ConstantBlockUnavoidablePreArmor" (string)
         MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET	= "GetModifierPreAttack_BonusDamage_Target" (string)
         MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK	= "GetModifierTotal_ConstantBlock" (string)
         MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE	= "GetModifierPreAttack_BonusDamage" (string)
         MODIFIER_PROPERTY_OVERRIDE_ANIMATION	= "GetOverrideAnimation" (string)
         MODIFIER_PROPERTY_EVASION_CONSTANT	= "GetModifierEvasion_Constant" (string)
         MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE	= "GetOverrideAnimationRate" (string)
         MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT	= "GetModifierIncomingSpellDamageConstant" (string)
         MODIFIER_PROPERTY_ABSORB_SPELL  	= "GetAbsorbSpell" (string)
         MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT	= "GetModifierIncomingPhysicalDamageConstant" (string)
         MODIFIER_PROPERTY_REFLECT_SPELL 	= "GetReflectSpell" (string)
         MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE	= "GetModifierIncomingPhysicalDamage_Percentage" (string)
         MODIFIER_PROPERTY_GOLD_RATE_BOOST	= "GetModifierPercentageGoldRateBoost" (string)
         MODIFIER_PROPERTY_DEATHGOLDCOST 	= "GetModifierConstantDeathGoldCost" (string)
         MODIFIER_PROPERTY_HEALTHCOST_PERCENTAGE	= "GetModifierPercentageHealthcost" (string)
         MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT	= "GetModifierAttackSpeedBonus_Constant" (string)
         MODIFIER_PROPERTY_FIXED_ATTACK_RATE	= "GetModifierFixedAttackRate" (string)
         MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE	= "GetModifierAttackSpeedBaseOverride" (string)
         MODIFIER_PROPERTY_MOVESPEED_LIMIT	= "GetModifierMoveSpeed_Limit" (string)
         MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT	= "GetModifierIgnoreMovespeedLimit" (string)
         MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX	= "GetModifierMoveSpeed_AbsoluteMax" (string)
         MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE	= "GetModifierMoveSpeed_Absolute" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE	= "GetModifierMoveSpeedBonus_Constant_Unique" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE	= "GetModifierMoveSpeedBonus_Special_Boots" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE	= "GetModifierMoveSpeedBonus_Percentage" (string)
         MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT	= "GetModifierMoveSpeedBonus_Constant" (string)
         MODIFIER_PROPERTY_HEALTHCOST_REDUCTION_CONSTANT	= "GetModifierHealthcostReduction_Constant" (string)
         MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION	= "GetModifierInvisibilityAttackBehaviorException" (string)
         MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT	= "GetModifierManacostReduction_Constant" (string)
         MODIFIER_PROPERTY_INVISIBILITY_LEVEL	= "GetModifierInvisibilityLevel" (string)
         MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT	= "GetModifierCooldownReduction_Constant" (string)
         MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE	= "GetModifierOverrideAttackDamage" (string)
         MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT	= "GetModifierAttackSpeed_Limit" (string)
         MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET	= "GetModifierProcAttack_BonusDamage_Magical_Target" (string)
         MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL	= "GetModifierProcAttack_BonusDamage_Magical" (string)
         MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL	= "GetModifierProcAttack_BonusDamage_Physical" (string)
         MODIFIER_EVENT_ON_DAMAGE_CALCULATED	= "OnDamageCalculated" (string)
         MODIFIER_EVENT_ON_PROCESS_CLEAVE	= "OnProcessCleave" (string)
         MODIFIER_EVENT_ON_ORB_EFFECT    	= "Unused" (string)
         MODIFIER_EVENT_ON_PROCESS_UPGRADE	= "Unused" (string)
      }
   }
   CScriptPrecacheContext          	= table: 0x002f6eb0 (table, already seen)
   DebuggerBreak                   	= function: 0x00219b50 (function)
   CEntityScriptFramework          	= table: 0x002f7248 (table, already seen)
   NativeFunctions                 	= table: 0x002f7390 (table)
   {
      metatable                       	= table: 0x002f7248 (table, already seen)
      __self                          	= userdata: 0x002f7408 (userdata)
   }
   DebugBreak                      	= function: 0x002f7550 (function)
   AddFOWViewer                    	= function: 0x00250c58 (function)
   ClearTeamCustomHealthbarColor   	= function: 0x00250b98 (function)
   _sourceline                     	= function: 0x002bbec8 (function)
   PrecacheModel                   	= function: 0x00250a28 (function)
   PrecacheResource                	= function: 0x00250970 (function)
   VectorAngles                    	= function: 0x00250840 (function)
   GetGroundHeight                 	= function: 0x00250790 (function)
   GetGroundPosition               	= function: 0x002506d8 (function)
   FindUnitsInLine                 	= function: 0x00250628 (function)
   printstack                      	= function: 0x00219a70 (function)
   FDesc                           	= table: 0x00219b88 (table)
   {
      PlayerInstanceFromIndex         	= handle PlayerInstanceFromIndex(int)
Get a script instance of a player by index. (userdata)
      GetListenServerHost             	= handle GetListenServerHost()
Get the local player on a listen server. (userdata)
      ScreenShake                     	= void ScreenShake(Vector, float, float, float, float, int, bool)
Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake (userdata)
      SpawnEntityFromTableSynchronous 	= handle SpawnEntityFromTableSynchronous(string, handle)
Synchronously spawns a single entity from a table (userdata)
      SpawnEntityFromTableAsynchronous	= void SpawnEntityFromTableAsynchronous(string, handle, handle, handle)
Asynchronously spawns a single entity from a table (userdata)
      SpawnEntityGroupFromTable       	= bool SpawnEntityGroupFromTable(handle, bool, handle)
Hierarchically spawn an entity group from a set of spawn tables. (userdata)
      SpawnEntityListFromTableSynchronous	= handle SpawnEntityListFromTableSynchronous(handle)
Synchronously spawn an entity group from a list of spawn tables. (userdata)
      SpawnEntityListFromTableAsynchronous	= int SpawnEntityListFromTableAsynchronous(handle, handle)
Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete (userdata)
      PrecacheEntityFromTable         	= void PrecacheEntityFromTable(string, handle, handle)
Precache an entity from KeyValues in table (userdata)
      PrecacheEntityListFromTable     	= void PrecacheEntityListFromTable(handle, handle)
Precache a list of entity KeyValues tables (userdata)
      AnglesToVector                  	= Vector AnglesToVector(QAngle)
Generate a vector given a QAngles (userdata)
      VectorToAngles                  	= QAngle VectorToAngles(Vector)
Get Qangles (with no roll) for a Vector. (userdata)
      RotatePosition                  	= Vector RotatePosition(Vector, QAngle, Vector)
Rotate a Vector around a point. (userdata)
      RotateOrientation               	= QAngle RotateOrientation(QAngle, QAngle)
Rotate a QAngle by another QAngle. (userdata)
      AngleDiff                       	= float AngleDiff(float, float)
Returns the number of degrees difference between two yaw angles (userdata)
      RotationDelta                   	= QAngle RotationDelta(QAngle, QAngle)
Find the delta between two QAngles. (userdata)
      EmitSoundOn                     	= void EmitSoundOn(string, handle)
Play named sound on Entity (userdata)
      EmitSoundOnClient               	= void EmitSoundOnClient(string, handle)
Play named sound only on the client for the passed in player (userdata)
      StopSoundOn                     	= void StopSoundOn(string, handle)
Stop named sound on Entity (userdata)
      SetOpvarFloatAll                	= void SetOpvarFloatAll(string, string, string, float)
Sets an opvar value for all players (userdata)
      SetOpvarFloatPlayer             	= void SetOpvarFloatPlayer(string, string, string, float, handle)
Sets an opvar value for a single player (userdata)
      CreateUniformRandomStream       	= handle CreateUniformRandomStream(int)
( iSeed ) - Creates a separate random number stream. (userdata)
      MakeStringToken                 	= int MakeStringToken(string)
Checks to see if the given hScript is a valid entity (userdata)
      QSlerp                          	= QAngle QSlerp(QAngle, QAngle, float)
(from angle, to angle, time) - Spherical lerp of angle from->to based on time (userdata)
      StartSoundEvent                 	= void StartSoundEvent(string, handle)
Start a sound event (userdata)
      StartSoundEventReliable         	= void StartSoundEventReliable(string, handle)
Start a sound event with reliable delivery (userdata)
      StartSoundEventUnreliable       	= void StartSoundEventUnreliable(string, handle)
Start a sound event with optional delivery (userdata)
      StopSoundEvent                  	= void StopSoundEvent(string, handle)
Stops a sound event with optional delivery (userdata)
      StartSoundEventFromPosition     	= void StartSoundEventFromPosition(string, Vector)
Start a sound event from position (userdata)
      StartSoundEventFromPositionReliable	= void StartSoundEventFromPositionReliable(string, Vector)
Start a sound event from position with reliable delivery (userdata)
      StartSoundEventFromPositionUnreliable	= void StartSoundEventFromPositionUnreliable(string, Vector)
Start a sound event from position with optional delivery (userdata)
      GetPhysVelocity                 	= Vector GetPhysVelocity(handle)
Get Velocity for VPHYS or normal object (userdata)
      GetPhysAngularVelocity          	= Vector GetPhysAngularVelocity(handle)
Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second. (userdata)
      SetPhysAngularVelocity          	= void SetPhysAngularVelocity(handle, Vector)
Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second. (userdata)
      Say                             	= void Say(handle, string, bool)
Have Entity say string, and teamOnly or not (userdata)
      LoadKeyValues                   	= table LoadKeyValues(string)
Creates a table from the specified keyvalues text file (userdata)
      LoadKeyValuesFromString         	= table LoadKeyValuesFromString(string)
Creates a table from the specified keyvalues string (userdata)
      DebugDrawScreenTextLine         	= void DebugDrawScreenTextLine(float, float, int, string, int, int, int, int, float)
Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration) (userdata)
      DebugScreenTextPretty           	= void DebugScreenTextPretty(float, float, int, string, int, int, int, int, float, string, int, bool)
Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold) (userdata)
      DebugDrawText                   	= void DebugDrawText(Vector, string, bool, float)
Draw text in 3d (origin, text, bViewCheck, duration) (userdata)
      DebugDrawBox                    	= void DebugDrawBox(Vector, Vector, Vector, int, int, int, int, float)
Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration ) (userdata)
      DebugDrawLine                   	= void DebugDrawLine(Vector, Vector, int, int, int, bool, float)
Draw a debug overlay line (origin, target, r, g, b, ztest, duration) (userdata)
      DebugDrawCircle                 	= void DebugDrawCircle(Vector, Vector, float, float, bool, float)
Draw a debug circle (center, vRgb, a, rad, ztest, duration) (userdata)
      DebugDrawSphere                 	= void DebugDrawSphere(Vector, Vector, float, float, bool, float)
Draw a debug sphere (center, vRgb, a, rad, ztest, duration) (userdata)
      DebugDrawLine_vCol              	= void DebugDrawLine_vCol(Vector, Vector, Vector, bool, float)
Draw a debug line using color vec (start, end, vRgb, a, ztest, duration) (userdata)
      DebugDrawBoxDirection           	= void DebugDrawBoxDirection(Vector, Vector, Vector, Vector, Vector, float, float)
Draw a debug forward box (cent, min, max, forward, vRgb, a, duration) (userdata)
      DebugDrawClear                  	= void DebugDrawClear()
Try to clear all the debug overlay info (userdata)
      ReloadMOTD                      	= void ReloadMOTD()
Reloads the MotD file (userdata)
      CreateDamageInfo                	= handle CreateDamageInfo(handle, handle, Vector, Vector, float, int)
(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object. (userdata)
      DestroyDamageInfo               	= void DestroyDamageInfo(handle)
Free a damageinfo object that was created with CreateDamageInfo(). (userdata)
      CreateEffect                    	= bool CreateEffect(handle)
Pass table - Inputs: entity, effect (userdata)
      StopEffect                      	= void StopEffect(handle, string)
Pass entity and effect name (userdata)
      TraceLine                       	= bool TraceLine(handle)
Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid (userdata)
      TraceHull                       	= bool TraceHull(handle)
Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid (userdata)
      TraceCollideable                	= bool TraceCollideable(handle)
Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal (userdata)
      GetFrameCount                   	= int GetFrameCount()
Returns the engines current frame count (userdata)
      RegisterSpawnGroupFilterProxy   	= void RegisterSpawnGroupFilterProxy(string)
Create a C proxy for a script-based spawn group filter (userdata)
      RemoveSpawnGroupFilterProxy     	= void RemoveSpawnGroupFilterProxy(string)
Remove the C proxy for a script-based spawn group filter (userdata)
      UnloadSpawnGroup                	= void UnloadSpawnGroup(string)
Unload a spawn group by name (userdata)
      UnloadSpawnGroupByHandle        	= void UnloadSpawnGroupByHandle(int)
Unload a spawn group by handle (userdata)
      GetActiveSpawnGroupHandle       	= int GetActiveSpawnGroupHandle()
Returns the currently active spawn group handle (userdata)
      ManuallyTriggerSpawnGroupCompletion	= void ManuallyTriggerSpawnGroupCompletion(int)
Triggers the creation of entities in a manually-completed spawn group (userdata)
      ExecuteOrderFromTable           	= void ExecuteOrderFromTable(handle)
Issue an order from a script table (userdata)
      DebugBreak                      	= void DebugBreak()
Breaks in the debugger (userdata)
      DoIncludeScript                 	= bool DoIncludeScript(string, handle)
Execute a script (internal) (userdata)
      GetUnitKeyValuesByName          	= table GetUnitKeyValuesByName(string)
Get unit data by ability name. (userdata)
      GetAbilityKeyValuesByName       	= table GetAbilityKeyValuesByName(string)
Get ability data by ability name. (userdata)
      GetAbilityTextureNameForAbility 	= string GetAbilityTextureNameForAbility(string)
Gets the ability texture name for an ability (userdata)
      CreateHTTPRequestScriptVM       	= handle CreateHTTPRequestScriptVM(string, string)
Create an HTTP request. (userdata)
      CreateHTTPRequest               	= handle CreateHTTPRequest(string, string)
Create an HTTP request. (userdata)
      UnitFilter                      	= int UnitFilter(handle, int, int, int, int)
Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam (userdata)
      CreateUnitFromTable             	= handle CreateUnitFromTable(handle, Vector)
Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at. (userdata)
      DoUniqueString                  	= string DoUniqueString(string)
#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table. (userdata)
      ListenToGameEvent               	= int ListenToGameEvent(string, handle, handle)
Register as a listener for a game event from script. (userdata)
      StopListeningToGameEvent        	= bool StopListeningToGameEvent(int)
Stop listening to a particular game event. (userdata)
      CreateUnitByName                	= handle CreateUnitByName(string, Vector, bool, handle, handle, int)
Creates a DOTA unit by its dota_npc_units.txt name (userdata)
      PrecacheUnitFromTableSync       	= void PrecacheUnitFromTableSync(handle, handle)
Precaches a DOTA unit from a table of entity key values. (userdata)
      PrecacheUnitFromTableAsync      	= void PrecacheUnitFromTableAsync(handle, handle)
Precaches a DOTA unit from a table of entity key values. (userdata)
      LinkLuaModifier                 	= void LinkLuaModifier(string, string, int)
Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType). (userdata)
      CreateTrigger                   	= handle CreateTrigger(Vector, Vector, Vector)
CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger (userdata)
      CreateTriggerRadiusApproximate  	= handle CreateTriggerRadiusApproximate(Vector, float)
CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided (userdata)
      UTIL_MessageTextAll             	= void UTIL_MessageTextAll(string, int, int, int, int)
Sends colored text to all clients. (userdata)
      UTIL_MessageText                	= void UTIL_MessageText(int, string, int, int, int, int)
Sends colored text to one client. (userdata)
      UTIL_MessageTextAll_WithContext 	= void UTIL_MessageTextAll_WithContext(string, int, int, int, int, handle)
Sends colored text to all clients. (Valid context keys: player_id, value, team_id) (userdata)
      UTIL_MessageText_WithContext    	= void UTIL_MessageText_WithContext(int, string, int, int, int, int, handle)
Sends colored text to one client. (Valid context keys: player_id, value, team_id) (userdata)
      UTIL_ResetMessageTextAll        	= void UTIL_ResetMessageTextAll()
Clear all message text from all clients. (userdata)
      UTIL_ResetMessageText           	= void UTIL_ResetMessageText(int)
Clear all message text on one client. (userdata)
      IsDedicatedServer               	= bool IsDedicatedServer()
Returns true if this server is a dedicated server. (userdata)
      IsServer                        	= bool IsServer()
Returns true if this is lua running from the server.dll. (userdata)
      IsClient                        	= bool IsClient()
Returns true if this is lua running from the client.dll. (userdata)
      IsInToolsMode                   	= bool IsInToolsMode()
Returns true if this is lua running within tools mode. (userdata)
      CalcClosestPointOnEntityOBB     	= Vector CalcClosestPointOnEntityOBB(handle, Vector)
Compute the closest point on the OBB of an entity. (userdata)
      CalcDistanceBetweenEntityOBB    	= float CalcDistanceBetweenEntityOBB(handle, handle)
Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping. (userdata)
      CalcDistanceToLineSegment2D     	= float CalcDistanceToLineSegment2D(Vector, Vector, Vector)
 (userdata)
      CreateUnitByNameAsync           	= int CreateUnitByNameAsync(string, Vector, bool, handle, handle, int, handle)
Creates a DOTA unit by its dota_npc_units.txt name (userdata)
      PrecacheUnitByNameSync          	= void PrecacheUnitByNameSync(string, handle, int)
Precaches a DOTA unit by its dota_npc_units.txt name (userdata)
      PrecacheUnitByNameAsync         	= void PrecacheUnitByNameAsync(string, handle, int)
Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished. (userdata)
      PrecacheItemByNameSync          	= void PrecacheItemByNameSync(string, handle)
Precaches a DOTA item by its dota_npc_items.txt name (userdata)
      PrecacheItemByNameAsync         	= void PrecacheItemByNameAsync(string, handle)
Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished. (userdata)
      CreateHeroForPlayer             	= handle CreateHeroForPlayer(string, handle)
Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero (userdata)
      CreateItem                      	= handle CreateItem(string, handle, handle)
Create a DOTA item (userdata)
      RollPseudoRandomPercentage      	= bool RollPseudoRandomPercentage(unsigned, int, handle)
( chance, pseudo random id, unit. (userdata)
      CreateIllusions                 	= table CreateIllusions(handle, handle, handle, int, int, bool, bool)
Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) 
Supported keys: 
outgoing_damage
incoming_damage
bounty_base
bounty_growth
outgoing_damage_structure
outgoing_damage_roshan (userdata)
      GetItemCost                     	= int GetItemCost(string)
Get the cost of an item by name. (userdata)
      CreateItemOnPositionSync        	= handle CreateItemOnPositionSync(Vector, handle)
Create a physical item at a given location (userdata)
      CenterCameraOnUnit              	= void CenterCameraOnUnit(int, handle)
CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit. (userdata)
      DOTA_SpawnMapAtPosition         	= int DOTA_SpawnMapAtPosition(string, Vector, bool, handle, handle, handle)
Spawn a .vmap at the target location. (userdata)
      RegisterCustomAnimationScriptForModel	= void RegisterCustomAnimationScriptForModel(string, string)
Register a custom animation script to run when a model loads (userdata)
      DoCleaveAttack                  	= int DoCleaveAttack(handle, handle, handle, float, float, float, float, string)
(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName) (userdata)
      LimitPathingSearchDepth         	= void LimitPathingSearchDepth(float)
Set the limit on the pathfinding search space. (userdata)
      SpawnDOTAShopTriggerRadiusApproximate	= handle SpawnDOTAShopTriggerRadiusApproximate(Vector, float)
(Vector vOrigin, float flRadius ) (userdata)
      GetTeamHeroKills                	= int GetTeamHeroKills(int)
( int teamID ) (userdata)
      GetTeamName                     	= string GetTeamName(int)
( int teamID ) (userdata)
      GetLobbyEventGameDetails        	= table GetLobbyEventGameDetails()
( ) (userdata)
      GetDedicatedServerKeyV3         	= string GetDedicatedServerKeyV3(string)
( version ) (userdata)
      GetDedicatedServerKeyV2         	= string GetDedicatedServerKeyV2(string)
( version ) (userdata)
      GetDedicatedServerKey           	= string GetDedicatedServerKey(string)
( version ) (userdata)
      UpdateEventPoints               	= void UpdateEventPoints(handle)
( hEventPointData ) (userdata)
      HeroMaxLevel                    	= void HeroMaxLevel(handle)
Max out a hero's level and give them all appropriate abilities and talents. (userdata)
      GetXPNeededToReachNextLevel     	= int GetXPNeededToReachNextLevel(int)
Get amount of XP required to reach the next level. (userdata)
      IsUnitInValidPosition           	= bool IsUnitInValidPosition(handle)
Returns true if the unit is in a valid position in the gridnav. (userdata)
      GetPotentialNeutralItemDrop     	= string GetPotentialNeutralItemDrop(int, int)
Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables. (userdata)
      RecordNeutralItemEarned         	= void RecordNeutralItemEarned(handle, handle, int)
Record in player resources that a new neutral item has been created, if it hasn't already been, and show a toast. (userdata)
      DropNeutralItemAtPositionForHeroWithOffset	= handle DropNeutralItemAtPositionForHeroWithOffset(string, Vector, handle, int, bool, Vector)
Drop a neutral item for the team of the hero at the given tier. (userdata)
      DropNeutralItemAtPositionForHero	= handle DropNeutralItemAtPositionForHero(string, Vector, handle, int, bool)
Drop a neutral item for the team of the hero at the given tier. (userdata)
      GetTargetLinearLocation         	= Vector GetTargetLinearLocation(int, int, int, Vector, int, int, int)
 (userdata)
      GetTargetAOELocation            	= Vector GetTargetAOELocation(int, int, int, Vector, int, int, int)
 (userdata)
      DotProduct                      	= float DotProduct(Vector, Vector)
 (userdata)
      DisconnectClient                	= void DisconnectClient(int, bool)
Kick a specific player from the game (userdata)
      CreateModifierThinker           	= handle CreateModifierThinker(handle, handle, string, handle, Vector, int, bool)
Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker ) (userdata)
      MinimapEvent                    	= void MinimapEvent(int, handle, int, int, int, int)
Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration). (userdata)
      EmitSoundOnLocationForPlayer    	= void EmitSoundOnLocationForPlayer(string, Vector, int)
Emit a sound on a location for only a specific player (userdata)
      EmitSoundOnEntityForPlayer      	= void EmitSoundOnEntityForPlayer(string, handle, int)
Emit a sound on an entity for only a specific player (userdata)
      EmitAnnouncerSoundForPlayer     	= void EmitAnnouncerSoundForPlayer(string, int)
Emit an announcer sound for a player. (userdata)
      EmitAnnouncerSoundForTeamOnLocation	= void EmitAnnouncerSoundForTeamOnLocation(string, int, Vector)
Emit an announcer sound for a team at a specific location. (userdata)
      EmitAnnouncerSoundForTeam       	= void EmitAnnouncerSoundForTeam(string, int)
Emit an announcer sound for a team. (userdata)
      EmitAnnouncerSound              	= void EmitAnnouncerSound(string)
Emit an announcer sound for all players. (userdata)
      EmitSoundOnLocationForAllies    	= void EmitSoundOnLocationForAllies(Vector, string, handle)
Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster (userdata)
      EmitSoundOnLocationWithCaster   	= void EmitSoundOnLocationWithCaster(Vector, string, handle)
Emit a sound on a location from a unit. (vLocation, soundName, hCaster). (userdata)
      ResolveNPCPositions             	= void ResolveNPCPositions(Vector, float)
Check and fix units that have been assigned a position inside collision radius of other NPCs. (userdata)
      RemoveFOWViewer                 	= void RemoveFOWViewer(int, int)
Remove temporary vision for a given team ( nTeamID, nViewerID ) (userdata)
      AddFOWViewer                    	= int AddFOWViewer(int, Vector, float, float, bool)
Add temporary vision for a given team, returns a ViewerID ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision) (userdata)
      ClearTeamCustomHealthbarColor   	= void ClearTeamCustomHealthbarColor(int)
( teamNumber ) (userdata)
      SetTeamCustomHealthbarColor     	= void SetTeamCustomHealthbarColor(int, int, int, int)
( teamNumber, r, g, b ) (userdata)
      PrecacheModel                   	= void PrecacheModel(string, handle)
( modelName, context ) - Manually precache a single model (userdata)
      PrecacheResource                	= void PrecacheResource(string, string, handle)
Manually precache a single resource (userdata)
      VectorAngles                    	= QAngle VectorAngles(Vector)
 (userdata)
      GetGroundHeight                 	= float GetGroundHeight(Vector, handle)
 (userdata)
      GetGroundPosition               	= Vector GetGroundPosition(Vector, handle)
Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset. (userdata)
      FindUnitsInLine                 	= table FindUnitsInLine(int, Vector, Vector, handle, float, int, int, int)
Find units that intersect the given line with the given flags. (userdata)
      DebugCreateUnit                 	= int DebugCreateUnit(handle, string, int, bool, handle)
Creates a test unit controllable by the specified player. (userdata)
      FindClearRandomPositionAroundUnit	= bool FindClearRandomPositionAroundUnit(handle, handle, int)
Finds a clear random position around a given target unit, using the target unit's padded collision radius. (userdata)
      FindUnitsInRadius               	= table FindUnitsInRadius(int, Vector, handle, float, int, int, int, int, bool)
Finds the units in a given radius with the given flags. (userdata)
      GetClearSpaceForUnit            	= Vector GetClearSpaceForUnit(handle, Vector)
Returns a location for the unit that is not already occupied. (userdata)
      FindClearSpaceForUnit           	= bool FindClearSpaceForUnit(handle, Vector, bool)
Place a unit somewhere not already occupied. (userdata)
      CreateItemOnPositionForLaunch   	= handle CreateItemOnPositionForLaunch(Vector, handle)
Create a physical item at a given location, can start in air (but doesn't clear a space) (userdata)
      ApplyDamage                     	= float ApplyDamage(handle)
Damage an npc. (userdata)
      CreateRune                      	= handle CreateRune(Vector, int)
Create a rune of the specified type (vLocation, iRuneType). (userdata)
      CreateTempTree                  	= handle CreateTempTree(Vector, float)
Create a temporary tree, uses a default tree model. (vLocation, flDuration). (userdata)
      CreateTempTreeWithModel         	= handle CreateTempTreeWithModel(Vector, float, string)
Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName). (userdata)
      IsMangoTree                     	= bool IsMangoTree(handle)
Is this entity a mango tree? (hEntity). (userdata)
      GetEntityIndexForTreeId         	= int GetEntityIndexForTreeId(unsigned)
Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE. (userdata)
      GetTreeIdForEntityIndex         	= int GetTreeIdForEntityIndex(int)
Given and entity index of a tree, get the tree id for use for use with with unit orders. (userdata)
      IsLocationVisible               	= bool IsLocationVisible(int, Vector)
Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation). (userdata)
      ShowGenericPopup                	= void ShowGenericPopup(string, string, string, string, int)
Show a generic popup dialog for all players. (userdata)
      ShowGenericPopupToPlayer        	= void ShowGenericPopupToPlayer(handle, string, string, string, string, int)
Show a generic popup dialog to a specific player. (userdata)
      GetItemDefOwnedCount            	= int GetItemDefOwnedCount(int, int)
 (userdata)
      GetItemDefQuantity              	= int GetItemDefQuantity(int, int)
 (userdata)
      ShowCustomHeaderMessage         	= void ShowCustomHeaderMessage(string, int, int, float)
( const char *pszMessage, PlayerID_t nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName (userdata)
      SendOverheadEventMessage        	= void SendOverheadEventMessage(handle, int, handle, int, handle)
( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_* (userdata)
      FindSpawnEntityForTeam          	= handle FindSpawnEntityForTeam(int)
Find a spawn point for the given team. (userdata)
      SpawnEffigyOfUnitOrModel        	= handle SpawnEffigyOfUnitOrModel(string, int, Vector, Vector, float, float, int)
Spawn an effigy of the target unit. (userdata)
      SpawnMangoTree                  	= handle SpawnMangoTree(Vector, int, float, float, int)
Spawn a mango tree ( vPos, nTeam, flDuration, flMangoInterval, nInitialMangoes ) (userdata)
      Script_RemapValClamped          	= float Script_RemapValClamped(float, float, float, float, float)
RemapValClamped (userdata)
      IsMarkedForDeletion             	= bool IsMarkedForDeletion(handle)
Returns true if the entity is valid and marked for deletion. (userdata)
      RandomFloat                     	= float RandomFloat(float, float)
Get a random float within a range (userdata)
      RandomVector                    	= Vector RandomVector(float)
Get a random 2D vector of the given length. (userdata)
      RollPercentage                  	= bool RollPercentage(int)
(int nPct) (userdata)
      GetWorldMinX                    	= float GetWorldMinX()
Gets the world's minimum X position. (userdata)
      GetWorldMinY                    	= float GetWorldMinY()
Gets the world's minimum Y position. (userdata)
      GetWorldMaxX                    	= float GetWorldMaxX()
Gets the world's maximum X position. (userdata)
      GetWorldMaxY                    	= float GetWorldMaxY()
Gets the world's maximum Y position. (userdata)
      GetSystemTime                   	= string GetSystemTime()
Get the current real world time (userdata)
      GetSystemTimeMS                 	= double GetSystemTimeMS()
Get system time in milliseconds (userdata)
      GetSystemDate                   	= string GetSystemDate()
Get the current real world date (userdata)
      PauseGame                       	= void PauseGame(bool)
Pause or unpause the game. (userdata)
      EmitGlobalSound                 	= void EmitGlobalSound(string)
Play named sound for all players (userdata)
      StopGlobalSound                 	= void StopGlobalSound(string)
Stop named sound for all players (userdata)
      FrameTime                       	= float FrameTime()
Get the time spent on the server in the last frame (userdata)
      Script_RandomFloat              	= float Script_RandomFloat(float, float)
Get a random float within a range (userdata)
      CancelEntityIOEvents            	= void CancelEntityIOEvents(ehandle)
Create all I/O events for a particular entity (userdata)
      GetMaxOutputDelay               	= float GetMaxOutputDelay(ehandle, string)
Get the longest delay for all events attached to an output (userdata)
      ExponentialDecay                	= float ExponentialDecay(float, float, float)
Smooth curve decreasing slower as it approaches zero (userdata)
      SplineVectors                   	= Vector SplineVectors(Vector, Vector, float)
(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1] (userdata)
      SplineQuaternions               	= Quaternion SplineQuaternions(Quaternion, Quaternion, float)
(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1] (userdata)
      AxisAngleToQuaternion           	= Quaternion AxisAngleToQuaternion(Vector, float)
(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis (userdata)
      RotateQuaternionByAxisAngle     	= Quaternion RotateQuaternionByAxisAngle(Quaternion, Vector, float)
(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis (userdata)
      LerpVectors                     	= Vector LerpVectors(Vector, Vector, float)
(vector,vector,float) lerp between two vectors by a float factor returning new vector (userdata)
      CrossVectors                    	= Vector CrossVectors(Vector, Vector)
(vector,vector) cross product between two vectors (userdata)
      RotationDeltaAsAngularVelocity  	= Vector RotationDeltaAsAngularVelocity(QAngle, QAngle)
converts delta QAngle to an angular velocity Vector (userdata)
      FireEntityIOInputVec            	= void FireEntityIOInputVec(ehandle, string, Vector)
Fire Entity's Action Input with passed Vector - you own the memory (userdata)
      FireEntityIOInputString         	= void FireEntityIOInputString(ehandle, string, string)
Fire Entity's Action Input with passed String - you own the memory (userdata)
      FireEntityIOInputNameOnly       	= void FireEntityIOInputNameOnly(ehandle, string)
Fire Entity's Action Input w/no data (userdata)
      SetRenderingEnabled             	= void SetRenderingEnabled(ehandle, bool)
Set rendering on/off for an ehandle (userdata)
      cvar_getf                       	= float cvar_getf(string)
Gets the value of the given cvar, as a float. (userdata)
      cvar_setf                       	= bool cvar_setf(string, float)
Sets the value of the given cvar, as a float. (userdata)
      ShowMessage                     	= void ShowMessage(string)
Print a hud message on all clients (userdata)
      GetMapName                      	= string GetMapName()
Get the name of the map. (userdata)
      SetQuestName                    	= void SetQuestName(string)
Set the current quest name. (userdata)
      SetQuestPhase                   	= void SetQuestPhase(int)
Set the current quest phase. (userdata)
      SendToConsole                   	= void SendToConsole(string)
Send a string to the console as a client command (userdata)
      SendToServerConsole             	= void SendToServerConsole(string)
Send a string to the console as a server command (userdata)
      PrintLinkedConsoleMessage       	= void PrintLinkedConsoleMessage(string, string)
Print a console message with a linked console command (userdata)
      InitLogFile                     	= void InitLogFile(string, string)
InitLogFile is deprecated. Print to the console for logging instead. (userdata)
      AppendToLogFile                 	= void AppendToLogFile(string, string)
AppendToLogFile is deprecated. Print to the console for logging instead. (userdata)
      DoScriptAssert                  	= void DoScriptAssert(bool, string)
#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog. (userdata)
      Time                            	= float Time()
Get the current server time (userdata)
      Plat_FloatTime                  	= float Plat_FloatTime()
Get the current float time from the engine (userdata)
      LocalTime                       	= table LocalTime()
Get the current local time (userdata)
      UTIL_Remove                     	= void UTIL_Remove(handle)
Removes the specified entity (userdata)
      UTIL_RemoveImmediate            	= void UTIL_RemoveImmediate(handle)
Immediately removes the specified entity (userdata)
      DoEntFire                       	= void DoEntFire(string, string, string, float, handle, handle)
#EntFire:Generate and entity i/o event (userdata)
      CreateSceneEntity               	= handle CreateSceneEntity(string)
Create a scene entity to play the specified scene. (userdata)
      DoEntFireByInstanceHandle       	= void DoEntFireByInstanceHandle(handle, string, string, float, handle, handle)
#EntFireByHandle:Generate and entity i/o event (userdata)
      IsValidEntity                   	= bool IsValidEntity(handle)
Checks to see if the given hScript is a valid entity (userdata)
      RandomFloatWrapper              	= float RandomFloatWrapper(float, float)
Generate a random floating point number within a range, inclusive (userdata)
      RandomInt                       	= int RandomInt(int, int)
Get a random int within a range (userdata)
      Msg                             	= void Msg(string)
Print a message (userdata)
      Warning                         	= void Warning(string)
Print a warning (userdata)
      StopListeningToAllGameEvents    	= void StopListeningToAllGameEvents(handle)
Stop listening to all game events within a specific context. (userdata)
      FireGameEvent                   	= void FireGameEvent(string, handle)
Fire a game event. (userdata)
      FireGameEventLocal              	= void FireGameEventLocal(string, handle)
Fire a game event without broadcasting to the client. (userdata)
      EntIndexToHScript               	= handle EntIndexToHScript(int)
Turn an entity index integer to an HScript representing that entity's script instance. (userdata)
      UserIDToControllerHScript       	= handle UserIDToControllerHScript(int)
Turn a userid integer (typically, fields named 'userid' in game events) to an HScript representing the associated player controller's script instance. (userdata)
   }
   FindUnitsInRadius               	= function: 0x002503f8 (function)
   FindClearSpaceForUnit           	= function: 0x00250288 (function)
   CreateItemOnPositionForLaunch   	= function: 0x002501c8 (function)
   CreateItemOnPositionSync        	= function: 0x00250108 (function)
   CreateIllusions                 	= function: 0x0024ffa8 (function)
   RollPseudoRandomPercentage      	= function: 0x0024fee8 (function)
   DumpScriptBindings              	= function: 0x00337db8 (function)
   CreateHeroForPlayer             	= function: 0x0024fd80 (function)
   PrecacheItemByNameAsync         	= function: 0x0024fcc8 (function)
   PrecacheItemByNameSync          	= function: 0x0024fc10 (function)
   PrecacheUnitByNameSync          	= function: 0x00337a28 (function)
   QAngle                          	= function: 0x00219068 (function)
   CreateUnitFromTable             	= function: 0x00247be8 (function)
   PrecacheUnitFromTableSync       	= function: 0x00247a68 (function)
   CreateUnitByName                	= function: 0x002479b0 (function)
   StopGlobalSound                 	= function: 0x00247900 (function)
   Vector                          	= function: 0x00218c38 (function)
   bit                             	= table: 0x00217f10 (table, already seen)
   debug                           	= table: 0x00217768 (table, already seen)
   AE_CL_CREATE_PARTICLE_EFFECT    	= 7 (number)
   AE_CL_CREATE_PARTICLE_EFFECT_CFG	= 9 (number)
   AE_SV_CREATE_PARTICLE_EFFECT_CFG	= 10 (number)
   AE_SV_STOP_PARTICLE_EFFECT      	= 11 (number)
   AE_FOOTSTEP                     	= 12 (number)
   AE_CL_STOP_RAGDOLL_CONTROL      	= 14 (number)
   AE_CL_ENABLE_BODYGROUP          	= 15 (number)
   AE_CL_DISABLE_BODYGROUP         	= 16 (number)
   AE_BODYGROUP_SET_VALUE          	= 17 (number)
   AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN	= 18 (number)
   AE_WEAPON_PERFORM_ATTACK        	= 19 (number)
   AE_FIRE_INPUT                   	= 20 (number)
   AE_CL_CLOTH_ATTR                	= 21 (number)
   AE_CL_CLOTH_GROUND_OFFSET       	= 22 (number)
   AE_CL_CLOTH_STIFFEN             	= 23 (number)
   AE_CL_CLOTH_EFFECT              	= 24 (number)
   AE_PULSE_GRAPH                  	= 27 (number)
   AE_PULSE_GRAPH_LOOKAT           	= 28 (number)
   AE_PULSE_GRAPH_AIMAT            	= 29 (number)
   ScriptFunctionHelp              	= function: 0x00337de8 (function)
   AE_PULSE_GRAPH_IKLOCKRIGHTARM   	= 31 (number)
   AE_CL_SUPPRESS_EVENTS_WITH_TAG  	= 32 (number)
   AE_CL_HIDE_PARTICLE_EFFECT      	= 33 (number)
   AE_CL_SHOW_PARTICLE_EFFECT      	= 34 (number)
   AE_CL_ADD_PARTICLE_EFFECT_CP    	= 35 (number)
   AE_CL_SPEECH                    	= 36 (number)
   AE_CL_PANORAMA_EVENT            	= 37 (number)
   AE_CL_DOTA_PLAY_STATUS_EFFECT   	= 38 (number)
   AE_CL_DOTA_STOP_STATUS_EFFECT   	= 39 (number)
   AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT	= 40 (number)
   AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT	= 41 (number)
   AE_DOTA_PET_ITEM_PICKUP         	= 42 (number)
   AE_DOTA_PET_ITEM_DROP           	= 43 (number)
   AE_DOTA_SUPPRESS_CONSTANT_LAYER 	= 44 (number)
   AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL	= 45 (number)
   AE_DOTA_CREATE_CLINKZ_ATTACK    	= 46 (number)
   AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB	= 47 (number)
   GetFunctionSignature            	= function: 0x00337e18 (function)
   AE_DOTA_SWITCH_ATTACK_COMBO     	= 49 (number)
   print                           	= function: 0x002199f0 (function)
   newproxy                        	= function: builtin#28 (function)
   collectgarbage                  	= function: builtin#27 (function)
   gcinfo                          	= function: builtin#26 (function)
   dofile                          	= function: 0x00219ae8 (function)
   loadstring                      	= function: builtin#24 (function)
   load                            	= function: builtin#23 (function)
   loadfile                        	= function: 0x00219ab0 (function)
   xpcall                          	= function: builtin#21 (function)
   pcall                           	= function: builtin#20 (function)
   error                           	= function: builtin#19 (function)
   tostring                        	= function: builtin#18 (function)
   tonumber                        	= function: builtin#17 (function)
   select                          	= function: builtin#16 (function)
   unpack                          	= function: builtin#15 (function)
   rawequal                        	= function: builtin#14 (function)
   rawset                          	= function: builtin#13 (function)
   rawget                          	= function: builtin#12 (function)
   setfenv                         	= function: builtin#11 (function)
   getfenv                         	= function: builtin#10 (function)
   setmetatable                    	= function: builtin#9 (function)
   getmetatable                    	= function: builtin#8 (function)
   ipairs                          	= function: builtin#7 (function)
   pairs                           	= function: builtin#5 (function)
   next                            	= function: builtin#4 (function)
   type                            	= function: builtin#3 (function)
   table                           	= table: 0x00215250 (table, already seen)
   string                          	= table: 0x00215e58 (table, already seen)
   assert                          	= function: builtin#2 (function)
   _G                              	= table: 0x00211d90 (table, already seen)
   DoEntFireByInstanceHandle       	= function: 0x00245f48 (function)
   IsValidEntity                   	= function: 0x00246008 (function)
   IsMarkedForDeletion             	= function: 0x002460b8 (function)
   DoUniqueString                  	= function: 0x00246170 (function)
   ListenToGameEvent               	= function: 0x00246220 (function)
   StopListeningToGameEvent        	= function: 0x002462d8 (function)
   StopListeningToAllGameEvents    	= function: 0x00246398 (function)
   FireGameEvent                   	= function: 0x00246458 (function)
   FireGameEventLocal              	= function: 0x00246508 (function)
   EntIndexToHScript               	= function: 0x002465c0 (function)
   UserIDToControllerHScript       	= function: 0x00246678 (function)
   PlayerInstanceFromIndex         	= function: 0x00246738 (function)
   GetListenServerHost             	= function: 0x002467f0 (function)
   ScreenShake                     	= function: 0x002468a8 (function)
   SpawnEntityFromTableSynchronous 	= function: 0x00246958 (function)
   SpawnEntityFromTableAsynchronous	= function: 0x00246a18 (function)
   SpawnEntityGroupFromTable       	= function: 0x00246ae0 (function)
   SpawnEntityListFromTableSynchronous	= function: 0x00246ba0 (function)
   SpawnEntityListFromTableAsynchronous	= function: 0x00246c68 (function)
   PrecacheEntityFromTable         	= function: 0x00246d30 (function)
   PrecacheEntityListFromTable     	= function: 0x00246de8 (function)
   AnglesToVector                  	= function: 0x00246ea8 (function)
   RotationDelta                   	= function: 0x00245818 (function)
   QSlerp                          	= function: 0x00245dc0 (function)
   StartSoundEvent                 	= function: 0x00247e90 (function)
   StartSoundEventReliable         	= function: 0x00247f40 (function)
   StartSoundEventUnreliable       	= function: 0x00247ff8 (function)
   StartSoundEventFromPosition     	= function: 0x00248268 (function)
   StartSoundEventFromPositionReliable	= function: 0x00248328 (function)
   CDOTA_BaseNPC_Creature          	= table: 0x002a3930 (table, already seen)
   GetPhysVelocity                 	= function: 0x002484b8 (function)
   GetPhysAngularVelocity          	= function: 0x00248568 (function)
   SetPhysAngularVelocity          	= function: 0x00248620 (function)
   Say                             	= function: 0x002486d8 (function)
   LoadKeyValues                   	= function: 0x00248780 (function)
   LoadKeyValuesFromString         	= function: 0x00248830 (function)
   DebugDrawScreenTextLine         	= function: 0x002488e8 (function)
   DebugScreenTextPretty           	= function: 0x002489a0 (function)
   DebugDrawText                   	= function: 0x00248a58 (function)
   DebugDrawBox                    	= function: 0x00248b08 (function)
   DebugDrawLine                   	= function: 0x00248bb8 (function)
   AE_SV_IKLOCK                    	= 26 (number)
   AE_CL_CREATE_ANIM_SCOPE_PROP    	= 25 (number)
   AE_RAGDOLL                      	= 13 (number)
   AE_CL_STOP_PARTICLE_EFFECT      	= 8 (number)
   AE_CL_PLAYSOUND_LOOPING         	= 6 (number)
   AE_CL_STOPSOUND                 	= 5 (number)
   AE_SV_PLAYSOUND                 	= 4 (number)
   AE_CL_PLAYSOUND_POSITION        	= 3 (number)
   AE_CL_PLAYSOUND_ATTACHMENT      	= 2 (number)
   AE_CL_PLAYSOUND                 	= 1 (number)
   AE_EMPTY                        	= 0 (number)
   ACT_DOTA_DEFEAT_STATUE          	= 1782 (number)
   TEST                            	= 1781 (number)
   CDOTA_BaseNPC_Trap_Ward         	= table: 0x002a57d0 (table, already seen)
   DOTA_DEFAULT_UI_ACTION_PANEL    	= 3 (number)
   DOTA_DEFAULT_UI_ACTION_MINIMAP  	= 4 (number)
   DOTA_DEFAULT_UI_INVENTORY_PANEL 	= 5 (number)
   DOTA_DEFAULT_UI_INVENTORY_SHOP  	= 6 (number)
   DOTA_DEFAULT_UI_INVENTORY_ITEMS 	= 7 (number)
   DOTA_DEFAULT_UI_INVENTORY_QUICKBUY	= 8 (number)
   DOTA_DEFAULT_UI_INVENTORY_COURIER	= 9 (number)
   DOTA_DEFAULT_UI_INVENTORY_PROTECT	= 10 (number)
   DOTA_DEFAULT_UI_INVENTORY_GOLD  	= 11 (number)
   DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS	= 12 (number)
   DOTA_DEFAULT_UI_SHOP_COMMONITEMS	= 13 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS	= 14 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME	= 15 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK	= 16 (number)
   DOTA_DEFAULT_UI_HERO_SELECTION_HEADER	= 17 (number)
   DOTA_DEFAULT_UI_TOP_MENU_BUTTONS	= 18 (number)
   DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND	= 19 (number)
   DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM	= 20 (number)
   DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM	= 21 (number)
   DOTA_DEFAULT_UI_TOP_BAR_SCORE   	= 22 (number)
   DOTA_DEFAULT_UI_ENDGAME         	= 23 (number)
   DOTA_DEFAULT_UI_ENDGAME_CHAT    	= 24 (number)
   DOTA_DEFAULT_UI_QUICK_STATS     	= 25 (number)
   DOTA_DEFAULT_UI_PREGAME_STRATEGYUI	= 26 (number)
   DOTA_DEFAULT_UI_KILLCAM         	= 27 (number)
   DOTA_DEFAULT_UI_FIGHT_RECAP     	= 28 (number)
   DOTA_DEFAULT_UI_TOP_BAR         	= 29 (number)
   DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS	= 30 (number)
   DOTA_DEFAULT_UI_AGHANIMS_STATUS 	= 31 (number)
   DOTA_DEFAULT_UI_ELEMENT_COUNT   	= 32 (number)
   ACT_DOTA_GREET                  	= 1690 (number)
   DOTA_ModifyXP_Unspecified       	= 0 (number)
   DOTA_ModifyXP_HeroKill          	= 1 (number)
   DOTA_ModifyXP_CreepKill         	= 2 (number)
   DOTA_ModifyXP_RoshanKill        	= 3 (number)
   DOTA_ModifyXP_TomeOfKnowledge   	= 4 (number)
   DOTA_ModifyXP_Outpost           	= 5 (number)
   DOTA_ModifyXP_MAX               	= 6 (number)
   ACT_DOTA_LOADOUT_RARE           	= 1683 (number)
   OVERHEAD_ALERT_GOLD             	= 0 (number)
   OVERHEAD_ALERT_DENY             	= 1 (number)
   OVERHEAD_ALERT_CRITICAL         	= 2 (number)
   OVERHEAD_ALERT_XP               	= 3 (number)
   OVERHEAD_ALERT_BONUS_SPELL_DAMAGE	= 4 (number)
   OVERHEAD_ALERT_MISS             	= 5 (number)
   OVERHEAD_ALERT_DAMAGE           	= 6 (number)
   OVERHEAD_ALERT_EVADE            	= 7 (number)
   OVERHEAD_ALERT_BLOCK            	= 8 (number)
   OVERHEAD_ALERT_BONUS_POISON_DAMAGE	= 9 (number)
   OVERHEAD_ALERT_HEAL             	= 10 (number)
   OVERHEAD_ALERT_MANA_ADD         	= 11 (number)
   OVERHEAD_ALERT_MANA_LOSS        	= 12 (number)
   OVERHEAD_ALERT_LAST_HIT_EARLY   	= 13 (number)
   EmitSoundOnEntityForPlayer      	= function: 0x002512f0 (function)
   MinimapEvent                    	= function: 0x00251470 (function)
   CreateModifierThinker           	= function: 0x00251520 (function)
   DisconnectClient                	= function: 0x002515d8 (function)
   DotProduct                      	= function: 0x00251690 (function)
   GetTargetAOELocation            	= function: 0x00251740 (function)
   GetTargetLinearLocation         	= function: 0x002517f8 (function)
   DropNeutralItemAtPositionForHero	= function: 0x002518b0 (function)
   DropNeutralItemAtPositionForHeroWithOffset	= function: 0x00251978 (function)
   RecordNeutralItemEarned         	= function: 0x00251a48 (function)
   GetPotentialNeutralItemDrop     	= function: 0x00251b00 (function)
   IsUnitInValidPosition           	= function: 0x00251bc0 (function)
   GetXPNeededToReachNextLevel     	= function: 0x00251c78 (function)
   HeroMaxLevel                    	= function: 0x00251d38 (function)
   UpdateEventPoints               	= function: 0x00251de8 (function)
   GetDedicatedServerKey           	= function: 0x00251ea0 (function)
   GetDedicatedServerKeyV2         	= function: 0x00251f58 (function)
   GetDedicatedServerKeyV3         	= function: 0x00252010 (function)
   GetLobbyEventGameDetails        	= function: 0x002520c8 (function)
   GetTeamName                     	= function: 0x00252188 (function)
   SpawnDOTAShopTriggerRadiusApproximate	= function: 0x002522f0 (function)
   LimitPathingSearchDepth         	= function: 0x002523b8 (function)
   DoCleaveAttack                  	= function: 0x00252470 (function)
   RegisterCustomAnimationScriptForModel	= function: 0x002525a0 (function)
   DOTA_SpawnMapAtPosition         	= function: 0x00252668 (function)
   CenterCameraOnUnit              	= function: 0x00252720 (function)
   ACT_OBJ_RUNNING                 	= 466 (number)
   ACT_OBJ_IDLE                    	= 467 (number)
   ACT_OBJ_PLACING                 	= 468 (number)
   ACT_OBJ_DETERIORATING           	= 469 (number)
   ACT_OBJ_UPGRADING               	= 470 (number)
   ACT_DEPLOY                      	= 471 (number)
   ACT_DEPLOY_IDLE                 	= 472 (number)
   ACT_UNDEPLOY                    	= 473 (number)
   ACT_CROSSBOW_DRAW_UNLOADED      	= 474 (number)
   ACT_GAUSS_SPINUP                	= 475 (number)
   ACT_GAUSS_SPINCYCLE             	= 476 (number)
   ACT_VM_PRIMARYATTACK_SILENCED   	= 477 (number)
   ACT_VM_RELOAD_SILENCED          	= 478 (number)
   ACT_VM_DRYFIRE_SILENCED         	= 479 (number)
   ACT_VM_IDLE_SILENCED            	= 480 (number)
   ACT_VM_DRAW_SILENCED            	= 481 (number)
   ACT_VM_IDLE_EMPTY_LEFT          	= 482 (number)
   ACT_VM_DRYFIRE_LEFT             	= 483 (number)
   ACT_VM_IS_DRAW                  	= 484 (number)
   ACT_VM_IS_HOLSTER               	= 485 (number)
   ACT_VM_IS_IDLE                  	= 486 (number)
   ACT_VM_IS_PRIMARYATTACK         	= 487 (number)
   ACT_PLAYER_IDLE_FIRE            	= 488 (number)
   ACT_PLAYER_CROUCH_FIRE          	= 489 (number)
   ACT_PLAYER_CROUCH_WALK_FIRE     	= 490 (number)
   ACT_PLAYER_WALK_FIRE            	= 491 (number)
   ACT_PLAYER_RUN_FIRE             	= 492 (number)
   ACT_IDLETORUN                   	= 493 (number)
   ACT_RUNTOIDLE                   	= 494 (number)
   ACT_VM_DRAW_DEPLOYED            	= 495 (number)
   ACT_HL2MP_IDLE_MELEE            	= 496 (number)
   ACT_HL2MP_RUN_MELEE             	= 497 (number)
   ACT_HL2MP_IDLE_CROUCH_MELEE     	= 498 (number)
   ACT_HL2MP_WALK_CROUCH_MELEE     	= 499 (number)
   ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE	= 500 (number)
   ACT_HL2MP_GESTURE_RELOAD_MELEE  	= 501 (number)
   ACT_HL2MP_JUMP_MELEE            	= 502 (number)
   ACT_MP_STAND_IDLE               	= 503 (number)
   ACT_MP_CROUCH_IDLE              	= 504 (number)
   ACT_MP_CROUCH_DEPLOYED_IDLE     	= 505 (number)
   ACT_MP_CROUCH_DEPLOYED          	= 506 (number)
   ACT_MP_DEPLOYED_IDLE            	= 507 (number)
   ACT_MP_RUN                      	= 508 (number)
   ACT_MP_WALK                     	= 509 (number)
   ACT_MP_AIRWALK                  	= 510 (number)
   ACT_MP_CROUCHWALK               	= 511 (number)
   ACT_MP_SPRINT                   	= 512 (number)
   ACT_MP_JUMP                     	= 513 (number)
   ACT_MP_JUMP_START               	= 514 (number)
   ACT_MP_JUMP_FLOAT               	= 515 (number)
   ACT_MP_JUMP_LAND                	= 516 (number)
   ACT_MP_DOUBLEJUMP               	= 517 (number)
   ACT_MP_SWIM                     	= 518 (number)
   ACT_MP_DEPLOYED                 	= 519 (number)
   ACT_MP_SWIM_DEPLOYED            	= 520 (number)
}